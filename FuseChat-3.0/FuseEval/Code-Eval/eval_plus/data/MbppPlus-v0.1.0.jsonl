{"task_id": "Mbpp/2", "prompt": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n", "entry_point": "similar_elements", "canonical_solution": "\ndef similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [5, 4, 3, 7]], [[11, 12, 14, 13], [17, 15, 14, 13]]], "atol": 0, "plus_input": [[[], []], [[1, 2, 3], []], [[], [4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 2, 2, 3, 3, 4, 4, 5, 5], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500], [100, 200, 400, 500]], [[10, 20, 30, 40, 50], [50, 60, 70, 80]], [[1, 2, 3, 4, 4, 5, 5], [4, 5, 6]], [[], [true, false, false, false, false, true]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[1, 2, 3, 1], []], [["kx", "DHBNiditD"], [4, 5, 6]], [[1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[false, false, false, false, true], [false, false, false, false, false]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8.514020219858878, -25.802494572247724, 5.873698915603498, 38.044354120134614, 11.222647627029431, 26.914534243589074, 78.41454157921689, -80.88414039955265], ["ceRuVEV", "aAXslGdbD", "DHBNiditD", "fHRtFowQVh", "ITntCqEvPi", "SmJpP", "DHBNiditD", "kx", "x"]], [[false, false, false, false, false], [false, false, false, false, false]], [[], [5, 6]], [[1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3, 2], [1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3, 2]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [[], [true, false, false, false]], [[4, 5, 16, 5], [1, 6, 3, 4, 4, 5, 5]], [["DRwvS", "FdzAtAvnsS", "ITntCqEvPi", "nlUsIhET", "ITntCqEvPi", "x"], [true, false, true, false, true, false, true]], [[1, 2, 20], []], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[false, false, false, false, false], [false, false, false, false]], [[1, 400, 3, 4, 4, 5, 5], [1, 400, 3, 4, 4, 5, 5, 5]], [[], [6]], [[1, 2, 2, 3, 3, 4, 4, 5, 5], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10], [1, 2, 3, 4, 5, 6, 7, 8, 60, 10, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 4, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500, 400, 300], [100, 200, 400, 500]], [["DRwvS", "ITntCqEvPi", "tUqF", "ITntCqEvPi"], [4, 6, 6]], [[5, 2, 3], [1, 2, 3]], [[], [500, -45, 96, 22]], [[1, 2, 2, 70, 3, 4, 4, 5, 69, 5, 4, 3, 2], [1, 2, 2, 70, 3, 4, 4, 5, 69, 5, 4, 3, 2]], [[5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 7], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[1, 2, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3], [1, 2, 2, 3, 3, 4, 4, 5, 5, 3]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"], [4, 6, 6]], [[5, 5, 6, 6, 7, 8, 9, 9], [5, 5, 6, 6, 7, 7, 8, 9, 9]], [[1, 2, 20], [1, 2, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[12, 2, 20], [1, 2, 19]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15, 20]], [[12, 2, 21], [12, 2, 20]], [[1, 2, 3, 5, 6, 12, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 12, 7, 8, 12, 0, 10, 10]], [[12, 2, 20, 20], [12, 2, 20]], [[6], [6]], [["LsgdJOGUO", "nsDO", "ceRuVEV", "BohovaWqz", "vovSNBB", "BohovaWqz"], [true, false, false]], [["DRwvS", "ITntCqEvPi", "SmJpP", "DRwvS"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"]], [[300, 1, 3, 4, 5, 6, 8, 9, 0, 9], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[false, true, false, true, false, false, true, false, true], [false, true, false, true, false, false, true, false, true]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15]], [[1, 3, 2, 3], [1, 3, 2, 3]], [[false, false, false, false, false], [false, false, false, false, true, false]], [["kx", "DHBNiditD", "DHBNiditD"], [4, 5, 6]], [[1, 1, 2, 3, 1], []], [[1, 2, 3, 5, 6, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, -45, 8, 9, 2, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10]], [[26, true, 26.914534243589074, -44], []], [[11, 12, 13, 14, 15, 70, 17, 18, 19, 20, 15], [11, 12, 13, 14, 15, 70, 17, 18, 19, 20, 15]], [[300, 1, 3, 2, 4, 5, 6, 8, 9, 0, 9], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[100, 201, 300, 400, 500], [100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [7, 1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10]], [[false, true, false, false], [false, false, false, false]], [[7, 1, 2, 3, 4, 4, 6, 12, 7, 8, 9, 0, 10, 10], [7, 1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10]], [[4, 16, 5], [4, 5, 16, 5]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9], [1, 2, 3, 5, 6, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 4, 15, 16, 17, 19, 20, 15, 20]], [[7, 7], [6]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3, 4], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500, 400, 300], [499, 200, 400, 500]], [[false, false, false, false, false, false], [false, false, false, false, false, false]], [[], [4, 6, 6]], [[4, 5, 6], [4, 4, 5, 6]], [[12, 2, 20, 20, 2], [12, 2, 20, 20]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15, 11], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[16, 1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10], [1, 2, 3, 5, 6, 6, 7, 8, 9, 10]], [[30.445411706111912, 18.10848826924409, 24.97646124690165, -55.873347006206544], [500, -45, 96, 22]], [[12, 2, 20], [12, 2, 20, 20]], [[2, 3], [1, 2, 3]], [[1, 3, 2, 3], [1, 3, 3]], [[12, 20], [12, 18, 20]], [[false, false, false, false, false], [false, true, false, false, false, false]], [[4, 6, 6, 4], [4, 6, 6]], [[1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [11, 15, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16]], [[5, 5, 19, 6, 6, 7, 7, 8, 9, 9], [5, 5, 6, 6, 7, 7, 8, 9, 9]], [[5, 19, 5, 16, 5], [1, 6, 3, 4, 4, 5, 5]], [[-95.16136488545524, 8.514020219858878, -25.802494572247724, 5.873698915603498, 38.044354120134614, 11.222647627029431, 26.914534243589074, 78.41454157921689, -80.88414039955265], ["ceRuVEV", "aAXslGdbD", "DHBNiditD", "fHRtFowQVh", "ITntCqEvPi", "SmJpP", "DHBNiditD", "kx", "x"]], [[100, 200, 300, 400], [100, 200, 300, 400]], [[1, 2, 20, 2], [1, 2, 20]], [[false, false, false, false], [false, true, false, false]], [[1, 2, 3, 4, 4, 6, 7, 8, 9, 10], [1, 2, 3, 4, 4, 6, 7, 8, 9, 10]], [[false, false, false, false], [false, true, false, false, true]], [[1, 400, 3, 4, 4, 5, 5, 5, 3], [1, 400, 3, 4, 12, 4, 5, 5, 5, 3]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"]], [[1, 2, 3, 5, 6, 12, 7, 8, 9, 0, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "SmITntCqEvPiJpP", "tUqF"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 26, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[5, 19, 5, 16, 5, 5], [5, 19, 5, 6, 5]], [[1, 2, 3, 6, 12, 7, 8, 9, 10, 10], [1, 2, 3, 5, 6, 12, 7, 8, 9, 10, 10]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n"}
{"task_id": "Mbpp/3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n", "entry_point": "is_not_prime", "canonical_solution": "\nimport math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "base_input": [[1], [2], [10], [35], [37]], "atol": 0, "plus_input": [[7919], [10007], [524287], [7920], [true], [10006], [524288], [7921], [10008], [10005], [7918], [524289], [10004], [524286], [524290], [7922], [7923], [10009], [7917], [524285], [7916], [10003], [524284], [7924], [10010], [7915], [524283], [7925], [10011], [10002], [7914], [7926], [524291], [10012], [10001], [524292], [10000], [7927], [7928], [9999], [7929], [524293], [7913], [10013], [10014], [524282], [7912], [63], [9998], [62], [524281], [23], [64], [58], [60], [16], [59], [9997], [57], [10015], [61], [20], [56], [21], [7930], [55], [7911], [54], [19], [53], [9996], [524280], [22], [9995], [96], [9994], [7931], [10016], [524279], [97], [9993], [15], [94], [65], [93], [29], [66], [30], [92], [41], [95], [91], [14], [6], [524294], [4], [524278], [524277], [90], [524275], [5], [524295], [3]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n"}
{"task_id": "Mbpp/4", "prompt": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n", "entry_point": "heap_queue_largest", "canonical_solution": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "base_input": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 2], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 5]], "atol": 0, "plus_input": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 7], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100], 6], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100, -70], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 9], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 7], [[10, 20, 30, 40, 50, 70, 80, 100], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 7], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 8], [[1000, 900, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 8], [[1, 3, 5, 6, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1, 3, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[70, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 9], [[8, 7, 6, 5, 4, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 4, 700, 800, 900, 1000], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 1], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 6], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 2], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 5], [[10, 20, 40, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 100], 9], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 10], [[8, 7, 6, 5, 5, 4, 2, 1], 2], [[1000, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 24], 6], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[9, 8, 7, 6, 4, 3, 2, 1], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 2], [[1, 3, 5, 7, 9, 11, 13, 14, 15, 17, 19, 21, 23, 25], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701], 4], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 10], [[10, 21, 30, 40, 50, 70, 80, 100], 3], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 701], 4], [[1, 3, 5, 25, 7, 9, 11, 13, 15, 16, 19, 21, 23, 25], 7], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[1000, 900, 90, 800, 700, 600, 500, 400, 300, 199, 701, 99], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 8], [[101, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[100, 200, 400, 500, 600, 800, 900, 1000], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 800, 100], 9], [[8, 7, 6, 5, 5, 4, 2, 0], 2], [[100, 200, 300, 400, 500, 599, 700, 800, 900, 1000], 1], [[1, 3, 5, 7, 21, 11, 13, 15, 17, 19, 21, 23, 25, 21], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6, 5], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25, 7], 7], [[1000, 900, 800, 700, 900, 600, 500, 400, 300, 199, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 40, 1000], 5], [[1, 23, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1000, 900, 800, 700, 600, 15, 500, 400, 300, 4, 100, 400], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11, 21], 7], [[8, 7, 6, 5, 4, 2, 1, 8], 2], [[1000, 900, 800, 400, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1000, 900, 800, 700, 600, 500, 400, 1001, 300, 200, 100], 9], [[1000, 8, 7, 6, 5, 4, 3, 99, 2, 1, 6], 9], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 9], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 9, 900, 13, 15, 17, 19, 21, 19, 25, 25, 7], 7], [[1, 3, 5, 6, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 7], 4], [[3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 13, 21, 1, 23, 25, 25, 11, 11], 8], [[100, 200, 400, 500, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 22, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 8, 9, 11, 17, 19, 21, 23, 40, 24, 25], 7], [[100, 200, 300, 400, 30, 600, 700, 800, 900, 1000], 4], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400, 900], 10]], "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
{"task_id": "Mbpp/6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)\n", "base_input": [[13, 9], [15, 8], [2, 4], [2, 3], [5, 1], [1, 5]], "atol": 0, "plus_input": [[0, 0], [-10, 10], [100, 100], [-50, -100], [123456789, -987654321], [-123456789, -987654321], [1000000000, 1000000001], [0, 1], [-100, -100], [-123456789, 0], [-10, -987654321], [1000000000, 100], [10, 0], [-101, -100], [1000000000, 1000000000], [10, 10], [-1, 0], [-101, 100], [-2, -2], [-123456789, -10], [-50, -50], [-50, -101], [-101, 1000000001], [1, -987654320], [-101, -101], [-11, -987654321], [-50, -102], [-3, 1], [-987654321, -987654320], [-987654321, -100], [0, 1000000001], [-50, -987654321], [-102, -987654321], [-102, 1], [1000000000, 10], [123456789, 1], [-10, -10], [10, -987654320], [-1, 1], [-101, -102], [-11, 0], [-1, -100], [-3, -987654320], [1, -50], [-123456789, -50], [-2, -1], [123456789, -2], [-2, -4], [-101, 10], [-2, 123456789], [-2, -987654321], [-1, -1], [1000000001, 1000000001], [-1, -2], [-50, 1000000000], [-3, -987654321], [-51, -50], [1, -1], [-100, -2], [1000000000, 101], [1000000000, -51], [-49, -102], [-102, -100], [-123456789, -123456789], [-51, -51], [-9, 10], [-4, -101], [-102, -101], [2, 2], [-50, -99], [-1, 101], [-2, -11], [-3, -2], [-987654321, -10], [-100, -49], [false, true], [true, true], [-987654321, -987654321], [123456789, -4], [123456789, 100], [9, 10], [-987654321, 1], [-3, -1], [-102, -102], [101, -101], [11, 10], [-50, -49], [false, false], [123456789, -50], [-10, 1], [-3, -51], [1, -10], [-10, 11], [-102, 2], [8, 8], [123456787, 1], [-987654321, 101], [9, -123456788], [8, -50], [-101, -3], [-123456788, 1000000000], [-12, 0], [-50, -1], [-987654320, 2], [-4, -123456789], [-2, -10], [-12, -101], [-9, -1]], "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n"}
{"task_id": "Mbpp/7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n", "entry_point": "find_char_long", "canonical_solution": "\nimport re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n", "base_input": [["Please move back to stream"], ["Jing Eco and Tech"], ["Jhingai wulu road Zone 3"]], "atol": 0, "plus_input": [[""], ["This is a very long string with no words that are at least 4 characters long."], ["words"], ["with"], ["4"], ["ve"], ["This is a very long string with no arewords that are along.t least 4 charatacters long.is"], ["arewords"], ["This is a very long string with no words that are at llongeast 4 characters long."], ["arrewords"], ["This is a very long strigng with no words that are at least 4 characters long."], ["least"], ["arerwordsThis"], ["stralong.t"], ["stralonwith.t"], ["vate"], ["Thicharatactercss"], ["wosrds"], ["vwosrds"], ["llongeast"], ["along.t"], ["vcharacterse"], ["This is a very long string with no arords that are along.t least 4 charatacters long.is"], ["Thicharatactercsvcharacterse"], ["ThicharatacterThis is a very long strigng with no words that are at least 4 characters long.csvcharacterse"], ["ThicharatacterT4his is a very long strigng with no words that are at least 4 characters long.csvcharacterse"], ["arords"], ["This is a very long string with no arewords that are along.t least 4 charatacters lonThis vwosrdsis a very long string with no words that are at least 4 characters long.g.is"], ["long.with"], ["Thicharattactercss"], ["This is a very long string with no alrords that are along.t least 4 charatacters long.is"], ["Thicharataercss"], ["arewds"], ["This is a very long string with no arords that are along.t least 4 charatacters long.isarords"], ["thatvcharacterse"], ["is"], ["tat"], ["stralong..t"], ["s"], ["string"], ["long.g.is"], ["This is a very long gstrigng with no words that are at least 4 characters long."], ["This is a very long string with no words that are at llongeast 4 charactThis is a very long string with no arewords that are along.t least 4 charatacters lonThis vwosrdsis a very long string with no words that are at least 4 characters long.g.iss long."], ["vwords"], ["that"], ["characters"], ["woords"], ["vworrds"], ["ThicharatacterThis is a very long strigng  least 4 characters long.csvcharacterse"], ["srtring"], ["This is a very long sarrewordstring with no words that are at llongeast 4 characters long."], ["long.alrordsg.is"], ["wossrds"], ["This is a very long strigng with no words that are at least 4 characters longcharactThis."], ["arerwordsThis is a voery long gstrigng with no words that are at least 4 characters long.This"], ["vwdorrdwossrdss"], ["This is a very long string with no words that are at llongeast Thicharatactercssters long."], ["longlong.This.gwith"], ["vworrrds"], ["charactThis"], ["Tchicharatactercsvcharacterse"], ["stralon"], ["alrords"], ["tast"], ["44"], ["avworrds"], ["srtring44"], ["leaet"], ["ThicharatacterThis"], ["ThicharacterscharattractercssarerwordsThis"], ["vcherse"], ["alrordlonThiss"], ["This is a very long string with no words that are at llongeast Thcharactersicharatactercssters long."], ["ttat"], ["witth"], ["along.longcharactThis.t"], ["a"], ["at"], ["alrordlonThisllongeasts"], ["tlong.This"], ["ThicharatacterT4his is a very long strigng with no words that arevery at least 4 charactiers long.csvcharacterse"], ["srtrinrg"], ["tlong.TgstrignThcharactersicharatactercsstersghis"], ["wwith"], ["stringtast"], ["wilong.alrordsg.is"], ["long.This"], ["osrds"], ["stringtaststralong.t"], ["srtnoring"], ["vee"], ["ThicharatacterThis is a very long strigng with no words that are at least t4 characters long.csvcharacterse"], ["averyrewords"], ["thavworrdsat"], ["This is a very long string with no words that are at lllongeastcharacters long."], ["stralong..ts"], ["thatvcharaccharactiersterthavworrdsatse"], ["loleaetg"], ["wwitThish"], ["aa"], ["atare"], ["avaeryrewords"]], "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n"}
{"task_id": "Mbpp/8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "entry_point": "square_nums", "canonical_solution": "\ndef square_nums(nums):\n return [i**2 for i in nums]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 30]], [[12, 15]]], "atol": 0, "plus_input": [[[]], [[-3, -2, -1, 0, 1, 2, 3]], [[9, 17, 5, 23, 10, 13, 19, 7, 2, 4]], [[-2, 17, 5, 23, 10, 13, 19, 7, 2, 4]], [[17, -3, -2, -1, 0, 1, 2, 3]], [[-2, 17, 5, 24, 10, 13, 19, 7, 2, 4]], [[-3, -2, -1, 0, 1, 2]], [[17, -3, -2, 1, 0, 1, 2, 3]], [[-3, -2, -1, 0, 1, 7, 2, 3]], [[-3, 1, -1, 0, 1, 2, 3]], [[17, -2, 1, -92, -36, 69, 18]], [[17, -2, 1, -92, -36, 69, 18, -36]], [[-3, 1, -1, 0, 1, 2, 3, 1]], [[false, true, false, true, false, true, true, true, false, false, false]], [[17, -3, -2, -1, 0, 1, 69, 3]], [[17, 4, -2, -1, 0, 1, 10, 3]], [[9, 17, 23, 10, 13, 19, 7, 7, 2, 4]], [[9, 17, 23, 10, 13, 19, 7, 7, 2, 9]], [[15, 17, -2, 1, -92, -36, 69, 18]], [[17, 1, 1, -92, -36, 69, 18, 17]], [[17, -3, -2, -1, 0, 1, 69, 17, 3]], [[-3, -2, -1, 0, 2, 1]], [[17, -2, 1, 1, -36, 69, 18]], [[-3, -2, -1, 0, 1, 69, 17, 3, -2]], [[-2, 17, 5, 24, 13, 19, 7, 2, 4]], [[false, true, false, true, false, true, true, true, false, false]], [[17, -2, 1, 1, -36, 18]], [[9, 17, 5, 12, 23, 10, 13, 19, 7, 2, 4]], [[17, -2, 1, -92, 18, -36, 17, -2]], [[17, -3, -2, -1, 0, 1, 2, 2, 3]], [[17, -2, 1, -92, -36, 69, 18, 17]], [[-2, 17, 24, 13, 19, 7, 2, 4]], [[24, 9, 17, 5, 12, 23, 10, 13, 19, 7, 2, 4]], [[17, -3, -2, 5, -1, 1, 2, 2, 3]], [[17, -2, 1, -92, -36, 69, 18, 17, 17]], [[17, -2, 1, -91, -92, -36, 69, 18]], [[17, -2, 1, -92, 18, -36, 17, 24, -2, -2]], [[17, -3, -2, 5, -1, 1, 2, 3, 3]], [[17, -3, -2, -1, 0, 1, 69, 3, -2]], [[-3, -2, -1, 2, 18, 1, 18, 7, 2, 3]], [[-3, -2, 15, 0, 2]], [[17, 4, -2, -1, 0, 3, 1, 3, 3]], [[17, 1, -1, 1, -92, -36, 69, 18, 1, 1]], [[-3, -2, -1, 0, 1, 69, 17, 3, -2, 17]], [[9, 17, 5, 12, 23, 10, 13, 19, 7, 4]], [[-3, -1, -2, -1, 0, 1, 2, 3, -1]], [[-3, -2, -1, 0, 1, 69, 3, -2, 17]], [[3, 17, 24, 13, 19, 7, 2, 4]], [[17, -2, 1, 18, -36, 17, -2]], [[4, -2, -1, 0, 3, 1, 3, 3]], [[-2, 17, 5, 23, 10, 13, 19, 7, 2, 4, 13]], [[17, -2, 1, -92, -36, 69, 18, 17, 18]], [[17, -1, -3, -2, -1, 0, 1, 2, 3, -1]], [[17, -3, -2, 4, 1, 0, 1, 2, 3]], [[17, -2, 1, 1, -35, 69, 18]], [[-2, 17, 5, 0, 23, 10, 13, 19, 7, 2, 4]], [[17, -3, -2, -1, 1, 69, 17, 3]], [[-2, 17, 5, 24, 13, 19, 7, 2, 3]], [[24, 9, 17, 6, 12, 23, 10, 13, 19, 7, 2, 4]], [[17, -2, 1, 18, -36, 17]], [[17, -2, -1, 0, 1, 7, 2, 3]], [[17, -2, 1, -36, 17, -2]], [[-2, 1, 18, -36, 16, -2]], [[24, 9, 17, 6, 12, 10, 13, 19, 7, 2, 4]], [[24, 10, 9, 17, 6, 12, 10, 13, 19, 7, 2, 4]], [[24, 9, 19, 6, 12, 10, 6, 13, 19, 7, 2, 4, 2, 6]], [[17, -3, 4, 1, 7, 1, 2, 3]], [[-3, 1, -1, 1, 2, 3, 1]], [[68, 17, -2, 1, -92, -36, 69, 1, 18]], [[6, 9, 17, 5, 12, 23, 10, 13, 19, 7, 4]], [[17, -3, -1, 0, 1, 69, 3, -2]], [[24, 9, -1, 19, 6, 12, 10, 6, 13, 19, 7, 2, 4, 2, 6, 2, -1]], [[24, 9, 17, 12, 10, 13, 19, 7, 2, 4, 68, 9]], [[17, -2, -91, -92, 18, -36, 17, 24, 7, -2, -2]], [[9, 17, 23, 10, 13, 19, 7, 7, 2, 9, 9]], [[17, -2, 4, 1, 0, 1, 2, 3]], [[17, -3, 4, 1, 7, 2, 3]], [[-2, 17, 5, 0, 10, 13, 19, 7, 2, 4]], [[-2, 10, -3, 18, -36, 16, -2]], [[17, -2, 4, 1, 18, -3, -36, 17, -2]], [[17, 17, 1, -92, -36, 69, 18, -36]], [[17, -2, -91, -92, 18, -36, 17, 24, 7, -2, -2, 24]], [[17, -3, -1, 0, 1, 69, 3, -2, 17]], [[-2, -91, 5, 0, 10, 14, 19, 7, 2, 4, -2]], [[17, -3, -2, -1, 0, 1, 69, -2]], [[17, 16, 6, 17, 1, -92, -36, 69, 18, -36]], [[24, 9, -2, 19, 6, 12, 10, 6, 13, 19, 7, 2, 4, 2, 6, 2, -1]], [[-3, -3, -2, -1, 0, 2, 3]], [[9, 17, 23, 10, 9, 13, 19, 7, 7, 2, 9]], [[17, -2, -91, -92, 18, -36, 17, -1, 24, 7, -2, -2, 24]], [[9, -3, -2, 5, -1, 1, 2, 2, 3]], [[-3, 1, -1, 0, 1, 2, 3, 1, 1]], [[24, 9, 17, 12, 23, 13, 19, 7, 2, 4]], [[16, 6, 17, 1, -92, -3, -36, 69, 18, -36]], [[-2, 1, 18, -36, 15, -2]], [[16, 17, 1, -92, -3, -36, 69, 18, -36, 1]], [[-2, 17, 3, 13, 23, 10, 13, 19, 7, 2, 4]], [[19, -3, -2, -1, 2, 1, 18, 7, 2, 3]], [[17, -2, 1, 68, 1, -35, 69, 18]], [[-2, 17, -2, 1, -92, -36, 69, 18, 17, 17]], [[-2, 1, 18, -3, -36, 15, -2, 18, -36]], [[-2, 17, 15, 5, 24, -2, 13, 7, 2, 3]], [[-3, -2, -1, 2, 18, -92, 18, 7, 2, 3]]], "contract": "\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])\n"}
{"task_id": "Mbpp/9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n", "entry_point": "find_Rotations", "canonical_solution": "\ndef find_Rotations(s): \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n", "base_input": [["aaaa"], ["ab"], ["abc"]], "atol": 0, "plus_input": [["aaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaab"], ["aaaaaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaab"], ["aaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaab"], ["aaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaabaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabb"], ["aaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaababaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaabaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["pmUjgIomJ"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaabaaaaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaaabaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaabaaaaaaabbaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaabaaaaabaaab"], ["aaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabbabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaabaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaabaaaaaaaabaab"], ["pmUaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaabjgmIomJ"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaababaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaababaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaabababaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaabaaaaaaabb"], ["aaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaabaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaab"], ["pmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabUjgIomJ"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaabaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabUjgIomJb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaababaaaabaaabaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaab"]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3\n"}
{"task_id": "Mbpp/11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n", "entry_point": "remove_Occ", "canonical_solution": "\ndef remove_Occ(s,ch): \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n", "base_input": [["hello", "l"], ["abcda", "a"], ["PHP", "P"]], "atol": 0, "plus_input": [["a", "a"], ["aaa", "a"], ["hello world", "x"], ["worlda", "a"], ["x", "x"], ["hello world", "a"], ["world", "x"], ["xx", "x"], ["xworlaaada", "x"], ["axworlaaada", "x"], ["waaaorlda", "a"], ["xhello world", "a"], ["xxx", "x"], ["worlda", "x"], ["world", "a"], ["hwllo world", "a"], ["axx", "a"], ["hwllo world", "x"], ["hwllo", "a"], ["hwl", "a"], ["ahwllo world", "a"], ["xxx", "a"], ["hwll", "a"], ["hhwl", "a"], ["ahwllo", "x"], ["whwlloorld", "a"], ["wda", "x"], ["hwl", "x"], ["xrworlaaada", "x"], ["aahwllo", "a"], ["a", "x"], ["xxwaaaorlda", "x"], ["wda", "a"], ["hxworlaaadawllo", "a"], ["aaaa", "a"], ["xrworworldalaaadax", "x"], ["aaawda", "x"], ["hello worldx", "x"], ["xrworworldalaaadax", "a"], ["xrworlaaadaworldx", "x"], ["aahwllo", "x"], ["xworlaaadaaaaa", "a"], ["xxxx", "a"], ["xhello worlda", "a"], ["xrworworaldalaaadax", "a"], ["xaaaa", "x"], ["xxwaahello worldxaorlda", "x"], ["axworlaaada", "a"], ["worldxaorlda", "x"], ["hellloa", "a"], ["xaaa", "x"], ["aa", "a"], ["xhello", "a"], ["xrworlaaaada", "x"], ["axxxaawda", "x"], ["hello worldxxhello worlda", "a"], ["xhello", "x"], ["hxworlaaadawlolo", "a"], ["aa", "x"], ["lo", "x"], ["xaaaa", "a"], ["waaaorllda", "a"], ["ahwllao", "x"], ["aaa", "x"], ["xxhello", "x"], ["wdaa", "a"], ["xrworworaldalaaadaxa", "a"], ["waaaorlxxwaaaorlda", "a"], ["aahwllao", "x"], ["hello worldx", "a"], ["lo", "a"], ["hellloa", "x"], ["helwdalloa", "x"], ["worldxxhellox", "x"], ["hello", "x"], ["l", "x"], ["waaaorlldalo", "x"], ["xrwax", "x"], ["waaaorllda", "x"], ["whwlloorld", "x"], ["aahhwla", "x"], ["waaaorlda", "x"], ["llo", "l"], ["axaahwllaoworlaaada", "a"], ["hwllor world", "a"], ["xworlaaadaaaaa", "x"], ["waaaorlldal", "a"], ["aahawllao", "x"], ["lllo", "l"], ["worlaaaadxaorlda", "x"], ["hello worldxxhhelloworlda", "a"], ["hwlll", "a"], ["xrworwoxxxraldalaaadaxa", "a"], ["ll", "x"], ["aaahwllaoo", "a"], ["worldx", "a"], ["xrworworaldalaaadaxa", "x"], ["hxworlaaadawlolo", "x"], ["whello world", "x"], ["ahwllo", "a"], ["ahxworlaaadawlolo", "a"], ["whello", "x"], ["ax", "a"]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n"}
{"task_id": "Mbpp/12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n", "entry_point": "sort_matrix", "canonical_solution": "\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "base_input": [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[1, 2, 3], [-2, 4, -5], [1, -1, 1]]], [[[5, 8, 9], [6, 4, 3], [2, 1, 4]]]], "atol": 0, "plus_input": [[[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5]]], [[[5, -2, 4], [1, -3, 7], [-6, 8, -1], [0, 9, -5]]], [[[11, -5, 23, 0], [6, 9, -8, 15], [-2, 10, 7, -4], [20, -3, 1, 18]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [999997, 999996, 999995]]], [[[-2, 10, 7, -4], [20, -3, 1, 18]]], [[[1, -3, 7], [-6, 8, -1]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5]]], [[[-5, -8, -9], [-6, -4, -3], [-5, -8, -9]]], [[[-5, -8, -9]]], [[[1000000, 999999, 999998], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998], [999997, 999996, 999995]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]]], [[[-5, -8, -9, -9]]], [[[-6, -4, -3], [-2, -1, -4]]], [[[-5, -8, -9, -9, -5]]], [[[-5, -8, -9, -9], [-5, -8, -9, -9]]], [[[20, -3, 1, 18]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [1000000, 999999, 999998]]], [[[3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[-6, -4, -3], [-2, -1, -4], [-2, -1, -4]]], [[[-5, -8, -9], [-2, -1, -4]]], [[[999995, -1, -2], [6, 5, 4], [3, 2, 1], [999995, -1, -2], [-3, -4, -5], [999995, -1, -2]]], [[[-5, -8, -9], [999999999, -1, -4]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[1000000, 999999, 999998], [999997, 999996, 999995]]], [[[-5, -8, -9, -9, -5], [-5, -8, -9, -9, -5]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -9], [-6, -4, -3], [-5, -8, -9], [-5, -8, -9]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999997, 999996, 999995], [999994, 999993, 1], [999997, 999996, 999995]]], [[[5, -2, 4], [-6, 8, -1], [0, 9, -5]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [999997, 999996, 999995], [1000000, 999999, 999998]]], [[[-5, -8, 999999991], [-6, -4, -3], [-5, -8, 999999991], [-5, -8, 999999991]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999997, 999996, 999995], [999997, 999996, 999995], [999997, 999996, 999995]]], [[[-9, 20, -3, 1, 18]]], [[[5, -2, 4], [-6, 8, -1]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]]], [[[999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [3, 2, 1]]], [[[0, 0, -6, 8, -1], [0, 0, -6, 8, -1], [0, 0, -6, 8, -1]]], [[[-1, 999999999, -1, -4], [-1, 999999999, -1, -4]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [3, 2, 1]]], [[[-5, -8, 2, -9], [-5, -8, 2, -9], [-5, -8, 2, -9]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5], [3, 2, 1], [3, 2, 1]]], [[[-5, -8, -9, -9], [-5, -8, -9, -9], [-5, -8, -9, -9]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[-7, -4, -3], [-7, -4, -3]]], [[[999999996, 999999994, 999999994], [999999993, 999999992, 999999991]]], [[[-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991]]], [[[0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5], [5, 2, 1], [5, 2, 1], [0, -1, -2]]], [[[-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5]]], [[[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]]], [[[-5, -8, -9, -5]]], [[[-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6]]], [[[6, 5, 4], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[10, -1, -2], [3, 2, 1], [10, -1, -2], [10, -1, -2], [-3, -4, -5], [10, -1, -2], [10, -1, -2]]], [[[1000000, 999999, 999998], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [3, 2, 1], [3, 2, 1]]], [[[999997, 999996, 999995]]], [[[20, -3, 18]]], [[[999999996, 999999995, 999999994], [-1, 999999992, 999999991], [-1, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]]], [[[-5, -9, -8, -9, -9, -5], [-5, -9, -8, -9, -9, -5]]], [[[5, -2, 4], [-6, 8, -1], [5, -2, 4]]], [[[999994, 999993, 1], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]]], [[[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]]], [[[-5, -9, 2, -9], [-5, -9, 2, -9], [-5, -9, 2, -9]]], [[[20, -3, 1, 18], [20, -3, 1, 18]]], [[[-3, 1, 18], [-3, 1, 18], [-3, 1, 18], [-3, 1, 18]]], [[[999997, 999996, 999995], [999994, 10, 999992], [999997, 999996, 999995]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5]]], [[[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]]], [[[-5, -8, -9], [-5, -8, -9]]], [[[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-2, -1, -4]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [1000000, 999999, 999998]]], [[[-6, 8, -1, -1]]], [[[9, 8, 7], [0, -1, -2], [-3, -4, -5]]], [[[0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8]]], [[[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999996, 999999995, 999999994]]], [[[-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8]]], [[[6, 5, 4], [0, 0, -2], [3, 2, 1], [0, 0, -2], [-3, -4, -5], [0, 0, -2]]], [[[-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18]]], [[[11, -5, 23, 0], [-2, 10, 7, -4]]], [[[-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10]]], [[[8, 1, 7], [8, 1, 7], [8, 1, 7], [-6, 8, -1]]], [[[-1, 999999999, -1, -4], [-1, 999999999, -1, -4], [-1, 999999999, -1, -4]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-5, -8, -9]]], [[[-4, -3], [-4, -3], [-4, -3]]], [[[0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 1], [999997, 999996, 999995]]], [[[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]]], [[[999999998, -8, -8, -9, 18, -8, -6], [999999998, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9]]], [[[-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9]]], [[[-9, 20, -3, 1, 1000000, 18]]], [[[-5, -8, 2], [-5, -8, 2], [-5, -8, 2]]], [[[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]]], "contract": "\n    assert isinstance(M, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(M[0]) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n"}
{"task_id": "Mbpp/14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "entry_point": "find_Volume", "canonical_solution": "\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n", "base_input": [[10, 8, 6], [3, 2, 2], [1, 2, 1]], "atol": 0, "plus_input": [[100, 50, 10], [0.5, 0.2, 0.1], [123456789, 987654321, 12345], [15, 12, 18], [7.5, 3.5, 5.2], [50, 25, 35.5], [6.7, 4.9, 3.2], [2.3, 5.6, 4.1], [987654320, 12, 18], [12, 987654320, 987654320], [0.5, 0.4312792507522603, 0.5], [987654321, 14, 51], [0.8922229171130629, 0.2, 0.1], [10, 12, 12345], [12345, 12, 12346], [15, 12, 987654321], [12, 50, 987654320], [0.5307408226774875, 0.4312792507522603, 0.5], [0.5307408226774875, 0.6321031729360945, 0.5], [6.7, 1.2712163559940908, 0.37719260113270303], [50, 13, 15], [11, 12, 18], [987654320, 15, 987654320], [12, 15, 987654320], [1.2712163559940908, 3.5, 0.37719260113270303], [2.3, 7.5, 4.1], [0.1, 0.2, 0.2], [50, 10, 50], [25, 35.5, 35.5], [10, 12, 13], [0.8922229171130629, 0.24784643921729696, 0.1], [6.7, 7.093315941766064, 0.37719260113270303], [11, 12, 987654321], [12, 987654322, 15], [0.8922229171130629, 0.2, 0.2], [11, 12, 987654320], [25, 12346, 35.53719707762832], [0.5307408226774875, 4.9, 3.2], [5.8654364659053835, 4.9, 3.2], [12, 12346, 987654320], [12345, 25, 35.5], [6.7, 0.1, 4.9], [6.7, 7.114857913414879, 0.33367901527186616], [0.8922229171130629, 0.24784643921729696, 0.8922229171130629], [12, 18, 987654320], [987654322, 10, 987654322], [12345, 25, 12346], [50, 25, 50], [0.5, 0.5, 0.5], [1.8063834584596086, 1.2712163559940908, 0.1], [6.7, 6.958640279396424, 0.30093484569499246], [1.8063834584596086, 0.6356356838493147, 0.1], [7.5, 4.737243560970565, 5.2], [11, 15, 987654321], [35.5, 6.958640279396424, 6.958640279396424], [987654321, 15, 51], [0.5307408226774875, 0.2246713952032357, 0.4312792507522603], [6.7, 7.114857913414879, 0.6721959532506382], [7.5, 1.2712163559940908, 5.2], [2.3, 7.0513497877662985, 4.1], [50, 987654322, 10], [0.1, 4.9, 4.9], [987654321, 12346, 14], [123456789, 12345, 12345], [12345, 11, 12345], [2.3, 0.4312792507522603, 2.3], [10, 12, 12], [50, 100, 50], [2.3, 0.24784643921729696, 0.8922229171130629], [51, 100, 50], [12345, 25, 18], [26, 25, 12346], [25, 10, 35.5], [100, 26, 50], [12345, 25, 11], [0.4267076249145146, 0.4312792507522603, 7.093315941766064], [0.6721959532506382, 6.958640279396424, 6.958640279396424], [0.8922229171130629, 0.6356356838493147, 0.1], [123456789, 12345, 123456789], [50, 10, 12346], [35.5, 35.5, 35.5], [0.2, 35.5, 0.2], [26, 25, 12345], [0.6721959532506382, 0.6356356838493147, 0.1], [2.3, 0.1, 5.6], [0.2, 4.1, 4.1], [12345, 12345, 12345], [12, 12, 987654320], [0.5, 0.2, 0.30093484569499246], [50, 12345, 12345], [0.4267076249145146, 0.2804796558775843, 7.093315941766064], [987654321, 14, 987654321], [2.3, 0.16891917418428634, 0.8922229171130629], [51, 12, 50], [10, 12345, 11], [0.5, 0.2, 0.41099804295162595], [987654320, 14, 51], [1.2712163559940908, 7.5, 0.1], [0.41099804295162595, 0.33505200659362044, 0.6356356838493147], [10, 11, 11], [12346, 15, 51], [987654319, 987654320, 987654320], [2.3, 5.6, 0.5050561846753878], [4.748972607227519, 0.2, 0.1], [0.2, 0.1, 0.2], [7.058489893691628, 7.0513497877662985, 7.058489893691628], [7.058489893691628, 7.058489893691628, 2.3], [25, 12347, 987654320]], "contract": "\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n"}
{"task_id": "Mbpp/16", "prompt": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n", "entry_point": "text_lowercase_underscore", "canonical_solution": "\nimport re\ndef text_lowercase_underscore(text):\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n", "base_input": [["aab_cbbbc"], ["aab_Abbbc"], ["Aaab_abbbc"]], "atol": 0, "plus_input": [["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"], ["abc_def_ghi_jkl_mno_pqr_stu_vwx_yz"], ["_"], ["_abc"], ["abc_"], ["abc_def_ghi_"], ["A__B_ccC_dDd_eE_fFF_g_hhH_iJj"], ["a"], ["abc_DEF_ghi"], ["abc"], ["abc_def_"], ["_abc_def"], ["_abc_def_"], ["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz"], ["ab_abc_def_c_"], ["_abc_deaf"], ["abc_def_ghi_jkl_mno_pqr_stu_vwxyz"], ["abdc_def_ghi_jkl_mno_pqr_stuu_vwx_yz"], ["A__B_cc_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJj"], ["abdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqrabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz_stuu_vwx_yzstuu_vwx_yz"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_stuu_vwx_yz"], ["wJz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yz"], ["abc_def_ghiabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_def_ghie_"], ["abc_def_ghi_jkl_mno_pqr_stu_vabc_def_ghie_wxyz"], ["aba_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_abc_def_ghi_jkl_mno_pqr_stu_vwxyzc_def_"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yabdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yzz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_afbc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzabc_def_z"], ["PfGhQdq"], ["c"], ["ab_abc_A__B_ccC_dDd_eE_fFF_g_hhH_iJjdef_c_"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc__def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pq_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqrabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz_stuu_vwx_yzstuu_vwx_yz_yyz_mno_pqr_stuu_vwx_yz"], ["A__B_cc_abcabc_def_ghi_jk_l_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJj"], ["ac_"], ["abc_DEF_ghia"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqrabdc_def_xghi_jkl_abcabc_def_ghabc_def_ghi_jkl_mno_pqr_stu_vwxyztuu_vwx_yz_stuu_vwx_yzstuu_vwx_yz_yyz_mno_pqr_stuu_vwx_yz"], ["cc"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEaba_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_abc_def_ghi_jkl_mno_pqr_stu_vwxyzc_def_F_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_d_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yabdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yzzef_ghi_"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcbabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcaxbmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["_abcabc_def_ghi_jkl_mnao_pqr_stu_vwx_yz"], ["no_pqr_stuu_vwx_yzz"], ["abc_def_ghi_jkl_mnoc_pqr_stu_vabc_def_ghie_wxyz"], ["_ab_abc_defc_def_"], ["a_b_c_d_e_f_g_hf_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"], ["abc_DEF_ghDia"], ["L"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_afbc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzabc_def_qz"], ["abc_def_ghi_jkl_mno_pqr_stmu_vwxyz"], ["_abcabc_def_ghi_jkl_mno_pqr_stmu_vwxyz_deaf"], ["A__B_cc_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJLj"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yabdc_def_gh_abc_defi_jkl_abcabmino_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yzz"], ["no__abc_deafpqr_stuu_vwx_LPfGhQdqyzz"], ["_aabc"], ["abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["A__B_cc_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJj"], ["PfGhQQdq"], ["abc_DEF_PfGhQdqghDia"], ["abc_def_ghiabdc_def_gh_abc_defi_ijkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_def__ghi_jkl_mnoc_pqr_stu_vabc_def_ghie_wxyz"], ["aabc"], ["ano_pqr_stuu_vwx_yzzbc_def_ghie_"], ["PfGhQQdq_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz"], ["abc_DEF_PfGhQdqghQDia"], ["abc_def_ghai_"], ["abdc_def_ghi_pqr_stuu_vwx_yz"], ["abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcabmno_pqr_stabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_def_ghiabdc_def_gh_abc_defi_ijkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_spqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_ustu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["_abPfGhQQdqcabc_def_ghi_jkl_mno_pqr_stmu_vwxyz_deaf"], ["_ab_abc_defc_defabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdbc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abc_def_ghi_jk_l_mno_spqr_stu_vwx_yz"], ["abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc__defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["A__B_cc_aghi_jk_l_mno_pqr_stu_vwx_yzC_da_b_tc_d_e_f_g_hf_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_zDd_eE_fFF_g_hhH_iJj"], ["vabc_def_ghi_jkl_mno_pqr_stu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mx_yz"], ["abc_def_abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_afbc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzabc_def_qzghiabdc_def_gh_abc_defi_ijkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_spqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_mno_p_abc_def_qr_stuuPfGhQQdq_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz_vwx_yz"], ["_abcabc_d_ghi_jkl_mno_abc_def_ghai_pqr_stu_vwx_yz"], ["yz"], ["abdc_def_ghi_jkl_mno_p_abc_abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc__defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yzdef_qr_stuuPfGhQQdq_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz_vwx_yz"], ["abdc_Edef_gh_abc_defi_jkl_abcabc__def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["bc_def_"], ["abc_def_dghi_"], ["abdcc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["_acbc_def_"], ["abdc_Edef_gh_abc_defi_jkl_abcabc__def_ghi_jkl_yz"], ["habcghia"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yeyz_mx_yz"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_x_yz"], ["a_b_c_d_e_f_g_h_i_j_aba_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_abc_def_ghi_jkl_mno_pqr_stu_vwxyzc_def_m_n_o_p_q_r_s_t_u_v_w_x_y_z"], ["abdc_def_gh_abc_bdefi_jkl_abcabmno_pq_yz"], ["an_pqr_stuu_vwx_yzzbc_def_ghie_"], ["PfGhQdqL"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_z"], ["abc_DEF_PhQdqghQDia"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_abdbc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"]], "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        assert len(text) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n"}
{"task_id": "Mbpp/17", "prompt": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n", "entry_point": "square_perimeter", "canonical_solution": "\ndef square_perimeter(a):\n  return 4*a\n", "base_input": [[10], [5], [4]], "atol": 0, "plus_input": [[3.5], [3.867338210205425], [4.017438434643324], [4.487089891527536], [2.6642890317066636], [5.887984312046749], [6.072194086423373], [3.642116465724614], [3.695469856787123], [4.141400647038825], [6.035071486216641], [3.271150304405481], [true], [84], [22], [5.654807546008664], [4.820511953305605], [6.577316776519947], [5.002581120259965], [6.969535253031167], [3.718379579422467], [6.322289576625546], [5.632673587071418], [5.3345589524375985], [6.725440141493683], [6.516564500761447], [8.993452545033046], [5.319836337788916], [6.043399656495942], [6.185578656467972], [4.217038121909214], [87], [4.005528059933441], [6.208925187146142], [85], [2.5181655036830994], [82], [4.1150925428079805], [5.484648231650928], [6.701524882996955], [21], [5.568439992700058], [88], [6.843276090129513], [3.4382125488926367], [6.388475480286746], [7.660073820339544], [2.769573374810499], [6.898645835852767], [7.826927755593033], [2.4985782322950842], [5.8695983810477985], [4.773486580932547], [3.001034234443808], [5.395838439745376], [3.577918724597513], [5.170120644837316], [6.99185332198154], [3.449246178521576], [5.5411783354818605], [6.436883135688541], [3.49384577169542], [5.015277110821801], [3.4631036701381923], [3.38643188343381], [1.9894160159593337], [1.837789735808722], [5.245639801999035], [4.465805726769371], [5.309603748296835], [3.3070853809486187], [8.803439557651616], [5.447584681806455], [2.6402987239829994], [5.81268658921342], [2.203529850744147], [2.413369661283704], [2.8444882558095452], [2.9679176613024727], [5.635919297098677], [7.106142255754484], [3.673088666908028], [11.501115163046252], [3.3172795455753574], [3.2120053514572735], [6.650019959695511], [23], [2.413305987922484], [3.453597614102104], [6.8216792009730725], [1.2676205462665886], [6.866125113001431], [4.423165960786375], [1.9765423457339029], [4.395641502661771], [2.9248802236697493], [1.6520153932594805], [8.099418388939899], [5.066661526673157], [6.345597309471013], [2.66964983620433]], "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n"}
{"task_id": "Mbpp/18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n", "entry_point": "remove_dirty_chars", "canonical_solution": "\ndef remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n", "base_input": [["probasscurve", "pros"], ["digitalindia", "talent"], ["exoticmiles", "toxic"]], "atol": 0, "plus_input": [["The quick brown fox jumps over the lazy dog", "fox"], ["This is a sample string", "i a"], ["1234567890", "01234"], ["abcd efgh", "ab cd"], ["This is a sampile string", "i a"], ["abcd efgh", "This is a sampile string"], ["a", "01234"], ["This is a sample string", "a"], ["abcabgh", "ab"], ["i a", "This is a sampile string"], ["dog", "This is a sampile string"], ["01234", "01234"], ["abcabgh", "a"], ["The quick brown fox jumps otver the lazy dog", "fox"], ["do", "This is a sampile string"], ["abcabggh", "a"], ["This is a sample string", "This"], ["ia", "This is a sampile string"], ["ia", "This is a sample stringsample"], ["This is a sasmple string", "This is a sample strin1234567890g"], ["sis", "dog"], ["abcd efgh", "bab cd"], ["bab cd", "bab cd"], ["bab cd", "This is a sample stringsample"], ["This is a sampile string", "This is a sampile string"], ["do", "do"], ["This is a sample stringsample", "Thish is a sampile string"], ["a", "1234567890"], ["dog", "dog"], ["Thiss is a sampring", "This is a sampring"], ["The quick brown fox jumps over the lazy dog", "This is a sampile string"], ["brownabcd", "iaquick"], ["This is a sasmple string", "This is a sample strin1234567g"], ["This is a sample stringsamplae", "This is a sample stringsample"], ["Thish is a sampile string", "Thish is a sampile string"], ["1234567890", "1234567890"], ["a", "0123"], ["This is a sample stringsam", "This is a sample stringsample"], ["This is a sample stringsample", "stringsam"], ["bab cd", "bdab cd"], ["This is a sampThis is a sample stringsamplele stringsample", "Thish is a sampile string"], ["i a", "i a"], ["aa", "a"], ["1234567890", "This is a sampThis is a sample stringsamplele stringsample"], ["a", "dog"], ["i a", "ia"], ["The quickfox jumps otver the lazy dog", "fox"], ["bdab", "The quick brown fox jumps over the lazy dog"], ["This is a sample stringsample", "bab cd"], ["This is a sasmple string", "Thiss is a sampring"], ["The quickfox jumpsg otver the latzy dog", "The quickfox jumpsg otver the latzy dog"], ["This is a sample stringsam", "stringsam"], ["The quick brown fox jumps otver the lazy dog", "The quickfox jumpsg otver the latzy dog"], ["Tthis is a sampile sstring", "This is a sampile string"], ["The quick brown fox jumps otver the lazy dog", "sampile"], ["Thish is a sampile string", "This is a sampile string"], ["0123", "01234"], ["012strin1234567g34", "01234"], ["aab", "ab"], ["abdog", "ab"], ["stringsamplea", "a"], ["stringsamplea", "stringsamplea"], ["1234567890", "This is asampThis sampThis is a sample stringsamplele stringsample"], ["The quick brown fox jumps otver the lazy dog", "foox"], ["Thiss is a sampring", "The quickfox jumpsg otver the latzy dog"], ["dThis is a sampile stri", "dThis is a sampile stri"], ["ab cd", "ab cd"], ["jumpsg", "jumpsg"], ["fstringsampleaox", "fox"], ["the", "01234"], ["bdab cd", "1234567890"], ["This is a sample stringsample", "This is a sample stringsample"], ["stri", "stringsam"], ["brownabcd", "brownabcd"], ["This issasmple a sampile string", "This is a sampile string"], ["0123", "0123"], ["bdabb cd", "1234567890"], ["over", "The quickfox jumpsg otver the latzy dog"], ["01234", "0134"], ["This is a sasmring", "This is a sasmple string"], ["bdab cd", "bdab cd"], ["ia", "ia"], ["fstrix", "The quickfox jumps otver the lazy dog"], ["aasampThisb", "ab"], ["Thiss", "bab cd"], ["stri", "sampile"], ["This is a sample strimplae", "This is a sample stringsample"], ["a", "a"], ["bab cd", "babstringsamplea cd"], ["abrownabcd", "The quickfox jumps otver the lazy dog"], ["bdabcdab", "This is a sample strin1234567g"], ["i aThis is a sasmple string", "This is a sample strin1234567g"], ["Thish is a sampile string", "stringsam"], ["bdabb cd", "0123"], ["This is a sampring", "This is a sample strin1234567g"], ["The quick brown fox jumg", "The quickfox jumpsg otver the latzy dog"], ["This is a sasmple string", "This is a sample stringsample"], ["1234567890", "fox"], ["foox", "This is a sample strimplae"], ["This is a sasmple sstringstring", "This is a sasmple sstringstring"], ["03134", "0134"], ["0123", "llae"], ["bdabb cd", "01223"], ["aquickfox", "dog"]], "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n"}
{"task_id": "Mbpp/19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "entry_point": "test_duplicate", "canonical_solution": "\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))\n", "base_input": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 4]], [[1, 1, 2, 2, 3, 3, 4, 4, 5]]], "atol": 0, "plus_input": [[[2, 5, 1, 4, 3, 6, 7, 8, 9, 10]], [[]], [[-81, true, false]], [[-81, false, true, false]], [[2, 5, 1, 4, 3, 3, 6, false, 7, 8, 9, 10, 7]], [[false, -81, true, false]], [[false, -81, true, true, false, true]], [[false, -81, true, true, false, true, true]], [[-82, true, false]], [[false, -81, true, false, true, true, true]], [[5, 1, 4, 3, 6, 7, 8, 9, 10]], [[false, true, true, false, true, true]], [[-81, false, false]], [[2, 5, 1, 6, 4, 3, 6, 7, 8, 9, 10]], [[true, true, -81, true, false, true, true, true]], [[false, -81, true, false, true, true, true, false]], [[true, false, -81, false, true, true, true]], [[true, false, false, true, true, true, true]], [[2, 5, 1, 4, 3, 3, 6, false, 3, 8, 9, 10, 7]], [[false, -81, false, true, true, true, true]], [[-81, true, true, false, false]], [[false, false, true, true, false, true, true]], [[false, false, false]], [[false, -81, true, false, true]], [[true, false, false, true, true, true, true, true, true]], [[true, false, true, true, true, true, true, true]], [[true, true, true, -81, true, false, true, true, true]], [[2, 5, 1, 4, 3, 6, 7, 9, 10, 10]], [[-81, false, false, false, -81]], [[true, true, true, -81, true, false, true, true, true, true]], [[false, -81, true, false, true, true, true, false, -81, false]], [[false, true, false]], [[false, 9, false, true, false, true, true, true, false]], [[2, 1, 4, 3, 3, 6, false, 7, 8, 9, 10, 7]], [[false, -81, true, false, true, true, false, true, false]], [[false, false, -81, true, false, true]], [[-56, 3, 7, 10, 3, 7]], [[-56, 3, -82, 10, 3, 7]], [[false, false]], [[true, false, false, true, true, true, true, true]], [[false, false, -81, true, true, false, true, true]], [[-56, 3, -82, 4, 10, 3, 7, 10]], [[false, -81, true, false, true, true, true, true]], [[2, 5, 1, 4, 3, 1, 7, 9, 10, 10]], [[2, 5, 1, 6, 4, 3, 6, 7, 5, 9, 10, 7]], [[2, 5, 1, 4, 3, 6, 7, 8, 9, 10, 3]], [[-81, false, false, false]], [[false, -81, false, true, true, true, true, true]], [[-56, 3, 10, -56, 3, 7]], [[false, -81, true, true, false, true, true, true, true]], [[2, 5, 1, 6, 3, 4, 3, 6, 7, 9, 10, 8]], [[false, false, -81, false, false, false, false, true, false]], [[true, false, true, false]], [[-82, true, false, false, false]], [[2, -82, 1, 10, 3, 3, 6, false, 7, 8, 9, 10, 7, 10]], [[2, 5, 1, 9, 4, 3, 3, 6, false, 2, 8, 9, 10, 7, 3]], [[2, 5, 3, 4, 3, 3, 6, false, 3, 8, 9, 10, 7]], [[false, -81, true, false, true, true, false, true, false, false, false]], [[2, 5, 1, 9, 4, 3, 3, 6, false, 2, 8, 9, 10, 3]], [[2, -82, 1, 10, 4, 3, 6, false, 7, 8, 9, 10, 7, 10]], [[false, false, true, false, false, true, true]], [[2, 5, 1, false, 3, 4, 3, 6, 7, 9, 10, 8]], [[2, 5, 1, 6, 5, 3, 6, 7, 9, 10, 8, 9]], [[2, 5, 1, false, 3, 4, 3, 6, 7, 9, 10, 8, 3]], [[false, true, false, -81, true, true, false, true, true]], [[5, 1, 4, 3, 6, 7, 8, 9, 11]], [[false, -81, false]], [[false, -81, true, false, true, true, true, false, false, -81]], [[false, -81, true, false, true, -81]], [[2, 5, 1, 9, 4, 3, 6, false, 2, 8, 9, 10, 7, 3]], [[true, -81, true, true, false, true, true, true, true]], [[true, false, -81, false, true, true]], [[2, 5, 1, 4, 3, 6, 7, 8, 9, 10, 3, 9]], [[false, -81, true, false, true, false, true, false]], [[false, false, true, false, true]], [[2, 1, 3, 3, 6, false, 7, 8, 9, 10, 7]], [[false, true, false, true, false, true, false]], [[2, 5, 1, 9, 6, 4, 3, 6, 7, 4, 9, 10, 7]], [[false, -81, true, false, true, false]], [[2, 1, 3, 3, 6, 8, false, 7, 8, 9, 10, 7]], [[5, 9, 6, 4, 3, 6, 7, 4, 9, 10, 7]], [[-80, false, true, false, true]], [[false, false, true, false, true, false]], [[5, 1, 4, 3, 6, 7, 8, 9, 11, 3]], [[false, -81, true, false, true, true, false, false]], [[5, 1, 4, 3, 6, 7, 8, 9, 10, 3, 9, 6]], [[5, 1, 4, 3, 6, 7, 5, 9, 10, 7, 8]], [[-81, true, false, true, true, false, -81, false]], [[-82, true, false, false]], [[5, 9, 6, 4, 3, 6, 7, 4, 9, 8, 7]], [[true, -81, true, true, false, true, true, true, true, true]], [[false, -81, false, true, true, true, true, true, true]], [[-56, 3, 7, 10, 11, 3, 7, 3]], [[true, false, -81, false, false, false, false, false, true, false]], [[2, 1, 3, 3, 6, false, 8, false, 7, 8, 9, 10, 7]], [[-82, 7, true, false, false, false]], [[10, 2, 5, 1, 4, 3, 3, 6, false, 7, 8, 5, 9, 10, 7]], [[false, true, false, true]], [[-81, true, false, false, false, -81]], [[-81, true, false, true, true, false, true, false, false, false]], [[10, 2, 5, 1, false, 3, 3, 6, false, 7, 8, 5, 9, 10, 7]], [[false, true, false, false]]], "contract": "\n    assert isinstance(arraynums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n"}
{"task_id": "Mbpp/20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n", "entry_point": "is_woodall", "canonical_solution": "\ndef is_woodall(x): \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n", "base_input": [[383], [254], [200]], "atol": 0, "plus_input": [[123456789], [123456788], [123456790], [-71], [-43.858003490436445], [-29.61114685387961], [123456791], [true], [-26.959954047393943], [-36.19806730921029], [false], [123456792], [123456793], [-29.871125367901588], [-29.522652685174876], [-28.83173048562741], [-36.46340914477242], [-21.3952610510801], [-54.31098212859848], [-29.97825041127243], [-69.13149487461008], [-69.25331473635698], [-30.672425597981977], [-70], [-31.492472971818966], [-23.37512371019188], [-26.87584184061303], [-68.8018442158572], [-72], [-68.9582596167829], [-38.639304621786174], [-36.762574512172826], [-29.71114112102485], [-29.147181618179903], [-45.96312293984687], [-62.29011681998471], [-102.18510964864885], [-37.926042220673814], [-21.669838537346024], [-58.62219921432578], [-49.3200214561046], [-20.415110882873073], [-70.16424320159742], [-40.25945493003661], [-70.28083008878951], [-29.42426596564329], [-36.42835541123631], [-68.24706572951847], [-69.41855382525948], [-14.166058474029754], [-62.72457764448362], [-67.51407654646718], [-43.87699809663642], [-20.51986489168823], [-15.085356836638901], [-67.0567942382996], [-19.580182972529585], [-39.15390942077779], [-35.784031914737916], [-60.94797432645206], [-30.593131467080347], [-28.30344245006401], [-29.774227963592523], [88.42189273276318], [123456794], [-31.744787544004495], [-68.40811941759871], [-56.99871844685891], [92.98004923674453], [-29.38824771469962], [-28.112821077251972], [-59.66653455441657], [-28.408958976827417], [-34.246016042728264], [-37.459933039490544], [-69.08278583390873], [-31.39943780262713], [-27.08300242071865], [-32.23443641065063], [-16.35377974137643], [-34.49166282951802], [-80.04075575777426], [-15.990708397802807], [-37.17075988866512], [-12.266024087946377], [-42.995821326318705], [-36.571652101601906], [-36.40347054615233], [-70.43269469508628], [-28.726570985744708], [-14.941982364755784], [-26.521563448513206], [-52.0451679843239], [-41.16822642698813], [-27.427877745731756], [93.65722410276985], [-61.5774096007493], [-32.14674769877757], [-21.464380924877055], [-67.55449156821463], [91.99125730826226]], "contract": "\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n"}
{"task_id": "Mbpp/56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "entry_point": "check", "canonical_solution": "\ndef check(n):    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "base_input": [[70], [23], [73]], "atol": 0, "plus_input": [[0], [1], [9], [10], [20], [100], [1000], [11], [22], [33], [44], [55], [66], [77], [88], [99], [12], [21], [34], [43], [56], [65], [78], [87], [90], [8], [999], [45], [102], [42], [103], [79], [64], [41], [54], [72], [73], [23], [71], [13], [76], [98], [2], [86], [40], [57], [39], [7], [89], [63], [46], [70], [53], [67], [38], [101], [80], [74], [15], [91], [37], [35], [24], [32], [75], [19], [14], [104], [3], [82], [6], [25], [1001], [85], [81], [5], [92], [18], [4], [83], [52], [105], [31], [30], [93], [36], [1002], [97], [1003], [95], [26], [1004], [27], [84], [68], [51], [96], [998], [47], [62], [50], [58], [49], [1005], [69], [29], [997], [17], [94], [28], [59], [48], [16], [60], [61], [107], [1006], [106], [996], [108], [1007], [995], [1008], [109], [110]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n"}
{"task_id": "Mbpp/57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n", "entry_point": "find_Max_Num", "canonical_solution": "\ndef find_Max_Num(arr) : \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n", "base_input": [[[1, 2, 3]], [[4, 5, 6, 1]], [[1, 2, 3, 9]]], "atol": 0, "plus_input": [[[9, 3, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 9, 3, 2, 2, 1, 1]], [[9, 8, 7, 6, 5, 4, 3, 3, 2, 1]], [[9, 8, 8, 7, 7, 6, 6, 5, 3, 3, 2]], [[9, 3, 3, 2, 1]], [[9, 3, 3, 3, 2, 1]], [[9, 3, 3, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 2, 2, 1]], [[9, 3, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 1]], [[9, 4, 3, 2, 1]], [[9, 5, 3, 2, 1]], [[9, 3, 2, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 1, 1]], [[9, 5, 2, 1]], [[9, 3, 2, 2, 2, 2, 1]], [[9, 9, 3, 3, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 4, 3, 2, 1]], [[9, 4, 3, 2, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 1, 1, 1, 1]], [[9, 8, 7, 6, 5, 4, 4, 4, 3, 2, 1]], [[9, 9, 3, 2, 1]], [[9, 9, 3, 2, 2, 2]], [[9, 9, 9, 3, 2, 2, 2]], [[9, 8, 7, 6, 5, 5, 4, 2, 1]], [[9, 5, 5, 2, 1]], [[9, 9, 3, 3, 3, 3, 2, 2, 1]], [[9, 4, 3, 2, 2, 1, 1]], [[9, 4, 3, 3, 2]], [[9, 9, 3, 2, 2, 1, 1, 1]], [[9, 9, 3, 2, 2]], [[9, 8, 7, 6, 5, 4, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 3, 1]], [[9, 9, 9, 3, 2, 2]], [[9, 9, 7, 2, 1]], [[9, 4, 4, 3, 2, 1]], [[9, 9, 7, 3, 2, 2]], [[9, 6, 3, 2, 1, 1]], [[9, 3, 3, 3, 2, 1, 1]], [[9, 4, 3, 2, 1, 1]], [[9, 6, 3, 2, 2, 1, 1]], [[8, 7, 7, 6, 5, 4, 3, 2, 2, 1]], [[6, 5, 3, 2, 1, 1]], [[9, 6, 3, 2, 2, 2, 1, 1]], [[9, 9, 3, 3, 3, 3, 2, 2, 1, 1]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[9, 9, 9, 3, 2, 2, 2, 2]], [[9, 9, 3, 3, 2]], [[9, 5, 3, 2, 2, 1]], [[9, 9, 5, 2, 1]], [[9, 9, 3, 3, 2, 1]], [[9, 5, 2, 2]], [[9, 9, 4, 4, 2, 2, 1]], [[9, 9, 1]], [[9, 3, 3, 2, 2, 2, 1]], [[9, 4, 3, 3, 2, 0]], [[9, 8, 7, 6, 6, 5, 3, 3, 2]], [[9, 5, 5, 2, 1, 1, 1, 1]], [[9, 9, 2, 0]], [[9, 8, 6, 5, 4, 3, 2, 1]], [[6, 5, 3, 2, 2, 1, 1]], [[9, 3, 2, 2, 2, 2, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 9, 7, 7, 2, 1]], [[6, 5, 3, 3, 2, 2, 2, 1]], [[9, 3, 3, 2, 2, 1]], [[9, 3, 3, 2, 2, 2, 2, 1]], [[9, 3, 3, 2, 2, 2]], [[9, 9, 9, 3, 2, 2, 1, 1, 1]], [[9, 6, 5, 4, 3, 2, 1]], [[9, 6, 3, 2, 1, 1, 0]], [[9, 8, 7, 6, 5, 4, 4, 3, 3, 2, 1]], [[9, 3, 3, 2, 2, 1]], [[9, 9, 3, 3, 2, 2, 1, 1, 1]], [[9, 6, 3, 2, 2, 1, 1, 1]], [[9, 8, 7, 6, 5, 4, 4, 3, 2, 1, 1]], [[9, 4, 3, 3, 1, 1]], [[6, 4, 3, 2, 2, 1, 1, 1]], [[9, 5, 4, 3, 2, 2, 1, 1]], [[9, 8, 7, 5, 5, 4, 2, 1]], [[8, 7, 7, 6, 5, 4, 2, 2, 1]], [[9, 9, 3, 3, 2, 2, 1]], [[9, 9, 7, 3, 2, 2, 1, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 9, 3, 3, 3, 3, 3, 2, 2, 1, 1]], [[9, 6, 3, 1, 1, 0]], [[9, 8, 7, 7, 6, 5, 4, 3, 2, 2, 1]], [[9, 9, 9, 3, 3, 2, 2]], [[9, 9, 3, 3, 3, 3, 3, 2, 2, 1, 1]], [[9, 5, 5, 2]], [[9, 5, 5, 2, 1]], [[9, 9, 9, 9, 3, 3, 2, 2, 1, 1, 1]], [[9, 3, 3, 2, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 2, 1, 1, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 3, 3, 2, 1]], [[9, 9, 3, 3, 3, 3, 2, 1, 1]], [[8, 7, 7, 6, 5, 5, 4, 2, 2, 1]], [[9, 9, 3, 3, 2, 2, 1, 1, 1, 1]], [[9, 6, 5, 2, 1]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321\n"}
{"task_id": "Mbpp/58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n", "entry_point": "opposite_Signs", "canonical_solution": "\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0) \n", "base_input": [[1, -2], [3, 2], [-10, -10], [-2, 2]], "atol": 0, "plus_input": [[1000000000000, -1000000000000], [999999999999, -999999999999], [1000000000, -1000000000], [999999999, -999999999], [987654321, -987654321], [1000000000000, -1000000000], [-1000000000, 999999999], [-987654321, -987654321], [1000000000000, 987654321], [1000000000000, 987654322], [999999999, -1000000000000], [999999999, 999999999], [999999999999, 1000000000000], [-1000000000000, -987654321], [-1000000000000, -1000000000000], [-999999999999, -1000000000000], [987654321, 987654321], [1000000000, 999999999999], [1000000000, -1000000000000], [987654321, 987654322], [-987654319, -987654320], [-999999998, -999999999], [987654321, 1000000000000], [-1000000000, -1000000000], [1000000000000, 1000000000000], [1000000000001, -1000000000000], [1000000000000, -1000000000001], [999999999999, -987654319], [-1000000000, 987654321], [999999999999, 999999999999], [987654322, 987654322], [-987654321, -999999998], [-987654322, -987654321], [999999999, -987654321], [-1000000000000, -987654320], [-987654320, -987654320], [-999999999, -999999999], [-1000000000001, -1000000000000], [-1000000000000, 999999999], [-987654322, -1000000000000], [987654320, -1000000000000], [-987654322, -987654322], [-999999998, -1000000000000], [999999999999, -1000000000], [-987654320, -987654319], [987654321, -1000000000001], [987654321, 987654323], [1000000000000, -987654322], [-987654322, 1000000000000], [1000000000000, -1000000000002], [-1000000000000, 1000000000000], [-999999999999, -999999999999], [-1000000000002, -1000000000000], [1000000000001, -987654321], [-999999999999, -999999999998], [-999999998, -1000000000002], [-987654321, -987654322], [-987654319, -1000000000000], [1000000000000, 999999999999], [-999999998, -1000000000], [999999999999, 987654322], [-1000000000002, -1000000000002], [-1000000000000, 987654323], [1000000000000, 1000000000], [-1000000000000, -987654319], [987654321, -999999999999], [1000000000001, 987654321], [-1000000000000, 987654322], [-987654319, -1000000000002], [-987654319, -1000000000001], [999999999, -999999998], [-999999999, 987654321], [987654321, -987654322], [987654321, 1000000000], [-1000000000001, -1000000000001], [-999999999, -1000000000002], [-1000000000000, 999999998], [1000000000002, -987654319], [1000000000, 987654321], [999999998, -999999998], [-1000000001, 987654321], [999999999999, 1000000000002], [-1000000000003, -987654321], [-987654319, -987654319], [-999999998, -987654321], [-1000000001, -999999999999], [-1000000000004, -1000000000002], [1000000000002, -1000000000001], [-1000000000002, 987654322], [-987654319, -1000000000003], [-1000000000, 987654323], [-1000000000003, 1000000000000], [-1000000000, 999999999999], [-1000000001, -1000000000], [1000000000000, 1000000000001], [-1000000000003, -1000000000000], [1000000000000, -987654319], [987654320, 987654321], [-1000000000001, -1000000000002], [987654322, 987654323], [-999999997, -1000000000], [-987654319, 999999999999], [-999999997, 1000000000000], [-1000000000000, -987654322], [1000000000001, 1000000000002]], "contract": "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True\n"}
{"task_id": "Mbpp/59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n", "entry_point": "is_octagonal", "canonical_solution": "\ndef is_octagonal(n): \n\treturn 3 * n * n - 2 * n \n", "base_input": [[5], [10], [15]], "atol": 0, "plus_input": [[100], [99], [98], [96], [101], [97], [102], [22], [true], [23], [103], [104], [21], [95], [105], [20], [7], [9], [10], [8], [6], [5], [4], [106], [24], [19], [11], [94], [25], [3], [26], [93], [12], [108], [92], [42], [41], [43], [107], [2], [1], [13], [14], [38], [39], [53], [37], [52], [18], [54], [91], [55], [51], [50], [40], [90], [89], [56], [17], [76], [109], [110], [111], [27], [16], [44], [15], [57], [88], [77], [58], [75], [28], [113], [112], [87], [59], [78], [70], [71], [69], [86], [72], [45], [47], [46], [49], [29], [60], [36], [30], [85], [48], [73], [84], [114], [31], [35], [34], [79], [83]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n"}
{"task_id": "Mbpp/61", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n", "entry_point": "count_Substrings", "canonical_solution": "\nfrom collections import defaultdict\ndef count_Substrings(s):\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count\n", "base_input": [["112112"], ["111"], ["1101112"]], "atol": 0, "plus_input": [["12233445566778899"], ["12345678987654321"], ["122338445566778899"], ["1252338445566778899"], ["122338412233344556677889945566778899"], ["12523384345566778899"], ["1252899122338445566778899"], ["1223384455667718899"], ["122334475566778899"], ["1258233843778899"], ["12781899"], ["122338412233334455667788994123456789876543215566778899"], ["122833445566778899"], ["1223318445566779"], ["1228334475566778899"], ["1223384122333344554667788994123456789876543215566778899"], ["122334455667788919"], ["12523383445566778899"], ["12528991223638445566778899"], ["12283344512233844556677188399566778899"], ["412233445566778899"], ["12233125823384377889984455667718899"], ["1122338445566778899252338445566778899"], ["12345678987"], ["1252899122363848899"], ["1223311223344556677889925823384377889984455667718899"], ["12523384345122338445566778899566778899"], ["122331122334455667788992582338437788998445566771881234567898799"], ["1223384122333344556677889941234567898765432155668778899"], ["1223381223344556677889941223333445566778899412345678987654321556677889122833445122338445566771883995667788999"], ["122122338412233334455667788994123456789876543215566778899338445566778899"], ["1252899122363848899122334475566778899"], ["122338412233344556677889945566778899122334475566778899"], ["1229833445566778841223344556677889999"], ["1223384122333445566677889945566778899"], ["122331122334455667798799"], ["412523384345122338445566778899566778899"], ["12233445566778"], ["125233843445122338445566778899566778899"], ["122233445566778899"], ["12233841223334245566677889945566778899"], ["12233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799"], ["12528991223318445566778899"], ["12233445566771272338412233334455667788994123456789876543215566778899"], ["41252338412233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889995122338445566778899566778899"], ["12233841223333445546677889941231456789876543215566778899"], ["812582338437788989"], ["12233841223333445546677889941231456788987654321556123456789876778899"], ["122335184455667125289912236384889912233447556677889979"], ["1228334455664778899"], ["812582312233445566778891938437788989"], ["122983341228334451223384455667718839956677889989999"], ["122983341212233841223334455667788994556677889928334451223384455667718839956677889989999"], ["125233843455667758899"], ["12233841223334122338122334455667788994122333344556677889941234567898765432155667788912283344512233844556677188399566778899966778899"], ["1221223384112233112233445566778899258233843778899844556677188992233334455667788994123456789876543215566778899338445566778899"], ["122338412233334455667788994123456789876543215566877899"], ["125233843455566778899"], ["81258233843177888989"], ["156748912233447556677889987"], ["1229833412122338412233314455667788994556677889928334451223384455667718839956677889989999"], ["12125289912233844556677889"], ["1223311223344556677889925823384377889984455667718821234567898799"], ["1223366778899"], ["122334455667712723384122333344556677889122122338411223311223344556677889925823384377889984455667718899223333445566778899412345678987654321556677889933844556677889994123456789876543215566778899"], ["122331256823384377889984455667718899"], ["122338412233344556677889945566778899125233843455667758899122334475566778899"], ["1212528991223455667788"], ["122334455667878899"], ["12523384344512781899122338445566778899566778899"], ["12582338431223384112233841223333445566778899412345678987654321556687788992233334455667788994123456789876543215566877899778899"], ["1125289912236384889925233843445127818919122338445566778899566778899"], ["1252338344556671252338434512233844556677889956677889978899"], ["12125289912677889"], ["12233841223334455666778899455667781223366778899899"], ["122334455667788299"], ["12298334455667784841223344556677889999"], ["122982334455667784841223344556677889999"], ["1567489122334125289912233844556677889947556677889987"], ["1223344556673788919"], ["41252338434512212345678987338445566778899566778899"], ["412523384345122123456789873384455667799"], ["4125233843451221234567898733844512528991223318445566778899566778899566778899"], ["125233893445566778899"], ["1125289912236384455667788992781899"], ["4125237384345122123456789873384455667799"], ["122338412233344556677889945566712233841223333445566778899412345678987654321556677889999"], ["125289912236384455667788899"], ["12283344512233844556612233445566787889966778899"], ["122667878899"], ["1122338445566778899252338"], ["124455667788919"], ["122983312233841223334122338122334455667788994122333344556677889941234567898765432155667788912283344512233844556677188399566778899966778899445566778841223344556677889999"], ["12528991223638445566778889"], ["125233812212233841122331122334455667788992582338437788998445566771889922333344556677889941234567898765432155667788993384455667788994344512233812781899445566778899566778899"], ["1223344556679788919"], ["1252338125233843455667788998899"], ["12233445556673788919"], ["122983341212233841223334455667788994556677889928334451223384455667718839912233844556677188997889989999"], ["12528991223638445566778125233893445566778899899"], ["12223312233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799445566778899"], ["41252399566778899"]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isdigit(), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12\n"}
{"task_id": "Mbpp/62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "entry_point": "smallest_num", "canonical_solution": "\ndef smallest_num(xs):\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n", "base_input": [[[10, 20, 1, 45, 99]], [[1, 2, 3]], [[45, 46, 50, 60]]], "atol": 0, "plus_input": [[[10]], [[10, 10, 10]], [[10, 9, 10]], [[10, 9, 10, 9]], [[10, 10, 10, 10]], [[10, 9, 10, 10]], [[10, 10]], [[10, 10, 10, 9]], [[10, 10, 10, 9, 10]], [[10, 9, 10, 10, 10]], [[9, 10]], [[10, 9, 9, 10]], [[10, 10, 10, 10, 9]], [[10, 10, 10, 9, 10, 10]], [[9, 10, 10, 10, 10]], [[10, 9, 9]], [[10, 10, 9, 10, 9]], [[9, 10, 10]], [[11, 10, 9, 10, 9, 10]], [[10, 9, 10, 9, 9]], [[11, 10, 10]], [[9, 9, 10, 10]], [[10, 11, 10, 9]], [[10, 9, 9, 10, 9]], [[11, 10, 9, 10, 10, 10, 10, 10]], [[9, 10, 10, 9, 10]], [[9, 10, 10, 10, 9, 10, 10]], [[10, 9, 9, 9]], [[9, 10, 10, 10]], [[11, 10, 10, 9]], [[10, 10, 9, 10]], [[9, 9, 10]], [[9, 10, 9, 9, 10]], [[11, 11, 10, 10, 9]], [[10, 10, 8, 10, 9, 10]], [[8, 9, 10, 10, 9]], [[8, 10, 10]], [[10, 9, 8, 9, 10, 9]], [[8, 10]], [[10, 9, 9, 10, 9, 10]], [[11, 10, 10, 8, 9]], [[11, 11, 10, 10, 10, 9]], [[11, 11, 10, 10, 9, 10]], [[10, 10, 10, 11, 10, 10]], [[11]], [[12, 8, 11, 10]], [[10, 9, 10, 8, 10]], [[10, 10, 8, 10, 9, 10, 10]], [[9, 10, 9, 9, 10, 9, 9]], [[10, 9, 8, 9, 10]], [[11, 11, 10, 10, 10, 10]], [[9, 10, 10, 9, 8, 10]], [[8, 10, 9]], [[7, 8, 10]], [[8]], [[10, 10, 10, 8, 10, 9, 10, 10]], [[11, 10, 10, 10, 8, 10, 9, 10, 10]], [[11, 10, 10, 8]], [[11, 11, 10, 10, 11, 10, 9]], [[11, 11, 10, 10, 11, 10, 8]], [[10, 9, 8, 10]], [[10, 7, 9, 10]], [[11, 10, 10, 11, 9]], [[10, 10, 10, 11, 9, 10]], [[9, 10, 9, 9, 9, 10, 8, 9]], [[9, 10, 9, 9]], [[9, 10, 10, 9]], [[11, 8, 10, 10]], [[9, 10, 9, 8, 9, 10, 9]], [[11, 9, 10, 9, 10, 10, 9, 10]], [[11, 10, 10, 10, 8, 10, 11, 9, 10, 10]], [[11, 9, 9]], [[9, 9, 9, 10, 10, 9]], [[11, 9, 10, 10, 10, 9]], [[11, 10, 10, 11, 9, 10]], [[10, 10, 11, 10, 10]], [[9, 12, 10]], [[10, 9, 10, 10, 9]], [[11, 8, 10, 11, 10]], [[11, 10, 8, 9, 10]], [[12, 12, 8, 11, 10]], [[11, 10, 10, 10, 8, 10, 11, 8, 9, 10, 10, 10]], [[10, 9, 10, 9, 10]], [[11, 10, 7, 8]], [[7, 9, 10, 9, 10, 9, 10]], [[9, 10, 10, 10, 9, 10]], [[10, 10, 10, 9, 10, 10, 10, 10]], [[9, 10, 9, 9, 10, 9, 9, 10]], [[11, 11, 10, 10, 9, 9]], [[11, 9, 10]], [[9, 11, 9, 9, 10, 9, 9]], [[11, 11, 10, 10, 11, 10, 10]], [[10, 9, 9, 8, 9]], [[10, 9, 10, 10, 10, 10, 10]], [[11, 10, 9]], [[12, 12, 8, 11, 10, 12]], [[10, 9, 8, 9, 11, 10]], [[10, 7, 9]], [[10, 12, 9, 10, 9]], [[-115.40386094393058, 13.801990543244983, -90.4732800288427, -75.81228356592653]], [[7, 7, 8, 10]]], "contract": "\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n"}
{"task_id": "Mbpp/63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n", "entry_point": "max_difference", "canonical_solution": "\ndef max_difference(test_list):\n  return max(abs(a - b) for a, b in test_list)\n", "base_input": [[[[3, 5], [1, 7], [10, 3], [1, 2]]], [[[4, 6], [2, 17], [9, 13], [11, 12]]], [[[12, 35], [21, 27], [13, 23], [41, 22]]]], "atol": 0, "plus_input": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]], [[[1, 2], [4, 5], [7, 8], [10, 11]]], [[[100, -100], [0, 200], [-50, 50], [300, 100]]], [[[0, 1], [2, 4], [3, 6], [5, 7]]], [[[-10, -5], [-3, 0], [2, 6], [9, 15]]], [[[1, 1000], [500, 700], [300, 900], [200, 800]]], [[[-3, -2], [-8, -7], [-5, -1], [-10, -9]]], [[[50000000, 100000000], [60000000, 110000000], [70000000, 120000000], [80000000, 130000000]]], [[[-10, 10], [-100, 100], [0, 1000], [-1000, 500]]], [[[100, -50], [-200, 200], [300, -300], [-400, 400]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [-5000000, 5000000]]], [[[1, -1], [100, -100], [1000, -1000], [10000, -10000]]], [[[0, -100], [100, -200], [1000, -300], [10000, -400]]], [[[1, 1], [2, 2], [3, 3], [4, 4]]], [[[5, 10], [15, 20], [25, 30], [35, 40]]], [[[100, 100], [200, 200], [300, 300], [400, 400]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200]]], [[[1000, 900], [800, 700], [600, 500], [400, 300]]], [[[10, 20], [30, 40], [50, 60], [70, 80]]], [[[101, 105], [200, 210], [300, 320], [400, 420]]], [[[1000, 1001], [2000, 2004], [3000, 3010], [4000, 4005]]], [[[500, 600], [700, 800], [1100, 1200]]], [[[999999, -999999], [70, 100000000], [-5000000, 5000000]]], [[[-10, -5], [-3, 0], [9, 15]]], [[[1, -1], [100, -100], [10000, -10000]]], [[[-10, -5], [-3, 70], [-3, 0], [-3, 0]]], [[[100, -100], [7, 200], [-50, 50], [300, 100]]], [[[100, -100], [0, 200], [-50, 50], [300, 100], [100, -100]]], [[[1, -1], [100, -100], [1000, -1000], [30, -1], [10000, -10000]]], [[[1000, 15], [-10, -5], [-3, 0], [2, 6], [9, 15]]], [[[0, -100], [100, -200], [1000, -300], [10000, -400], [10000, -400]]], [[[-200, 200], [100, -50], [-200, 200], [300, -300], [-400, 400], [100, -50]]], [[[-10, -5], [9, 15]]], [[[-10, -5], [2, 6], [9, 15]]], [[[-10, 5000000], [-3, 0], [2, 6], [9, 15]]], [[[999999, -999999], [999999, -999999], [70, 100000000], [-5000000, 5000000]]], [[[5, 10], [15, 20], [25, 30], [35, 40], [5, 10]]], [[[500, 600], [500, 80], [700, 800], [1100, 1200]]], [[[1, 2], [4, 5], [7, 8], [10, 11], [10, 11]]], [[[100, -50], [-200, 200], [300, -100000000], [-400, 400]]], [[[-300, -1], [100, -100], [10000, -10000]]], [[[-10, -5], [-3, 70], [-3, 0], [-3, 0], [-3, 0]]], [[[101, 105], [300, 320], [400, 420]]], [[[10, 20], [30, 40], [50, 60], [70, 80], [30, 40]]], [[[100, 100], [200, 200], [300, 300], [300, 300], [400, 400]]], [[[100, -100], [7, 200], [-50, 50], [300, 100], [100, -100]]], [[[100, -50], [-200, 200], [300, -100000000], [-400, 400], [300, -100000000]]], [[[1, 2], [4, 5], [7, 9], [10, 11]]], [[[-10, -5], [2, 6], [3010, 15], [9, 15]]], [[[300, 320], [400, 420]]], [[[-3, -2], [-8, -7], [-5, -1], [-8, -7], [-5, -1]]], [[[1, -1], [10000, 4], [100, -100], [30, -1], [10000, -10000]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400]]], [[[2000, 2004], [2004, 2004], [3000, 3010], [4000, 4005]]], [[[100, 100], [200, 200], [400, 400]]], [[[50000000, 100000000], [70000000, 120000000], [80000000, 130000000]]], [[[1, 2], [4, 5], [10, 11], [4, 5]]], [[[1000, 900], [400, 100000000], [800, 700], [600, 500], [400, 300]]], [[[0, 1], [2, 4], [3, 6], [5, 7], [5, 7]]], [[[-10, 5000000], [-3, 0], [2, 6]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [200, 200]]], [[[4005, 100000000], [999999, -999999], [70, 100000000], [-5000000, 5000000]]], [[[1000, 15], [-10, -5], [2, 6], [9, 15]]], [[[999999, -999999], [69, 100000000], [-5000000, 5000000]]], [[[100, -100], [7, 200], [-50, 50], [300, 100], [100, -100], [100, -100]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4]]], [[[999999, 1000], [70, 100000000], [-5000000, 5000000]]], [[[50000000, 100000000], [60000000, 110000000], [70000000, 120000000], [80000000, 130000000], [50000000, 100000000]]], [[[10, 20], [30, 40], [50, 60], [1, 80]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [-3, 100], [200, 200]]], [[[100, 100], [300, 300], [400, 400]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [500, 600]]], [[[0, -100], [100, -200], [1000, -300], [10000, -400], [0, -100]]], [[[4, 5], [7, 8], [10, 11]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [100, 100]]], [[[100, -100], [7, 200], [-50, 50], [300, 100], [7, 200]]], [[[2000, 2004], [2004, 2004], [3000, 3010], [4000, 4005], [2004, 2004]]], [[[15, 20], [35, 40]]], [[[-10, 5000000], [-3, 0], [2, 6], [2, 6], [2, 6]]], [[[1000, 1001], [2000, 2004], [3000, 3010], [4000, 4005], [4000, 4005]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [4, 4], [3, 3]]], [[[1, 1000], [500, 700], [300, 900], [200, 800], [300, 900]]], [[[500, 600], [500, 80], [700, 800], [1100, -8]]], [[[-8, -7], [-8, -7], [-5, -1]]], [[[1, -1], [10000, 4], [100, -100], [30, -1], [10000, -10000], [10000, -10000]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [4, 4], [3, 3], [1, 1]]], [[[200, 200], [300, 300], [400, 400], [400, 400], [400, 400], [400, 400]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000]]], [[[1, 1], [3, 3], [4, 4], [3, 3]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [700, 800], [500, 600]]], [[[-10, 10], [-100, 100], [0, 1000], [-1000, 500], [-100, 100]]], [[[100, 15], [100, -100], [-50, 50], [300, 100], [100, -100], [-50, 50]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [4, 4], [3, 3], [1, 1], [1, 1], [4, 4]]], [[[7, 8], [10, 11]]], [[[10, 20], [30, 40], [50, 60], [70, 80], [50, 60]]], [[[1000, 900], [400, 100000000], [800, 700], [400, 300]]], [[[1000, 15], [-10, -5], [-3, 0], [9, 15]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [700, 800], [500, 600], [900, 1000]]], [[[1, 2], [4, 5], [7, 9], [10, 11], [10, 11]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [-3, 100], [200, 200], [200, 200]]], [[[-201, 200], [100, -50], [-200, 200], [300, -300], [-400, 400], [100, -50], [100, -50]]], [[[3, 6], [1000, 15], [-10, -5], [2, 6], [9, 15]]], [[[-10, -5], [2, 6], [3010, 15], [9, 15], [-10, -5]]], [[[50000000, 100000000], [60000000, 110000000], [70000000, 120000000], [80000000, 130000000], [50000000, 100000000], [50000000, 100000000]]], [[[4, 9], [1, 1], [2, 2], [4, 4], [4, 4], [3, 3], [4, 4], [1, 1]]], [[[50000000, 100000000], [60000000, 110000000], [80000000, 130000000]]], [[[1, 1], [3, 3], [4, 4], [3, 3], [4, 4]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [100, 100], [300, 300], [400, 400]]], [[[4, 5], [7, 8], [10, 11], [4, 5]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [-300, 5000000]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [-5000000, 5000000], [-100000000, 100000000]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [1, 1]]], [[[1000, -7], [-3, -2], [-8, -7], [-5, -1], [-8, -7], [-5, -1]]], [[[200, 200], [300, 300], [400, 400], [100, 100], [300, 300], [400, 400]]], [[[1000000, 999999], [10000000, 9999999], [100000000, 99999999]]], [[[1, -1], [10000, 4], [10000, 3], [100, -100], [30, -1], [10000, -10000], [10000, -10000]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [999999, -999999]]], [[[99, -50], [-200, 200], [300, -100000000], [-400, 400]]], [[[1, -1], [10000, 4], [100, -100], [10000, -10000], [10000, -10000]]], [[[100, -100], [300, 100]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [100, 100], [300, 300]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) == 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n"}
{"task_id": "Mbpp/64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "entry_point": "subject_marks", "canonical_solution": "\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n", "base_input": [[[["English", 88], ["Science", 90], ["Maths", 97], ["Social sciences", 82]]], [[["Telugu", 49], ["Hindhi", 54], ["Social", 33]]], [[["Physics", 96], ["Chemistry", 97], ["Biology", 45]]]], "atol": 0, "plus_input": [[[]], [[["English", 88]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91]]], [[["Social sciences", 82], ["English", 88], ["Science", 90], ["Maths", 90]]], [[["Maths", 82], ["Social sciences", 82], ["English", 88], ["Science", 90], ["Computer Science", 90]]], [[["Biology", 45], ["Maths", 85], ["Science", 88], ["Physics", 96], ["Physics", 96], ["Chemistry", 97]]], [[["Physics", 90], ["Chemistry", 90], ["Biology", 90]]], [[["Physics", -76], ["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["Chemistry", 92]]], [[["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Chemistry", 68], ["Biology", 72], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["English", 82], ["Maths", 84], ["Social sciences", 86], ["Computer Science", 88]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94], ["Biology", 95]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Chemistry", -9], ["Physics", -3], ["Geography", 65], ["History", 73], ["Biology", 77], ["English", 81], ["Science", 82], ["Computer Science", 88], ["Maths", 94]]], [[["Computer Science", 75], ["English", 77], ["Physics", 78], ["Economics", 79], ["Chemistry", 80], ["Maths", 80], ["Science", 84], ["Geography", 85], ["Biology", 88], ["History", 92]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96], ["Maths", 98]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Chemistry", 92]]], [[["Biology", 72], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["English", 82], ["Social sciences", 86], ["Computer Science", 88]]], [[["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["Computer Science", 90], ["Physics", 93], ["Maths", 96]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94, "Computer Science"], ["Biology", 95]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["Chemistry", 92]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91], ["English", 95]]], [[["Geography", 70], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85, 85], ["Science", 88], ["Computer Science", 91]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90], ["Physics", 93], ["Maths", 96]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Maths", 96], ["Physics", 96]]], [[["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Chemistry", 94], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["Computer Science", 90], ["Physics", 93], ["Physics", 93]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97], ["Maths", 97]]], [[["Geography", 78], ["Geography", 78, "Geography"], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Social sciences", 82], ["English", 88], ["Mathas", 90], ["Science", 90], ["Maths", 90]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Physics", 98]]], [[["Social sciences", 82], ["English", 88], ["Mathas", 90], ["Science", 90], ["Maths", 90], ["Science", 92]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95], ["History", 96]]], [[["Art", 70], ["History", 78], ["Chemistry", 81], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94], ["Biology", 95]]], [[["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95], ["History", 96]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85, 85], ["Computer Science", 91]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Maths", 97], ["Maths", 97]]], [[["Maths", 82], ["Social sciences", 82], ["Science", 90], ["Computer Science", 90]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["ChemistrMathasy", 92], ["Chemistry", 92]]], [[["Social sciences", 82], ["English", 88], ["English", 88], ["Mathas", 90], ["Science", 90], ["Maths", 90]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Physics", -76], ["Computer Science", 82], ["Maths", 85], ["Chemistry", 92]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Physics", 93], ["Maths", 96]]], [[["Maths", 85], ["Science", 88], ["Physics", 96], ["Physics", 96], ["Chemistry", 97]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Chemistry", 92], ["Chemistry", 92]]], [[["Chemistry", -9], ["Physics", -3], ["Geography", 65], ["History", 73], ["Biology", 77], ["Biology", 77], ["English", 81], ["Computer Science", 88], ["Maths", 94]]], [[["Geography", 70], ["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Geography", 92], ["Computer Science", 94, "Computer Science"], ["Biology", 95]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82, "Chemistry"], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91], ["English", 95]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Maths", 92], ["Physics", 93], ["Maths", 96]]], [[["Geography", 78], ["Biology", 81, "Biology"], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Maths", 92], ["Physics", 93], ["Maths", 96]]], [[["Geography", 78], ["Geography", 78, "Geography"], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95]]], [[["English", 87], ["English", 87, "English"], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Physics", 76], ["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Geography", 78], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 96]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85, "Biology"], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Social sciences", 82], ["Social sciences", 82], ["English", 88], ["Science", 90], ["Maths", 90]]], [[["Social sciences", 82], ["Mathas", 90], ["Science", 90], ["Maths", 90]]], [[["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95]]], [[["Geography", 78], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Physics", 93], ["Maths", 96]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Biology", 95]]], [[["Geography", 78], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Physics", 76], ["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["ChemistrMathasy", 92], ["Chemistry", 92], ["Chemistry", 92]]], [[["Biology", 45], ["Maths", 85], ["Physics", 96], ["Physics", 96], ["Physics", 96], ["Chemistry", 97]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Biology", 45], ["Maths", 85], ["Science", 88], ["Physics", 96], ["Physics", 96]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Computer Science", 90], ["Physics", 93], ["Physics", 93], ["Physics", 93]]], [[["Science", 45], ["Science", 45], ["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Maths", 97]]], [[["Art", 70], ["History", 78], ["Chemistry", 81], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 89], ["Geography", 92], ["Computer Science", 94], ["Biology", 95]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Art", 70], ["History", 75], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94, "Computer Science"], ["Biology", 95]]], [[["English", 87], ["English", 87, "English"], ["Physics", 90], ["Geography", 91], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Geography", 70], ["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98]]], [[["Economics", 89], ["Physics", 90], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["History", 96]]], [[["Geography", 70], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Biology", 72], ["Biology", 72, "Biology"], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["English", 82], ["Social sciences", 86], ["Computer Science", 88]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["Maths", 85], ["Chemistry", 92]]], [[["English", 87], ["English", 87, "ChemistrMathasy"], ["Physics", 90], ["Geography", 91], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Geography", 70], ["English", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Chemistry", 94], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Maths", 96], ["Physics", 96]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82, "Chemistry"], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91]]], [[["Maths", 82], ["Social sciences", 82], ["English", 88], ["English", 88], ["Science", 90], ["Computer Science", 90]]], [[["Physics", 90], ["Biology", 90]]], [[["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["Social sciences", 82], ["English", 88], ["Maths", 97]]], [[["Physics", -76, "Physics"], ["Computer Science", 82], ["Maths", 85]]], [[["Geography", 78], ["Biology", 81], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90], ["Physics", 93, 93], ["Physics", 93], ["Maths", 96]]], [[["Economics", 89], ["Physics", 90], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95]]], [[["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Chemistry", 90], ["Computer Science", 92], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98], ["Physics", 98]]], [[["Maths", 82], ["Social sciences", 82], ["Science", 90]]], [[["Computer Science", 65], ["Biology", 72], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["nEnglish", 82], ["English", 82], ["Social sciences", 86]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["English", 92, 92], ["Physics", 93], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Geography", 78], ["Geography", 78, "Geography"], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Physics", 93], ["Maths", 96]]], [[["Art", 70], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90, 90], ["Geography", 92], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Biology", 95]]], [[["Economics", 89, 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95], ["History", 96]]], [[["Social sciences", 72], ["Computer Science", 82], ["English", 88], ["Maths", 97]]], [[["Maths", 82], ["Social sciences", 82], ["English", 88], ["English", 88], ["English", 88], ["Science", 90], ["Computer Science", 90]]], [[["Physics", 76], ["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Science", 93], ["Computer Science", 94], ["History", 96]]], [[["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Science", 87], ["History", 88], ["English", 92], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Physics", 76], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Science", 93, "Science"], ["Computer Science", 94], ["Physics", 95], ["Chemistry", 95], ["History", 96]]], [[["Geography", 70], ["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82, "Chemistry"], ["Chemistry", 82], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91]]], [[["Geography", 78], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 84, "Biology"], ["Maths", 88], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98], ["Physics", 98]]], [[["Social sciences", 82], ["Social sciences", 82, 82], ["Computer Science", 82], ["English", 88], ["Maths", 97], ["Maths", 97]]], [[["Art", 70], ["History", 78], ["Chemistry", 81], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94], ["BiolComputoer Scienceogy", 95], ["Biology", 95]]], [[["Maths", 82], ["Social sciences", 82], ["Maths", 82], ["Science", 90]]]], "contract": "\n assert isinstance(subjectmarks, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item, tuple) and len(item) >= 2 for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item[1], (int, float)) for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n"}
{"task_id": "Mbpp/65", "prompt": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n", "entry_point": "recursive_list_sum", "canonical_solution": "\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n", "base_input": [[[1, 2, [3, 4], [5, 6]]], [[7, 10, [15, 14], [19, 41]]], [[10, 20, [30, 40], [50, 60]]]], "atol": 0, "plus_input": [[[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]]]], [[]], [[[], []]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]]], [[[[[[1], [2]], [3]], [[4], [5]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[10, 11], [12, 13]], [[14, 15], [16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[22, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1]], [[17, 17]], [[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]], 1]], [[2, [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]]], [21, [22, [23]]]]], [[[-63.05154180027262, -88.35789773161446, -67.78402311731799, -68.79245553684203, -70.3295437860673, -92.8058245239063, -93.56332101454589, -79.03594591232238, 26.92003787542201], [], []]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21], [21], [21]]], [[0, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[5, 1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[[21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21]]], [[1]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[[[[10, 11], [12, 13]], [[16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[10, 11], [12, 13]], [[16, 17]]]]], [[[[[22, 23], [24, 25]]], [[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[22, 23], [24, 25]]]]], [[[22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1, [22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]]], [[[[[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]]]], [[[], [], [], []]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[], [], [-63.05154180027262, -88.35789773161446, -67.78402311731799, -68.79245553684203, -70.3295437860673, -92.8058245239063, -93.56332101454589, -79.03594591232238, 26.92003787542201, -67.78402311731799]]], [[[[[10, 11], [12, 13]], [[16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[10, 11], [12, 13]], [[16, 17]]], [[[10, 11], [12, 13]], [[16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]]], [[1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]], 1]], [[0, 1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[1, 0, 2, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]]]], [[0, 1, 28, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[4], [5], [5]], [[[1], [2]], [25, 3], [25, 3]], [[4], [5], [5]]], [[[4], [5], [5]], [[[1], [2]], [25, 3], [25, 3]], [[4], [5], [5]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[18, 19], [20, 21]], [[24, 22, 23], [24, 22, 23], [24, 25]], [[24, 22, 23], [24, 22, 23], [24, 25]]], [[[18, 19], [20, 21]], [[24, 22, 23], [24, 22, 23], [24, 25]], [[24, 22, 23], [24, 22, 23], [24, 25]]]]], [[[[[[[5, 6, 5], [[1, 2], [3, 4]], [5, 6, 5]], [7, [8, 9]]], [[[5, 6, 5], [[1, 2], [3, 4]], [5, 6, 5]], [7, [8, 9]]]]]]], [[12, 20, 16, 97, 4, 28, -13]], [[18, [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[12, 20, 16, 97, 4, 28, -13, -13]], [[[[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 18], [18, 18], [20, 21]], [[18, 18], [18, 18], [20, 21]], [[22, 23], [24, 25]]], [[[18, 18], [18, 18], [20, 21]], [[18, 18], [18, 18], [20, 21]], [[22, 23], [24, 25]]]]], [[[[[[1], [2]], [3]], [[4], [5]]], [[[[6], [7]], [8]], [[9], [10]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[[[1], [2]], [3]], [[-13], [-13], [5]]], [[[[1], [2]], [3]], [[-13], [-13], [5]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21]]], [[[[[10, 11], [12, 13]], [[14, 15], [16, 17]]]]], [[[[[[6], [7]], [8]], [[9], [10]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 2, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 2, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 2, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]]]], [[[1, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]], 2, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]], [12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]]], [[[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]], [12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]]], [[[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]], [12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 1, [2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]], 1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[1, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]], 2, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]], [1, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]], 2, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[5, 6]], [[5, 6]], [7, [8, 9]]], [[[5, 6]], [[5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 19], [20, 21, 20]], [[18, 19], [20, 21, 20]], [[22, 23], [24, 25]]]]], [[[[[[1], [2]], [3]], [[-13], [5]]], [[[[1], [2]], [3]], [[-13], [5]]], [[[[1], [2]], [3]], [[-13], [5]]], [[[9], [10]]]]], [[1, 1]], [[12, 20, 16, 97, 4, 28, -13, 12]], [[[21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9, 8], [7, 8, 9, 8], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9, 8], [7, 8, 9, 8], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]]], [[[2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 1, [2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [12, 13]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [12, 13]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [12, 13]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1], [11], [11]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1, [22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[12, 20, 16, 97, 3, 28, -13, -13]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[1, 2]], [[1, 2]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]], 1, 1]], [[[2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 0, [2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[22]], [[12, 20, 16, 97, 4, 28, -13, 12, 12]], [[0, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]], 1, 1]], [[12, 20, 18, 16, 97, 4, 28, -13, 12]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]]], [[[2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1]], [[[[[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]]]], [[1, 11, 1]], [[[[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [21, [22, [23]], 21]]], [[[22, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [22, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]], [[22, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, 23, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]]], [21, [22, [23]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]], [[[[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]]]], [[[[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [21, [22, [23]], 21]]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[22, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 23, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]]], "contract": "\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(data_list, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(data_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n"}
{"task_id": "Mbpp/66", "prompt": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "entry_point": "pos_count", "canonical_solution": "\ndef pos_count(l):\n  return len([x for x in l if x > 0])\n", "base_input": [[[1, -2, 3, -4]], [[3, 4, 5, -1]], [[1, 2, 3, 4]]], "atol": 0, "plus_input": [[[0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]], [[]], [[1]], [[-1, -2, -3, 0, 1, 2, 3, 3, 2, 1, 0, -1]], [[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[10, 20, 30, 40]], [[0, 1]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]], [[-1, -2, -3, 0, 1, 2, 1, 3, 2, 1, 0, -1]], [[10, 20, 10, 30, 40]], [[-5, -4, -3, -2, -1, -1, 1, 2, 4, 5]], [[-2, -3, 0, 1, 2, 1, 3, 2, 1, 0, -1]], [[0, -1, 2, -3, 4, -5, 6, 8, -9, 10]], [[10, 20, -9, 40]], [[-5, -4, 3, -2, -1, 0, 1, 2, 3, 4, 5]], [[-1, -2, -3, 0, 1, 2, 1, 3, -1, 2, 1, 0, -1]], [[0, 1, 1]], [[0, -1, 2, -3, 4, -5, 6, 6, -7, 8, -9, 10]], [[2, 3, 4, 5]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 4, 5]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 0]], [[-2, -3, 0, 1, 2, 1, 3, 2, 1, -4, 0, -1]], [[10, -9, 40]], [[-5, -4, -3, -2, -1, 1, 2, 4, 5, 5]], [[10, 19, 30]], [[-1, -2, -3, 0, 1, 2, 1, 3, 1, 0, -1]], [[10, 30, 40, 10]], [[0, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4]], [[0, -1, 2, -2, -3, 4, -5, 6, 8, -9, 10, 4]], [[0, -1, 2, 4, -5, 6, 8, -9, 10, 4]], [[10, -2, -9, 40]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4]], [[2, 3, 4, 2, 4]], [[3, 2, 3, 4, 2, 4, 2]], [[0, -1, 2, -3, 4, -5, 6, -7, 8, 10]], [[0, -1, 2, -3, 4, -5, 6, 8, -10, -9, 10, 4]], [[3, 2, 3, 4, 2, 5, 2]], [[-4, -2, -1, 1, 2, 4, 5, 5]], [[-1, -2, -3, 0, 1, 2, 10, 3, 3, 2, 1, 0, -1, 2]], [[-5, 3, -4, 3, -2, -1, 0, 1, 2, 3, -9, 4, 5]], [[-2, -2, 0, 1, 2, 1, 3, 1, -4, 0, -1, -1]], [[10, 20, -9]], [[0, -1, 2, -3, 4, -5, 6, 8, 2, 10]], [[30, 3, 4, 5, 3]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, 6]], [[-9, -4, -2, -1, -1, 1, 2, 4, 5]], [[-1, -2, -3, 0, 1, 2, 1, 3, 2, 1, 0, -1, 2]], [[-5, 3, -4, 3, -2, -1, 0, 1, 3, -9, 4, 5]], [[0, -1, -1, 1, -3, 4, -5, 6, 8, -9, 10, 4, 4]], [[-97.00921686941055, -62.31826514441987, -47.8901822007769, 27.86472361019527, 59.008009822655055]], [[9, 10, 10, 30]], [[10, 21, 20, -9]], [[10, 20, -9, 39]], [[0, -1, 2, -3, 4, -5, 6, -7, 8, 10, -7]], [[-1, -2, -3, 0, 1, 2, 10, 3, 3, 2, 1, 0, -1, 2, 2]], [[10, -9, 40, 40]], [[0, -1, 2, 4, -5, 6, -7, 8, 10]], [[-5, 3, -4, 3, -2, -1, -3, 0, 1, 2, 3, -9, 4, 5, 0]], [[3, 3, 2, 4, 2, 4, 2]], [[-5, -4, -3, -2, -1, -1, 1, 2, 3, 4, 5]], [[0, -1, 2, 4, 1, -5, 6, -7, 8, 10]], [[-5, -4, 3, -2, -1, 0, 1, 2, 3, 4, 5, 5]], [[-1, -2, -3, 3, 0, 1, 2, 3, 3, 2, 1, 0, -1, -3]], [[0, -1, 2, 4, -5, 6, 8, -9, 10, 4, -1]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4]], [[0, -1, -1, 2, 4, -3, 4, -5, 8, -9, 10, 4, 4]], [[0, -1, 2, 4, -5, 6, -7, 8, 10, 2]], [[9, 10, 11, 30]], [[9, 30, 5, 40, 10]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, 2]], [[0, -1, 2, 4, 6, 8, -9, 10, 4]], [[-1, -2, -3, 0, 1, 2, 1, 3, -2, 2, 1, 0, -1, 3]], [[-2, -5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4]], [[-1, -2, -3, 0, 1, 10, 3, 3, 2, 1, 3, 0, -1, 2]], [[-5, -4, -3, -2, -1, -1, 1, 2, 39, 4, 5, 5]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4, -1]], [[-1, -2, -3, 0, 1, 3, 3, 2, 1, 3, 0, -1, 2]], [[10, 20, 10, 9, 30, 5]], [[0, -1, -2, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, 2]], [[-2, -3, 0, 1, 2, 1, 3, 1, -4, -1, -1]], [[10, 20, 11, 39]], [[0, -1, 2, 4, 1, -5, 6, -7, 8, 10, 10]], [[10, 19, -9, 40, 40, 40]], [[-5, -3, -4, -3, -2, -1, 0, -2, 1, 2, 3, 4, 5, -4]], [[10, 20, -9, 39, 20]], [[0, -1, 20, -3, 4, -5, 6, 6, -7, 8, -9, 10]], [[-5, -3, -4, -3, -2, -1, 1, 2, 3, 4, 5]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, -9]], [[-2, -3, 0, 1, 2, 1, 3, 2, 1, -4, 0, -1, 0]], [[10, -9, 40, 40, 40]], [[10, 0, -2, -9, 40, -2]], [[-5, -4, -3, -2, -1, -1, 3, 1, 2, 4, 5, 1]], [[-1, -3, -3, 0, 1, 2, 3, 11, 3, 2, 1, 0, -1, 3]], [[-9, -4, -2, -1, 1, 2, 4, 5]], [[0, -1, 2, 3, -3, 4, -5, 6, 8, -10, -9, 10, 4]], [[0, -1, 2, -3, -1, 4, -5, 6, 8, -10, -9, 10, 4]], [[10, 21, 20, -4, -9]], [[10, 20, -9, 40, -9]], [[-5, -3, -3, -3, -2, -1, 0, 1, 3, 4, 5, 0]], [[-11.074239280905289, 59.008009822655055, -62.31826514441987, 27.86472361019527, 59.008009822655055, -97.00921686941055]], [[10, 20, 19, -9, 40, -9]], [[-5, -3, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4, -1]], [[0, -1, 2, -2, -3, 4, -5, 6, 8, -9, 10, 4, -3]], [[-9, -4, -2, -1, 1, 5, 2, 2, 4, 5, -1]], [[0, -1, 2, 4, -5, 6, -7, 8, 10, 2, 6]], [[10, 20, 10, 30, 5]]], "contract": "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n"}
{"task_id": "Mbpp/67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "entry_point": "bell_number", "canonical_solution": "\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "base_input": [[2], [10], [56]], "atol": 0, "plus_input": [[0], [100], [99], [true], [false], [98], [1], [2], [3], [97], [96], [11], [12], [92], [95], [94], [14], [13], [10], [55], [17], [15], [93], [16], [9], [91], [54], [25], [18], [4], [5], [6], [8], [90], [53], [7], [19], [64], [20], [21], [56], [63], [52], [24], [57], [22], [62], [89], [51], [50], [88], [58], [49], [45], [65], [23], [87], [46], [59], [26], [44], [61], [48], [47], [60], [30], [27], [86], [28], [31], [29], [66], [67], [85], [70], [71], [43], [69], [82], [83], [72], [68], [81], [73], [32], [33], [42], [74], [84], [41], [80], [79], [75], [40], [76], [34], [35], [78], [77], [39], [38], [36]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n"}
{"task_id": "Mbpp/68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "entry_point": "is_Monotonic", "canonical_solution": "\ndef is_Monotonic(A): \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n", "base_input": [[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]]], "atol": 0, "plus_input": [[[]], [[9, 3, 7, 2, 5, 1, 6]], [[9, 7, 7, 2, 5, 5, 1, 6]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005]], [[43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, -34.902913681824856, -9.527847657655224]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005]], [[43.01465662466188, -69.73647736308538, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, -69.73647736308538, 43.01465662466188]], [[43.01465662466188, -34.902913681824856, 42.59716035619264, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -10.481407073259263]], [[9, 5, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -98.52620778096008, -69.73647736308538, -10.481407073259263]], [[9, 7, 7, 2, 5, 5, 3, 6]], [[-47.55433018390211, -10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -34.902913681824856]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -47.55433018390211, -64.57664800604005]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[41.82235199511542, -68.76772490153975, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, -69.38224302373561]], [[43.01465662466188, -69.38224302373561, -69.88165026016243, -10.481407073259263, -69.73647736308538, 43.01465662466188, -69.88165026016243]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[-34.902913681824856, -10.481407073259263, -69.38224302373561, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[false, false, false]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -94.97100584944054]], [[-34.902913681824856, -10.481407073259263, -94.97100584944054]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-94.97100584944054, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, 27.4121976200018, -64.57664800604005]], [[-34.902913681824856, -10.481407073259263, -69.88165026016243, -94.97100584944054]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[42.59716035619264, -68.76772490153975, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[-34.902913681824856, -9.527847657655224, -10.481407073259263, -94.97100584944054, -34.902913681824856]], [[7, 3, 7, 2, 5, 5, 3, 6]], [[42.59716035619264, -68.76772490153975, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561, 43.01465662466188]], [[false, false, false, false]], [[9, 5, 7, 2, 5, 1, 1, 2, 6]], [[27.4121976200018, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[9, 7, 7, 2, 5, 5, 3, 6, 5]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -94.97100584944054, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -34.902913681824856]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -11.141086666406599, -10.481407073259263, -69.38224302373561]], [[-9.527847657655224, -34.902913681824856, 43.01465662466188, -69.38224302373561, -10.493584737965575, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, 27.4121976200018, -64.57664800604005]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -10.768528666126521]], [[9, 3, 5, 1, 1]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-34.902913681824856, 42.81869869284685, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.88165026016243, -64.57664800604005, -34.902913681824856]], [[-34.902913681824856, 43.01465662466188, -64.57664800604005, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 42.81869869284685, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[7, 3, 5, -11, -4, 2, 54]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -10.768528666126521]], [[-12.580228512164316, 42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -10.481407073259263]], [[9, 4, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -94.97100584944054, -34.902913681824856, -10.481407073259263, -94.97100584944054]], [[42.59716035619264, 43.01465662466188, -69.14764750208506, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[43.01465662466188, -34.902913681824856, -49.529210259810306, 42.59716035619264, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, 42.81869869284685, -69.88165026016243, -10.481407073259263, -69.73647736308538, 43.01465662466188, -69.88165026016243]], [[43.01465662466188, -34.902913681824856, -35.42913486984109, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[true, false, false, false, false]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188, 43.01465662466188]], [[-96.47330712486206, 43.01465662466188, -96.47330712486206, -10.768528666126521, -35.65861283942265, -10.768528666126521]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265, 43.411858408450954]], [[42.87694882226923, -12.580228512164316, 42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -10.481407073259263]], [[-34.967048506901335, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[43.01465662466188, -69.38224302373561, -69.88165026016243, -10.481407073259263, -69.73647736308538, -69.88165026016243]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -47.55433018390211]], [[-34.902913681824856, -9.527847657655224, -10.481407073259263, -94.97100584944054]], [[-10.902910189585176, -34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -34.902913681824856]], [[43.01465662466188, -10.481407073259263, 43.01465662466188]], [[42.59716035619264, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -64.57664800604005, -69.38224302373561]], [[9, 3, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -69.14764750208506]], [[42.59716035619264, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265, 43.411858408450954, -34.902913681824856]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -10.768528666126521, -10.768528666126521]], [[-34.902913681824856, -35.42913486984109, -34.967048506901335, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -34.902913681824856]], [[9, 5, 4, 7, 2, 5, 1, 1, 2, 6]], [[42.81869869284685, 43.01465662466188, -96.47330712486206, -10.768528666126521, -35.65861283942265, -10.323022141346687]], [[-34.902913681824856, 43.01465662466188, -69.6514466229769, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856]], [[-9.527847657655224, -34.902913681824856, 43.01465662466188, -10.902910189585176, -10.493584737965575, -64.57664800604005]], [[43.01465662466188, -98.52620778096008, -69.73647736308538, -10.481407073259263, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, 42.87694882226923, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -9.527847657655224, -64.57664800604005, 43.01465662466188]], [[-10.768528666126521, -9.527847657655224, -10.481407073259263, -94.97100584944054, -34.902913681824856, -34.902913681824856]]], "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n"}
{"task_id": "Mbpp/69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "entry_point": "is_sublist", "canonical_solution": "\ndef is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n", "base_input": [[[2, 4, 3, 5, 7], [3, 7]], [[2, 4, 3, 5, 7], [4, 3]], [[2, 4, 3, 5, 7], [1, 6]]], "atol": 0, "plus_input": [[[], []], [[], [1]], [["r"], []], [["sfIngs", "GYVu", "r"], []], [["r", "sfIngs", "GYVu"], [false, "klXTmRZyQ"]], [[false, 99.97028427774339, 82, "GYVu", false, "Ok", null, [1, -71.80691717114227]], []], [["r", "sfIngs", "GYVu", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu"]], [["r", "sgfIngs", "GYVu", "GYVu"], ["r", "sgfIngs", "GYVu", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu"]], [["r", "sfIngs", "GYVu"], ["r", "sfIngs", "GYVu"]], [["sfIngs", "GYVu"], ["sfIngs", "GYVu"]], [["sgfIngs", "sfIngs", "GYVu", "r", "r", "sfIngs"], ["sgfIngs", "sfIngs", "GYVu", "r", "r", "sfIngs"]], [["r", "GYVu", "r"], []], [["r", "GYVu", "r"], ["r", "GYVu", "r"]], [["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "sfIngs"], ["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "sfIngs"]], [[1], [1]], [[null, false, {"sfIngsr": 42.34905566158099, "FHvMaMnTCg": -74.03921201241215, "hKRFjm": -74.21853866002988, "rKQ": 40.63712034844792}, {"24.822944608944297": "pfIhkuLtSg", "-22.735241874996206": "s", "-13.009939375362165": "sfIngsr", "-71.80691717114227": "VtqKcYvzg", "99.97028427774339": "DBzU", "68.8678541991217": "GYVu", "-83.5332401941628": "PctAoxwD"}, [66, 1, -51, 1, -59, 1, false, -71], true, "sfIngs", 1], []], [["GYVu", "pfIhkuLtSg", "O", "Odpagl", "Casb"], []], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV"]], [[-42, 8, -83.5332401941628, -82, 38.16772877208774, {"VtqKcYvzg": 47.40072133316414, "sLmQQSONWn": -13.009939375362165, "O": 36, "rKQ": [48, -59]}, -40], []], [[8, null, false, {"sfIngsr": 42.34905566158099, "FHvMaMnTCg": -74.03921201241215, "hKRFjm": -74.21853866002988, "rKQ": 40.63712034844792}, {"24.822944608944297": "pfIhkuLtSg", "-22.735241874996206": "s", "-13.009939375362165": "sfIngsr", "-71.80691717114227": "VtqKcYvzg", "99.97028427774339": "DBzU", "68.8678541991217": "GYVu", "-83.5332401941628": "PctAoxwD"}, [66, 1, -51, 1, -59, 1, false, -71], true, "sfIngs", 1], []], [["r", "sfIngs", "s"], [false, "klXTmRZyQ"]], [["r", "sgfIngs", "GYVu", "pfIhkuLtSgr", "GYVu"], ["r", "sgfIngs", "GYVu", "pfIhkuLtSgr", "GYVu"]], [[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "r"]], [["GYVur", "sgfIngs", "GYVu", "GYVu"], ["GYVur", "sgfIngs", "GYVu", "GYVu"]], [["sfIngsGYVu", "sfIngs", "GYVu"], ["sfIngsGYVu", "sfIngs", "GYVu"]], [["r", "GYVu", "r", "r"], ["r", "GYVu", "r", "r"]], [["sfIngSFVGYVVgWCfDjsGYVu", "sfIngSFVVgWCfDjsGYVu", "sfIngs", "GYVu"], ["sfIngSFVGYVVgWCfDjsGYVu", "sfIngSFVVgWCfDjsGYVu", "sfIngs", "GYVu"]], [["r", "GYVu", "r"], [true, true, true, false, true, false, false, true]], [["r"], ["r"]], [["r", "GSFVVgWCfDju", "GYVu", "r"], ["r", "GSFVVgWCfDju", "GYVu", "r"]], [["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "GYV"], ["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "GYV"]], [[], [true, false, true]], [["r", "GYVu", "r"], [-49.293443668830214, 11.89338685730192, 38.68012886425632, 64.91527494125927, -74.03921201241215, 0.3374408817541621]], [["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"], ["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"]], [[90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82], [90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82]], [["r", "sfIngs", "GYVu", "r", "r"], ["r", "sfIngs", "GYVu", "r", "r"]], [[90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", 82], [90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", 82]], [["r", "GYVu", "r"], [-49.293443668830214, 11.89338685730192, 38.68012886425632, 64.91527494125927, -74.03921201241215, 0.3374408817541621, -74.03921201241215]], [["GYVur", "sgfIngs", "GYVu", "GYVu", "GYVu"], ["GYVur", "sgfIngs", "GYVu", "GYVu", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVu", "GYV"], ["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVu", "GYV"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVu", "r"]], [[-42, 9, -83.5332401941628, -82, 38.16772877208774, {"VtqKcYvzg": 47.40072133316414, "sLmQQSONWn": -13.009939375362165, "O": 36, "rKQ": [48, -59]}, -40], [-42, 9, -83.5332401941628, -82, 38.16772877208774, {"VtqKcYvzg": 47.40072133316414, "sLmQQSONWn": -13.009939375362165, "O": 36, "rKQ": [48, -59]}, -40]], [["r", "sfIngs", "GYVu"], [false]], [["GSFVVgWCfDju", "r", "sfIngs", "GYVu", "r", "r", "GSFVVgWCfDju", "r"], ["GSFVVgWCfDju", "r", "sfIngs", "GYVu", "r", "r", "GSFVVgWCfDju", "r"]], [["sfIngs", "PctAoxwD", "GYVu"], ["sfIngs", "PctAoxwD", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"]], [["sfIngs", "PctAoxwD", "GVYVu", "GYVu", "PctAoxwD"], ["sfIngs", "PctAoxwD", "GVYVu", "GYVu", "PctAoxwD"]], [["r", "sfIngs", "u", "GYV", "GYVu"], ["r", "sfIngs", "u", "GYV", "GYVu"]], [["r", "VtqKcYvzg", "r"], []], [["GYVur", "GYYVur", "sgfIngs", "GYVu", "GYVu"], ["GYVur", "GYYVur", "sgfIngs", "GYVu", "GYVu"]], [[true, true, true, false, true, false, false, true, true], [true, true, true, false, true, false, false, true, true]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "rGSFVVgWCfDju", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "rGSFVVgWCfDju", "GYVu", "r"]], [["r", "sfIngs", "GYVu", "r"], ["r", "sfIngs", "GYVu", "r"]], [[-74.03921201241215, 75.22089802044161, -38.48806518576453], []], [[false], [true, false, true]], [["sfIngs", "GYVu", "r"], ["sfIngs", "GYVu", "r"]], [["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"], ["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"]], [["sfIngsGYVu", "sfIngs", "GYVu", "sfIngs", "sfIngsGYVu"], ["sfIngsGYVu", "sfIngs", "GYVu", "sfIngs", "sfIngsGYVu"]], [["r", "GYVu", "r"], [true, true, true, true, false, false, true]], [["r", "sfInVtqKcYvzggs", "GYVu"], ["r", "sfInVtqKcYvzggs", "GYVu"]], [["r", "GYVu", "r", "r"], [true, true, true, false, true, false, false, true]], [[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 65.5370586539689, "qyujtuO", 82, 75.22089802044161, 82, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 65.5370586539689, "qyujtuO", 82, 75.22089802044161, 82, 82]], [["r", "sfIngs", "GYVVu", "GYVu", "r", "r"], ["r", "sfIngs", "GYVVu", "GYVu", "r", "r"]], [["r", "sfIngs", "s"], ["klXTmRZyQ"]], [["r", "GYYVu", "GYVu"], ["r", "GYYVu", "GYVu"]], [[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 82]], [[[95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, 75.22089802044161, 82], [[95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, 75.22089802044161, 82]], [["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "GYVu", "r"]], [["r", "sfIngs", "s"], ["klXTmRZyQ", "klXTmRZyQ"]], [["sfIngsGYVu", "sfIngs", "GYVu", "ssfIngs", "sfIngsGYVu"], ["sfIngsGYVu", "sfIngs", "GYVu", "ssfIngs", "sfIngsGYVu"]], [[-49.293443668830214, -0.4410790823334596, 11.89338685730192, 38.68012886425632, 64.91527494125927, 47.40072133316414, -74.03921201241215, 0.3374408817541621], [-49.293443668830214, -0.4410790823334596, 11.89338685730192, 38.68012886425632, 64.91527494125927, 47.40072133316414, -74.03921201241215, 0.3374408817541621]], [["r", "GYVu", "FHvMaMnTCg", "rr"], ["r", "GYVu", "FHvMaMnTCg", "rr"]], [["klXTmRZyQr", "sfIngs", "GYVu", "GYVu", "sfIsngs", "GYVu"], ["klXTmRZyQr", "sfIngs", "GYVu", "GYVu", "sfIsngs", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r", "r"]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV", "GYVu"]], [["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu"], ["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVVu", "GYV"], ["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVVu", "GYV"]], [["r", "GYVu", "r", "r"], [true, true, true, true, false, false, true]], [[90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", "GYYVur", 82], [90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", "GYYVur", 82]], [["r", "snfInVtqKcYvzggs", "sfInVtqKcYvzggs", "GYVu"], ["r", "snfInVtqKcYvzggs", "sfInVtqKcYvzggs", "GYVu"]], [["rGYV", "GYVu"], ["rGYV", "GYVu"]], [["r", "rGYV", "GYVu"], ["r", "rGYV", "GYVu"]], [[false], [false]], [["sfIngsGYVu", "GSFVVgWCfDjusfIngs", "sfIngs", "GYVu", "sfIngsGYVu"], ["sfIngsGYVu", "GSFVVgWCfDjusfIngs", "sfIngs", "GYVu", "sfIngsGYVu"]], [["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu", "r"], ["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu", "r"]], [["r", "GYVu"], ["r", "GYVu"]], [["r", "sgfIngs", "s", "GYVu", "pfIhkuLtSgr", "GYVu"], ["r", "sgfIngs", "s", "GYVu", "pfIhkuLtSgr", "GYVu"]], [["GYVGu", "r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"], ["GYVGu", "r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"]], [["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "s", "Casb", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "s", "Casb", "GYVu", "r"]], [["sfIngs", "GYVu", "sfIngrrs", "GYVu", "GOkV", "GYVGu", "rr"], ["sfIngs", "GYVu", "sfIngrrs", "GYVu", "GOkV", "GYVGu", "rr"]], [["YrGYV", "GYVu", "GOku"], ["YrGYV", "GYVu", "GOku"]], [["GYVu", "pfIhkuLtSg", "O", "Odpagl", "Casb", "GYVu"], [[87.8259025409381, "GYVusfIngSFVGYVVgWCfDjsGYVu", [true, true], {"-51": -74.03921201241215, "60": 40.71791810053759, "false": 5.735570485483905, "-10": 24.822944608944297, "8": 0.3374408817541621, "41": 64.91527494125927, "-82": -25.52239838327162, "-36": -41.74691632795968, "61": -74.21853866002988, "-83": 99.97028427774339}, false, [66, 68, -71, -71, -82, -65, -51], {"GSFVVgWCfDjusfIngs": "ssfIngs", "GYYVu": "GOkV", "uTw": "GYVGu", "s": "SFVVgWCfDj", "klXTmRZyQr": "FHvMaMnTCg", "sfIngrrs": "mXw", "HGEtjdFe": "sfIsngs", "DBzU": "EV", "sfIngSFVGYVVgWCfDjsGYVu": "WpVzXU", "Xf": "sfIngrrs"}], [], -10, -29, null]], [[true, true, true, false, true, false, false, true, true, false], [true, true, true, false, true, false, false, true, true, false]], [["r", "sfIngs", "r", "GYVVu", "GYVu", "r", "r"], ["r", "sfIngs", "r", "GYVVu", "GYVu", "r", "r"]], [["r", "sfInsfIngSFVGYVVgWCfDjsGYVugs", "u", "GYV", "GYVu"], ["r", "sfInsfIngSFVGYVVgWCfDjsGYVugs", "u", "GYV", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "ssfIngs", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "ssfIngs", "r"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "WpVzXU", "r", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "WpVzXU", "r", "r"]], [[[94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 75.22089802044161, 82], [[94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 75.22089802044161, 82]], [["sgfIngs", "s", "GYVu", "pfIhkuLtSgr"], ["sgfIngs", "s", "GYVu", "pfIhkuLtSgr"]]], "contract": "\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n"}
{"task_id": "Mbpp/70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n", "entry_point": "get_equal", "canonical_solution": "\ndef get_equal(Input):\n  return len(set(len(item) for item in Input)) == 1\n", "base_input": [[[[11, 22, 33], [44, 55, 66]]], [[[1, 2, 3], [4, 5, 6, 7]]], [[[1, 2], [3, 4]]]], "atol": 0, "plus_input": [[[[1, 2, 3], [], [4, 5]]], [[[1, 2, 3], [], [4, 5], [6, 7, 8]]], [[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]], [[[1], [2, 3], [4, 5, 6], [7]]], [[[1, 2, 3, 4], [5, 6], [7, 8, 9]]], [[[], [1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]], [[[1, 2, 3], [4, 5], [], [6, 7, 8], [9, 10]]], [[[1, 2, 3], [4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5], [6, 7], [8, 9], [10]]], [[[1], [2, 3], [], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11]]], [[[1, 2], [3, 4], [5, 6, 7], [8]]], [[[1, 2], [3, 4], [5, 6, 7]]], [[[1], [2, 3], [4, 5], [6, 7, 8]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4]]], [[[1, 1], [2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3]]], [[[1, 2], [1, 2, 3], [], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [4], [5, 6, 7], [8, 9, 10], [8, 10], [11, 12, 13]]], [[[1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12], [9, 10, 11, 12, 12]]], [[[1], [2, 3, 2], [], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[], [], [2, 3], [4, 5, 6], [7, 8, 9, 10], []]], [[[1, 2, 3], [], [4, 4, 5]]], [[[2, 3, 2, 3], [1], [2, 3, 2], [], [4, 5, 6, 7], [8, 11, 10], [8, 9, 10]]], [[[1], [8, 3], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [4], [5, 7], [8, 9, 10], [8, 10], [11, 12, 13], [1, 2, 3]]], [[[1], [2, 3, 2], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2], [3, 4], [5, 6, 7], [8], [8]]], [[[1, 2], [3, 4, 4], [3, 4], [5, 6, 7], [11, 4], [3, 4]]], [[[1, 2, 3], [], [4], [6, 7, 8]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [1, 2]]], [[[1, 2, 3], [4, 5], [6, 7], [8, 9], [], [10]]], [[[1, 2], [3, 4, 3], [5, 6, 7], [8]]], [[[1], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 5, 11]]], [[[1, 2, 3, 3], [], [9, 10]]], [[[1, 2], [1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 5, 11], [1, 2]]], [[[1, 2], [3], [5, 6, 5, 7], [8], [8]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 3]]], [[[1, 2, 3, 4], [5, 6], [8, 9]]], [[[1, 2, 3], [], []]], [[[1, 2, 3], [4, 5, 6], [4, 5, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2], [3, 4], [5, 6, 7], [1, 2]]], [[[1, 2, 3], [4], [5, 7], [8, 10], [11, 12, 13], [1, 2, 3]]], [[[3, 1, 2], [1, 2], [3, 4], [5, 6, 7], [8]]], [[[1, 2, 3], [4], [7, 6, 7], [8, 9], [10]]], [[[4, 5]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [5, 6, 7]]], [[[1, 2, 3], [4, 5], [5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[1, 2, 3], [4, 5, 6], [4, 5, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2], [3, 4, 4], [3, 4], [5, 6, 7], [11, 4], [3, 4], [11, 11, 4]]], [[[1, 2, 3], [], [4, 5], [7, 8], [7, 8]]], [[[1, 2, 3], [4], [5, 6, 7], [8, 9, 10], [8, 10], [11, 12, 13], [8, 10]]], [[[1, 2, 3], [7, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[1], [4, 5, 6], [2, 3, 2], [], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2], [3, 4], [5, 6, 7], [5, 6, 7]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 3], [11, 12, 13, 14, 15]]], [[[1], [4, 5, 6], [], [4, 5, 6, 7], [8, 9, 10]]], [[[2], [3, 4], [5, 6, 7], [3, 4, 4], [3, 4, 4], [3, 4]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [5, 6, 7], [5, 6, 7]]], [[[], [3], [1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [2, 3], [1]]], [[[], [3], [1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [1]]], [[[1], [2, 2], [3], [], [4, 5, 6, 7], [8, 9, 9, 10]]], [[[1, 1], [2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3], [1, 1]]], [[[1, 2], [3, 4, 4], [3, 4], [3, 4, 4], [5, 6, 7], [11, 4], [3, 4], [11, 11, 4]]], [[[1], [2, 2], [2], [3], [4, 5, 6, 7], [8, 9, 9, 10]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2], [1, 2], [3, 4, 5]]], [[[1], [8, 3], [4, 5], [4, 1, 5], [6, 7, 8]]], [[[2], [3, 4], [5, 6, 7], [2, 2], [3, 4, 4], [3, 4, 4], [3, 4]]], [[[1, 1], [2, 3], [4, 5, 6], [11, 12, 13, 14, 15]]], [[[2, 2], [1, 2], [3]]], [[[1], [4, 5, 6], [4, 5, 6, 7], [8, 9, 10]]], [[[9, 10, 11, 10], [1, 2, 3], [4, 5], [6], [5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[1], [4, 5, 6], [2, 3, 2], [], [4, 5, 6, 7], [8, 9, 10], [4, 5, 6, 7]]], [[[], ["D", "DgNw"], [], [2, 3], [4, 5, 6], [], []]], [[[1], [4, 5], [6, 7, 8], [1]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [8], [8]]], [[[4, 5, 5], [1, 2, 3], [], [6, 7, 8], [4, 5]]], [[[4, 5, 5], [1, 2, 3], [], [1, 14, 3], [6, 7, 8], [4, 5]]], [[[1], [4, 5, 6], [2, 3, 2], [], [8, 9, 10]]], [[[4], [4, 5]]], [[[1, 2], [3, 4], [5, 6, 7], [7], [3, 4], [8], [8], [8]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [6, 7, 8, 6], [9, 10, 11]]], [[[1, 2, 3, 4], [5, 6], [6, 8, 9]]], [[[1, 1], [2, 3], [2, 3, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3], [1, 1]]], [[[1, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13], [1, 2, 3], [11, 12, 13], [3, 4]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 3], [11, 12, 13, 14, 15], [11, 12, 13, 14, 15]]], [[[1], [4, 5, 6], [4, 5, 6, 7], [1]]], [[[9, 10, 11, 10], [1, 2, 3], [4, 5], [5], [6, 7, 8], [9, 10, 11], [4, 5, 5], [5]]], [[[1, 1], [2], [4, 5, 6, 4], [11, 12, 13, 14, 15], [2, 3]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[3, 3], [1, 1], [2, 3], [4, 5, 6], [5, 12, 13, 14, 15, 12], [2, 3]]], [[[1], [4, 6, 6], [4, 5, 6, 7], [4, 5, 6, 7, 7], [1]]], [[[1, 2, 2], [3, 4], [1, 2]]], [[[], ["D", "DgNw"], [true, true, true, false, true, true], [2, 3], [4, 5, 6], [], [], []]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]]], [[[1, 2, 3], [4, 5, 5], [4, 5], [6, 7, 8], [6, 7, 8, 6], [9, 10, 11]]], [[[4, 5], [1, 2, 3], [], [4, 5], [7, 8], [7, 8]]], [[[9, 10, 11, 10], [1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11], [4, 5, 5], [4, 14], [5]]], [[[1, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 13, 3], [11, 12, 13, 12, 14, 15]]], [[[2, 3, 2, 3], [1], [2, 3, 2], [{"-50": -92, "-31": 10, "24": 8, "12": 5}, "DgNw", true, -66, -77.47956663455827, null, null, false, "DgNw"], [4, 5, 6, 7], [8, 11, 10], [8, 9, 10]]], [[[6, 7], [6, 7], [1, 2], [3, 4], [5, 6, 7], [1, 2]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3], [1, 1]]], [[[1, 2, 3, 4], [5, 6], [5, 6, 6], [5, 6]]], [[[1, 2, 3], [1, 7, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13], [1, 2, 3], [11, 12, 13], [3, 4], [1, 2, 3], [8, 9, 10]]], [[[1], [4, 5], [6, 7, 8], [4, 5]]], [[[1], [6, 7, 8], [1]]], [[[2], [3, 4], [5, 6, 7], [2, 2], [3, 4, 4], [3, 4, 4], [2, 3, 2], [3, 4]]], [[[], [1], [4, 5, 6], [4, 5, 6, 7, 5], [1]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [3, 4]]], [[[1, 2, 3], []]], [[[9, 10, 11, 11], [1, 2, 3], [4, 5], [6, 8], [6, 7, 8, 6], [9, 10, 11]]]], "contract": "\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True\n"}
{"task_id": "Mbpp/71", "prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "entry_point": "comb_sort", "canonical_solution": "\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n", "base_input": [[[5, 15, 37, 25, 79]], [[41, 32, 15, 19, 22]], [[99, 15, 13, 47]]], "atol": 0, "plus_input": [[[500, 1000, 1500, 2000, 3000]], [[444444444, 555555555, 777777777, 888888888, 999999999]], [[1000000000, 2000000000, 5000000000, 10000000000]], [[1, 2, 2, 3, 4, 7, 8, 8]], [[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[99, 444444444, 777777777, 888888888, 999999999]], [[11, 22, 31, 32, 33, 55, 66, 77, 88]], [[500, 999, 1500, 3000]], [[11, 22, 33, 55, 66, 77, 88, 99, 10000000000]], [[11, 22, 31, 32, 33, 55, 66, 66, 77, 77]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 10]], [[11, 22, 33, 44, 44, 55, 66, 77, 88, 99]], [[11, 22, 33, 33, 55, 66, 77, 88, 99, 9999999999]], [[11, 22, 32, 33, 33, 55, 66, 66, 77, 77]], [[11, 22, 22, 31, 32, 32, 33, 55, 66, 77, 88]], [[1, 2, 3, 4, 5, 6, 6, 7, 9, 9, 10]], [[11, 11, 22, 33, 44, 55, 66, 66, 88, 99]], [[11, 11, 22, 44, 55, 66, 66, 89, 99]], [[2, 3, 4, 5, 6, 6, 7, 9, 9, 10, 6999]], [[11, 11, 44, 55, 66, 66, 89, 99]], [[11, 11, 22, 22, 22, 33, 55, 66, 77, 99, 10000000000]], [[1000000000, 2000000000, 2000000000, 10000000000]], [[1, 2, 3, 4, 4, 7, 8, 8]], [[1, 2, 3, 4, 7, 8, 8, 77]], [[500, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[11, 22, 33, 44, 55, 66, 66, 77, 88, 99]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 9, 10]], [[1, 2, 2, 3, 4, 7, 8, 8, 1000000000]], [[1999999999, 2000000000, 5000000000, 10000000000]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]], [[11, 33, 44, 44, 55, 66, 77, 88, 88, 99]], [[11, 22, 31, 32, 33, 55, 66, 67, 77, 77]], [[11, 22, 33, 33, 44, 55, 66, 66, 77, 88, 99]], [[8, 11, 22, 33, 44, 66, 77, 88, 99]], [[500, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 8000, 9000, 10000]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 9, 10, 99]], [[11, 33, 44, 44, 55, 66, 77, 88, 88, 99, 99]], [[99, 6999, 444444444, 777777777, 888888888, 888888889, 999999999]], [[1999999999, 2000000000, 9999999999, 10000000000]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 10]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 88, 99]], [[1, 2, 3, 5, 6, 7, 9, 9, 10, 888888888, 888888888]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 88, 99, 4000]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 88, 99, 4000, 444444444]], [[1999999999, 2000000000, 5000000000, 5000000000, 10000000000]], [[11, 22, 31, 32, 33, 55, 66, 66, 66, 77, 77]], [[22, 33, 1999999999, 2000000000, 10000000000]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 99]], [[500, 500, 1000, 3000, 3001, 4000, 5000, 6000, 7000, 7001, 8000, 8000, 9000, 10000]], [[1, 23, 33, 1999999999, 2000000000, 9999999999, 10000000000]], [[11, 33, 43, 44, 54, 55, 66, 77, 77, 88, 88, 99, 99]], [[10, 22, 33, 33, 44, 55, 65, 65, 66, 77, 99]], [[55, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[1, 2, 3, 4, 4, 4, 7, 7, 8]], [[11, 22, 33, 44, 44, 55, 66, 66, 77, 88, 99]], [[11, 22, 32, 33, 34, 66, 66, 77, 77]], [[1, 2, 3, 4, 4, 7, 7, 8, 8]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 10, 100]], [[99, 6999, 444444444, 777777777, 888888888, 888888888, 888888889, 999999999]], [[11, 11, 44, 55, 66, 89, 99]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10]], [[11, 22, 33, 33, 65, 66, 77, 88, 99, 4000, 444444444]], [[11, 22, 23, 31, 32, 32, 33, 55, 66, 77, 88]], [[99, 6999, 444444444, 888888888, 888888889, 999999999, 9999999999]], [[11, 11, 44, 44, 55, 66, 66, 89, 89, 99]], [[1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 888888889]], [[11, 22, 32, 33, 33, 55, 66, 77, 88, 9999999999]], [[11, 22, 32, 33, 33, 66, 66, 88, 9999999999]], [[11, 22, 32, 33, 33, 55, 66, 77, 88, 9999999999]], [[4000, 444444444, 1000000000, 2000000000, 2000000000, 5000000000, 10000000000]], [[11, 22, 33, 44, 55, 66, 77, 88, 99, 10000000000]], [[11, 22, 32, 33, 33, 33, 55, 66, 77, 77]], [[11, 22, 33, 33, 44, 55, 65, 77, 99]], [[11, 22, 33, 33, 65, 66, 77, 88, 99, 500, 501, 4000, 444444444]], [[55, 777777777, 888888888, 999999999]], [[11, 33, 33, 44, 55, 65, 66, 77, 77, 99, 4000, 444444444]], [[1, 2, 3, 4, 4, 4, 5, 7, 8, 9, 9, 9, 10, 99]], [[11, 23, 33, 44, 55, 66, 77, 88, 99, 10000000000]], [[44, 500, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[11, 22, 31, 32, 33, 33, 55, 66, 66, 77, 77]], [[1, 2, 3, 4, 5, 5, 6, 6, 8, 9, 9, 10]], [[11, 22, 31, 32, 32, 33, 55, 66, 77, 88]], [[1999999999, 2000000000, 2000000000, 9999999999, 10000000000]], [[444444444, 777777777, 888888888, 999999999, 1000000000]], [[65, 4000, 444444444, 1000000000, 2000000000, 2000000000, 5000000000, 10000000000]], [[33, 33, 44, 55, 65, 66, 77, 99, 4000, 444444444]], [[500, 500, 1000, 3000, 3001, 4000, 5000, 6000, 7000, 7001, 8000, 9000, 10000]], [[500, 999, 1500, 1500, 3000]], [[5, 11, 33, 33, 44, 55, 66, 77, 77, 99, 4000, 444444444]], [[44, 100, 500, 500, 1000, 3001, 5000, 6000, 7000, 8000, 9000, 10000]], [[1, 2, 3, 4, 4, 4, 4, 5, 7, 8, 8, 9, 9, 9, 10, 99]], [[3, 11, 22, 31, 32, 33, 55, 66, 66, 77, 77]], [[11, 11, 22, 33, 44, 66, 66, 88, 99]], [[1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10]], [[100, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 8000, 9000, 10000]], [[8, 11, 22, 31, 32, 33, 33, 55, 66, 66, 77, 77, 77]], [[1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10]], [[4, 99, 6999, 444444444, 777777777, 888888888, 888888888, 888888889, 999999999]], [[11, 22, 30, 32, 32, 33, 55, 66, 77, 88, 5000000000]], [[1, 2, 5, 6, 7, 8, 9, 9, 10, 888888888, 888888888]], [[11, 33, 44, 44, 55, 66, 77, 88, 88, 99, 100]], [[11, 32, 33, 33, 44, 55, 65, 66, 77, 77, 99, 4000, 444444444]], [[64, 65, 4000, 444444444, 1000000000, 2000000000, 2000000000, 5000000000, 10000000000]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n"}
{"task_id": "Mbpp/72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "entry_point": "dif_Square", "canonical_solution": "\ndef dif_Square(n): \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2\n", "base_input": [[5], [10], [15]], "atol": 0, "plus_input": [[991], [567], [13], [24], [568], [992], [569], [990], [566], [true], [989], [25], [14], [565], [23], [15], [988], [12], [11], [16], [17], [993], [564], [563], [22], [10], [994], [9], [21], [995], [996], [20], [18], [997], [8], [987], [45], [562], [570], [26], [561], [998], [19], [77], [7], [76], [560], [986], [27], [44], [571], [28], [75], [46], [78], [74], [985], [29], [572], [984], [73], [983], [79], [573], [47], [50], [982], [981], [5], [71], [49], [80], [51], [999], [30], [81], [6], [1000], [980], [1001], [1002], [82], [1003], [52], [574], [53], [1004], [70], [575], [69], [576], [979], [83], [72], [68], [43], [89], [42], [977], [33], [4], [36], [978], [3]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\n"}
{"task_id": "Mbpp/74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n", "entry_point": "is_samepatterns", "canonical_solution": "\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)\n", "base_input": [[["red", "green", "green"], ["a", "b", "b"]], [["red", "green", "greenn"], ["a", "b", "b"]], [["red", "green", "greenn"], ["a", "b"]]], "atol": 0, "plus_input": [[["red", "green", "blue"], ["a", "b", "c"]], [["red", "red", "red"], ["a", "a", "a"]], [["red", "blue", "green"], ["a", "b", "c"]], [["red", "green", "blue", "red"], ["a", "b", "c", "a"]], [["red", "red", "blue", "blue"], ["a", "a", "b", "b"]], [["red", "green", "green", "blue"], ["a", "b", "b", "c"]], [["red", "red", "red", "red"], ["a", "a", "a", "a"]], [["red", "red", "green", "blue"], ["a", "a", "b", "c"]], [["red", "green", "green", "green"], ["a", "b", "b", "b"]], [[], ["a", "b", "c"]], [[], []], [["red", "green", "blue", "yellow"], ["a", "b", "b", "c"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "a"]], [["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "green", "blue"], ["a", "b", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "blue", "green"], ["a", "b", "c", "a", "b", "c"]], [["a", "b", "cc", "c", "a"], ["a", "b", "cc", "c", "a"]], [["red", "green", "yellow"], ["a", "b", "c", "a"]], [["b", "c", "a", "b", "c"], ["red", "red", "red", "red", "bluered", "red"]], [["blue", "red", "red", "red", "red"], ["a", "a", "a", "a"]], [["a", "a", "b", "b", "b"], ["a", "a", "b", "b", "b"]], [["blue", "red", "red", "red", "red"], ["ared", "a"]], [["red", "red", "red", "red", "red", "red"], ["a", "b", "ared", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "red", "red", "red"], ["a", "b", "ccc", "a", "b"]], [["red", "green", "bluue", "red", "red", "red"], ["red", "green", "bluue", "red", "red", "red"]], [["red", "red", "red"], ["red", "red", "red"]], [[false, true, false], [false, true, false]], [["red", "green", "blue", "yellow"], ["red", "green", "blue", "yellow"]], [["a", "b", "", "c"], ["a", "b", "", "c"]], [["ared", "a"], ["blue", "red", "red", "red", "red"]], [["blue", "red", "red", "red", "red"], ["blue", "red", "red", "red", "red"]], [["bluered", "red", "yellow", "red", "reyellow", "cc", "red"], ["bluered", "red", "yellow", "red", "reyellow", "cc", "red"]], [["ared", "rred", "green"], ["ared", "rred", "green"]], [[false], [false]], [["red", "green", "green", "green"], ["ccc", "b", "b", "b"]], [["blueccc", "blue", "red", "red", "red", "cc"], ["bluue", "a", "a", "a", "a"]], [["red", "green", "bluue", "red", "red"], ["red", "green", "bluue", "red", "red"]], [["red", "green", "blue", "eblue", "yellow", "blue"], ["red", "green", "blue", "eblue", "yellow", "blue"]], [["blueccc", "blue", "red", "red", "red", "cc"], ["bluue", "a", "a", "a"]], [["a", "a", "b", "bblueccc", "b", "b"], ["a", "a", "b", "bblueccc", "b", "b"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "a", "a"]], [["blue", "red", "red", "red", "red"], ["a", "a", "cc", "a"]], [["blueccc", "ared", "a"], ["blue", "red", "red", "red", "red"]], [[false, true, false, false], [false, true, false, false]], [["belue", "red", "red", "green", "blue", "red"], ["belue", "red", "red", "green", "blue", "red"]], [["red", "greeen", "blue", "red", "red", "red", "red", "red"], ["red", "greeen", "blue", "red", "red", "red", "red", "red"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "a", "a", "aa"]], [["red", "blue", "green"], ["a", "byellow", "c"]], [["red", "green", "green"], ["ccc", "b", "b", "b"]], [["red", "green", "blue", "red", "blue", "green"], ["b", "c", "a", "b", "c"]], [["blueccc", "blue", "red", "red", "blcccueccc", "red", "cc"], ["blueccc", "blue", "red", "red", "blcccueccc", "red", "cc"]], [["red", "rred", "green", "blue", "yellw", "eblue", "yellow", "blue"], ["red", "rred", "green", "blue", "yellw", "eblue", "yellow", "blue"]], [["gbluered", "yellow", "red", "blue", "green"], ["gbluered", "yellow", "red", "blue", "green"]], [[true, false], [true, false]], [["red", "green", "red"], ["a", "b", "c", "a"]], [["belue", "a"], ["belue", "a"]], [["green", "rred", "yellw", "green"], ["green", "rred", "yellw", "green"]], [["bluaredue", "red", "green", "bluue", "red", "red", "red"], ["bluaredue", "red", "green", "bluue", "red", "red", "red"]], [["bluue", "a", "a", "a"], ["bluue", "a", "a", "a"]], [["a", "bb", "c", "a"], ["a", "bb", "c", "a"]], [["a", "b", "c", "a", "b", "c"], ["a", "b", "c", "a", "b", "c"]], [["red", "greeen", "blue", "red", "red", "red", "red", "red", "greeen"], ["red", "greeen", "blue", "red", "red", "red", "red", "red", "greeen"]], [["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "red", "blueccc"], ["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "red", "blueccc"]], [["a", "red", "b", "rred", "c"], ["a", "red", "b", "rred", "c"]], [["a", "b", "c", "a", "a", "aa"], ["red", "green", "blue", "yellow"]], [["red", "green", "red"], ["a", "b", "c", "a", "a"]], [["ared", "rred", "green", "green"], ["ared", "rred", "green", "green"]], [["red", "blue", "yellow", "red"], ["red", "blue", "yellow", "red"]], [["red", "green", "blue", "bluue", "red", "red", "red"], ["red", "green", "blue", "bluue", "red", "red", "red"]], [["red", "red", "gbegen", "gbeen", "blue"], ["a", "a", "b", "c"]], [["red", "green", "blue", "red", "red", "red", "green", "green"], ["red", "green", "blue", "red", "red", "red", "green", "green"]], [["green", "c", "yellw", "green", "green"], ["green", "c", "yellw", "green", "green"]], [["red", "green", "blue", "bluue", "red", "red"], ["red", "green", "blue", "bluue", "red", "red"]], [["a", "b", "aa", "c", "a"], ["a", "b", "aa", "c", "a"]], [["red", "greeen", "red", "red", "red", "red", "red"], ["red", "greeen", "red", "red", "red", "red", "red"]], [["red", "red", "red", "red", "red", "yellow", "red"], ["red", "red", "red", "red", "red", "yellow", "red"]], [["green", "rred", "yellw"], ["green", "rred", "yellw"]], [["gbluered", "yellow", "belue", "blue", "green"], ["gbluered", "yellow", "belue", "blue", "green"]], [["gbluered", "yellow", "red", "blue", "green", "red"], ["gbluered", "yellow", "red", "blue", "green", "red"]], [["red", "green", "blue", "red", "red", "dred", "red"], ["red", "green", "blue", "red", "red", "dred", "red"]], [["gbluered", "yellow", "byellow", "breyellowyellow", "blue", "green", "red"], ["gbluered", "yellow", "byellow", "breyellowyellow", "blue", "green", "red"]], [["red", "green", "blue", "red", "red", "red"], ["red", "green", "blue", "red", "red", "red"]], [["red", "green", "yellow"], ["red", "green", "yellow"]], [["gbegen", "a", "b", "", "c"], ["gbegen", "a", "b", "", "c"]], [["blue", "red", "red", "blueccc", "cc", "red", "red", "blueccc"], ["blue", "red", "red", "blueccc", "cc", "red", "red", "blueccc"]], [["red", "green", "blue", "yellow"], ["a", "b", "b", "c", "b", "a"]], [["red", "green", "blue", "red", "blue", "green"], ["b", "c", "bb", "a", "b", "c"]], [["green", "blue", "yellow", "green"], ["a", "b", "c", "a", "a"]], [["green", "blue", "bluue", "red", "red", "red"], ["green", "blue", "bluue", "red", "red", "red"]], [["red", "red", "red", "gbegen"], ["a", "a", "a", "a"]], [["red", "red", "rebd", "red", "bluered", "red", "red"], ["red", "red", "rebd", "red", "bluered", "red", "red"]], [["red", "green", "blue", "eblue", "yellw", "yellow", "blue", "blue"], ["red", "green", "blue", "eblue", "yellw", "yellow", "blue", "blue"]], [["aa", "bluue", "a", "a", "a"], ["aa", "bluue", "a", "a", "a"]], [["red", "rred", "green", "blue", "yellw", "eblue", "yelolow", "blue"], ["red", "rred", "green", "blue", "yellw", "eblue", "yelolow", "blue"]], [["a", "b", "", "c", "a", "a", "aa"], ["red", "green", "blue", "yellow"]], [["red", "green", "red", "green", "blue"], ["red", "green", "red", "green", "blue"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "green", "a", "a"]], [["red", "yellow", "red"], ["red", "yellow", "red"]], [["red", "green", "green", "green", "green"], ["red", "green", "green", "green", "green"]], [["green", "rred", "yellw", "breyellowyellow", "green"], ["green", "rred", "yellw", "breyellowyellow", "green"]], [["green", "blue", "yellow", "green"], ["a", "b", "c", "a"]], [["reed", "blue", "red", "red", "red"], ["reed", "blue", "red", "red", "red"]], [["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "blueccc", "red"], ["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "blueccc", "red"]], [["red", "green", "green", "green", "bb"], ["ccc", "b", "b", "b", "ccc"]], [["b", "green", "rred", "yellw", "breyellowyellow", "breyellowyellow", "green"], ["b", "green", "rred", "yellw", "breyellowyellow", "breyellowyellow", "green"]], [["gbluered", "yellow", "bb", "belue", "rebd", "blue", "green", "yellow"], ["gbluered", "yellow", "bb", "belue", "rebd", "blue", "green", "yellow"]], [["red", "greeen", "blue", "red", "red", "reyellowd", "red"], ["red", "greeen", "blue", "red", "red", "reyellowd", "red"]], [["red", "blue", "yellow", "yellow"], ["red", "blue", "yellow", "yellow"]], [["red", "green", "eblue", "blue"], ["a", "b", "b", "c"]], [["red", "green", "gbluered", "blue", "bluue", "gbluered", "red", "red"], ["red", "green", "gbluered", "blue", "bluue", "gbluered", "red", "red"]], [["ared"], ["blue", "red", "red", "red", "red"]], [["red", "red", "red", "red", "red", "red", "red", "red"], ["a", "b", "ared", "c", "a", "b", "c", "a"]], [["red", "red", "red", "red", "red", "red", "red", "rrebded"], ["a", "b", "ared", "c", "a", "b", "c", "a"]], [["a", "b", "abluered", "aa", "c", "aa", "aa"], ["a", "b", "abluered", "aa", "c", "aa", "aa"]], [["a", "", "a", "b", "b"], ["a", "", "a", "b", "b"]], [["gbegen", "a", "b", "c", "c"], ["gbegen", "a", "b", "c", "c"]]], "contract": "\n    assert isinstance(colors, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(patterns, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n"}
{"task_id": "Mbpp/75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n", "entry_point": "find_tuples", "canonical_solution": "\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n", "base_input": [[[[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6], [[[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5], [[[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4]], "atol": 0, "plus_input": [[[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 3], [[], 4], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 11], [[[11, 22, 33, 44, 55], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 11], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 4], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 33], [[], 5], [[[12, 24, 36, 48, 60], [15, 30, 13, 60, 75], [22, 33, 44, 55, 66], [15, 30, 45, 60, 75, 75], [8, 16, 24, 32, 40]], 4], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [4, 8, 12, 16, 20]], 55], [[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 16], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 8], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[], 6], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [9, 18, 27, 36, 45]], 3], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 45], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 45], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 20], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 27], [[[22, 33, 65, 44, 55, 66], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [65, 32, 48, 64], [6, 12, 18]], 27], [[[13, 39, 66, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 11], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 44], [[[12, 24, 36, 59, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 4], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 32], [[[13, 26, 39, 52, 65], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 33], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 12], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18], [11, 12, 24, 36]], 20], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 40], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66, 66], [8, 16, 24, 32, 40]], 40], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 18]], 27], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[12, 24, 36], [5, 15, 20], [18, 9, 27, 27], [32, 48, 64], [6, 12, 18]], 16], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 13], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [18, 9, 27], [6, 18, 6]], 13], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [22, 33, 44, 55, 66]], 40], [[[15, 30, 45, 60, 75], [8, 16, 24, 32, 40, 16], [22, 33, 44, 55, 66], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 44], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [6, 12, 18, 24, 30]], 32], [[[11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 11], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 25, 32, 40], [22, 33, 44, 55, 66]], 40], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [27, 26, 39, 52, 65], [9, 18, 27, 36, 45]], 48], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 8], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55, 44], [11, 22, 33, 44, 55]], 3], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [4, 8, 12, 16, 20], [9, 18, 27, 36, 45]], 55], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 9], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [6, 44, 18, 24, 30], [6, 12, 18, 24, 30]], 32], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 8], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 85], [[[12, 24, 36, 48, 60, 48], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 4], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 27], [48, 64], [18, 9, 27], [6, 18, 6]], 13], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 24], [[], 3], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [11, 12, 24, 33], [18, 9, 27], [48, 64], [6, 18, 6]], 8], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [6, 44, 18, 24, 30], [6, 12, 18, 24, 30]], 55], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 66], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [9, 18, 27, 36, 45]], 85], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 34], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 48], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 41], [[[11, 22, 33, 44, 55], [17, 34, 51, 68, 6, 85, 85], [17, 34, 51, 68, 85, 85], [11, 54, 22, 33, 44, 55], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 52], [[[11, 12, 24, 36], [12, 24, 36], [18, 9, 27], [48, 64], [18, 9, 27], [6, 18, 6]], 40], [[[13, 26, 39, 53, 52, 65], [11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 11], [[[13, 26, 39, 53, 52, 65], [11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 9], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 45], [[[6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [27, 26, 39, 52, 65], [9, 18, 27, 36, 45]], 48], [[], 51], [[[13, 26, 39, 51, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 32], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [9, 18, 27, 36, 45]], 11], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 8], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 28], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [65, 32, 48, 64], [6, 12, 18]], 3], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [6, 12, 18, 24, 30]], 8], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 18, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 12], [[], 34], [[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 20], [[[15, 30, 45, 60, 75], [22, 33, 22, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 65], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [9, 18, 27, 36, 45]], 64], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 48], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [9, 18, 27, 36, 45], [9, 18, 27, 36, 45]], 24], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 41], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [11, 12, 24, 33], [18, 9, 27], [48, 64], [6, 18, 6]], 64], [[[11, 12, 24, 36], [12, 24, 36], [20, 5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 28], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36], [11, 22, 33, 44, 55]], 18], [[[12, 24, 36], [6, 12, 18], [5, 15, 20], [18, 9, 27, 27], [32, 48, 64], [6, 12, 18]], 10], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 15, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 9], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [45, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [44, 8, 16, 10, 32, 40], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 45], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [48], [18, 9, 27], [48, 64], [6, 18, 6]], 8], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66], [8, 16, 24, 32], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66]], 65], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 15, 27, 36, 45], [11, 22, 33, 44, 55]], 2], [[[11, 12, 24, 36], [12, 24, 36], [64], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 13], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [65, 32, 48, 64, 64], [6, 12, 18]], 3], [[[11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 68], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55, 44], [11, 22, 33, 44, 55]], 2], [[[17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 16], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 15, 27, 36, 45]], 2]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for tuple in test_list for item in tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  assert K > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n"}
{"task_id": "Mbpp/77", "prompt": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n", "entry_point": "is_Diff", "canonical_solution": "\ndef is_Diff(n): \n    return n % 11 == 0 \n", "base_input": [[12345], [1212112], [1212]], "atol": 0, "plus_input": [[12345678901234567890], [98765432109876543210], [-1212], [-12345], [-12345678901234567890], [987654321098765432109876543210], [-123456789012345678901234567890], [123456789012345678901234567890], [-987654321098765432109876543210], [9876543210987654321098765432110], [9876543210987654321098765432101], [-9876543210987654321098765432110], [-9876543210987654321098765432101], [-1000], [1001], [0], [-65], [1002], [-12345678901234567889], [true], [-56], [98765432109876543209], [9876543210987654321098765432102], [-64], [-9876543210987654321098765432100], [-12344], [-63], [987654321098765432109876543211], [false], [-999], [98765432109876543211], [-57], [-66], [-55], [-123456789012345678901234567891], [-987654321098765432109876543211], [123456789012345678901234567891], [-67], [-39], [61], [987654321098765432109876543209], [-12343], [987654321098765432109876543208], [-54], [-58], [987654321098765432109876543212], [9876543210987654321098765432103], [-12345678901234567891], [-62], [-9876543210987654321098765432111], [-12345678901234567888], [12345678901234567891], [12345678901234567892], [1], [987654321098765432109876543214], [98765432109876543212], [-9876543210987654321098765432102], [-9876543210987654321098765432099], [81], [987654321098765432109876543213], [9876543210987654321098765432105], [-9876543210987654321098765432112], [123456789012345678901234567889], [9876543210987654321098765432104], [-59], [-61], [-9876543210987654321098765432098], [-1213], [96], [1000], [98765432109876543208], [12345678901234567889], [-123456789012345678901234567892], [-38], [-987654321098765432109876543208], [-123456789012345678901234567893], [-987654321098765432109876543212], [12345678901234567893], [999], [-60], [987654321098765432109876543215], [-40], [-53], [100], [82], [-12346], [80], [-52], [-78], [-123456789012345678901234567889], [-12342], [60], [-68], [9876543210987654321098765432100], [-9876543210987654321098765432113], [-123456789012345678901234567888], [1003], [47], [79], [59], [9876543210987654321098765432108], [36], [37], [9876543210987654321098765432107], [2], [12345678901234567894], [98765432109876543213], [-12347], [-1211], [-88], [1004], [98765432109876543214], [-51], [-998], [-50], [-9876543210987654321098765432109]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n"}
{"task_id": "Mbpp/79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "entry_point": "word_len", "canonical_solution": "\ndef word_len(s): \n    return len(s) % 2 == 1\n", "base_input": [["Hadoop"], ["great"], ["structure"]], "atol": 0, "plus_input": [["a"], ["longstringwithmixture"], ["lonlongstringwithmixturegstringwithmixture"], ["lonlongstringwithmixturegstringwithmixturlongstringwithmixturee"], ["lonlongstringwithmixturegstringwithmxture"], ["longstringwithmiixtiure"], ["lnongstringwithmixture"], ["alongstringwithmiixtiure"], ["lonlongstringwitlongstringwithmiixtiurehmixturegstringwithmxture"], ["lonlongstringwithmixturegstringwithlongstringwithmixturemixture"], ["lonlongstringwitringwithmixture"], ["lnongstringwithmixturea"], ["mlongstringwithmiixtiure"], ["lonlongstrringwithmixturegstringwithlongstringwitnhmixturemixture"], ["longstringwithmiixlonlongstringwithmixturegstringwithmxturetiure"], ["lonlongstringwitringwhithmixture"], ["lonlongstringwithmixturegstringwithmixturlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuree"], ["lonlongstringwithmixlonlongstringwithmixturegstringwithmixtureturegstringwithmixture"], ["lonlongstringwitringwithmixtongtstringwitringwhithmixture"], ["lnongstringwithmixlonlongstringwithmixturegstringwithmxtureturea"], ["lnmlongstringwithmiixtiureongstringwithmixturea"], ["longstringwithmiixlonlongstringwithmixturegstlringwithmxturetiure"], ["TtYAzEr"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithmxture"], ["lnmlongstringwithmiixtiureongstringwithmixturelonlongstringwitringwhithmixturea"], ["longstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiureringwithmiixtiure"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixturemixtureingwithmixturegstrinhmtxture"], ["aa"], ["longastringwithmiixtiure"], ["longastringxwithmiixtiure"], ["liongastringwithmixtiure"], ["lonlongstringwithmixlonlongstrilongstringwithmixturengwithmixturegstringwithmixtureturegstringwithmixture"], ["lnongstriengwithmixturea"], ["longstringwithmiixlonlongstringwithmialongstringwithmiixtiurexturegstringwithmxturetiure"], ["longstringwithmiixlonnlongstringwithmixturegstringwithmxturetiure"], ["alongslongastringwithmiixtiuretringwithmiixtiure"], ["lonlongstringwithmixturegstrinurlongstringwithmixturee"], ["longstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuregstringwithlongstringwithmixturemixturethmxturetiure"], ["lonlongstringwitringwithmixtongtstringwitringwhitthmixture"], ["longstringwithmiixlonlongstringwithmialongstrilnmlongstringwithmiixtiureongstringwithmixtureangwithmiixtiurexturegstringwithmxturetiure"], ["lonlongstrinlonlongstringwithmixturegstringwithmxturegwitringwhithmixture"], ["lonlongstringwitringwithmixlonlongstringwithmixturegstringwithmxtureture"], ["mlongstringwithmiiwxtiure"], ["lionglongastringxwithmiixtiureastringwithmixtiure"], ["lonlongstringwitringwiithmixture"], ["longstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiurerinigwithmiixtiure"], ["mlongstringwwithmiixtiure"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithmxtureingwitnhmixturemixture"], ["lnongstringwithmirea"], ["lonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlongstrringwithmixturegstringwitlonlongstringwitringwithmixlonlongstringwithmixturegstringwithmxtureturegwithmixturee"], ["mxlongstringwithmiixtiure"], ["lonlongstringwithmixturegstringwithmxturlongstringwithmixturee"], ["lnmlongstringwithmiixtiureongstringwithmixtulongstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiurerinigwithmiixtiure"], ["mlongstrintgwwithmiixtiure"], ["lonlongstringwitringwithmixtongtstringwitringwhtithmixture"], ["lonlongstringwithmixturegstringwithmixturlongstlonlongstringwithmixturegstringwithmixturlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiureeringwithmixturelongstringwithmiixlonllonlongstringwitringwiithmixturegstringwithmxturetiuree"], ["lonlongstrhingwithmixlonlongstrilongstringwithmixturengwithmixturegstrhgingwithmixtureturegstringwithmixture"], ["ltiongastringwithmixtiure"], ["liongastringwithmtixtiure"], ["lnongstringwgithlnongstringwithmixtureturegstringwithmxtureturea"], ["lgstringwithmixturee"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixture"], ["alonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlongstrringwithmixturegstringwitlonlongstringwitringwithmixlonlongstringwithmixturegstringwithmxtureturegwithmixtureea"], ["lonlongstrhingwithmixlonlongstrilongstringwithmixturengwithmixturegstrhgingwithmixturture"], ["lonlongstrinlonlongstringwithmixturegstringwithmxturegwitringwhithmlongstringwithmiixlonlongstringwithmixturegstlringwithmxturetiureixture"], ["lnmlongstringwithmiixtiurreonwgstringwithmixturelonlongstringwitringwhithmixturea"], ["lonlongstrlongstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuregstringwithlongstringwithmixturemixturethmxturetiureingwitringwithmixture"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnlongastringxwithmiixtiurehmixturemixtureingwithmixturegstrinhmtxture"], ["lonlongstringwitringwlonlongstrringwithmgwitnhmixturemixturehithmixture"], ["lonlongstringwitritngwithmixture"], ["lnongs"], ["alongslonlongstrlonlongstrrinlonlongstringwithmixturegstringwithmixturlongstringwithmixtureegwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithmxturelongastringwithmiixtiuretringwithmiixtiure"], ["lnongstrilonlongstrringwithmixturegstringwithlongstringwitnhmixturemixturengwithmixlonlongstringwithmixturelonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnlongastringxwithmiixtiurehmixturemixtureingwithmixturegstrinhmtxturegstringwithmxtureturea"], ["longastringxwithmiixtiurliongastringwithmtixtiuree"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiulreonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixture"], ["longstringwithmiixlonlongstringwitlongstringwithmiixtiuremixturegstlringwithmxturetiure"], ["lonlongstringwithmixturegstrinurlongstringwithhmixturee"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixre"], ["ltiongastringwithmixtinure"], ["lonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlthmixturegstringwithmxtureturegwithmixturee"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixtulonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixreremixtureingwithmixturegstrinhmtxture"], ["lonlongstringwitrinthmixtongtstrinigwitringwhtithmixture"], ["longstringwitlongstringwithmiixlonlongstringwithmilonlongstringwitringwithmxturexturegstlringwithmxturetiurehmiixtiure"], ["mxllonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixturemixtustrinhmtxtureongstringwithmiixtiure"], ["lonlongstrlongstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuoregstringwithlongstringwithmixturemixturethmxturetiureingwitringwithmixture"], ["lnmlongstringwithmiixtiureongstringwithmixturealonlongstringwithmixturegstringwithmixturlongstringwithmixturee"], ["longstlongstrsingwithmiixlonlongstringwithmixturegstringwithmxturetiuaare"], ["lgstringwithmlonlongstringwithmixturegstringwithmxtureixturee"], ["alongslonlongstrlonlongstrrinlonlongstringwithmixturegstringwithmixturlongstringwithmixtureegwithmixturegstringwithlongstringwitnhmtixturemixtureingwithmixturegstringwithmxturelongastringwithmiixtiuretringwithmiixtiure"], ["lithmiixtgwithmxturetiure"], ["lnmlongstringwithmiixtiurreonwgstringwithmixturelonlongstringwitlongstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiurerinigwithmiixtiureringwhithmixturlongstringwitlongstlonlongstringwitringwiithmixtureringwithmiixlonlongstringwithmilonlongstringwitringwithmxturexturegstlringwithmxturetiurehmiixtiureea"], ["mxllonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixturemixtustrinhmtxlonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlthmixturegstringwithmxtureturegwithmixtureetureongstringwithmiixtiure"], ["lonlongstrlonlongstrringhwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithure"], ["longstlongstrsingwithmiixlonlongsxtringwithmiithmxturetiuaare"], ["lgstringwithmixtlnongstringwithmireareelnmlongstringwithmiixtiureongstringwithmixturelonlongstringwitringwhithmixturea"], ["lolongastringxwithmiixtiurliongastringwithmtixtiureengstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturelongstringwithmiixlonnlongstringwithmixturegstringwithmxturetiuregstringwithmxturetiuregstringwithlongstringwithmixturemixturethmxturetiure"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiulreonlongstrlonlongstrringwithmixturegstringwlonlongstringwitringwithmixturethmxtureingwitnhmixturemixture"], ["lnmlongstringwithmiimxtiureongstringwithmixturea"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiulreliongastringwithmtixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixture"], ["longstrinithmixture"], ["lgstringwithmixtlnongstringwithmireareelnmlongstringwithmiixtiurheongstringwithmixturelonlongstringwitringwhithmixturea"], ["longasntringxwithmiixtiure"]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isalpha(), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n"}
{"task_id": "Mbpp/80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n", "entry_point": "tetrahedral_number", "canonical_solution": "\ndef tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\n", "base_input": [[5], [6], [7]], "atol": 0, "plus_input": [[10], [11], [true], [false], [12], [13], [9], [14], [8], [15], [16], [73], [17], [7], [74], [75], [76], [29], [78], [18], [77], [19], [72], [28], [30], [6], [55], [56], [5], [3], [2], [57], [79], [4], [20], [31], [1], [71], [84], [54], [95], [85], [53], [39], [58], [80], [70], [59], [52], [32], [40], [38], [83], [82], [26], [60], [61], [62], [37], [33], [86], [81], [66], [41], [36], [96], [27], [35], [87], [69], [88], [97], [68], [65], [21], [34], [64], [94], [89], [67], [42], [98], [100], [22], [99], [90], [91], [43], [101], [0], [92], [63], [25], [23], [44], [51], [93], [24], [102], [50], [45]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\n"}
{"task_id": "Mbpp/82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n", "entry_point": "volume_sphere", "canonical_solution": "\nimport math\ndef volume_sphere(r):\n  return (4./3.) * math.pi * (r**3)\n", "base_input": [[10], [25], [20]], "atol": 0.0001, "plus_input": [[3.5], [1000000.0], [3.141], [10000000000.0], [3.14159265], [4.623802984914555], [3.3559788784471767], [66], [4.869200998343475], [3.8682074878773713], [918660.8851175675], [67], [2.882805679516125], [5.334665111091932], [3.3742973741685773], [1370408.3632012897], [2.1679948447223243], [6.1937397356958686], [68], [2.5343594560319853], [2.3432251842864593], [4.61675941883145], [4.371968506027651], [5.592539737328484], [745764.3921613692], [2.9898806623772485], [1300062.0481719284], [2.5896160698519415], [3.315962725294531], [8.526243131220685], [7.966847190064601], [3.4948208700163326], [3.092435587548573], [980845.2335352049], [2.161534559679202], [6.337453960004688], [918661.1231404628], [1.708581242035472], [6.268623349038191], [4.445885418463103], [69], [1206585.2634025752], [70], [5.253217457458149], [2.574352689612276], [8.876033871274153], [2.217295171366912], [5.148340229570737], [5.7430353597257335], [6.798195121344899], [918660.6321974591], [2.714392744717933], [1206585.7451337874], [4.454238599875553], [4.532844704583202], [2.9221428096017963], [5.9095950914668425], [1354585.0574878817], [1.3593066232553286], [870299.1979522441], [4.589385338378119], [2.111585416266776], [0.9463990934397435], [true], [82.06805292937108], [5.3222759634147385], [3.9025520292716678], [2.1319562379470947], [1206584.7863918154], [4.051515228306216], [2.760921157223623], [745765.2991203185], [980845.1688878584], [2.803507749709366], [1.862378605627123], [1.3300722837430694], [96.33023854016932], [2.9049275477536], [1000000.8406259468], [53], [2.9211190247221785], [8.442873354975713], [6.9904770599923065], [5.394810798758247], [6.555694849044899], [2.591536041748832], [2.121870489897608], [1054792.4194213152], [4.146640167841869], [1.7582778285009857], [3.716476256173695], [4.990472347611788], [9.380605161871557], [7.081577583743362], [3.2232571533460854], [1370408.265351601], [4.789548148841643], [5.40747011739556], [2.2367969243507684], [2.6601406350111847], [4.772435918308454], [1.5596351962154023], [3.150384912225208], [10.09894030966326], [7.0674793300609355]], "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n"}
{"task_id": "Mbpp/83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n", "entry_point": "get_Char", "canonical_solution": "\ndef get_Char(strr):  \n    summ = sum(ord(i) for i in strr)\n    return chr(summ % 26)\n", "base_input": [["abc"], ["gfg"], ["ab"]], "atol": 0, "plus_input": [["This is a complex string to test the function"], [""], ["This iss a complex string to test the function"], ["This is a complex string toT test the function"], ["toT"], ["This is a complecomplexx string toT test the function"], ["iss"], ["Thihe function"], ["This is a complThiheecomplexx string toT ttest the function"], ["complThiheecomplexx"], ["This is a complThiheecomplexx string tT tn"], ["ThiThis is a complThiheecomplexx string tT tn function"], ["This iss a tion"], ["rstrig"], ["This ois a complecomplexx string toT test the function"], ["ois"], ["This is a acomplex string to test the function"], ["This iss a complex string to test the functionThis iss a tion"], ["testThis is a complThiheecomplexx string toT ttest the function"], ["This is a complThiheecomplexx string toT ttest the functiontestThis is a complThiheecomplexx string toT ttest the function"], ["complecomplexx"], ["This is a complThiheecomplexx string tuoT ttest the functiontestThis is a complThiheecomplexx string toT ttest the functioon"], ["functioon"], ["functiontestThis"], ["This is a acomplex strist the function"], ["ThiThis"], ["functiontesitThis"], ["strist"], ["tT"], ["ThiThn function"], ["ThiThis is a complThiheecomplexx string tT tn funcThihetion"], ["TThis is a acomplex strist the functionhiThis"], ["to"], ["funThis is a complThiheecomplexx string toT ttest the functiontestThis is a complThiheecomplexx string toT ttest the functionioon"], ["Thihe"], ["This is a compxx string toT ttest the function"], ["funThis is a cstringomplThiheecomplexx string toT ttest the functiontestThis is a complThiheecomplexx string toT ttest the functionioon"], ["ttT"], ["This is a complecoest the function"], ["tttTT"], ["tion"], ["TThis is a acomplex strist the functionhifunThis is a complThiheecomplexx string toT ttest the functiontestThis is a complThiheecomplexx string toT ttest the functionioonThis"], ["This is ia complThriheecotestThis is a complThiheecomplexx string toT ttest thee functionmplexx string tT tn"], ["This is a complex string to test the ufunction"], ["This iss a complex string to test the functiThis is a complex string to test the ufunctionn"], ["This is a cofunctiThismplThiheeco string tT tn"], ["This ois a functioniiooncomplecomplexx string toT tet the function"], ["This"], ["compxx"], ["ThisfunThis is a cstringomplThiheecomplexx string toT ttest the functiontestThis is a complThiheecomplexx string toT ttest the functionioonThis is a complecoest the function"], ["funtetiontestiThis"], ["TThis is ia acomplex strist the functionhiThis"], ["JzRxlRtyJS"], ["TThis is sa acomplex strist the functionhiThis"], ["TThis is sa acomplex strist the functionhiThs"], ["testThis is a complThiherecomplexx string toT ttest the function"], ["ttThisfunThisT"], ["This is a complex striThiThis is a complThiheecomplexx string tT tn functionng toT test the function"], ["futtTnctioon"], ["This is a complex string toT test the funccomplecomplexxtion"], ["ThiThis his a complThiheecomplexx string tT tn function"], ["ttt"], ["sa"], ["his"], ["flunctionmplexx"], ["functionmplexxThis ois a complecomplt the function"], ["striThiThis"], ["is"], ["ThiThis hifunctioniiooncomeplecomplexxs a complThiheecomplexx string tT tn function"], ["ThiThis his a complThiheecompltetexx string tT tn function"], ["rThiThis his a complThiheecompltetexx string tT tn functionstrig"], ["complThriheecotestThis"], ["Thihethee"], ["tttT"], ["This is a complex stsring to test the fmunction"], ["complecoest"], ["testThis is a complThiherecomplexThihe functionest the function"], ["This is a compplex stsring to test the fmunction"], ["aZCViJxkmh"], ["This is a complThiheecompleTThisxx string toT ttesat the function"], ["t"], ["This ois a complecomplexx string toT test the functionThis ois a functioniiooncomplecomplexx string toT tet the function"], ["functionhiThis"], ["cstringomplThiheecomplexx"], ["ThiThcomplThiheecompltetexxs"], ["JzRxlRtyJ"], ["TThis is sa acomplexTThis is a acomplex strist the functionhiThis strist the functionhiThis"], ["the"], ["asaa"], ["Tis"], ["This is a complex string to test the ufunhction"], ["This is a acomplex strist the functiotn"], ["This is a complTtuoT ttest the functiontestThis is a complThiheecomplexx string toT ttest the functioon"], ["tttThisfunThisTtt"], ["functionmplexxThis"], ["complTtTuoT"], ["complThiheecompleTThisxx"], ["fuinctionhiThi"], ["ssa"], ["acompslexTThis"], ["complompllexx"], ["complThiheecompltetexx"]], "contract": "\n    assert isinstance(strr, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_Char(\"abc\") == chr(8)\nassert get_Char(\"gfg\") == chr(22)\nassert get_Char(\"ab\") == chr(13)\n"}
{"task_id": "Mbpp/84", "prompt": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "entry_point": "sequence", "canonical_solution": "\ndef sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n", "base_input": [[10], [2], [3]], "atol": 0, "plus_input": [[100], [1000], [10000], [1000000], [49284], [76589], [92346], [109872], [92345], [76590], [1001], [10001], [109871], [true], [101], [99], [109873], [76588], [109870], [999999], [999998], [28], [9999], [109874], [49283], [102], [76591], [98], [92344], [29], [999], [109869], [109868], [97], [109867], [49285], [9998], [109866], [88], [49282], [30], [109876], [87], [31], [49280], [92343], [32], [92342], [49281], [103], [76592], [999997], [85], [95], [76587], [25], [86], [89], [104], [96], [27], [109875], [84], [1000001], [9997], [997], [49286], [1002], [105], [11], [9996], [1000002], [92341], [9], [8], [1000003], [76586], [109865], [12], [76585], [26], [996], [33], [49287], [10], [92340], [76593], [92347], [76584], [7], [92348], [34], [92339], [106], [6], [76594], [109864], [92338], [998], [49288], [76595], [92337], [76583], [13], [83], [1004], [23], [82]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n"}
{"task_id": "Mbpp/85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n", "entry_point": "surfacearea_sphere", "canonical_solution": "\nimport math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * (r**2)\n", "base_input": [[10], [15], [20]], "atol": 0.0001, "plus_input": [[0.5], [1000], [1.25], [1e-10], [10000000000.0], [true], [0.8797935814628997], [0.5598154120615232], [1.099652034619149], [1.4666806892181193e-10], [0.30075595752911943], [0.14131211326255033], [1.5957056333538597], [2.8446633646372703], [1.0135226864402946], [999], [0.4652485633326504], [1.6160933440485161], [1.2395141071553297], [1001], [1.371623122065585], [6.016010239335242e-11], [0.3416547044021554], [1.4012158763654516], [0.2151302194789502], [0.9610743975015349], [1.2824168057024987], [1.2350343793427891], [1.741473062111801], [0.8328344786121058], [1.183605703278993], [0.3611170633175245], [0.7555326580733448], [97.62730112830147], [0.2732793706097826], [0.7951715096838966], [1.5501230356650713], [0.6842351453078037], [1.0317072568457641], [1.8059908182330324], [0.5075339315400214], [0.7681946087260797], [2.0852972065009174], [1.2988601893200238], [0.603044867219653], [1.4026942852103004], [0.523212033970379], [1.4597394961162697], [0.35775373645335146], [2.0479628632355526e-10], [35], [78], [0.6507313974062889], [4.365800974062854], [1.8456085367711623], [5.158707823383085], [79], [98.55913813353447], [1.4247236940537644], [1.9675371646406168], [0.9005697011096585], [1.8552473563367964], [2.012892104151268], [0.3631985979165624], [1.4033799197683636], [0.9268500963761888], [0.316208014117482], [1.2705215198025646e-10], [1002], [2.2262142172391357], [1.0831631055569682], [0.345186802549617], [0.4137398550418435], [0.5767615986315501], [2.07943497754721], [0.48838279998965645], [0.3271784231301367], [0.623788870153854], [0.5543692007776275], [9.149067620466951], [2.3096767309847452], [1.5560367329991556], [0.3202451092926611], [1.8404062689910736], [0.5726009377678422], [0.8357084454950721], [0.4686710492184495], [1.1902208721405216], [0.9609380264864483], [9857375230.431854], [1.6292570499973758], [0.776765114340302], [0.2810143961710297], [0.6386231930163654], [0.7825150182275014], [0.8887021798812079], [0.2705076454130074], [0.7063890179953193], [0.9919682715828331], [0.18724175315316485], [0.47251742847046363], [0.34091721710471784], [0.48848524318350334], [60.94952675176301], [0.34974511524935736]], "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n"}
{"task_id": "Mbpp/86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n", "entry_point": "centered_hexagonal_number", "canonical_solution": "\ndef centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\n", "base_input": [[10], [2], [9]], "atol": 0, "plus_input": [[1000000], [true], [1000001], [1000002], [999999], [79], [999998], [999997], [80], [1000003], [81], [78], [82], [999996], [77], [84], [83], [999995], [85], [999994], [76], [999993], [86], [75], [1000004], [74], [88], [93], [94], [92], [999992], [87], [999991], [91], [999989], [89], [999987], [90], [97], [52], [96], [53], [95], [999990], [1000005], [999986], [98], [999985], [51], [999984], [54], [50], [999982], [999988], [73], [999981], [49], [99], [38], [48], [37], [20], [21], [36], [72], [35], [55], [999983], [100], [70], [71], [1000006], [33], [19], [31], [32], [22], [30], [23], [101], [18], [24], [34], [56], [47], [102], [17], [29], [57], [69], [39], [103], [40], [58], [999980], [15], [104], [16], [28], [105], [27]], "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n"}
{"task_id": "Mbpp/87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n", "entry_point": "merge_dictionaries_three", "canonical_solution": "\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n", "base_input": [[{"R": "Red", "P": "Pink"}, {"G": "Green"}, {"O": "Orange", "W": "White", "B": "Black"}], [{"R": "Red", "P": "Pink"}, {"G": "Green", "W": "White"}, {"L": "lavender", "B": "Blue"}], [{"R": "Red", "P": "Pink"}, {"L": "lavender", "B": "Blue"}, {"G": "Green", "W": "White"}]], "atol": 0, "plus_input": [[{}, {}, {}], [{}, {"A": "Apple"}, {}], [{"A": "Apple"}, {}, {}], [{}, {}, {"A": "Apple"}], [{"A": {"B": {"C": {"D": "Apple"}}}}, {}, {}], [{"R": {"B": {"P": {"M": "Red"}}}}, {"L": {"B": "Blue"}}, {"G": {"W": "Green"}}], [{}, {"A": {"X": {"Y": {"Z": "Apple"}}}}, {}], [{"R": {"B": {"P": {"M": "Red"}}}}, {"G": {"W": "White"}}, {"L": {"B": "Blue"}}], [{"-20.518312632449252": -16, "-0.31776260008138024": 65}, {}, {}], [{"A": {"B": {"C": {"D": "Apple"}}}}, {"B": "yS", "bXTSGefP": "zqKImWxAN"}, {}], [{}, {"-59": -20.518312632449252, "65": -16}, {}], [{}, {"A": "C", "W": "Appple"}, {}], [{}, {"-59": -20.518312632449252, "65": -16}, {"-73.06068215185819": 37, "-20.518312632449252": -49, "-50.80098800326578": -49}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": ""}, {}, {}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": ""}, {}, {"-34": true, "-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true}], [{}, {"W": "bXTSGefP"}, {}], [{}, {"A": {}, "MA": {}, "AMA": {"HzgYlcGpOG": "White", "ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MAA": {"HzgYlcGpOG": "White", "ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}, {}], [{}, {"-59": -20.518312632449252}, {}], [{"R": {"B": {"P": {"M": "Red", "DM": "R"}}, "": {"P": {"M": "Red", "DM": "R"}}}}, {}, {"G": {"W": "White", "WW": "WHzgYlcGpOGhite"}, "GG": {"W": "White", "WW": "WHzgYlcGpOGhite"}}], [{}, {}, {"-17": false, "98": true, "-49": false, "35": true}], [{}, {}, {"-17": false, "98": true, "-49": false, "35": true}], [{"A": {"B": {"C": {"D": "Appe"}}, "Red": {"C": {"D": "Appe"}}}}, {"B": "yS", "bXTSGefP": "zqKImWxAN"}, {}], [{}, {"false": "IANrUc", "-55": "", "-16": "BdGTYTf", "-47": "b", "87": "HTv", "81": "Green", "-59": "yS", "65": "AYC"}, {"A": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}, "P": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}}], [{}, {}, {"-73.06068215185819": 37, "-20.518312632449252": -49, "-50.80098800326578": -49}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": "", "-20.518312632449252": "ngwPYYPUsW"}, {}, {"-34": true, "-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true, "58": -16}], [{}, {}, {"-20.518312632449252": -16, "-0.31776260008138024": 65}], [{}, {"-59": -50.80098800326578}, {"-56": -95, "27": true}], [{}, {"R": {}, "RR": {}}, {"G": {"W": "White"}}], [{"ayuEVhTX": "C", "apglGpJ": "klLihKVK", "P": "Awnq", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto"}, {}, {"-17": false, "98": false, "-49": false, "35": false}], [{}, {}, {"-17": false, "-49": true, "35": false}], [{}, {"-50.80098800326578": -37.99257891277086, "-24.325512454128287": 70.78935461953051, "-0.31776260008138024": -50.80098800326578, "-50.392470117934096": -20.518312632449252}, {}], [{"35": -59}, {"R": {"B": {"P": {"M": "Red", "lCjSZS": "RRed"}}}, "Red": {"B": {"P": {"M": "Red", "lCjSZS": "RRed"}}}}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 12, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807}, {"IWhN": "V"}], [{"37": false}, {}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": false}], [{"A": "Apple"}, {"btabmgZJMp": "bkk"}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807}, {"IWhN": "V"}], [{}, {"-59": -20.518312632449252}, {"BlueB": "B", "GyqTxRqw": "IWhN", "apglGpJ": "TkzQdZezp"}], [{"R": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}, "": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}}, {}, {"G": {"W": "White", "WW": "WHzgYlcGpOGhite"}, "GG": {"W": "White", "WW": "WHzgYlcGpOGhite"}}], [{}, {}, {"-50.80098800326578": -37.99257891277086, "-24.325512454128287": 70.78935461953051, "-0.31776260008138024": -50.80098800326578, "-50.392470117934096": -20.518312632449252, "-73.06068215185819": 42.54365262109431, "-24.096762660953626": 71.37539857958085, "-23.830002499577663": -19.83610846406233}], [{"R": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}, "": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}}, {}, {"G": {"W": "White", "WW": "WHzgYlcGpOGhite"}}], [{"37": false}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": false}], [{"-59": -20.518312632449252}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {}], [{}, {}, {"A": {}, "MA": {"-61.83059892834244": -21.3703814092123, "-74.60156534154282": 64.10081127712078, "17.73931516433271": -67.57915780584574}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}], [{"37": false}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": true}], [{}, {"W": "bXTSGefP", "OvdlVN": "bXTSefP"}, {}], [{"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq", "-53.805001572422206": "VyMQgZV"}, {}, {"-17": false, "-49": false, "35": true}], [{}, {}, {"-17": false, "35": false}], [{"-59": -20.518312632449252, "65": -16}, {}, {}], [{}, {"-59": -50.80098800326578}, {}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "P": "Awnq", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto"}], [{"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}, {}, {"-17": false, "-49": false, "35": true}], [{}, {}, {"-34": true, "-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true, "58": -16, "35": -73.71456655267669}], [{}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283, "-53.805001572422206": 23.72761067835703}, {"37": false}], [{}, {"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}, {"-17": true, "35": true, "-50": false}], [{}, {}, {"A": {}, "MA": {"-61.83059892834244": -21.3703814092123, "-74.60156534154282": 64.10081127712078}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}], [{"-59": -20.518312632449252, "65": -16, "-17": -89.55492254635429}, {}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807}, {"IWhN": "V", "IWGhN": "lCjSZS"}], [{}, {}, {"-17": true, "35": false, "36": true}], [{"-22.979929602255183": false, "-53.805001572422206": true, "-91.20082277315413": false, "-24.325512454128287": false, "-96.49581018651745": true}, {"-59": -20.518312632449252, "65": -16}, {"98": "lCjSZS", "-61": "BdGTYTf", "-83": "IITWMS", "99": "cU", "-55": "bkk", "-80": "Red", "-16": "Xhr"}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807, "-72.6127463653807": false}, {"IWhN": "V"}], [{}, {}, {"-17": false, "98": false, "-49": false, "35": true}], [{}, {"false": "IANrUc", "-55": "", "-16": "BdGTYTf", "87": "HTv", "81": "Green", "-59": "yS", "65": "AYC"}, {"A": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}, "P": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}}], [{"-26.51617320630959": 70.78935461953051, "-81.67842976641": -30.321108218462143, "46.636170318669855": -96.49581018651745, "27.84449804744338": 42.54365262109431, "-63.86477732020253": -50.80098800326578, "-87.04295405175097": -42.95773384196735, "92.7915796198375": 17.73931516433271, "56.10336306263682": 54.480351980114875, "-30.818290306420366": -19.83610846406233, "-31.734037590181316": -91.20082277315413}, {}, {"-17": false, "98": false, "-49": false, "35": true, "36": false}], [{}, {"A": "C", "W": "klLihKVK"}, {}], [{}, {"D": 97, "MAA": 56}, {"IWhN": ""}], [{}, {"-17": false, "-49": false, "35": true}, {"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}], [{}, {}, {"G": {}}], [{}, {"-22.979929602255183": false, "-53.805001572422206": true, "-91.20082277315413": false, "-24.325512454128287": false, "-96.49581018651745": true}, {"-61": "BdGTYTf", "-83": "IITWMS", "99": "cU", "-55": "bkk", "-80": "Red", "-16": "Xhr"}], [{}, {}, {"-17": true, "35": true, "51": true}], [{}, {}, {"-0.31776260008138024": 65}], [{}, {"-20.518312632449252": -16}, {}], [{}, {}, {"-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true, "58": -16, "35": -73.71456655267669}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": ""}, {"-3.700287742454634": -42.95773384196735, "23.72761067835703": 66.12204806310575, "46.636170318669855": -63.86477732020253, "10.719925945826475": 92.7915796198375, "-42.95773384196735": 92.50540451758502}, {}], [{"-3.700287742454634": -42.95773384196735, "23.72761067835703": 66.12204806310575, "46.636170318669855": -63.86477732020253, "10.719925945826475": 92.7915796198375, "-42.95773384196735": 92.50540451758502}, {}, {}], [{}, {}, {"A": {}, "MA": {"-61.83059892834244": -21.3703814092123}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW", "D": "Z", "ZfhiHxllwkwwH": ""}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW", "D": "Z", "ZfhiHxllwkwwH": ""}}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": "NubHsqVl"}, {"-3.700287742454634": -42.95773384196735, "23.72761067835703": 66.12204806310575, "46.636170318669855": -63.86477732020253, "10.719925945826475": 92.7915796198375, "-42.95773384196735": 92.50540451758502}, {}], [{}, {"-26.51617320630959": 70.78935461953051, "-81.67842976641": -30.321108218462143, "46.636170318669855": 56.10336306263682, "27.84449804744338": 42.54365262109431, "-63.86477732020253": -50.80098800326578, "-87.04295405175097": -42.95773384196735, "92.7915796198375": 17.73931516433271, "56.10336306263682": 54.480351980114875, "-30.818290306420366": -19.83610846406233, "-31.734037590181316": -91.20082277315413}, {"-17": true, "-49": false, "35": true, "36": false}], [{}, {}, {"A": {"92.50540451758502": false, "-74.60156534154282": false, "27.84449804744338": false, "-42.29433098762265": true, "48.24737545722277": false}, "MA": {"-61.83059892834244": -21.3703814092123, "-74.60156534154282": 64.10081127712078, "17.73931516433271": -67.57915780584574}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto", "ngPYYUsW": "AYC", "ngPYYUW": "CjqqZMMyY"}], [{}, {"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}, {"35": true, "-50": false}], [{"R": {"B": {"P": {"M": "Red"}}}}, {}, {"G": {"W": "Green"}}], [{}, {"-59": -20.518312632449252, "-58": -21.336793526122136}, {}], [{"-59": -23.830002499577663, "-68": -0.31776260008138024}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {}], [{"R": {"B": {"P": {"M": "klLihngwPYYUsWKVK"}, "MAAP": {"M": "klLihngwPYYUsWKVK"}}}, "BlueB": {"B": {"P": {"M": "klLihngwPYYUsWKVK"}, "MAAP": {"M": "klLihngwPYYUsWKVK"}}}}, {"G": {"W": "White"}}, {"L": {"B": "Blue"}}], [{"37": false}, {"-24.325512454128287": -63.86477732020253, "-20.518312632449252": 37.726530699576074, "-48.80497257880159": -0.31776260008138024, "86.95668320734566": -24.325512454128287, "18.83911988396234": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": true, "Z": true, "Red": false, "Y": false, "White": false}], [{}, {}, {"-17": true, "-49": false, "35": true, "36": false, "-16": false}], [{"37": false}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": true}], [{}, {}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}], [{}, {"bKIhM": -67, "bKI": 99}, {"HKpALgf": "HVI", "DVeAQTRIZV": "sjrFOEki"}], [{}, {"jqhlQTZUP": false, "cPCszApk": false, "YSRdUU": false, "DVeAQTRIZV": true, "ngPYYUW": false, "x": false, "zqKImWxAN": false, "HTv": false}, {"-17": false, "98": true, "-49": false, "35": true}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto", "ngPYYUsW": "AYC", "ngPYYUW": "CjqqZMMyY", "RRed": "klLibtabmgZJMphngwPYYUsWKVK"}], [{}, {}, {"17.73931516433271": "jqhlQTZUPoxcd", "42.54365262109431": 23.795747795363283, "-54.08169240148757": -91.20082277315413}], [{}, {"false": "IANrUc", "-55": "", "-16": "BdGTYTf", "-47": "b", "87": "HTv", "81": "Green", "-59": "yS", "65": "AYC"}, {"P": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}}], [{"MAAP": "wSiRX", "pasZZ": "HVI", "MAA": "IANrUc", "White": "FP", "klLihKVK": "sbejlq"}, {}, {}], [{}, {}, {"bKIhM": -67, "bKI": 99}], [{"R": {"B": {"P": {"M": "ngPYYUsW"}}}}, {}, {}], [{}, {"D": -79, "fhesfV": 12, "x": 39, "MAA": 98, "mSkrz": -2, "hbbqUT": 43, "bKI": 99}, {"35": -59}], [{}, {"35": -59}, {"D": -79, "fhesfV": 12, "x": 39, "MAA": 98, "mSkrz": -2, "bKI": 99}], [{}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": true, "Z": true, "Red": false, "Y": false, "White": false}, {"-24.325512454128287": -63.86477732020253, "-20.518312632449252": 37.726530699576074, "-48.80497257880159": -0.31776260008138024, "86.95668320734566": -24.325512454128287, "18.83911988396234": 23.795747795363283}], [{"61.34541925801071": 80, "-53.19664788882594": -47, "-57.0298375483274": 51, "-40.8169187894486": -80}, {"A": {"B": {"C": {"D": "Apple"}}}}, {}], [{}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807, "-72.6127463653807": false}, {"IWhN": "V"}], [{}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {"-36": 54.45723754406529, "20": -80.33591878282283, "35": -26.51617320630959, "50": -61.05878653629404, "96": 92.7915796198375, "-68": -16.90079965432814, "74": -25.688963057095627}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto", "ngPYYUsW": "AYC", "ngPYYUW": "CjqqZMMyY", "Appple": "ORPBKquP"}], [{}, {"-20.518312632449252": -17, "-0.31776260008138024": 65, "-20.71434154199882": -67}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": false, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807, "-72.6127463653807": false}, {"IWhN": "V"}], [{}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {"-36": 54.45723754406529, "20": -80.33591878282283, "35": -26.51617320630959, "50": -61.05878653629404, "96": 92.7915796198375, "-68": -16.90079965432814, "74": -25.688963057095627, "39": -42.95773384196735}], [{}, {"-59": -20.518312632449252}, {"BlueB": "B", "GyqTxRqw": "IWhN"}], [{}, {"G": {}}, {}]], "contract": "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict2, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict3, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n"}
{"task_id": "Mbpp/88", "prompt": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n", "entry_point": "freq_count", "canonical_solution": "\nimport collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\n", "base_input": [[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]], [[5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]]], "atol": 0, "plus_input": [[[]], [[1, 1, 1, 1, 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b"]], [[1, "a", 2, "b", 1, "aa", "a", 3, 2, "b", 1, 3, "a", "b", 1]], [[2, 60, 1, 1, -18]], [[1, 1, 1, 1]], [[1, 1, 1, -18, 1]], [[2, 60, 60, 1, 1, -18]], [[1, "a", 2, "baa", 1, "a", 3, 2, "b", 1, 3, "a", "b"]], [[1, 1, 1, -18, 1, 1]], [[1, 1, 2, 1, 1, 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a"]], [[60, 1, 1, 1, -18, 1, 1]], [[1, 2, 1, 1, 1, 1]], [[2, 60, 1, 1, -18, 1]], [[60, 1, 1, 60, 1, -18, 1, 1]], [[1, 2, 1, 1, 1]], [[1, "a", 2, "b", 1, 3, 2, "b", 3, "a", "b", "a"]], [[1, "a", 2, "baa", 1, "a", 3, 2, "b", 1, 3, "a"]], [[1, 1, 1, 1, 1, 1]], [[1, "a", 2, "b", 1, 3, 2, "b", 3, "a", "b", "a", 1, 3]], [[2, 60, 60, 1, -18]], [[1, "a", 2, "b", 2, 1, 3, 2, "b", 3, "a", "b", "a"]], [[1, "a", 2, "b", 1, 3, 2, "b", 3, "aa", "b", "a", 1, 3]], [[2, "b", 1, "a", 3, 2, "b", 1, 3, "a", ""]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, 3, "a"]], [["a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a"]], [[1, 0, 2, 1, 1, 1]], [[60, 1, 1, 0, -18, 1, 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a", 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", 2, "a", 1, 2]], [[3, "b", 1, "a", 3, 2, 1, 3, "a", ""]], [[1, 1, 1, 1, 2]], [[60, 1, 1, 1, -18, 1, 1, 1]], [[60, 2, 60, 1, 1, -18, 2]], [[1, "a", 2, "baa", 1, "a", 3, 2, 1, 3, "a"]], [[1, "a", 2, "b", 2, 1, 3, 2, 3, "a", "b", "a"]], [[1, "a", 2, "b", 2, 1, 2, "b", 3, "a", "b", "a"]], [[1, "a", "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, 3, "a", "a"]], [[60, 1, 1, 1, -18, 1]], [[60, 1, 1, 60, 1, -18, 1, 60, 1]], [[1, 2, 1, -18, 1, 1, 1]], [[1, 2, 1, 0, 1]], [[3, "bb", 1, "a", 3, 2, 1, 1, 3, "a", ""]], [[1, 1, 1, -18, 1, 1, 1]], [[1, 2, 1, 1, 60, 2]], [[2, 60, 60, 1, -18, 60]], [[60, 0, 1, 60, 1, -18, 1, 1, 1]], [[1, 1, -1, 2, 1, 0, 1, 1]], [[60, 0, 1, 60, 1, -18, 1, 1, 1, 1, 1, 60]], [[1, "a", "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, "a", 3, "a", "a"]], [[1, 1, 1]], [[1, "a", 2, "b", 60, 1, 2, "b", 3, "a", "b", "a"]], [[60, 1, 1, 1, 0, -18, 1, 1]], [[1, "a", 2, "b", 1, "aa", 3, 2, "b", 1, 3, "a", "b", 1]], [[60, 1, 1, 60, 1, -18, -18, 61, 60, 1]], [[1, "a", 2, "b", 2, 1, 2, "b", 3, "a", "", "a"]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, 1, 3, "a", 1]], [["a", 2, 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a"]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, 1, 3, "aa", "a", 1, 3]], [[60, 1, 1, 60, 1, -18, 61, 60, 1]], [[1, "a", 2, "b", 1, 3, 2, "b", "aa", "b", "a", 1, 3]], [[1, "a", 2, 1, "a", 60, 3, 2, 1, 3, "aa", "a", 1, 3, 1]], [[1, 2, 1, -18, 1, 0, 3]], [[1, 2, 1, 2]], [[60, 1, 1, 1, -18, 1, 1, 1, 1]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, 1, "aa", "a", 1, 3, 3, "aa"]], [[60, 0, 1, 60, 1, -18, 1, 1, 1, 1, 1, 60, -18]], [[1, 1, 1, 1, 0, 0, -1]], [[1, "a", 2, "b", 1, 3, 2, "b", "aa", "b", "a", 1, 1, 3, "a", "a"]], [[1, 60, 1, 1, 1, 1]], [[1, "a", 2, "b", 1, "baa", "a", 3, 2, "b", 1, 3, "a", "b", 1]], [[1, "a", "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, "a", "a", "a"]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, "aa", "a", 1, 3, 3, "aa"]], [[1, 1, 1, 0, 1]], [[2, 1, "a", 3, 2, "b", 1, 3, "a"]], [[1, 1, -18, 1, -18, 1, 1, 1]], [["a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "", 2, "a", 2]], [[1, 1, 60, 1, -18, 0, 1, 1]], [[1, 1]], [[1, "baa", 2, "b", 2, 1, 3, 2, 3, "a", "b", "a"]], [[2, 60, 1, -18]], [[1, "a", 2, "b", 60, 2, 2, "b", 3, "a", "b", "a"]], [[1, 2, "baa", 1, "a", 3, 2, "b", 1, 3, "a"]], [[-1, 1, 0, 1, 1]], [[1, "a", 2, "b", 1, "aa", "a", 3, 2, "b", 1, "a", "b", 1]], [[1, "a", 2, "baa", 1, "a", 60, 3, 60, 2, -18, 1, 3, "aa", "a", 3]], [[0, 2, 1, 1, 1]], [[60, 1, 1, 1, -18, 1, 1, 60, 60]], [[60, 1, 1, 60, 60, -18, 61, 1]], [[1, "a", 2, "baa", 1, "a", "bba", 60, 3, 2, "b", 1, 3, "a", "a"]], [[1, "a", 2, "b", 0, 3, 2, "b", "aa", "b", "a", 1, 3]], [[1, 2, 1, 1, 1, 1, 1]], [["a", 2, 3, "baa", 1, "a", 60, 3, 2, 1, 3, "aa", "a", 1, 3]], [[60, 1, 1, 1, -18, 1, 1, 1, 60]], [[0, 2, 1, -18, 1, 0, 3, 3, 3]], [[1, -18, 1, 1, 1, 1, 1, -18]], [[1, 60, 1, -18, 1, 1, 1]], [[60, 1, 60, 1, 1, 1, 1]], [[1, "a", 2, "b", 2, 1, 4, 2, 3, "a", "b", "a"]], [["a", 2, 3, "baa", 1, "a", 60, 3, "aabaa", 1, 3, "aa", "a", 1, 3]], [[60, 1, 1, -18, 1, 1]], [[1, -18, -18, 1, 1, 1, 1, 1, -18]]], "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n"}
{"task_id": "Mbpp/89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n", "entry_point": "closest_num", "canonical_solution": "\ndef closest_num(N):\n  return (N - 1)\n", "base_input": [[11], [7], [12]], "atol": 0, "plus_input": [[-5], [0], [true], [false], [-4], [-3], [-1], [-39], [-37], [-36], [-35], [-38], [47], [-20], [46], [-34], [45], [-40], [-33], [-21], [88], [89], [-2], [1], [2], [-59], [-41], [-32], [-58], [-31], [-6], [-42], [-60], [-7], [3], [-53], [4], [72], [-19], [-43], [5], [-52], [44], [52], [-51], [-54], [43], [-55], [55], [42], [-28], [-95], [-22], [-96], [-50], [73], [-97], [90], [-94], [53], [-49], [-23], [-98], [54], [6], [-29], [-30], [41], [91], [56], [63], [-56], [60], [-8], [-68], [48], [87], [86], [-27], [92], [51], [-24], [61], [-44], [-69], [84], [-70], [40], [-61], [-18], [-9], [39], [-93], [62], [64], [-62], [59], [-26], [-99], [-45], [-92], [-10]], "contract": "\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n"}
{"task_id": "Mbpp/90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n", "entry_point": "len_log", "canonical_solution": "\ndef len_log(list1):\n    return max(len(x) for x in list1)\n", "base_input": [[["python", "PHP", "bigdata"]], [["a", "ab", "abc"]], [["small", "big", "tall"]]], "atol": 0, "plus_input": [[["Longest", "word", "length"]], [["This", "is", "a", "complex", "example", "to", "test", "the", "function"]], [["elephant", "fox", "monkey", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["fox", "monkey", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["elephant", "fox", "monkey", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["fox", "Longest", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["fox", "monkey", "zebra", "lion", "This", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "monkey"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["elephant", "fox", "monkey", "zebra", "tiger", "giraffe", "p", "kangaroo", "bear", "panda", "hippopotamus"]], [["i", "This", "is", "a", "complex", "example", "to", "test", "the", "ttoo", "function"]], [["elephant", "fox", "monkey", "zebra", "lion", "tiger", "gireaffe", "kangaroo", "panda", "hippopotamus"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "tiger"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangamonkeyroo", "bear", "panda", "hippopotamus", "tiger"]], [["fox", "monkey", "zebra", "tiger", "giraffe", "p", "kangaroo", "bear", "panda", "hippopotamus"]], [["This", "is", "a", "complex", "example", "to", "test", "the", "function", "a"]], [["Longest", "length"]], [["fox", "Longest", "zebra", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["fox", "monkey", "zebra", "tiger", "giraffe", "", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus"]], [["fox", "Longest", "zebra", "pandaa", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["Longest", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["Longest", "length", "Longest"]], [["fox", "monkey", "zebra", "tiger", "giraffe", "", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus", "giraffe"]], [["elephant", "fox", "monkey", "function", "zebra", "lion", "tiger", "gireaffe", "kangaroo", "panda", "hippopotamus"]], [["length", "LongestThis", "Longest"]], [["elephant", "fox", "monkey", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["This", "is", "", "a", "complex", "example", "to", "test", "the", "function", "the"]], [["This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a"]], [["This", "is", "a", "complex", "example", "to", "test", "the", "function", "a", "a"]], [["elephant", "fox", "teiger", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["elephant", "fox", "monkey", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["elephant", "fx", "monkey", "zebra", "lion", "tiger", "giraffe", "giraff", "kangaroo", "bear", "panda", "hippopotamus"]], [["elephant", "fox", "zebra", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["This", "is", "a", "complex", "example", "is", "test", "the", "function", "a", "a"]], [["This", "is", "", "a", "complex", "example", "to", "test", "the"]], [["fox", "monkey", "zebra", "lion", "tigttooer", "giraffe", "kangaroo", "bear", "hippopotamus"]], [["Longest", "word", "length", "Longest"]], [["This", "a", "complex", "example", "to", "test", "thte", "function", "a", "a"]], [["monkey", "zebra", "tiger", "giraffe", "", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus"]], [["Longest", "Lonngest", "length", "Longest"]], [["leth", "LongestThis", "Longest"]], [["fnunction", "This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a"]], [["elephant", "fox", "monkey", "LongestThis", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "tiger"]], [["This", "is", "elephant", "complex", "example", "is", "test", "the", "function", "a", "a"]], [["fox", "monkey", "zebra", "lion", "This", "giraffe", "kangaroo", "bear", "panda", "giraffbeare", "hippopotamus", "monkey"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "hippopotamus", "tiger"]], [["This", "a", "complex", "giraffbeare", "to", "test", "thte", "function", "a", "a"]], [["Longest", "word", "Lonpgest", "length", "Longest", "Longest"]], [["Longest", "word", "length", "word"]], [["This", "is", "a", "complex", "example", "to", "test", "function", "a", "a"]], [["This", "is", "a", "complex", "example", "to", "test", "oto", "function", "a", "a", "is"]], [["Longest"]], [["fox", "monkey", "zebra", "lion", "giraffe", "kangaroo", "bear", "hippopotamus"]], [["leth", "LongestThis", "leelephantth", "Longest"]], [["Lot", "word", "length", "word"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "kangaroo", "bear", "hippopotamus"]], [["elephant", "fx", "monkey", "zebra", "foelephantx", "lion", "tiger", "giraffe", "giraff", "kangaroo", "bear", "panda", "hippopotamus"]], [["This", "a", "example", "to", "test", "thte", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "test", "thte", "function", "a", "a"]], [["is", "a", "complex", "example", "to", "test", "the", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thte", "function", "a", "a"]], [["Longest", "word", "length", "Longest", "Longest"]], [["Lonpgest", "monkey", "", "length", "length"]], [["lgth", "Longest", "length", "Longest", "length"]], [["elephant", "fox", "monkey", "zebra", "zebralengthn", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "tiger", "elephant"]], [["is", "a", "complex", "word", "to", "test", "the", "function", "a", "a"]], [["This", "TThis", "is", "a", "t", "complex", "example", "to", "test", "the", "function", "the"]], [["LLot", "word", "length", "word", "word"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "bear", "hippopotamus"]], [["is", "a", "complex", "", "example", "to", "test", "the", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thtte", "function", "", "a"]], [["Longest", "lion", "tigerLongest", "giraffe", "bbr", "kangaroo", "bbear", "bear", "hippopotamus"]], [["Longest", "word", "length", "Longest", "Longest", "word", "Longest"]], [["Lot", "fox", "monkey", "zebra", "zera", "giraffe", "hiippopotamus", "kangaroo", "bear", "hippopotamus"]], [["This", "is", "elephant", "example", "is", "test", "the", "function", "a", "a"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "bearr", "hippopotamus", "fnunction"]], [["LLot", "word", "length", "word", "panda"]], [["fox", "LongestThis", "Longsest", "example"]], [["elephant", "giraff", "monkey", "lion", "tiger", "mlengthonkey", "giraffe", "kangaroo", "bear", "panda", "pada", "hippopotamus"]], [["elephant", "fox", "zebra", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["This", "a", "complex", "the", "to", "apandaa", "length", "test", "thtte", "function", "", "a"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "kangaroo", "bear", "hippopotamus", "fnunction"]], [["Longetst", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["a", "complex", "giraffbeare", "to", "test", "thte", "function", "a", "a"]], [["zera", "Lot", "word", "length", "word", "zera"]], [["oto", "This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "fnuncction", "bear", "hippopotamus"]], [["oto", "This", "a", "complex", "example", "aa", "to", "aa", "function", "a"]], [["This", "is", "elephant", "example", "is", "test", "the", "function", "elephant", "a"]], [["lgth", "Longest", "length", "Longest", "length", "Longest"]], [["elephant", "fox", "monkey", "LongestThis", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "kangamonkeyroo"]], [["oto", "This", "is", "a", "complex", "exampl", "to", "the", "aa", "function", "hthe", "a"]], [["fox", "p", "zebra", "tiger", "giraffe", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus", "giraffe"]], [["elephant", "fox", "monkey", "LongestThis", "zebran", "tiger", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "kangamonkeyroo", "monkey"]], [["fox", "Longest", "zebra", "lion", "tiger", "girafffoelephantx", "kangaroo", "bear", "panda", "hippopotamus"]], [["elephant", "fox", "monkey", "function", "zebra", "lion", "tiger", "gireaffe", "to", "kangaroo", "panda", "hippopotamus"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thte", "function", "a", "a", "apandaa"]], [["fnunction", "This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a", "to", "to"]], [["is", "a", "complex", "", "to", "test", "the", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thtte", "function", "", "a", "complex"]], [["This", "is", "", "a", "complex", "example", "to", "test", "the", "function", "the", "th", "a"]], [["elephant", "fox", "monkey", "function", "zebra", "lion", "tiger", "gireaffe", "kangaroo", "panda", "girafffoelephantx", "hippopotamus"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "bearr", "fnunction"]], [["Longest", "lion", "tigerLongest", "giraffe", "bearr", "fnunction"]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n"}
{"task_id": "Mbpp/91", "prompt": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n", "entry_point": "find_substring", "canonical_solution": "\ndef find_substring(str1, sub_str):\n   return any(sub_str in s for s in str1)\n", "base_input": [[["red", "black", "white", "green", "orange"], "ack"], [["red", "black", "white", "green", "orange"], "abc"], [["red", "black", "white", "green", "orange"], "ange"]], "atol": 0, "plus_input": [[[], "abc"], [[], ""], [[], "abac"], [[], "aabac"], [["aabac", "", "aabac", "mHUIYqZU"], "aabac"], [[], "acbc"], [[], "aabaac"], [[], "acbacbcc"], [["aabac", "", "aabac"], "aabac"], [["acbc", "acbacbcc"], "acbacbcc"], [["acbc", "acbacbcc"], "acbacbccacbacbcc"], [["acabcbc", "acbacbcc"], "acbacbccacbacbcc"], [["mHUIYqZU", "acabcbc", "acbacbcc"], "acbacbccacbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aacbac"], [["acbacbccacbacbcc", "acbacbcc"], "acbacbccaacbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aabaac"], [["acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaacbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["amHUIYqZUcbc", "acbc", "acbacbcc"], "acbacbccacbacbcc"], [["acabcbc", "acbacbcc", "acbacbcc"], "acbacbccacbacbcc"], [[], "abcbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "mHUIYqZU"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "amHUIYqZUcbc", "abc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccacbacbccaaccbacbccbacbcc"], [[], "aacbacacbacbccacbacbcc"], [["acbacbccacbacbcc", "acbacbcc"], "acbacbccaacbaccc"], [[], "accbc"], [[], "acbacbccacbcacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aacb"], [["", "aabac", "mHUIYqZU"], "aabaac"], [["aabac", "abc", "aabac", "mHUIYqZU"], "aabaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "mHUIYqZU"], [["acbaccbcc"], "acbacbccaacbacbcc"], [["acbacbccacbacbcc", "mHUIYqZU"], "abcaacb"], [["acabcbc", "acbacbccaacbacbcc", "acbacbcc"], "acbacbccacbacbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac"], "acbaccbccaacb"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "acbaccbccaacb"], [["acabcbc", "acbacbcc", "acbacbcc"], "acbacbccaaccacbacbccaaccbacbccbacbcc"], [["acacbc", "acbacbcc"], "acbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "mHUIZU"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "aacbb"], [["acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbccaacbacbccbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZUcbcqZU"], [["acbacbccacbacbcc", "amHUIYqZUcbc", "acbc", "acbacbcc"], "acbacbccacbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbaacbacacbacbccacbacbcccc"], [[], "acbcbacbcc"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbccaacbacbccbcc"], [["aabac", "", "mHUIYqZU"], "aacbac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], ""], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc"], "mHUIYmHUIYqZUqZU"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc", "acbacbcc"], "acbacbccaaccacbacbccaaccbacbccbacbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "mHaacbacacbacbccacbacbccUIYamHUIYqZUcbcqZU", "aabac", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZUcbcqZU"], [["aabac", "", "aabac", "mHUIYqZU"], "acbaccbccaacb"], [["acabcbc", "acbabcbc", "acbacbcc", "acbabcbc"], "acbacbccacbacacbacbccaacbacbccbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "aacbac"], [["aacbabcbcabac", "aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "mHUIYqZU"], [["aabac", "", "mHUIYqZU"], "aabaacbbaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc"], "mHUIYqZU"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "amHUIYqZUcbc", "acbcbacbcc", "abc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "acbc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbcabcaacbcacbacbcc"], "acbacbccaaccbacbaacbacacbacbccacbacbcccc"], [["acabcbc", "acbabcbc", "acbacbcc"], "acbaccbccaacb"], [["acbacbccacbacbcc", "acbacbcc"], "acbacbccaacba"], [["acabcbc", "acbabcbc", "acbacbcc", "acabcbc"], "acbaccbccaacb"], [["acbacbccacbacbcc", "mHUIYqZU"], "amHUIZUbcaacb"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "abcaacb", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZUcbcqZU"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbacbccaaccacbacbccaaccbacbccbacbccacbccaacbacbccbcc"], [["aabac", "", "mHUIZU", "aabac", "mHUIYqZU"], "aabaac"], [["acbacbccacbacbcc", "amHUIYqZUcbc", "acbc", "acbacbcc"], "acbacbcccacbacbcc"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc", "acbacbccacbcacbcc"], "acbacbccaaccbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aaabaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "abc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "amHUIYqZUcbc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "acbaccbabcbacbccccaacb"], [["aabac", "aaac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "aacbac"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU", "aabac"], "acbaccbabcbacbccccaacb"], [["acabcbc", "acbacbcc", "acbacbcc", "acbacbcc"], "amHUIYqZUcbc"], [["aabaacbacbccacbcacbccc", "mHUaacbacacbacbccacbacbcIYqZU", "", "mHUIZU", "aabac", "mHUIYqZU"], "acbacbccaacbaccc"], [["aabac", "", "mHUIaacbabcbcabacYqZU"], "aacbac"], [["acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbaacbacacbacbccacbacbcccc"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbacbccaaccacbacbccaaccbacbcccbacbccacbccaacbacbccbcc"], [["aabac", "acbacbcc"], "acbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "aabc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbccacc", "acbacbcc", "acbacbccacbacbcc"], "mHUIYqZU"], [["aabac", "", "aabac", "mHUIYqZU"], "aacbacabcbcac"], [["acbacbccacbacacbacbccaacbacbccbcc", "acbacbccaaccbacbcc"], "aabaacbbaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "abbc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "a"], [["accbc", "aabac", "", "aabac", "mHUIYqZU"], "aacb"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc"], "acbacbccacbacacbacbacbccaaccacbacbccaaccbacbcccbacbccacbccaacbacbccbcc"], [["aabac", "", "mHUIZU", "aabac", "mHUIYqZU"], "acbacbcccacbacbcc"], [["acbacbccacbcacbcc", "aacbbacbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbaccbcc", "acbacbccacbacbcc"], "amHUIYqZUcbc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "abcaacb", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZmUcbcqZU"], [[], "aacbbacbacbccacbacbcc"], [["acbacbccacbcacbcc", "acbacbcacbaccbccaacbcacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc"], "mHUIYmHUIYqZUqZU"], [["aabac", "", "mHUIYqZU"], "aabaacbaac"], [["acabcbc", "acbabccbc", "acbacbcc"], "acbacbccacbacacbacbccaacbacbccbcc"], [[], "acaabaacbbaacbc"], [["acbacbccacbacbcc", "mHUIYqZU", "mHUIYqZU"], "amHUIZUbcaacb"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "acbacbcabcaacbcacbacbcc"]], "contract": "\n   assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n   assert all(isinstance(item, str) for item in str1), \"invalid inputs\" # $_CONTRACT_$\n   assert isinstance(sub_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n"}
{"task_id": "Mbpp/92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n", "entry_point": "is_undulating", "canonical_solution": "\ndef is_undulating(n): \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))\n", "base_input": [[1212121], [1991], [121]], "atol": 0, "plus_input": [[2121212121212121], [2121212121212122], [2121212121212119], [2121212121212123], [2121212121212124], [2121212121212125], [2121212121212120], [2121212121212118], [2121212121212126], [2121212121212117], [2121212121212127], [82], [40], [83], [39], [81], [2121212121212116], [2121212121212128], [2121212121212115], [41], [80], [19], [20], [42], [84], [18], [2121212121212129], [43], [21], [62], [17], [85], [2121212121212130], [79], [12], [2121212121212131], [86], [44], [52], [16], [11], [53], [63], [10], [78], [51], [61], [87], [50], [77], [54], [92], [55], [49], [22], [96], [38], [97], [56], [23], [91], [2121212121212114], [15], [93], [24], [48], [89], [60], [64], [65], [37], [76], [59], [35], [88], [2121212121212132], [58], [14], [94], [9], [47], [95], [66], [57], [36], [8], [13], [25], [45], [90], [2121212121212113], [67], [46], [7], [68], [75], [34], [2121212121212133], [2121212121212134], [26], [74]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n"}
{"task_id": "Mbpp/93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n", "entry_point": "power", "canonical_solution": "\ndef power(a, b):\n\treturn a ** b\n", "base_input": [[3, 4], [2, 3], [5, 5]], "atol": 0, "plus_input": [[4, -2], [-2, 3], [0, 5], [-3, -4], [0, 10], [10, -1], [0, 0], [2, -3], [1, 100], [-1, 100], [5, 10], [5, 0], [2, 3], [-3, 2], [0, 9], [-1, 10], [0, 4], [5, -2], [4, 9], [-2, -2], [1, 99], [100, 5], [99, 2], [100, 100], [-4, -2], [100, 3], [0, 3], [5, 11], [4, 1], [-2, 0], [4, 4], [100, 6], [100, 4], [11, 5], [-4, -4], [5, 9], [11, 99], [100, -1], [6, 6], [-1, -1], [3, 0], [2, 2], [9, -1], [-4, 2], [5, 5], [-2, 5], [6, 0], [5, 4], [-1, 0], [99, 4], [-1, 9], [5, 2], [99, 1], [11, -1], [-4, 7], [7, 0], [98, 3], [100, -2], [99, -1], [3, 7], [-3, -3], [1, 6], [3, 1], [3, 8], [99, 99], [100, 9], [-1, 98], [7, -1], [9, 99], [5, 8], [11, 3], [3, -3], [2, 5], [99, -4], [5, 101], [9, 9], [8, 3], [99, -3], [1, 10], [7, 1], [101, 100], [8, 0], [100, 101], [4, 8], [2, 4], [3, 3], [8, 4], [101, -2], [98, 102], [8, 8], [2, -4], [-2, 101], [-1, -2], [100, 7], [-3, -2], [1, 2], [9, 3], [7, 7], [4, 3], [2, -2], [11, 10], [1, 0], [5, -3], [99, 3], [98, 2], [8, 7], [3, 6], [1, -1], [-1, 8], [101, 6]], "contract": "\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125\n"}
{"task_id": "Mbpp/94", "prompt": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n", "entry_point": "index_minimum", "canonical_solution": "\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n", "base_input": [[[["Rash", 143], ["Manjeet", 200], ["Varsha", 100]]], [[["Yash", 185], ["Dawood", 125], ["Sanya", 175]]], [[["Sai", 345], ["Salman", 145], ["Ayesha", 96]]]], "atol": 0, "plus_input": [[[["John", 100]]], [[["Alice", 100], ["Bob", 100], ["Charlie", 100]]], [[["Alice", 100], ["Bob", 200], ["Charlie", 300], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["David", 125]]], [[["John", 100], ["Jane", 150], ["Jim", 200], ["Jill", 175]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false]]], [[["John", 100, 100], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago"], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]], [[["John", 100], ["Jane", 150], ["Jim", 200]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["Adam", 150, 150]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["Benjamin", 100, "Benjamin"], ["David", 125]]], [[["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false]]], [[["John", 100], ["Jane", 150], ["Jim", 200], ["Jill", 175], ["John", 100], ["Jim", 200]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Charlie", 200, "Chicago", true]]], [[["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Benjamin", true, 100], ["Charlie", 300], ["Benjamin", 100], ["John", 100]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100], ["John", 100]]], [[["Alice", 100], ["Charlie", 101], ["Alice", 100], ["John", 100], ["Charlie", 100]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["John", 100]]], [[["Alice", 100], ["Alice", 101], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Benjamin", 100]]], [[["Alice", 100], ["Charlie", 100], ["Alice", 100]]], [[["John", 100], ["Jim", 200], ["Jill", 175]]], [[["John", 100], ["John", 100]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100]]], [[["Alice", 101, 100], ["John", 300], ["Alice", true, 100], ["Bob", 200], ["John", 100], ["John", 100], ["Bob", 200]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false, false]]], [[["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Adam", 150, "NYC", true]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Bob", 100], ["Charlie", 100], ["Bob", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Adam", false, 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Alice", 175], ["Benjamin", 100]]], [[["Alice", 100], ["Bob", 200], ["Charlie", 300], ["John", 100], ["Bob", 200]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Benjamin", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["John", 100]]], [[["Charlie", 100], ["Adam", 150, 150]]], [[["Adam", 150], ["Benjamin", 100], ["David", 125]]], [[["AlNYCice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Alice", 100]]], [[["Charlie", 100], ["Bob", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Benjamin", true, 100], ["Charlie", 300], ["Benjamin", 100], ["Bob", 200, "Bob"]]], [[["Alice", 100], ["Alice", 175], ["Benjamin", 100]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 100]]], [[["Alice", 100], ["Bob", 200, "oBob", "Bob"], ["Charlie", 300], ["Alice", 175], ["Benjamin", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago"], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Benjamin", true, 100, true], ["Charlie", 300], ["Benjamin", 100], ["Bob", 200, "Bob"]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["Charlie", 300]]], [[["John", 100], ["Jane", 150], ["Jim", 200], [300, 175]]], [[["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Benjamin", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", true]]], [[["AlNYCice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Alice", 100], ["Bob", 200, "Bob"]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["Alice", 100]]], [[["Alice", 100], ["Alice", 101], ["Bob", 200, "Bob"], ["Charlie", 300], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago", "Charlie"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["BoAlNYCiceb", 100], ["Bob", 100], ["Bob", 100]]], [[["Alice", 101, 100, "Alice"], ["John", 300], ["Alice", true, 100], ["Bob", 200], ["John", 100], ["John", 100], ["Bob", 200]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100, 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bob", 100, 100]]], [[["Adam", 150, "NYC", true, "Adam"], ["AdaJanem", 150, "NYC", true, 150], ["AdaJanem", 150, "NYC", true], ["Adam", 150, "NYC", true]]], [[["Alice", 100], ["Bob", 200], ["Charlie", 300], ["John", 100], ["Bob", 200], ["Charlie", 300], ["Charlie", 300]]], [[["Charlie", 100], ["Adam", 150, 149]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100, 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bob", 100, 100], ["Charlie", 101], ["Charlie", 100], ["Bob", 100, 100]]], [[["Charlie", 300], ["John", 100], ["Bob", 200]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["David", 125, "Miami", false]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, false], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Bob", 300, 300], ["Charlie", 300, 300], ["Benjamin", 100]]], [[["Adam", 150, "NYC", true], ["Charlie", 200, "Chicago", true], ["Adam", 150, "NYC", true]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, false], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["John", 100], ["John", 100], ["John", 100]]], [[["John", true], ["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["David", 124, 125]]], [[["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Jane", 150], ["Jim", 200]]], [[["AlNYCice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Alice", 100], ["Bob", 200, "Bob"], ["AlNYCice", 100]]], [[["Charlie", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, false], ["Adam", 150, "NYC", true, true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bobb", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["BenLAjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["John", 100], ["Jane", 150], ["Jill", 175]]], [[["Adam", 150, "NYC", true, "Adam"], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"]]], [[["John", 100, 100], ["John", 100], ["John", 100, 100]]], [[["John", 100], ["Jill", 175]]], [[["Jane", 150], ["Jill", 175], ["Jane", 150]]], [[["AlNYCice", 100], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["LA", 150, "NYC", true], ["Charlie", 200, "Chicago", true, "Chicago"], ["David", 125, "Miami", false]]], [[["Bob", 100], ["Charlie", 100], ["Bob", 100], ["Bob", 100], ["Bob", 100], ["Bob", 100]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bobb", 100], ["Bobb", 100]]], [[["Alice", 100], ["Charlie", 300], ["Benjamin", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Bob", 300, 300], ["Benjamin", 100]]], [[["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Benjamin", 100], ["Benjamin", 100, "Benjamin"]]], [[["Benjamin", 100, "LA", false, false, 100], ["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["BenLAjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["NYBenjamin", 100, "LA", false, false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Benjamin", 100, "LA", false, false, 100], ["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, 100], ["Benjamin", 100, "LA", false, false], ["BenLAjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["NYBenjamin", 100, "LA", false, false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]]], "contract": "\n  assert isinstance(test_list, list) and len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) >= 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item[1], (int, float)) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n"}
{"task_id": "Mbpp/95", "prompt": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "entry_point": "Find_Min_Length", "canonical_solution": "\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n", "base_input": [[[[1], [1, 2]]], [[[1, 2], [1, 2, 3], [1, 2, 3, 4]]], [[[3, 3, 3], [4, 4, 4, 4]]]], "atol": 0, "plus_input": [[[[], [], [], [], [], []]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[], [], [], [], []]], [[[], [], []]], [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13]]], [[[], [], [9, 2, -89, 83, 13], [], [], [], []]], [[[]]], [[[], [], [], [true, false, 84.98850542252845, true], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13]]], [[[false], [false]]], [[[84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [6, 7, 8, 5, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [1, 2, 3]]], [[[4, 1, 2, 3], [4, 8], [4, 1, 2, 3], [6, 11, 7, 8, 9, 10], [11, 12, 13]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true]]], [[[], [], [], [true, false, 84.98850542252845, true], [], [], [], [], [], [], [false, false, false, true, true], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [1, 2, 3]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [1, 2, 3]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [4, 5], [6, 8, 5, 9], [11, 12, 13], [11, 12, 13]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true, true], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 13], [4, 5], [6, 7, 8, 5, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 5, 9], [6, 7, 5, 9]]], [[[4, 1, 2, 3], [4, 8], [4, 1, 2, 3], [11, 12, 13]]], [[[], [], [], [], [], [], [], ["nmUTpTB", "LqgBbFug", "A", "YmVhY"], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13]]], [[[], [], [], [-89, 12, 11], [false], [], []]], [[[4, 1, 3, 3], [4, 8], [4, 1, 3, 3], [4, 1, 3, 3], [11, 12, 13]]], [[[6, 7, 8, 9], [4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13]]], [[[84.98850542252845, -78.5618531155085, -78.5618531155085], [84.98850542252845, -78.5618531155085, -78.5618531155085]]], [[[], [false, true, false, false, false, true, false, true], [], [], [], [], [], []]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [6, 8, 5, 9], [11, 12, 13], [11, 12, 13], [1, 2, 3]]], [[[6, 7, 5, 9], [6, 7, 5, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13], [11, 12, 13]]], [[[6, 7, 5, 9], [6, 7, 5, 9], [6, 7, 5, 9]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 8, 10, 9], [6, 7, 8, 8, 10, 9], [11, 12, 13], [1, 2, 3]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], []]], [[[4, 2, 3], [6, 11, 7, 8, 9, 10], [4, 8], [4, 2, 3], [6, 11, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [11, 12, 13], [11, 12, 13], [1, 2, 3], [6, 8, 5, 9, 8]]], [[[84.98850542252845, -78.5618531155085, -78.5618531155085]]], [[[6, 7, 8, 9], [4, 5], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [4, 1, 2, 3], [6, 7, 8, 9, 10]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.52239660663136, -78.5618531155085], [true, true, true, true, false, true, true]]], [[[false]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [], [], [], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84]]], [[[1, 2, 2, 3], [4, 5], [11, 12, 13], [1, 2, 2, 3], [6, 7, 8, 9, 10]]], [[[33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], [90, 33, 2, 13, 69, 3, 83, 2]]], [[[2, -84, 3], [5], [5], [6, 7, 8, 9, 10], [2, -84, 3], [11, 12, 13]]], [[[3, 2, 3], [3, 2, 3], [6, 7, 8, 5, 9], [3, 2, 3], [4, 4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [3, 2, 3]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [], [], [], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], []]], [[[6, 7, 8], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [6, 7, 8, 9], [6, 7, 8, 9], [6, 7, 8, 9], [11, 12, 13], [6, 7, 8, 9], [11, 12, 13], [1, 2, 3]]], [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[], [33, 9, false, -70, false, -84, -42, false, -64, 7, -66], [], [], []]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [11, 12, 13]]], [[[false, true, true, true, true, false, false, false], [], []]], [[[2, 9, 63, 9, 4, 2, -83, -84, -78], [33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], []]], [[[4, 1, 2, 2, 3], [4, 5], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [6, 7, 8, 9, 10], [11, 12], [4, 1, 2, 2, 3]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13, 12], [11, 12, 13, 12]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], [], []]], [[[3, 2, 3, 3], [3, 2, 3, 3], [6, 7, 8, 5, 9], [3, 2, 3, 3], [4, 4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [3, 2, 3, 3]]], [[[6, 7, -84, 8, 9], [6, 7, -84, 8, 9], [4, 5], [6, 7, -84, 8, 9]]], [[[4, 1, 2, 2, 3], [4, 5], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [11, 12], [4, 1, 2, 2, 3]]], [[[4, 1, 2, 3, 4], [4, 1, 2, 3, 4], [4, 8], [11, 12, 13, 13], [4, 1, 2, 3, 4], [11, 12, 13, 13]]], [[[-58.13858535192631, 85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [-58.13858535192631, 85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true, true], [true, true, true, true, false, true, true, true]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [4, 8], [4, 2, 3], [6, 11, 7, 8, 6, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 9, 10, 7], [6, 7, 8, 9, 10, 7], [6, 7, 8, 9, 10, 7], [11, 12, 13], [6, 7, 8, 9, 10, 7], [11, 12, 13]]], [[[4, 5, 4], [6, 7, 8, 5, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 13, 13, 12], [11, 13, 13, 12]]], [[[], [], [], [], [], [], [], ["nmUTpTB", "LqgBbFug", "A", "YmVhY"], ["LqgBbFug", "ADAvRmZZL", "A", ""], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[2, -84, 3], [5], [5], [6, 7, 8, 9, 10], [2, -84, 3], [11, 12, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13]]], [[[1, 2, 3], [5, 7, 8, 5], [5, 7, 8, 5], [5, 7, 8, 5], [5, 7, 8, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10], [1, 2, 3]]], [[[], [33, 9, false, -84, -42, false, -64, 7, -66, -84], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [1, 2, 3], [6, 7, 8, 5, 9]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [4, 8], [6, 11, 7, 8, 6, 10], [11, 12, 13], [4, 8]]], [[[1, 2, 3], [6, 7, 5, 9], [4, 5], [6, 7, 5, 9], [12, 13, 12], [12, 13, 12]]], [[[1, 2, 3], [6, 9, 8, 9, 10], [6, 9, 8, 9, 10], [11, 12, 13], [6, 9, 8, 9, 10], [11, 12, 13]]], [[[], [false, true, false, false, false, true, false, true], [], [], [], [], [], [], []]], [[[false], [false], [false]]], [[[4, 1, 2, 2, 3], [4], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [11, 12], [4, 1, 2, 2, 3]]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [4, 5], [6, 8, 5, 9], [11, 12, 13, 11], [11, 12, 13, 11], [11, 12, 13, 11], [6, 8, 5, 9]]], [[[3, 2, 3, 3], [3, 2, 3, 3], [6, 7, 8, 5, 9, 8], [6, 7, 8, 5, 9, 8], [3, 2, 3, 3], [4, 4, 5], [6, 7, 8, 5, 9, 8], [11, 12, 13], [11, 12, 13], [3, 2, 3, 3], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [5], [11, 12, 13], [11, 12, 13], [6, 7, 8, 5, 9], [11, 12, 13]]], [[[], [], [], [true, false, 84.98850542252845, true], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [69, 8, -42, 6], [], [], [], [], [], []]], [[[85.61630620077268, -90.47064487499253, 87.92412950816434, 84.98850542252845, -78.5618531155085], [85.61630620077268, -90.47064487499253, 87.92412950816434, 84.98850542252845, -78.5618531155085]]], [[[false, true, false, false, false, true, false, true], [], [], [], [], [], []]], [[[85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true, true], [85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085], [85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 2, 3, 1], [4, 5], [11, 12, 13], [1, 2, 2, 3, 1], [1, 2, 2, 3, 1], [6, 7, 8, 9, 10], [1, 2, 2, 3, 1]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [8], [6, 11, 7, 8, 6, 10], [11, 12, 13], [8]]], [[[4, 1, 2, 3, 4], [4, 8], [7, 11, 12, 13, 13], [4, 1, 2, 3, 4], [7, 11, 12, 13, 13]]], [[[4, 5, 4], [6, 7, 8, 5, 13], [11, 12, 13], [4, 5, 4]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[62.65634626917724, -78.5618531155085], [62.65634626917724, -78.5618531155085], [62.65634626917724, -78.5618531155085]]], [[[], [], [true, "ERSEFXmEb", [-90.47064487499253, -61.40371790488326, 84.52239660663136], false, {"-80": null, "-78": -1.574803399508525, "47": 6, "-81": 4.848176964479563, "82": false, "6": 5}, -58.13858535192631, true, null, "ERSEFXmEb"], [], [], [], []]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n"}
{"task_id": "Mbpp/96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n", "entry_point": "divisor", "canonical_solution": "\ndef divisor(n):\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n", "base_input": [[15], [12], [9]], "atol": 0, "plus_input": [[79337], [79336], [86], [87], [88], [85], [79335], [79334], [79333], [79332], [true], [89], [79331], [95], [90], [79338], [91], [92], [93], [84], [94], [83], [79330], [82], [46], [47], [44], [48], [49], [81], [43], [42], [96], [41], [45], [97], [79], [78], [79329], [80], [50], [40], [79328], [51], [17], [98], [39], [16], [18], [99], [38], [79327], [19], [20], [79325], [77], [15], [79339], [37], [36], [79324], [79340], [79341], [35], [34], [79323], [73], [79322], [21], [22], [79320], [52], [23], [74], [65], [79326], [79321], [33], [79319], [76], [32], [14], [75], [57], [100], [62], [67], [72], [58], [59], [60], [66], [56], [53], [101], [54], [68], [63], [55], [61], [64]], "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3\n"}
{"task_id": "Mbpp/97", "prompt": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n", "entry_point": "frequency_lists", "canonical_solution": "\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n", "base_input": [[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]], [[[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]]], "atol": 0, "plus_input": [[[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 8], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 8], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 8]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 4, 5, 5, 5]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3]]], [[[1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 7, 8, 9, 9]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6]]], [[[2, 2, 2, 3, 4, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[1, 1, 1, 1], [2, 2, 6, 2, 2]]], [[[2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8], [2, 3, 1, 4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 8], [7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 8], [7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 8]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [2, 3, 9, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 9, 4, 5, 6, 7, 8, 9], [2, 3, 9, 4, 5, 6, 7, 8, 9], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7]]], [[[2, 2, 2, 2], [3, 3, 3, 3]]], [[[1, 2, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7], [2, 2, 2, 3, 3, 3, 4, 4, 4], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3, 1], [1, 1, 1, 2, 2, 2, 3, 3, 3, 1], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9]]], [[[1, 7, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 5, 5, 5], [1, 7, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 5, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5], [2, 2, 2, 3, 3, 3, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5], [2, 2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5], [2, 2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 9]]], [[[2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [2, 2, 6, 2, 2]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6]]], [[[1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 3, 2, 2, 3, 3, 2], [1, 1, 1, 3, 2, 2, 3, 3, 2], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 3, 1, 1, 1, 2, 2, 5, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [1, 3, 1, 1, 1, 2, 2, 5, 3, 3, 3], [1, 3, 1, 1, 1, 2, 2, 5, 3, 3, 3]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 6, 6, 7, 8, 9], [1, 2, 3, 4, 6, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 6, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 4, 5, 6, 7, 8, 9], [1, 2, 4, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 3, 2, 2, 3, 3, 2], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 3, 2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 3, 2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7], [2, 2, 2, 3, 3, 3, 4, 4, 4], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7]]], [[[1, 7, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 5, 5, 5], [1, 7, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 5, 5, 5], [3, 3, 3, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 7, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 5, 5, 5]]], [[[2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 8, 2, 2, 3, 3, 3, 1], [1, 1, 1, 8, 2, 2, 3, 3, 3, 1], [3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9]]]], "contract": "\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n"}
{"task_id": "Mbpp/98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n", "entry_point": "multiply_num", "canonical_solution": "\ndef multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n", "base_input": [[[8, 2, 3, -1, 7]], [[-10, -20, -30]], [[19, 15, 18]]], "atol": 0.0001, "plus_input": [[[100000, 2, 3]], [[2.5, 1.5, 0, -3, 4.2]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]], [[1, 10, 100, 1000, 10000, 100000]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]], [[0, 0]], [[2, 3, 4, -2, 0]], [[1000000, 2000000, 3000000, -1000000]], [[5, 5, 5, 5]], [[1, -2, 3, -4, 5]], [[1, -2, 3, -4, 5, -2]], [[2, -2, 3, -6, -2, 0]], [[0, 0, 0]], [[2, 3, 4, -2, 0, 2]], [[2, 2, 3, 4, -2, 0]], [[2, 3, 4, -2, 0, -2]], [[3, 100000, 2, 3]], [[1, 10, 100, 1000, 10000, 100000, 100000]], [[1, 10, 100, 1000, 10000, 100000, 10]], [[2, 3, 0, -2, 0, 2]], [[2, 1, -2, 0, 2]], [[1000000, 2000000, 3000000, -1000000, -1000000]], [[-1, -2, -3, -5, -6, -7, -8, -9, -10]], [[1000000, 2000000, -1000000]], [[100000, 2]], [[0]], [[1000000, 2000000, -9, -1000000, 1000000]], [[-9, -1, -2, -3, -4, -5, -7, -8, -9, -10]], [[2, -2, 3, -7, -6, -2, 0]], [[0.5, 0.75, 0.1, 0.2, 0.2734396265136305, 0.3, 0.4, 0.5, 0.6, 0.7]], [[-1, -2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -1]], [[2, 3, -2, 0]], [[2, 3, -1, -6, -2, 0]], [[1000000, -1000000]], [[5, 5, 5]], [[5, 5]], [[-1, -2, -3, 0, -5, -6, -7, -8, -9, -10, -1]], [[100000, 2, 100001, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.1027137544003226, 0.6, 0.7, 0.3]], [[2, 3, -4, 4, -2, 0]], [[100001, 2, -2, 0]], [[0.5, 0.75, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 1.5, 0.6, 0.7]], [[-5, -2, 2, 5]], [[-1]], [[2, 3, -3, 4, -2, 0, -2]], [[1, 9, 10, 100, 1000, 10000, 100000, 10000, 1000]], [[2.5, 1.5, 0]], [[100000, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.1027137544003226, 0.6, 0.7, 0.3, 0.7]], [[2, 3, -3, 4, -2, 0, -3]], [[-2, 2, -1, 5]], [[0.5, 0.75, 1.5, 0.2, 0.2734396265136305, 0.3, 0.4, 0.5, 0.6, 0.7]], [[1, 10, 100, 1000, 10000, -9]], [[1.6805641411244991, 2.5, 1.5, 0]], [[3000000, 2, 3, 4, 0, 1]], [[0, 6, 5, 5]], [[1, 10, 100, 1000, 10000, 100000, 100000, 1]], [[2.5, 0, 2.5]], [[-6, 0]], [[1000000, 2000000, 3000000, -1000000, -1000000, 3000000]], [[2, 3, -2, 0, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.2734396265136305, 0.5, 0.1027137544003226, 1.0039341653341238, 0.3, 0.7]], [[2, 3, -6, -2, 0]], [[1]], [[-9, 1000000, 2000000, 3000000, -1000000]], [[-5, -1, 2, 5]], [[5, 5, 1, 5]], [[100000, 2, 4]], [[1, 10, 101, 100, 1000, 10000, -9]], [[2, 3, 0, 2]], [[2, 3, -2, 0, 3, 3]], [[-1, -2, -1, -3, -4, -5, -6, -8, -8, -9, -10, -1]], [[1000000, 2000000, -9, -1000000, 1000000, 2000000]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.3408682932336746, 0.4, 0.2734396265136305, 0.5, 0.1027137544003226, 1.0039341653341238, 0.3, 0.7]], [[2, 3, 0, 100000, 2]], [[1000000, -1000000, 1000000]], [[-1, -2, -1, -3, -4, -5, -6, -8, -8, -9, -10, 9, -1]], [[2.5, 1.5, 0, 1.5]], [[2, 3, 4, -2, -10, 0, 2]], [[0, 0, 1000000, 0, 0]], [[1, 1]], [[2, 3, 4, 1, -2, 0]], [[100000, -2, 3, 100000]], [[2, 3, 0, -10, -2, 0, 2]], [[1.6805641411244991, 1.5, 0]], [[3]], [[2.5, 1.5]], [[1, 11, 101, 100, 1000, 10000, -9, 1]], [[1.6805641411244991, 1.6805641411244991]], [[-1, -2, -1, -3, -4, -5, -7, -8, -9, -10, -1]], [[1000000, 5]], [[1, 10, 100, 1000, -9, 9999, -9]], [[-6, -6]], [[2, -2, 3, -6, -2]], [[0.5, 0.75, 0.1, 0.2, 0.75, 0.4, 0.5, 0.6, 0.7]], [[2, 3, 4, -1, 1]], [[2000000, -9, -1000000, 1000000]], [[1, 10, 100, 1000, 100000]], [[-1000000, 1, 10, 100, 1000, -9, -9]], [[1, 3, 4, -2, -10, 0, 2]], [[2, 3, 4, -2, -10, 0, 2, -3, 2]], [[1, 10, 100, 10000, 100000, 100000, 1]], [[2.5, 0.1027137544003226, 1.5, 0]], [[2, 3, 0, -10, -2, 0, 3, 2]], [[1000001, 2000000, -9, -1000000, 1000000]], [[2, 2, 3, 0, -2, 0, 2]], [[1, 10, 100, 10000, 100000, 1]], [[2, 1, -2, 0, -2]], [[2.5, 1.5, 0, 1]], [[-5, -1, 1, 5]]], "contract": "\n    assert isinstance(numbers, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(numbers) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)\n"}
{"task_id": "Mbpp/99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n", "entry_point": "decimal_to_binary", "canonical_solution": "\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \n", "base_input": [[8], [18], [7]], "atol": 0, "plus_input": [[0], [-5], [999999999999999999999999999999999999999999], [-1000000000000000000000000000000000000000000], [-33], [false], [-1], [-1000000000000000000000000000000000000000001], [999999999999999999999999999999999999999998], [-999999999999999999999999999999999999999999], [true], [-6], [-68], [-34], [-1000000000000000000000000000000000000000002], [1000000000000000000000000000000000000000000], [2], [26], [1], [-69], [80], [-87], [-2], [-3], [79], [-7], [-1000000000000000000000000000000000000000003], [-999999999999999999999999999999999999999998], [3], [-999999999999999999999999999999999999999997], [-999999999999999999999999999999999999999996], [4], [1000000000000000000000000000000000000000001], [1000000000000000000000000000000000000000002], [25], [-97], [-35], [27], [999999999999999999999999999999999999999997], [28], [81], [-70], [-32], [55], [78], [77], [-999999999999999999999999999999999999999993], [-24], [-96], [-71], [-86], [-23], [-25], [24], [29], [-72], [86], [82], [46], [-98], [-26], [-95], [30], [23], [56], [999999999999999999999999999999999999999996], [-999999999999999999999999999999999999999995], [-4], [85], [-36], [57], [87], [58], [83], [-1000000000000000000000000000000000000000004], [999999999999999999999999999999999999999995], [84], [54], [20], [31], [-999999999999999999999999999999999999999994], [-73], [-37], [-22], [45], [13], [-74], [75], [88], [71], [-31], [-99], [-100], [22], [76], [14], [59], [-88], [74], [-1000000000000000000000000000000000000000005], [-94], [-49], [1000000000000000000000000000000000000000003], [-93]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'\n"}
{"task_id": "Mbpp/100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n", "entry_point": "next_smallest_palindrome", "canonical_solution": "\ndef next_smallest_palindrome(num):\n    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))\n", "base_input": [[99], [1221], [120]], "atol": 0, "plus_input": [[0], [45678], [1], [45679], [2], [3], [45681], [4], [5], [45683], [45682], [45677], [6], [45676], [45675], [45680], [34], [45674], [33], [45673], [7], [32], [8], [58], [45672], [57], [55], [9], [31], [36], [56], [45684], [30], [29], [87], [45671], [40], [45685], [54], [35], [10], [45670], [96], [45669], [28], [11], [97], [59], [98], [27], [37], [45686], [41], [60], [53], [99], [13], [26], [14], [52], [51], [25], [12], [50], [24], [85], [23], [45687], [39], [86], [88], [61], [38], [45668], [95], [84], [45667], [22], [45688], [42], [45666], [89], [15], [83], [45665], [90], [91], [49], [100], [45689], [94], [45664], [82], [62], [81], [16], [93], [101], [80], [102], [20], [48]], "contract": "\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\n"}
{"task_id": "Mbpp/101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n", "entry_point": "kth_element", "canonical_solution": "\ndef kth_element(arr, k):\n  return arr[k-1]\n", "base_input": [[[12, 3, 5, 7, 19], 2], [[17, 24, 8, 23], 3], [[16, 21, 25, 36, 4], 4]], "atol": 0, "plus_input": [[[100, 99, 98, 97, 96], 5], [[50, 40, 30, 20, 10], 1], [[1000, 999, 998, 997, 996], 3], [[1000000, 500000, 100000, 50000, 10000], 4], [[50, 40, 30, 20, 10, 40], 1], [[100, 99, 98, 20, 97, 96], 5], [[100, 99, 98, 20, 97, 96], 6], [[100, 99, 98, 97, 96, 98], 5], [[51, 40, 99, 41, 30, 41, 20, 10], 1], [[500000, 100000, 50000, 10000], 4], [[1000, 999, 998, 997, 996, 999], 3], [[100, 99, 98, 97, 96], 4], [[100, 100, 98, 20, 97, 96, 100], 7], [[500000, 500000, 100000, 50000, 10000], 4], [[50, 40, 10, 20, 10, 40], 4], [[100, 99, 98, 98, 97, 96], 5], [[100, 99, 98, 20, 97], 5], [[100, 99, 96, 20, 97, 96], 6], [[100, 99, 96, 20, 97, 96], 5], [[100, 99, 99, 98, 97, 96], 4], [[51, 40, 99, 41, 30, 41, 20, 10], 7], [[100, 96, 20, 97, 96], 4], [[1000, 3, 999, 998, 997, 996, 999], 3], [[999, 100, 99, 98, 97, 96], 5], [[100, 99, 99, 98, 97], 4], [[1000, 3, 999, 998, 997, 996, 999], 4], [[100, 99, 99, 98, 96], 4], [[100, 99, 98, 99, 20, 97], 5], [[100, 99, 98, 20, 97, 100], 5], [[1000, 999, 998, 997, 996, 999], 4], [[51, 40, 99, 20, 41, 30, 41, 20, 10], 1], [[100, 99, 98, 97, 96, 98], 6], [[1000, 3, 999, 998, 997, 996, 998], 4], [[7, 100, 100, 98, 20, 97, 96, 100], 7], [[100, 99, 98, 97, 1000000, 96], 4], [[100, 19, 96, 20, 97, 96], 4], [[7, 100, 100, 98, 97, 19, 96, 100], 7], [[100, 99, 98, 20, 7, 97, 100], 4], [[100, 99, 98, 20, 96, 96], 5], [[500000, 100000, 50000, 10000], 3], [[7, 100, 100, 98, 97, 19, 96, 100], 8], [[7, 100, 100, 98, 97, 19, 96, 100], 3], [[51, 40, 99, 41, 30, 20, 10], 1], [[50, 997, 40, 30, 20, 10], 1], [[100, 99, 98, 97, 1000000, 96], 2], [[100, 95, 1, 98, 97, 1000000, 96], 4], [[51, 40, 99, 41, 30, 20, 10], 2], [[100, 100, 98, 20, 97, 96, 10000], 1], [[100, 99, 99, 98, 97], 5], [[100, 99, 98, 98, 97, 96], 6], [[100, 100, 98, 20, 97], 5], [[100, 99, 96, 19, 97, 96], 4], [[50, 40, 30, 20, 11], 1], [[100, 96, 99, 97, 20, 97, 96], 7], [[100, 99, 96, 10000, 20, 96], 3], [[50, 40, 30, 20, 7], 1], [[1000, 3, 999, 998, 997, 996, 999, 999], 3], [[100, 99, 98, 98, 97, 96, 100], 5], [[50, 40, 6, 20, 10, 40], 2], [[7, 100, 100, 98, 20, 97, 96, 100, 97], 7], [[100, 99, 96, 19, 97, 96, 99], 4], [[100, 99, 98, 4, 96, 96], 5], [[100, 99, 98, 20, 95, 96], 5], [[100, 19, 96, 20, 97, 96, 96], 4], [[41, 100, 100, 98, 20, 97, 96, 10000], 1], [[7, 100, 100, 6, 98, 97, 19, 96, 100], 8], [[7, 100, 100, 98, 20, 97, 96, 100, 100], 7], [[50, 997, 97, 40, 30, 20, 10], 1], [[100, 96, 20, 96, 96], 5], [[1000, 998, 997, 996, 999], 3], [[7, 51, 100, 98, 20, 97, 96, 100], 7], [[100, 19, 30, 20, 97, 96], 4], [[1000, 3, 999, 998, 997, 5, 996, 999], 3], [[7, 100, 100, 98, 11, 97, 96, 100, 100], 7], [[100, 99, 96, 20, 97, 95], 6], [[7, 100, 100, 98, 20, 97, 96, 100, 100], 6], [[100, 98, 98, 97, 96], 5], [[100, 99, 98, 98, 97, 96, 100, 99], 5], [[50, 40, 20, 10, 40], 1], [[51, 40, 99, 41, 30, 41, 20, 10], 6], [[51, 40, 99, 20, 41, 30, 41, 20, 10], 7], [[7, 100, 100, 98, 20, 30, 96, 100], 7], [[7, 51, 100, 98, 20, 30, 97, 96, 100], 7], [[101, 99, 98, 97, 96], 4], [[100, 99, 99, 98, 96], 3], [[50, 40, 20, 10, 40, 20], 1], [[50, 40, 20, 7], 1], [[100, 99, 98, 20, 95, 96], 4], [[7, 100, 100, 98, 20, 97, 10000, 96, 100], 7], [[97, 100, 99, 98, 97, 96, 98], 6], [[100, 96, 20, 97, 998, 96], 4], [[51, 3, 999, 998, 997, 996, 999], 3], [[101, 99, 98, 97, 96], 1], [[7, 100, 41, 98, 20, 30, 96, 100], 7], [[7, 100, 100, 96, 97, 19, 96, 100], 8], [[7, 51, 100, 20, 20, 97, 96, 100], 7], [[6, 7, 100, 100, 98, 97, 19, 96, 100], 7], [[100, 99, 98, 4, 96], 5], [[51, 3, 999, 998, 997, 996, 999], 4], [[7, 100, 98, 97, 19, 96, 100, 100], 7], [[100, 99, 98, 20, 7, 97, 100], 5], [[1000000, 100, 96, 20, 97, 96], 4], [[100, 99, 98, 20, 95], 5], [[1000, 998, 997, 996], 3]], "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$ \n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36\n"}
{"task_id": "Mbpp/102", "prompt": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n", "entry_point": "snake_to_camel", "canonical_solution": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "base_input": [["python_program"], ["python_language"], ["programming_language"]], "atol": 0, "plus_input": [["___python_program"], ["__12_python__language___"], ["your_programming__langu__age___"], ["another__ex44ample___"], ["_"], ["word"], ["no_underscores"], ["_leading"], ["trailing_"], ["__multiple_consecutive__underscores__"], ["__12_python__languag_"], ["___p_ythonram"], ["your_nprogramming__langu__age___"], ["your_nprogramming_another__ex44ample____langu__age___"], ["__12_pythonno_underscores__languag_"], ["_lwordeading"], ["your_nprogramming_another__ex4no_underscores4ample____langu__age___"], ["your_programming__langu____12_python__languag_age___"], ["__12_pyth_"], ["__1__12_python__languag_2_pythonno_underscores__languag_"], ["___pgram"], ["_lwordeadin__12_python__language___g"], ["your_prtrailing___"], ["__12_pythonno_underscores__langu_ag_"], ["aiN"], ["worod"], ["_lwordeadin__12_python__languaage___g"], ["qaiNnJa"], ["aiN_lwordeading"], ["_lwordeadin__1_2_python__language___g"], ["your_nprogrammi__12_pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___"], ["your_pryour_nprogramming_another__ex4no_underscores4ample____langu__age___iling___"], ["__1____12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_"], ["CVh"], ["_leadin_lwordeadin__12_python__languaage___gg"], ["_th_"], ["_lwordeadin__1_2_py__language___g"], ["trailing__12_python__languag__"], ["your_pr_th_ogramming__langu____12_python__languag_age___"], ["your_pryour_nprogramming_another__aiNex4no_underscores4ample____langu__age___iling___"], ["__12_python__language_g__"], ["aiN_lwordeadin__12_python__layour_nprogramming_another__ex4no_underscores4ample____langu__age___wordeading"], ["_lwordeadin__1_2_py__lawordnguaage___g"], ["__12_pythonno_underscores__lanuag_"], ["_____12_pyth_ram"], ["__1____12_pythonno_underscores__langu_a_lwordeadingg_12_python__languag_2_pythonno_underscores__languag_"], ["__"], ["_leadilng"], ["___python_progr__1____12_pythonno_underscores__langu_ag_12_python__l__languag_m"], ["__12_pythonno_underscores__langua_g_"], ["your_nprogramming_another__ex44ample_____12_pythonno_underscores__languag__langu__age___"], ["__12_python__l__"], ["__multiprlne_consecutive__underscores__"], ["___12_pyth_"], ["__1____12_pythonno_undngu_a_lwordeadingg_12_python__languag_2_pythonno_underscores__languag_"], ["your_nprogramming_another__ex44ample_____12_py___12_pyth_thonno_underscores__languag__langu__age___"], ["_____multiple_consecutive__underscores__python_program"], ["yo_ur_nprogr_amming_another__ex44ample____langu__age___"], ["_leadin_lwnordeadin__12_python__languaage___gg"], ["jzAx"], ["_leadin____12_pyth_lwordeadin__12_python__languaage___gg"], ["yo_ur_nprogr_amming_another__ex44am__multiprlne_consecutive__underscores__ple___1__12_python__languag_2_pythonno_underscores__languag___langu__age___"], ["__1____12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_word"], ["_lwordeadin__12_python__lanuguage___g"], ["trailing___python_progr__1____12_pythonno_underscores__langu_ag_12_python__l__languag_m__12_python__languag__"], ["trailianguag_2_pythonno_underscores__languag__"], ["__1_2_p"], ["_leadil__multiple_consecutive__underscores__ng"], ["__1_2_qaiNnJap"], ["a__1_2_piN_lwordeading"], ["__NnJap"], ["__12_peythonno_underscores__lanuag_"], ["trailinig_"], ["trailiyour_yo_ur_nprogr_amming_another__ex44ample____langu__age___pryour_nprogramming_another__aiNex4no_underscores4ample____langu__ayour_nprogrammi__12_pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___ge___iling___"], ["X"], ["_leadin____12_pyth_lwordeadin__12_python__languaage___g1g"], ["_lwordeadin__1_2_py__lawordnguaage___g__1_2_p"], ["your_programming__langu____1y2_python__languag_age___"], ["your_pr_th_ogramming__langu____12__lwordeadingpython__languag_age___"], ["your_pr_th_ogramming__langu____12_your_programming__langu____1y2_python__languag_age____lwordeadingpython__languag_age___"], ["aiN_lwordeadiwordn__12_python__layour_nprogramming_another__ex4no_underscores4ample____langu__age___wordeading"], ["your_nprogr_lwordeadingammi__12_pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___"], ["___p_ythqaiNnJaonram"], ["12_python__l__"], ["_lwordeadin__12_python__lan_lwordeadin__12_python__languaage___gguaage___g"], ["__12_pythonaiN_lwordeading__l__"], ["trailing__12_python__layo_ur_nprogr_amming_another__ex44ample____langu__age___nguag__"], ["your__12_pythonno_underascores__langu_ag__nprogramming_another__ex4no_underscores4ample____langu__age"], ["your_pryour_nprotrailing__12_python__layo_ur_nprogr_amming_another__ex44ample____langu__age___nguag__gramming_another__ex4no_underscores4ample____langu__age___iling___"], ["__12n_pythonno_un_"], ["_____12_pyth__python_program"], ["_lwon__1__12_python__l__2_python__lanuguage___g"], ["your_programming__langu____12_python__languag_ag___pgram___"], ["____12n_pythonno_un_1_2_p"], ["_lwordeadin__12_python__lanugu_lwordeadingage___g"], ["aiyour_pryour_nprogramming_another__aiNex4no_undersco_lwordeadingres4ample____langu__age___iling___N"], ["__1_d___12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_"], ["your_pr_th_ogramming__langu____12_your_programming__langu____1y2_python__languingpython__languag_age___"], ["your_nprogrammi__12__pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___"], ["your_pr_th_ogramming__langu____12_your_programming__langu____1y2_pythotn__languag_age____lwordeadingpython__languag_age___"], ["qaiNnJ_lwordeadin__1_2_py__language________12_pyth_ram"], ["your_pr_th_ogrammingyo_ur_nprogr_amming_another__ex44ample____langu__age_____langu____12_your_programming__langu____h1y2_python__languingpython__languag_age___"], ["____12n_pythonaiNno_un_1_2_p"], ["_lwordeadin__12_python__lanuguage_____pgram_g"], ["AOqPHkjh"], ["_lwon__1__12_python__l__2_python__lanuguage_no_underscores"], ["_____12_pyth_h_python_program_leadin_lwnordeadin__12_python__languaage___g"], ["your_pr_th_ogrammingyo_ur_nprogr_amming_another__ex44ample____langu__age_____ur_programming__langu____h1y2_python__languingpython__languag_age___"], ["your_pryour_nprotrailing__12_python__layo_ur_nprogr_amming_eanother__ex44ample____langu__age___nguag__gramming_another__ex4no_underscores4ample____langu__age___iling___"], ["your_pr_th_ogrammingyo_ur_nprogr_amming_another__ex44ample____langu__age_____ur_programming__langu____h1y2_python__lang__1_d___12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_uingpython__languag_age___"]], "contract": "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(word) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\n"}
{"task_id": "Mbpp/103", "prompt": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n", "entry_point": "eulerian_num", "canonical_solution": "\ndef eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "base_input": [[3, 1], [4, 1], [5, 3]], "atol": 0, "plus_input": [[0, 0], [1, 1], [1, 2], [1, 0], [0, 2], [0, 1], [2, 1], [2, 0], [2, 2], [2, 3], [3, 2], [1, 3], [0, 3], [2, 4], [1, 4], [4, 2], [4, 4], [3, 1], [4, 0], [4, 1], [3, 0], [0, 4], [3, 4], [5, 4], [3, 3], [5, 2], [4, 5], [5, 0], [1, 5], [false, true], [5, 5], [5, 1], [true, true], [6, 6], [2, 6], [0, 5], [6, 2], [4, 3], [6, 1], [3, 5], [5, 3], [7, 3], [4, 6], [7, 4], [5, 6], [5, 7], [6, 3], [6, 7], [0, 6], [false, false], [3, 6], [6, 4], [7, 6], [0, 7], [7, 2], [8, 7], [8, 2], [6, 5], [true, false], [7, 0], [2, 7], [8, 5], [6, 0], [0, 8], [4, 8], [7, 1], [8, 1], [7, 7], [4, 7], [2, 5], [8, 4], [10, 9], [9, 9], [10, 3], [10, 10], [3, 9], [10, 2], [2, 8], [8, 3], [5, 8], [9, 10], [8, 8], [2, 9], [4, 9], [9, 6], [7, 8], [8, 9], [1, 8], [1, 10], [11, 10], [5, 9], [11, 9], [5, 11], [9, 2], [7, 5], [8, 0], [6, 8], [1, 9], [8, 6], [9, 8], [9, 4]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n"}
{"task_id": "Mbpp/104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "entry_point": "sort_sublists", "canonical_solution": "\ndef sort_sublists(input_list):\n    return [sorted(x) for x in input_list]\n", "base_input": [[[["green", "orange"], ["black", "white"], ["white", "black", "orange"]]], [[[" red ", "green"], ["blue ", " black"], [" orange", "brown"]]], [[["zilver", "gold"], ["magnesium", "aluminium"], ["steel", "bronze"]]]], "atol": 0, "plus_input": [[[]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "banana"]]], [[["orange", "green", "green"], ["black", "white", "black", "white"], ["white", "orange", "orange", "green"]]], [[["apple", "banana", "cherry"], [], ["cherry", "apple", "banana"]]], [[["apple", "banana", "banana"], ["pear", "pear"], ["orange", "orange", "orange"]]], [[["apple", "banana", "cherry"], [], ["orange", "plum", "peach"]]], [[["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], ["monkey"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"]]], [[["red", "green", "blue"], ["yellow", "orange"], ["purple", "pink", "teal", "brown"]]], [[["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"], ["i", "j"], ["k", "l"], ["m", "n"], ["o", "p"], ["q", "r"], ["s", "t"], ["u", "v"], ["w", "x"], ["y", "z"]]], [[[], [], []]], [[["apple", "banana", "cherry"], ["orange", "plum", "peach"]]], [[["cherry", "apple", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"]]], [[["blue", "red", "green"], ["brown", "purple", "pink", "teal"], ["orange", "yellow"]]], [[["orange", "green"], ["white", "black"], ["black", "white", "orange"]]], [[["apple", "zebra", "cat"], ["dog", "elephant"], ["giraffe", "lion", "banana"]]], [[["red", "green", "blue"], [], ["orange", "purple", "brown"]]], [[["cat", "dog", "elephant"], ["giraffe", "tiger", "zebra"], ["monkey", "lion", "tiger"], ["banana"]]], [[["cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"]]], [[["elephant", "ant", "bee"], ["dog", "camel", "cat"], ["zebra", "giraffe", "lion"]]], [[["red", "green", "blue"], [], ["orange", "purple", "brown"], ["yellow", "pink", "teal"]]], [[["red", "green", "bpinklue", "blue"], ["yellow", "orange"]]], [[["blue", "red", "green"], ["brown", "purple", "pink", "teal"], ["brown", "purple", "pink", "teal"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"], ["grape", "mango", "apple"]]], [[["apple", "banana", "cherry"], ["cherry", "appl", "banana"], ["apple", "banana", "cherry"], ["apple", "banana", "cherry"]]], [[["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"]]], [[["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"], ["grape", "mango", "apple"]]], [[["cat", "dog", "elephant"], [], ["zebra", "lion", "tiger"], ["monkey"]]], [[["orange", "green", "green"], ["white", "orange", "green"], ["black", "white", "black", "white"], ["white", "orange", "green"]]], [[["red", "green", "blue"], ["yellow", "pink"], [], ["orange", "purple", "brown"], ["yellow", "pink"], ["red", "green", "blue"]]], [[[], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], []]], [[["banaa", "cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"]]], [[["cherry", "apple", "bsanana", "banana"], ["apple", "banana", "cherry", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "bsanana", "banana"]]], [[["orange", "green", "green"], ["black", "white", "black", "white"], ["white", "orange", "bsanana", "orange", "green"], ["black", "white", "black", "white"]]], [[["elephant", "ant", "bee"], ["zebra", "giraffe", "lion"]]], [[["white", "black"], ["black", "white", "orange"]]], [[["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "p"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"]]], [[["banana", "cherry"], ["cherry", "apple"], ["cherry", "apple", "banana"]]], [[["elephant", "ant", "bee"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"]]], [[["red", "green", "blue"], ["yellow", "orange"]]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "banana"], ["banana", "cherry", "apple"]]], [[["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "p"], ["peach", "orange", "plum"], ["cherry", "banana", "apple", "apple"], ["cherry", "banana", "apple", "apple"]]], [[["elephant", "ant", "bee"], ["elephant", "ant", "bee"]]], [[["cherry", "apple", "banana", "apple"], ["banana", "cherry"], ["cherry", "apple"], ["cherry", "apple", "banana", "apple"]]], [[[]]], [[["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "apple", "apple"], ["cherry", "banana", "apple", "apple"]]], [[["cherry", "apple", "bsanana", "banana"], ["apple", "banana", "cherry", "cherry"]]], [[["dog", "elephant", "elephant"], ["dog", "elephant", "elephant"], ["giraffe", "lion", "banana"]]], [[["cherry", "apple", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["orange", "peach", "plum"]]], [[["cherry", "apple", "banana", "apple"], ["cherry", "apple"], ["cherry", "apple", "banana", "apple"]]], [[["apple", "banana", "cherry"], ["cherry", "appl", "banana", "banana"], ["apple", "banana", "cherry"], ["cherry", "appl", "banana", "banana"], ["apple", "banana", "cherry"]]], [[["cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"], ["peach", "orange", "plum"]]], [[[], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], [], [], [], []]], [[["orange", "green", "green"], ["white", "orange", "green"], ["black", "white", "black", "white"], ["white", "orange", "green"], ["black", "white", "black", "white"]]], [[["red", "green"], ["red", "green"], ["yellow", "orange"]]], [[["red", "green", "blue", "green"], ["yellow"], ["red", "green", "blue", "green"], ["yellow"]]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "banana"], ["cherry", "apple", "banana"]]], [[["black", "orange", "green"], ["white", "black"], ["black", "orange", "green"], ["black", "white", "orange"]]], [[["cbpinklueherry", "cherry", "apple", "bsanana", "banana"], ["banana", "cherry", "apple"], ["cbpinklueherry", "cherry", "apple", "bsanana", "banana"]]], [[["orange", "green"]]], [[["cherry", "apple", "bsanana", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"], ["cherry", "apple", "bsanana", "banana"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["orange", "peach", "plum"]]], [[["apple", "orange"], ["grape", "mango", "apple", "grape"], ["grape", "mango", "apple", "grape"], ["grape", "mango", "apple", "grape"]]], [[["zebra", "lion", "tiger", "zebra"], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger", "zebra"], ["monkey"]]], [[["cherry", "banana", "apple"], ["peach", "orage", "plum"], ["peach", "orage", "plum"], ["cherry", "banana", "apple"]]], [[["red", "green"], ["red", "green"], ["yellow", "orange"], ["red", "green"]]], [[["red", "green", "blue", "green"], ["yellow", "yellow"], ["red", "green", "blue", "green"], ["yellow", "yellow"], ["yellow", "yellow"]]], [[["ngeant", "nge"]]], [[["red", "green", "blue"], ["yellow", "orange"], ["purple", "pink", "teal", "brown"], ["red", "green", "blue"]]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple"], ["cherry", "apple"], ["cherry", "apple"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "helephant", "elephant"], ["cat", "dog", "helephant", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"]]], [[["red", "green", "blue", "red"], ["yellow", "orange"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a", "e"], ["cat", "dog", "elephant"], ["IODiWvh", "e", "f", "dog", "r", "cat", "a", "e"], [], [], ["zebra", "lion", "tiger"]]], [[[], ["cat", "dog", "elephant"], ["zebra", "lion"], ["giraffe"], ["zebra", "lion"], []]], [[["banana", "cherry", "apple"], ["cherry", "apple", "banana"], ["cherry", "apple", "banana"]]], [[["apple", "green"], ["apple", "green"], ["apple", "green"], ["black", "white", "black", "white"], ["white", "orange", "orange", "green"], ["white", "orange", "orange", "green"]]], [[["cat", "dog", "elephant"], [], ["zebra", "lion", "tiger"], ["monkey"], []]], [[["apple", "banana", "banana"], ["ant", "pear", "pear", "pear"], ["ant", "pear", "pear", "pear"], ["orange", "orange", "orange", "orange"], ["orange", "orange", "orange", "orange"]]], [[["cherry", "apple", "banana", "apple"], ["banana", "cherry", "banana"], ["banana", "cherry", "banana"], ["cherry", "apple"], ["cherry", "apple", "banana", "apple"]]], [[["cat", "dog", "elephant"], ["giraffe", "tiger", "zebra"], ["monkey", "lion", "tiger"]]], [[["cherry", "apple", "apple"], ["banana", "cherry", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"]]], [[[], ["orange", "purple", "brown"], ["yellow", "teai", "pink", "teal"]]], [[["appletiger", "banana", "cherry", "cherry"], ["cherry", "apple", "bsanana", "banana"], ["appletiger", "banana", "cherry", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "bsanana", "banana"]]], [[["apple", "banana", "mango"], ["apple", "banana", "mango"], ["cherry", "appl", "banana"], ["apple", "banana", "mango"], ["apple", "banana", "mango"]]], [[["orange", "orabluenge", "e"], ["apple", "banana", "banana"], ["orange", "orabluenge", "e"], ["pear", "pear"], ["orange", "orabluenge", "e"], ["apple", "banana", "banana"]]], [[["apple", "banana", "banana"], ["pear", "pear"], ["orange", "orange"]]], [[["red", "green", "orange", "blue"], [], ["orange", "purple", "brown"], ["yellow", "pink", "teal"]]], [[["banana", "cherry", "apple"], ["cdherry", "apple", "banana"], ["cdherry", "apple", "banana"]]], [[["black", "orange", "green"], ["white", "black"], ["black", "orange", "green"], ["black", "white", "orange"], ["black", "white", "orange"]]], [[["orange", "green", "green", "orange"], ["black", "white", "black", "white"], ["white", "orange", "bsanana", "orange", "green"], ["black", "white", "black", "white"]]], [[["apple", "green"], ["apple", "green"], ["apple", "green"], ["black", "white", "black", "white"], ["white", "orange", "orange", "green"], ["white", "orange", "orange", "green"], ["apple", "green"], ["apple", "green"]]], [[["blue", "red", "green"], ["orange", "yellow", "orange"], ["brown", "purple", "pink", "teal"], ["orange", "yellow", "orange"]]], [[["elephant", "ant", "bee"], ["dog", "camel", "cat"], ["zebra", "giraffe", "lion"], ["dog", "camel", "cat"]]], [[["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "cherry"], ["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "cherry"], ["banana", "cherry", "apple", "cherry"], ["orange", "kiwi", "plum", "plum"]]], [[["banana", "cherry"], ["cherry", "apple"], ["cherry", "apple", "banana"], ["banana", "cherry"]]], [[["red"], ["red"], ["red"], ["yellow", "orange"], ["red"]]], [[["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"], ["i", "j", "j"], ["k", "l"], ["m", "n"], ["o", "p"], ["q", "r"], ["s", "t"], ["u", "v"], ["w", "x"], ["y", "z"]]], [[["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["yellow", "yellow"], ["yellow", "yellow"], ["red", "green", "blue", "green", "green"]]], [[["pear", "bakna", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"], ["grape", "mango", "apple"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "pgrape", "mango", "apple"]]], [[["a", "orabluenge", "e"], ["pear", "pear", "pear"], ["apple", "banana", "banana"], ["a", "orabluenge", "e"], ["pear", "pear", "pear"], ["a", "orabluenge", "e"], ["a", "orabluenge", "e"], ["apple", "banana", "banana"]]], [[["cherry", "apple", "apple"], ["banana", "chlrry", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"]]], [[["cat", "banana", "apple"], ["cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cat", "banana", "apple"]]], [[["orange", "yellow", "orange", "orange"], ["blue", "red", "green"], ["orange", "yellow", "orange", "orange"], ["brown", "purple", "pink", "teal"], ["orange", "yellow", "orange", "orange"]]], [[["banana", "cherry"], ["cherry", "apple"]]], [[["red", "green", "p", "green"], ["yellow"], ["red", "green", "p", "green"], ["yellow"], ["red", "green", "p", "green"]]], [[["cherry", "apple", "banana", "apple"], ["banana", "cherry", "banana"], ["banana", "cherry", "banana"], ["cherry", "apple", "banana", "apple"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "apple"], ["grape", "apple"], ["grape", "apple"]]], [[["red", "green", "orange", "blue"], [], ["orange", "purple"], ["orange", "purple"], ["yellow", "pink", "teal"]]], [[["cat", "dog", "elephant"], ["IODiWvh", "e", "f", "dog", "r", "cat", "a", "e"], [], [], ["zebra", "lion", "tiger"], ["zebra", "lion", "tiger"], ["zebra", "lion", "tiger"]]], [[["cherry", "apple", "apple"], ["banana", "chlrry", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"]]], [[["cherry", "apple", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["orange", "peach", "plum"]]], [[["apple", "banana"], ["orange", "orabluenge", "e"], ["apple", "banana"], ["orange", "orabluenge", "e"], ["pear", "pear"], ["orange", "orabluenge", "e"], ["apple", "banana"]]], [[["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "abanana", "cherry"], ["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "abanana", "cherry"], ["orange", "kiwi", "plum", "plum"]]], [[["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"], ["i", "j", "j"], ["k", "l"], ["m", "n"], ["o", "p"], ["q", "r"], ["s", "t"], ["u", "v"], ["w", "x"]]], [[["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["yellow", "yellow"], ["yellow", "yellow"], ["red", "green", "blue", "green", "green"], ["yellow", "yellow"]]], [[["cat", "banana", "apple"], ["cherry", "banana", "apple"], ["peach", "orange", "plum", "plum"], ["peach", "orange", "plum", "plum"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "helephant", "elephant"], ["cat", "dog", "helephant", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], ["cat", "dog", "helephant", "elephant"]]], [[["apple", "orange"], ["grape", "mango", "n", "grape"], ["grape", "mango", "n", "grape"], ["grape", "mango", "n", "grape"]]], [[["dog", "camel", "cat"], ["zebra", "giraffe", "lion"]]], [[["apple", "green"], ["apple", "green"], ["apple", "green"], ["black", "white", "black", "white"], ["white", "orange", "green"], ["white", "orange", "green"]]]], "contract": "\n    assert isinstance(input_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(all(isinstance(y, str) for y in x) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n"}
{"task_id": "Mbpp/105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "entry_point": "count", "canonical_solution": "\ndef count(lst):   \n    return sum(lst) \n", "base_input": [[[true, false, true]], [[false, false]], [[true, true, true]]], "atol": 0, "plus_input": [[[]], [[false, false, false, false]], [[false, true, false, true, true, false, true, false]], [[false, true, true, true, true, false, true, false]], [[false, false, false, false, false]], [[false, true, false, false, false, false]], [[false, false, false, false, false, false]], [[false, true, false, false, false, false, false]], [[false, true, false, false, false, true, true]], [[false, true, false, false, false, false, false, false]], [[false, true, false, true, false, false, false]], [[false, false, false, false, false, false, false]], [[true, false, false, false, false, false, false]], [[true, false, false, false, false]], [[false, true, false, true, false, true, false, false]], [[false, true, true, false, true, true, false, true, false]], [[false, false, false, false, false, false, false, false]], [[true, false, false, false, false, false, false, false]], [[true, false, true, false, true, false, false, false]], [[true, false, true, true, true, false, true, false]], [[false, false, false, true, false, false]], [[false, true, true, false, false, true, true]], [[false, false, false, false, false, false, true, false]], [[true, false, false, false, false, false, false, false, false]], [[false, false, false]], [[false, true, false, true, true, true, true, false]], [[true, false, true, true, false, false, true, true, false, true, true]], [[false, false, false, false, true, false, true, false]], [[false, true, false, false]], [[false, false, false, false, false, false, false, false, false]], [[true, false, true, true, true, false, false, false, true]], [[false, true, false, false, true, false, false, true]], [[false, true, false, false, false, false, false, false, false]], [[false, true, false, false, true, false, false]], [[true, false, true, true, true, true, false, false, false, false, true]], [[true, false, false, false, false, false]], [[false, false, false, false, false, false, true, false, false]], [[true, false, false, true, true, false, true, false]], [[false, false, true, false, true, false, false]], [[false, false, false, false, false, false, false, false, false, false, false]], [[true, false, true, false, false, false, false]], [[true, false, true, false, false]], [[false, true, true, true, true, false, false]], [[false, false, false, false, false, false, false, false, false, false]], [[false, false, true, false, true, false, false, false, false]], [[false, true, false, false, true, true, true]], [[false, true, false, true, false, false, false, true, true]], [[false, false, true, false, true, false, false, false]], [[false, false, false, true, false, false, false, false, false, false, false, false]], [[false, true, false, true, true, false, true, true, false, false]], [[false, true, false, true, true, false, false, false]], [[false, true, true, false, false, false]], [[false, true, false, true, true, false, true, false, false, false]], [[false, true, false, false, true, false, false, false]], [[false, true, false, true, false, false, false, false]], [[false, true, true, true, true, false, true, false, false]], [[false, false, false, false, false, false, false, false, false, false, false, false]], [[false, false, true, true, true, true, false, true, true, false]], [[false, true, false, true, false, false, false, false, true, true]], [[false, true, false, true, false, false, false, false, false]], [[false, false, false, false, true, false, false, false, false]], [[false, true, false, false, true, false, false, false, true, true]], [[false, true, false, false, false, true, true, false, false, true]], [[false, true, false, true, true, false, true, false, false]], [[true, false, true, false, false, false, false, false]], [[true, false, true, false, false, false]], [[false, false, false, true, true, false]], [[false, true, true, true, false, false, true, true]], [[true, false, true, false, true, false, false]], [[false, true, false, false, true, true, true, false, true]], [[false, false, false, true, false, false, false, false, false, true, false, false]], [[false, true, false, false, false]], [[false, false, false, false, false, true, false]], [[false, false, false, true, true, true, true, false, true, false]], [[false, false, false, false, false, true]], [[true, false, false, true, true, false, true, false, false]], [[false, true, false, true, false, true, false, false, false]], [[true, false, true, false, true, true, false, false, false]], [[false, true, true, false, false, true, true, true]], [[true, false, true, true, false, true, false]], [[true, false, false, true, true, true, true, false, false, false, false, true]], [[false, true, true, false, false, true, true, true, true]], [[false, true, false, true, true, false, false]], [[true, false, false, true, false, true, false, false, true, false]], [[false, true, false, true, false, false, true]], [[false, true, true, true, true, false, false, false, true]], [[true, false, true, true, false, false, true, true, false, true, true, false]], [[false, true, true, true, true, false, true, true, false]], [[false, true, true, false, true, false, true, false]], [[true, false, true, true, true, false, false, false, true, true]], [[true, false, true, true, true, false, false, false, false, true]], [[true, false, true, true, true, true, false, true, false]], [[false, true, false, true, false, false, false, false, true, true, false, true]], [[true, false, true, false, true, true, false, true, false, false]], [[false, true, true, false, false, true, false, false, false]], [[true, false, true, true, false, false, true, true, false, false, true, true]], [[false, false, true, false, true, false, false, true, true]], [[false, false, true, false, true, false, false, false, false, false]], [[false, true, false, false, false, false, true]], [[true, false, true, false, false, true]], [[false, false, false, false, true, false, false, false, false, false]], [[true, false, true, true, true, true, false, false, true]], [[true, false, true, true, false, true, true, true, false]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3\n"}
{"task_id": "Mbpp/106", "prompt": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "entry_point": "add_lists", "canonical_solution": "\ndef add_lists(test_list, test_tup):\n  return test_tup + tuple(test_list)\n", "base_input": [[[5, 6, 7], [9, 10]], [[6, 7, 8], [10, 11]], [[7, 8, 9], [11, 12]]], "atol": 0, "plus_input": [[[], [1, 2, 3]], [[1, [2, 3], {"a": 4}], [5, [6, 7], {"b": 8}]], [[], []], [[1, 2, 3], []], [[0.5, [1, 2], {"x": 3}], [4.5, [5, 6], {"y": 7}]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 13]]]], [[[], [1, 2], {"a": [3, 4]}], [5, [6, 7], {"b": [8, [9]]}]], [[{"x": [1, 2]}, {"y": [{"z": [3]}, 4]}], [[5, 6, [7]], [{"a": 8}]]], [[[[1], 2], {"3": [4]}, [5, 6, 7]], [8, [9, [10]], {"a": 11}]], [[[], [], []], [[], [], []]], [[[], [[]], [[], []]], [[[], []], [[]], [[], []]]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, [8, [9]], {"a": 10, "b": 11}]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]], [[[1, 2], [3, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [[7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]], [8, [9, [10]]]], [[[1, 2], [4]], [[5, 6], {"a": [7, [8, 9]]}]], [[[], [[]], [[], []]], [[[], [], []], [[]], [[], []]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]], [[1, 2], [[7, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[true, true, true, true, true, true, false], [4.5, 44.32264550231051, 0.5, 0.5, -1.6326583229058826, 4.5, 55.52796338743434]], [[[], [1, 2], {"a": [3, 4]}], [[6, 7], {"b": [8, [9]]}]], [[2], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[3, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[[[1], 2], {"3": [4]}, [5, 6, 7]], [9, [9, [10]], {"a": 11}]], [[[1, 2], [4]], [[5, 6], {"a": [7, [8, 9]]}, [5, 6]]], [[[[1], 2], {"3": [4]}], [9, [9, [10]], {"a": 11}]], [[[1, 2], [3, 4, 4], [3, 4, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[15], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, [8, [9]], {"a": 10, "b": 11}]], [[[], [[]], [[], []]], [[[], [], []], [[]], [[], []], [[]]]], [[[3, 4]], [[5, 6], {"a": [7, [8, 9]]}, [5, 6]]], [[], [{"a": [7, 14, [8, 9]], "hello": [7, 14, [8, 9]]}, {"a": [7, 14, [8, 9]], "hello": [7, 14, [8, 9]]}]], [[{"3": [4]}, [5, 6, 7]], [9, [9, [10]], {"a": 11}]], [[[], [1, 2], {"a": [3, 4]}], [6, [6, 7], {"b": [8, [9]]}]], [[], [1, 2]], [[], [[4, 5, 6, 6], [4, 5, 6, 6], {"a": [7, [8, 9]]}]], [[[1, 2], [3, 4], [3, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[[], [], []], [[], [true, true, false, false, true]]], [[true, true, true, true, true, true, false], [4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}], 1], [[7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[1, 2, 3], [false, true]], [[1, 2, 3], [false, false, true, true]], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[], [false, true, false, false]], [[-96.96084131931524, -94.69555233395306, -95.59861164068568, -1.6326583229058826, 92.24778790461318], [1, 2]], [[69, -68, -26, 99, 9, -10, -55, 65, 13, 64], [1, 2]], [[true, false, false], [false, true, false, false]], [[1, 2], [[7, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 7, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[], [], [], []], [[], [], []]], [[["c", "Tbzkr"], [], [], []], [[], [], []]], [[0, 2, 3], []], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 1, 13], [12, 1, 13]]]], [[15], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, [8, [9]], {"a": 10, "b": 11}, 7]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, [8, [9]], {"a": 10, "b": 11}, {"a": 10, "b": 11}]], [[[], [[], []], [[], []], [[], []]], [[[], []], [[]], [[], []]]], [[[], [[]], [[], []]], [[], [[], [], []], [], [[], []]]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]]], [[[12, 13]]]], [[[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 13], [12, 13]]]], [[[7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 1, 13], [12, 1, 13]]]], [[], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[{"3": [4]}, [5, 6, 7], [5, 6, 7]], [8, [9, [10]], {"a": 11}]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], [[1], 4, [1]]], [8, [9, [10], 9], [9, [10], 9]]], [[[], [[], []], [[], []], []], [[[], []], [], [[], []]]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], {"3": [4]}], [8, [9, [10]]]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {}, {}]], [[[12, 13]], [[12, 13]]]], [[[], [], [[], []]], [[[], [], []], [[]], [[], []]]], [[[7, 9, {}, {}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [["hello", "z", "ZJgH"], [{"a": [7, 14, [8, 9]]}, {"a": [7, 14, [8, 9]]}]], [[1, 2, 7, 3], [false, false, true, true, true]], [[[], [], [], []], [[], [], [36.685637329178746], [36.685637329178746]]], [[1, 2, 2], [[9, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[], 12, "pOEmwo", 0.5, ["z", "T"], "Iuy", 7], [1, 2, 2]], [[{"x": [1, 2]}, {"y": [{"z": [3]}, 4]}, {"x": [1, 2]}], [[5, 6, [7]], [{"a": 8}]]], [[{"3": []}, [5, 6, 7], [5, 6, 7]], [8, {"a": 11}]], [[], [false, true, false, false, false]], [[0.5, [1, 2], {"x": 3, "ZJgHx": 4}], [4.5, [5, 6], {"y": 7}]], [[[2, 3], {"a": 4}], [5, [6, 7], {"b": 8}]], [[[], [1, 2], {"a": [3, 4]}], [6, [6, 7], {}]], [[15], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}]]], [[], [-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 1, 13], [12, 1, 13], [12, 1, 13]], [[12, 1, 13], [12, 1, 13], [12, 1, 13]]]], [[1, -55], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[], [[], []], [[], []], [[], []]], [[[], []], [[]], [[]], [[]]]], [[1, 1, 2, 3], [false, true]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, {"a": 10, "b": 11}, {"a": 10, "b": 11}]], [[[7, 9, {}, {}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [[-55], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[-5, 13, 99], [], []], [[], [true, true, false, false, true]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], [[5, 6]]], [[[1, 2], [3, 4, 4], [3, 4, 4]], [{"a": [7, [8, 9]]}]], [[[7, 9, {}, {}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]], [[9, [10]]]], [[], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}]]], [[true, false, false], [true, true, false, false]], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], [[5, 6], {}]], [[[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [[7, 8, {"c": {"d": [9], "ZJgHx": [9]}, "ZJgH": {"d": [9], "ZJgHx": [9]}}, {"c": {"d": [9], "ZJgHx": [9]}, "ZJgH": {"d": [9], "ZJgHx": [9]}}], [7, 8, {"c": {"d": [9], "ZJgHx": [9]}, "ZJgH": {"d": [9], "ZJgHx": [9]}}]]], [[false, false, false, false, true, true, true], [-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524]], [[[1, 2], [], [1, 2]], [[5, 6], {"a": [7, [8, 9]]}, [5, 6]]], [[[], [], [], [], []], [[], [true, true, false, false, true]]], [[], [{"a": [7, [8, 9]], "hello": [7, [8, 9]]}, {"a": [7, [8, 9]], "hello": [7, [8, 9]]}]], [[[], [], [], []], [[], [true, true, false, false, true]]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}, 3], 1], [[7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[7, 9, {}, {}]], [[[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]]]], [[[3, 4]], [[5], {"a": [7, [8, 9]]}, [5], [5], [5]]], [[[], [1, 2], {"a": [3, 4]}, [1, 2]], [5, [6, 7], {"b": [8, [9]]}]], [["hello", "z", "ZJgH", "z", "hello"], [{"a": [7, 14, [8, 9]]}, {"a": [7, 14, [8, 9]]}]], [[[], [1, 2], {"a": [3, 4]}], [6, [6, 7], {"b": [8, [9]]}, 6]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, {"a": 9, "b": 11}, {"a": 9, "b": 11}]], [[[1, 2], [4]], [{"a": [7, [8, 9]]}, [5, 6]]], [[[3, 3, 4]], [[5], {"a": [7, [8, 9]]}, [5], [5], [5]]], [[], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[true, true, true, true, true, false, false], [4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n"}
{"task_id": "Mbpp/108", "prompt": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "entry_point": "merge_sorted_list", "canonical_solution": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  return sorted(num1 + num2 + num3)\n", "base_input": [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], [[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]]], "atol": 0, "plus_input": [[[1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[100, 200, 300, 400, 500, 600], [25, 50, 75, 200, 225, 250, 275], [350, 400, 450, 500, 550, 600, 650, 700]], [[5, 10, 15, 20, 25, 30, 35], [1, 2, 3, 4, 5, 6, 7], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[], [], []], [[-10, -9, -8, -7, -6, -5], [1000, 2000, 3000], [-100, -200, -300, -400, -500]], [[1.5, 2.5, 3.5, 4.5, 5.5], [0.5, 1.5, 2.5, 3.5, 4.5], [-5.5, -4.5, -3.5, -2.5, -1.5]], [[10, 20, 30, 40, 50], [5, 15, 25, 35, 45], [1, 2, 3, 4, 5]], [[100, 200, 300, 400, 500], [-100, -200, -300, -400, -500], [0.1, 0.2, 0.3, 0.4, 0.5]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 3, 5, 2, 4]], [[10, 20, 30, 40, 50, 60, 70], [5, 15, 25, 35, 45, 55, 65, 75], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[10, 15, 20, 25, 30], [5, 10, 15, 20, 25], [1, 2, 3, 4, 5]], [[100, 200], [50, 150, 250], [80, 160, 240]], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [10, 20, 30, 40, 50]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]], [[100, 200, 300, 400, 500], [250, 350, 450, 550, 650], [100, 200, 300, 400, 500]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[12, 80, 160, 240], [650, 200], [12, 80, 160, 240]], [[650, 38], [650, 38], [12, 80, 160, 240]], [[10, 20, 30, 50, 60, 70], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 2, 3]], [[1, 2, 3, 4, 5], [1, 3, 5, 3, 2, 4], [1, 3, 5, 3, 2, 4]], [[999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55, 25], [15, 25, 35, 45, 55, 25]], [[11, 239, 80, 41, 240], [650, 38, 650], [11, 239, 80, 41, 240]], [[1, 2, 3, 60, 4, 5], [5, 4, 3, 2, 24], [1, 2, 3, 60, 4, 5]], [[650, 37], [650, 37], [12, 80, 160, 240]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[100, 300, 400, 500, 600], [25, 50, 75, 200, 225, 250, 275], [350, 400, 450, 500, 550, 600, 650, 700]], [[], [], [50, 150, 250]], [[12, 80, 160, 240], [200], [12, 80, 160, 240]], [[1, 3, 5, 7, 9], [2, 6, 8, 10], [1, 3, 5, 7, 9]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 17, 19, 15, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[10, 15, 20, 25, 30], [5, 10, 15, 20], [1, 1, 3, 4, 5]], [[2, 3, 3, 3, 3, 2, 2, 4, 3], [1, 1, 1, 1, 1, 1, 1], [2, 3, 3, 3, 3, 2, 2, 4, 3]], [[12, 81, 160, 240], [12, 81, 160, 240], [201, 200]], [[12, 81, 160, 240], [201], [201]], [[1, 2, 3, 60, 4, 5], [5, 4, 3, 3, 2, 24], [1, 2, 3, 60, 4, 5]], [[1, 3, 5, 7, 9], [1, 3, 5, 9], [1, 3, 5, 9]], [[650, 37], [12, 80, 160, 240], [650, 37]], [[-10, -9, -8, -7, -6, -5], [-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500]], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[11, 239, 81, 41, 240], [650, 38, 650], [650, 38, 650]], [[23, 650], [23, 650], [12, 80, 160, 39]], [[5, 10, 15, 20, 25, 30, 35], [1, 2, 3, 4, 1, 6, 7], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[650, 36], [650, 36], [12, 80, 160, 240]], [[12, 3, 160, 240], [12, 3, 160, 240], [12, 3, 160, 240]], [[10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70]], [[100, 200], [50, 250], [50, 250]], [[1000, 999, 998, 997, 996], [1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004]], [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[81, 160, 240], [81, 160, 240], [81, 160, 240]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 4, 2, 3]], [[200, 200], [200, 200], [50, 250, 50]], [[1, 1, -6, 1, 1, 1, 1, 1], [1, 1, -6, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[1, 3, 5, 7, 27, 9], [1, 3, 5, 7, 27, 9], [3, 5, 9]], [[650, 38, 38], [650, 38, 38], [650, 38, 38]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7]], [[12, 160, 240], [12, 160, 240], [201, 200]], [[11, 239, 80, 41, 240], [650, 38, 649, 650], [650, 38, 649, 650]], [[1, 18, 3, 5, 9], [1, 18, 3, 5, 9], [1, 18, 3, 5, 9]], [[50, 150], [50, 150], [80, 160, 240]], [[651, 23, 650, 23], [651, 23, 650, 23], [12, 80, 160, 39]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[10, 20, 30, 50, 60, 70], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9]], [[650, 38, 37], [650, 38, 37], [650, 38, 37]], [[200], [12, 80, 240], [12, 80, 240]], [[650, 38, 650, 649, 650, 650], [650, 38, 650, 649, 650, 650], [650, 38, 650, 649, 650, 650]], [[0.5, 1.5, 2.5, 3.5, 4.5], [-5.5, -4.5, -3.5, -1.5], [0.5, 1.5, 2.5, 3.5, 4.5]], [[200], [12, 80, 160, 240], [12, 80, 160, 240]], [[1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 19, 15, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[650, 37], [650, 37], [650, 37]], [[50, 13, 150, 13], [50, 13, 150, 13], [50, 13, 150, 13]], [[12, 81, 160, 240, 81], [], [12, 81, 160, 240, 81]], [[1, 1, -6, 1, 1, 1, 1, 1], [4, 3, 3, 3, 3, 2, 3], [4, 3, 3, 3, 3, 2, 3]], [[160, 240], [160, 240], [-100, 200]], [[1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[10, 20, 30, 400, 40, 50], [5, 15, 25, 35, 45], [1, 2, 3, 4, 5]], [[1, 2, 100, 3, 4, 5, 6, 7, 9, 10, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[650, 38, 650, 650, 650], [650, 38, 650, 650, 650], [650, 38, 650, 650, 650]], [[1, 2, 3, 4, 1, 6, 29], [50, 45, 40, 35, 30, 25, 20, 15, 10], [1, 2, 3, 4, 1, 6, 29]], [[12, 160, 240, 81], [], [12, 160, 240, 81]], [[651, 23], [651, 23], [651, 23]], [[650, 38, 650], [650, 38, 650], [11, 239, 81, 41, 240]], [[10, 20, 30, 40, 50, 10], [15, 25, 35, 45, 55, 25, 15, 25], [15, 25, 35, 45, 55, 25, 15, 25]], [[1, 3, 4, 5], [10, 20, 30, 40], [1, 3, 4, 5]], [[1, 2, 3, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 5, 6, 8, 9, 6, 7, 6]], [[2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2]], [[1, 1, -6, 1, 1, 1, 1, 1], [4, 3, 3, 3, 2, 3], [4, 3, 3, 3, 2, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2]], [[1, 3, 5, 9], [1, 3, 5, 9], [1, 3, 5, 9]], [[1, 2, 3, 4, 5, 6, 7, 9, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 13]], [[1, 3, 5, 7, 9], [2, 6, 8, 10], [1, 60, 5, 7, 9]], [[10, 20, 30, 400, 40, 50, 10], [10, 20, 30, 400, 40, 50, 10], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 1, 6, -9], [1, 2, 3, 4, 1, 6, -9], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500]], [[10, 20, 30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 40]], [[0.5, 1.5, 2.5, 3.5, 4.5], [-4.5, -3.5, -1.5], [0.5, 1.5, 2.5, 3.5, 4.5]], [[12, 27, 240, 15, 81], [12, 27, 240, 15, 81], [12, 27, 240, 15, 81]], [[40, 27, 240, 15, 81], [40, 27, 240, 15, 81], [40, 27, 240, 15, 81]], [[10, 20, 30, 50], [10, 20, 30, 40], [10, 20, 30, 40]], [[1, 1, 1, 1, 38, 1, 1, 1], [1, 1, 1, 1, 38, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[11, 239, 80, 41, 240], [650, 651, -5, 38, 649, 650], [650, 651, -5, 38, 649, 650]], [[81, 240], [81, 240], [81, 240]], [[200], [12, 80, 160, 12, 240], [12, 80, 160, 12, 240]], [[-7, 12, 160, 37, 81], [-7, 12, 160, 37, 81], [-7, 12, 160, 37, 81]], [[1, 2, 3, 4, 1, 6, 29], [50, 45, 40, 35, 30, 25, 20, 15, 10, 10], [1, 2, 3, 4, 1, 6, 29]], [[1, 3, 3, 60, 4, 5], [5, 4, 3, 3, 2, 24], [1, 3, 3, 60, 4, 5]], [[200, 100, 200, 300, 400, 500], [-100, -200, -300, -400, -500], [0.1, 0.2, 0.3, 0.4, 0.5, 0.3]], [[81, 160, 159, 240], [81, 160, 159, 240], [81, 160, 159, 240]], [[-6, 81, 160, 240], [-6, 81, 160, 240], [-6, 81, 160, 240]], [[38, 650, 649, 650, 650], [38, 650, 649, 650, 650], [38, 650, 649, 650, 650]], [[10, 20, 40, -500, 50], [10, 20, 40, -500, 50], [10, 20, 40, -500, 50]], [[651, -7, 652, 23], [651, -7, 652, 23], [651, -7, 652, 23]], [[1, 1, 1, 1, 38, 1, 1, 1], [4, 3, 3, 3, 3, 3, 2, 3], [4, 3, 3, 3, 3, 3, 2, 3]], [[-100, -100, -200, -300, -400, -500], [-100, -100, -200, -300, -400, -500], [-100, -100, -200, -300, -400, -500]]], "contract": "\n  assert isinstance(num1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num3, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n"}
{"task_id": "Mbpp/109", "prompt": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "entry_point": "odd_Equivalent", "canonical_solution": "\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "base_input": [["011001", 6], ["11011", 5], ["1010", 4]], "atol": 0, "plus_input": [["1100110011", 5], ["0000", 3], ["10000100110011", 5], ["10000100110011", 3], ["11001100111100110011", 5], ["00011001100110", 4], ["1000110011100110", 4], ["11001100111100110011", 3], ["000110011000", 4], ["110011001111001100110001100111001101", 5], ["000110011000", 5], ["1000110011100110", 3], ["110011001111001100111100110011", 5], ["11001100111110011001111001100110001100111001101100110011", 5], ["00011001100110", 3], ["10001110011100110", 4], ["1000011001100111001100111100111001111001100110001100111001101", 5], ["10001100111001110001100111001100", 3], ["10001100111001110001100111001100", 5], ["110011001111001100111100110011", 4], ["11001100111110011001111001100110001100111001101100110011", 4], ["110011001111001100111100110011", 6], ["11001100111100110011", 6], ["1100110011110011001110100110011", 4], ["110011001111100110011110011001100001100110011", 4], ["1000000110011000110011100110", 4], ["110011001111100110011110011001100011001110101101100110011", 4], ["11001100111100110011", 7], ["110011001111001100110001100111001101", 7], ["1100110011110011001100110011110011001111", 7], ["1000111001111001100111100110011100110", 3], ["1000000110011000110011100110", 3], ["110011001111100110011110011001100011001110101101100110011", 7], ["1000011001100111001100111100111001111001100110001100111001101", 7], ["11001100111100110011110011001", 4], ["00011001100110", 5], ["1000011001100111001100111100111001111001100110001100111001101", 6], ["0001100110010", 5], ["1110011001111001100111100110011001100111110011001111001100110001100111001101100110011", 5], ["1100110011110011001100110011110011001111100110011110011001100011001110011011", 7], ["1100110011110011001111", 4], ["00110011001111001100111010011001100", 3], ["0001100110010", 7], ["11001100111100111100110011110011001100110011110011001111100110011110011001100011001110011011001111", 4], ["1000111001111001100111100110011100110", 4], ["1100110011110011001100110011110011001111", 4], ["11001100111100111000010011001100111100110011", 5], ["00110011001111001100111010011001100", 5], ["10001100111001110001100111001100", 2], ["1100110011110011100001001100110011110011001100110011001111001100111010011001100", 5], ["1000110011100110", 5], ["11001100111100110011110011001", 7], ["001100110011110011001110100110110011001111001100110011001111001100111110011001111001100110001100111001101101100", 5], ["00011110011001111100110011110011001100011001110011011001100110011000", 4], ["1100110011110011001111", 6], ["10001110011110011001111001100011100110", 4], ["11001100111110011001111001100110001100111001101100110011", 3], ["1000000110011000110011100110", 2], ["1100110011110011001100110011110011001111", 2], ["10000100110011", 7], ["1100110001111100110011110011001100011001110101101100110011", 7], ["110011001111001100110001100111001101", 6], ["110011001111001", 4], ["1110011001111001100111100110011001100111110011001111001100110001100111001101100110011", 7], ["11001100011111001100111100110001100011001110101101100110011", 7], ["11001100111100111000010011001100111100110011", 4], ["11001100111100110011101001010011", 3], ["1000110011100110", 6], ["000110011000110011001000110", 4], ["1000110011100111000110011100110011001111001100111100110011100", 7], ["11001100111100110011101001010011", 2], ["110011001111001100011101001010011", 2], ["000110011000110011001000110", 2], ["11001100111100110011101001010011", 1], ["110011001111001110000100110011001111100110011", 5], ["110011001111001100101000110011000111110011001111001100011000110011101011011001100111100111001101", 5], ["1100110011001100111100110011110011001001100101000110011000111001111001100011000110011101011011001100111100111001101", 5], ["111001100111100110011110010110011", 5], ["110011001111001100110011001111001110000100110011001111100110011011101001010011", 5], ["1000011001100111001100111100111001111001100110001100111001101", 4], ["110011001111001100110001100111001101", 8], ["110011001111001100110011001111001110000100110011001111100110011011101001010011", 1], ["1000110011100110", 7], ["110011001111100110011110011001100001100110011", 7], ["11001110011001111001100110001100111001101100111100111000010011001100111100110011", 6], ["1100110011110011000111001001010011", 5], ["110011001111001100111001001010011", 2], ["0001100011000110011001000110", 8], ["1100110011110011100001001100110011111100110011110011001110100110011100110011", 5], ["1000000110011000110011100110", 7], ["001100110011110011001110100110110011001111001100110011001111001100111110011001111001100110001100111001101101100", 4], ["11001100111100110011110011001", 8], ["000110011000110011001000110", 5], ["110011001111001100011101001100110011110011001110100110110011001111001100110011001111001100111110011001111001100110001100111001101101100001010011", 2], ["11001100111100111100110011110011001100110011110011001111100110011110011001100011001110011011001111", 7], ["1100110100110011", 6], ["111001100111100110011110010110011", 7], ["110011001111001100111001001010011", 6], ["11001100111100110011110011001", 5], ["11100110011110011001111001100110011001111100110011110011001100011001110011100110011110011001111001100110011001111100110011110011001100011001110011011001100111", 7], ["11001100111110011001111001100110001100111001101100110011", 6], ["0001110000001100110001100111001101001000110", 4]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2\n"}
{"task_id": "Mbpp/111", "prompt": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n", "entry_point": "common_in_nested_lists", "canonical_solution": "\ndef common_in_nested_lists(nestedlist):\n    return list(set.intersection(*map(set, nestedlist)))\n", "base_input": [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]], [[[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]]], "atol": 0, "plus_input": [[[[], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[], [], [], []]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [6, 7, 8, 9]]], [[[], []]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4], [2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 11, 12], [13, 14, 15]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [1, 2, 3, 4]]], [[[1, 2, 3, 4, 5], [2, 6, 8, 10], [1, 3, 5, 7, 9]]], [[[], ["pesDUr", "hHJC", "tENrXrt", "dFybnG", "z", "UymdT", "G", "UbwECYme"], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6], [3, 4, 5, 6, 7, 6], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 11, 12], [13, 14, 15], [13, 14, 15]]], [[[1, 2, 2], [4, 5, 6], [6, 7, 8, 9], [1, 2, 2], [10, 11, 12], [13, 14, 15]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 5, 13, 6, 7, 8, 9], [5, 5, 13, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4], [2, 15, 4, 5, 4], [2, 15, 4, 5, 4], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5, 4], [2, 15, 4, 5, 4]]], [[[2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [4, 5, 6, 7]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9, 9], [10, 11, 12], [7, 8, 9, 9], [13, 14, 15]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 9], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4], [2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [5, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 9], [5, 6, 7, 8, 9, 9], [9, 8, 7, 6, 5], [9, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[9, 2, 3], [4, 5, 6], [8, 9, 9], [10, 11, 12], [8, 9, 9], [8, 9, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 14, 8, 10], [2, 4, 14, 8, 10], [2, 4, 6, 8, 10], [2, 4, 14, 8, 10]]], [[[4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 8]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [4, 5, 6, 7], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]], [[[13, 15, 14, 15], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 15, 14, 15]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 8, 7, 6], [3, 4, 5, 6, 8, 7, 6], [3, 4, 5, 6, 8, 7, 6], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [4, 3, 4, 5, 6], [4, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[4, 4, 6], [1, 2, 3], [4, 4, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[7, 7, 9, 9], [1, 2, 3, 3], [4, 5, 6], [7, 7, 9, 9], [10, 11, 12], [7, 7, 9, 9], [13, 14, 15]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 1, 11, 12], [13, 14, 15], [1, 2, 3, 2]]], [[[12, 1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9, 9], [11, 10, 11, 12], [11, 10, 11, 12], [7, 8, 9, 9], [13, 14, 15]]], [[[2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 4, 5], [3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[12, 1, 2, 3, 3], [4, 5, 6], [10, 11, 11, 12], [7, 2, 8, 9]]], [[[1, 2, 3, 4, 5, 1], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[10, 8, 11, 12], [12, 1, 2, 3, 3, 3], [4, 5, 6], [10, 8, 11, 12], [7, 8, 9], [10, 8, 11, 12]]], [[[2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [7, 8, 9]]], [[[10, 8, 7, 6, 5], [9, 8, 7, 6, 4], [5, 6, 7, 8, 9], [10, 8, 7, 6, 5]]], [[[87.07763738802882], [], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8]]], [[[3, 4, 5, 6, 3], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 4, 8, 10]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]], [[[5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[7, 8, 13], [1, 2, 3], [4, 5, 6], [7, 8, 13]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12], [10, 11, 12]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [2, 2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 2, 4, 8, 10]]], [[[9, 8, 4, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [2, 4, 8, 10], [2, 4, 8, 10]]], [[[9, 8, 7, 6, 5, 8], [9, 8, 7, 6, 5, 8], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5, 8]]], [[[5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 8], [9, 8, 7, 6, 5], [6, 7, 8, 9]]], [[[4, 5, 6], [6, 7, 8, 9], [1, 2, 2], [10, 11, 12], [13, 14, 15], [1, 2, 2]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 4, 5, 7, 9], [1, 4, 5, 7, 9], [2, 4, 8, 10]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 7, 9, 9], [7, 7, 9, 9], [13, 14, 15]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 6], [5, 6, 7, 8, 9, 6]]], [[[4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[13, 15, 14, 15], [1, 2, 3], [4, 5, 6], [7, 13, 8, 9], [7, 13, 8, 9], [10, 11, 12], [13, 15, 14, 15]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[5, 6, 7, 8, 9, 6], [9, 8, 7, 6, 5]]], [[[10, 8, 11, 2, 12], [12, 1, 4, 3, 3, 3], [4, 5], [12, 1, 4, 3, 3, 3], [10, 8, 11, 2, 12], [7, 8, 9], [10, 8, 11, 2, 12]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 4, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 4, 9, 1]]], [[[1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 6, 7], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6, 7], [3, 4, 5, 6, 7, 6, 7], [4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 6, 7]]], [[[5, 2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 2, 3, 4, 5], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7], [3, 4, 5, 6], [5, 2, 3, 4, 5], [3, 4, 5, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]], "contract": "\n    assert isinstance(nestedlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in nestedlist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n"}
{"task_id": "Mbpp/113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "entry_point": "check_integer", "canonical_solution": "\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n", "base_input": [["python"], ["1"], ["12345"]], "atol": 0, "plus_input": [[""], ["-5"], ["10"], ["-100"], ["100000"], ["   15"], ["25    "], ["  -200   "], ["123a"], ["-b456"], ["!7890@"], ["12ab34"], ["5@678"], ["123.45"], ["1,000"], ["1,0"], ["+123"], ["-987"], ["   1   2   3   "], ["  1  2  "], ["  "], ["-b45b6"], ["   "], ["-9+1237"], ["6-b456"], ["5  1  2  @678"], ["    1  2   "], ["123.4  -200   "], ["12ab324"], ["5  1  2   @678"], ["125,000"], ["123.4.5"], ["12ab341"], ["5"], ["--5"], ["1235"], ["6-b    1  2   456"], ["456"], ["12ab1235341"], ["-97"], ["6-b    1  2 1235  456"], ["   1   2    3   "], ["123.4  -200  4 "], ["1423.45"], ["4"], ["1423.5"], ["123.4  -212ab34100   "], ["12ab1235123.4  -200  4 341"], ["-212ab34100"], ["12ab13235123.4  -200  4 341"], ["-2132ab341012ab3240"], ["@@678"], ["  12ab324  1 1 2   "], ["@678"], ["44"], ["-9+14422371,000"], ["12ab21235341"], ["6-b    1  -2002 12355  456"], ["-2005"], ["12ab1235123.4"], ["-2-9+123712ab34100"], ["  -2000   "], ["VuNmzvmS"], ["3"], ["12ab123512312ab1235123.4.4"], ["1,0456"], ["     "], ["12ab3-b45641"], ["142443.45"], ["9-97"], ["123.4123.4  -2120ab34100   "], ["123.46-b4565"], ["125,000-20004"], ["123.4"], ["  12ab324  1 1    "], ["!790@"], ["-b412ab123-53415b6"], ["123.5"], ["0  -2000   "], ["    12ab324  1 1    "], ["11,0"], ["444"], ["6-b 12ab13235123.4  -200  4 341   1  2   456"], ["12aab13235123.4"], ["123.4  -206-b    1  2 1235  4560   "], ["-2123.5132ab341012ab3240"], ["-200"], ["-212a123.4  -212ab34100   34100"], ["    15"], ["  12ab324 a123.45 1 1 2   "], ["@@7678"], ["6-b    1  2 1235  456!790@"], ["15"], ["0  -2000 0  "], ["--55"], ["  1  2   "], ["141,045623.5"], ["1123.4    1  2   5"], ["12ab123512312a2b1235123.4.4"], ["0  -2000 0  -100"], ["  12ab324 a123.4    12ab324  1 1    2   "], ["12a1123.4    1  2   5b123.4..54"], ["6-b    VuNmzvmS1  2 1235  456"], ["456!790@"], ["12ab212351,000341"], ["b-b45b6"], ["1123.4  VuNmzvmS  1  2   5"], ["12ab133235123.4"], ["12ab3-b  12ab324 a123.45 1 1 2   4564"], ["12a1123.4"], ["2ab34 1  2   5"], ["2 5    "], ["DJm"], ["3VuNmzvmS1"], ["12136-b    1  -2002 12355  456a"], ["b-b456"], ["6-b    VuNmzNvmS1  2 1235  456"], ["125,00    150004"], ["12136-b    1-2000  -2002 12355  456a"], ["0   -2000   "], ["115"]], "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n"}
{"task_id": "Mbpp/115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n", "entry_point": "empty_dit", "canonical_solution": "\ndef empty_dit(list1):\n return all(len(d) == 0 for d in list1 if isinstance(d, dict))\n", "base_input": [[[[], [], []]], [[[1, 2], [], []]], [[[]]]], "atol": 0, "plus_input": [[[{}, {"a": {}}, {"b": {"c": {}}}]], [[{}, {}, {"a": {}}, {"b": {"c": {}}}]], [[{"1": [2, 3], "4": {}}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}]], [[{"1": [2, 3], "4": {}}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{}, {}, {"a": []}, {"b": {"c": {}}}, "not a dictionary", {}]], [[]], [[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]], [[{"a": {}}, {"b": {"c": {"d": {}}, "e": {}}, "f": {}}]], [[{"a": {}}, {"b": {"c": {"d": {}}}}, {"e": {"f": {}}}]], [[{}, {"a": {}}, {"b": {"c": {}}}, {"b": {"c": {}}}]], [[{"-62": 43.042669044562615, "33": 1.3715058915995826, "-99": 53.71568193524098, "54": 61.46184466382178, "11": 65.76911133393602, "10": -7.952205791962939}, {"b": {"c": {}}}, {"b": {"c": {}}}, {"a": {}}, {"b": {"c": {}}}]], [[{"1": [2, 3], "4": {}, "6": {"-50": true, "-62": false, "4": false}}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}, "6": {"-50": true, "-62": false, "4": false}}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"b": {"c": {}}}]], [[{}, {"b": {"c": {}}}]], [[{"a": {}}, {"e": {"f": {"83": "UGod", "-94": 43.042669044562615, "10": 9.34410462450414, "5": null, "25": false, "-62": 98.92336865475437, "4": "e", "54": "RW", "21": -22}}}]], [[{}, {"a": []}, {"b": {"c": {}}}, "not a dictionary", {}]], [[{"a": [], "aa": [false, false]}, {}, {"a": [], "aa": [false, false]}, {"b": {"c": {}}}, "not a dictionary", {}]], [[{"11": "ZQ", "-16": false, "4": -58}, {"1": [2, 3], "4": {}}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null, []]], [[{"a": {}, "UGod": {}}, {}, {"a": {}, "UGod": {}}, {"b": {"c": {}}}, {}]], [[{"a": [], "aa": [false, false]}, {}, {"a": [], "aa": [false, false]}, {"b": {"c": {}}}, "not a dictionary", {}, {}]], [[{"6": [8, 9, 7]}, {"1": [2, 3], "4": {}}, {}, {}, {}, {"-16": -7.952205791962939, "-54": 9.488778182354139, "-13": 2.1330457321830494, "-91": 92.18433335837076, "-79": 65.76911133393602, "-2": 22.627123289964274}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}}, {"10": {}, "11": [12, 13]}, [], [], null, {}]], [[{"6": [8, 9, 7]}, {"1": [2, 3], "4": {}}, {}, {}, {}, {"-16": -7.952205791962939, "-54": 9.488778182354139, "-13": 2.1330457321830494, "-91": 92.18433335837076, "-79": 65.76911133393602, "-2": 22.627123289964274}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}}, {"10": {}, "11": [12, 13]}, [], [], null, {}, {"1": [2, 3], "4": {}}]], [[{}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}]], [[true, true, false, true, true, true, false]], [[{}, {}, {}, {"a": {}}, {}]], [[{"1": [2, 3], "4": {}}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}}, [], [], null, {"10": {}}, {}]], [[{}, {}, {}, "not a dictionary", {"11": "RW", "95": "c", "-16": "d", "-86": "jtQpsBBMVJ"}]], [[{}, {"a": {"-59.24645714705492": "", "-3.4453715959889877": "jtQpsBBMVJ", "12.859199963659677": "RW", "61.46184466382178": "ZQ", "98.92336865475437": "sToCuGp", "-97.39618113013844": "dictionary", "22.627123289964274": "PUGOfbVFa", "-7.952205791962939": "afxfQrT", "92.18433335837076": "RW"}}, {"a": {"-59.24645714705492": "", "-3.4453715959889877": "jtQpsBBMVJ", "12.859199963659677": "RW", "61.46184466382178": "ZQ", "98.92336865475437": "sToCuGp", "-97.39618113013844": "dictionary", "22.627123289964274": "PUGOfbVFa", "-7.952205791962939": "afxfQrT", "92.18433335837076": "RW"}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"b": {"c": {}}}]], [[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]], [[{"92.18433335837076": true, "89.11950521126712": false, "53.71568193524098": false}, {"b": {"c": {}, "cc": {}}}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {}}}]], [[{}, {"b": {"c": {}, "cd": {"Nvq": 6, "b": -83, "PUGOfbVFa": false, "e": 7}}}, {"a": {"6": true, "-70": false, "7": true, "-25": true, "11": false, "54": true, "-2": false, "-64": false}}, {"b": {"c": {}, "cd": {"Nvq": 6, "b": -83, "PUGOfbVFa": false, "e": 7}}}, {"b": {"c": {}, "cd": {"Nvq": 6, "b": -83, "PUGOfbVFa": false, "e": 7}}}]], [[{"b": {"c": {}, "cd": {"Nvq": 6, "b": -83, "PUGOfbVFa": false, "e": 7}}}, {"a": {"6": true, "-70": false, "7": true, "-25": true, "11": false, "54": true, "-2": false, "-64": false}}, {"b": {"c": {}, "cd": {"Nvq": 6, "b": -83, "PUGOfbVFa": false, "e": 7}}}, {"b": {"c": {}, "cd": {"Nvq": 6, "b": -83, "PUGOfbVFa": false, "e": 7}}}]], [[{"11": "ZQ", "-16": false, "4": -58}, {"1": [2, 3], "4": {}}, {}, ["not", "ML", "", "EnIODji", "a", "not", "e", "gA"], {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{}, {}, {"a": []}, {"b": {"c": {}}}, {"26": -79, "7": -92, "-94": -2, "-11": -60, "-21": -13, "83": -83, "-89": 35}, "not a dictionary", {}]], [[{"b": {"c": {}}}]], [[{"11": -22, "-94": 86, "-33": -86, "-16": 10, "-86": -63, "56": 93, "33": -50, "-2": 33}, {"a": {}}, {"b": {"c": {"Ixeqv": 4, "aa": -54, "": -16, "not a dictionary": 26, "TJAFRQJ": -94, "ZQ": 42, "sToCuGp": 54, "cc": 10}}, "bb": {"c": {"Ixeqv": 4, "aa": -54, "": -16, "not a dictionary": 26, "TJAFRQJ": -94, "ZQ": 42, "sToCuGp": 54, "cc": 10}}}]], [[{"92.18433335837076": true, "89.11950521126712": false, "53.71568193524098": false}, {"a": {"EelUqo": 94.37812008744393, "oI": 91.31628397409474, "vh": 22.627123289964274, "not": -59.24645714705492, "lFMK": 61.46184466382178, "dictionary": 23.85946809613668, "HrAqs": -78.68939934318202, "WfW": 4.407251836292573, "TQ": 43.042669044562615, "f": -53.065570164884846}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {}}}]], [[{"1": [2, 3], "4": {}}, {}, {}, {}, {}, {}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}]], [[{}, {}, {"a": {"6": true, "-70": false, "7": true, "-25": true, "11": false, "54": true, "-2": false, "-64": false, "-99": true}}, {}]], [[{"UGod": {}}, {}, {"UGod": {}}, {"b": {"c": {}}}, {}]], [[true, false, true]], [[{"1": [2, 3]}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null, {"6": [8, 9, 7]}]], [[{}, {"a": []}, {"b": {"c": {}}}, "not a dicMLtionabry", {}]], [[{"a": [], "aa": [], "Nvq": [false]}, {}, {"a": [], "aa": [], "Nvq": [false]}, {"b": {"c": {}}}, "not a dictionary", {"a": [], "aa": [], "Nvq": [false]}, {}, {}]], [[{"a": [], "aa": [false, false]}, {}, {"b": {"c": {}}}, "not a dictionary", {}]], [[{}, {}, {"a": {}, "aZQ": {}}, {}, {"a": {}, "aZQ": {}}, {}]], [[{"a": [], "aa": [false, false]}, {}, {"a": [], "aa": [false, false]}, {"b": {"c": {}}}, "not a dictionary", {}, {"a": [], "aa": [false, false]}]], [[{"1": [2, 3], "4": {}, "6": {"-50": true, "-62": false, "4": false}, "7": [3]}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}, "6": {"-50": true, "-62": false, "4": false}, "7": [3]}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{"a": {}}, {"e": {"f": {}}}]], [[{"a": [], "aa": [false, false]}, {}, {"b": {"c": {}}}, "not ac dictionary", {}]], [[{"e": {"f": {"83": "UGod", "-94": 43.042669044562615, "10": 9.34410462450414, "5": null, "25": false, "-62": 98.92336865475437, "4": "e", "54": "RW", "21": -22}}}]], [[{}, {}, {"UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}]], [[{"b": {"c": {"91.31628397409474": 73, "-78.68939934318202": -40.09100200991516, "94.37812008744393": -25, "9.561236165717844": -92, "-3.4453715959889877": true}}}]], [[{"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"e": {"f": {}}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}]], [[{}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}, {"b": {"c": {}}}]], [[{}, "not ac dictionaary", {}]], [[{}, {"b": {"c": {"d": {}}}}, {"e": {"f": {}}}]], [[{"a": [], "aa": [false, false]}, {}, {"b": {"c": {"56": 21, "10": -16, "15": "ZAYYY", "3": {"62.798876340230635": false, "-3.4453715959889877": true, "9.34410462450414": false, "86.65656456878673": false, "70.41306724688005": false}, "-87": -84.62208713904475, "26": null, "11": -90, "-91": "PUGOfbVFa", "-79": -82.77088369397737, "-11": [true, false, true, false, true]}}}, "TQ", {}]], [[{"a": [], "aa": [false, false], "aanot a dictionary": ["gA", "", "", "Jrjd", "NQ", "TGFtPODaY", "not", "klTHw"]}, {}, {"a": [], "aa": [false, false], "aanot a dictionary": ["gA", "", "", "Jrjd", "NQ", "TGFtPODaY", "not", "klTHw"]}, {"b": {"c": {}}}, "not a dictionary", {}, {"a": [], "aa": [false, false], "aanot a dictionary": ["gA", "", "", "Jrjd", "NQ", "TGFtPODaY", "not", "klTHw"]}]], [[{"1": [2, 3], "4": {}}, {}, ["not", "ML", "", "EnIODji", "a", "not", "e", "gA"], {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{}, ["not", "ML", "", "EnIODji", "a", "not", "e", "gA"], {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}, "ML": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}, "ML": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"e": {"f": {}}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}, "ML": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}, "ML": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}, "ML": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": true, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}]], [[{"a": {}}, {"e": {"f": {}, "not ac dictionaaryf": {"1.3715058915995826": 43.042669044562615, "61.46184466382178": -98.647477352081}}}, {"e": {"f": {}, "not ac dictionaaryf": {"1.3715058915995826": 43.042669044562615, "61.46184466382178": -98.647477352081}}}]], [[{"1": [2, 3], "4": {}}, {}, {}, {}, {"5": {}}, {}, {}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{}, {"klTHw": 90, "aanot a dictionary": -89, "AYw": 26}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {}, {}, {}]], [[{"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"a": {}, "UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}]], [[{"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}, {"b": {"c": {}}}]], [[{"1": [2, 3], "4": {}, "6": {"-50": true, "-62": false, "4": false}}, {}, {}, {}, {"5": {}}, {}, {"1": [2, 3], "4": {}, "6": {"-50": true, "-62": false, "4": false}}, {"10": {}, "11": [12, 13]}, [], [], null]], [[{"6": [8, 9, 7]}, {"1": [2, 3], "4": {}}, {}, {}, {}, {"-16": -7.952205791962939, "-54": 9.488778182354139, "-13": 2.1330457321830494, "-91": 92.18433335837076, "-79": 65.76911133393602, "-2": 22.627123289964274}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}}, {"10": {}, "11": [12, 13]}, [], [], null, {}, {}]], [[{}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}]], [[{"92.18433335837076": true, "89.11950521126712": false, "53.71568193524098": false}, {"a": {"EelUqo": 94.37812008744393, "oI": 91.31628397409474, "vh": 22.627123289964274, "not": -59.24645714705492, "lFMK": 61.46184466382178, "dictionary": 23.85946809613668, "HrAqs": -78.68939934318202, "WfW": 4.407251836292573, "TQ": 43.042669044562615, "f": -53.065570164884846}}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {}}}]], [[{}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}, {"b": {"c": {}}}, {}]], [[{"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {"HJHyT": false, "ZKYs": false, "": true, "B": false, "j": true, "MnsOVvj": false, "TJAFRQJ": true, "TGFtPODaY": true, "lFMK": true, "bb": false}}, "bb": {"c": {}, "cc": {"HJHyT": false, "ZKYs": false, "": true, "B": false, "j": true, "MnsOVvj": false, "TJAFRQJ": true, "TGFtPODaY": true, "lFMK": true, "bb": false}}}, {"b": {"c": {}, "cc": {"HJHyT": false, "ZKYs": false, "": true, "B": false, "j": true, "MnsOVvj": false, "TJAFRQJ": true, "TGFtPODaY": true, "lFMK": true, "bb": false}}, "bb": {"c": {}, "cc": {"HJHyT": false, "ZKYs": false, "": true, "B": false, "j": true, "MnsOVvj": false, "TJAFRQJ": true, "TGFtPODaY": true, "lFMK": true, "bb": false}}}]], [[{"6": [8, 9, 7]}, {"1": [2, 3], "4": {}}, {}, {}, null, {}, {"-16": -7.952205791962939, "-54": 9.488778182354139, "-13": 2.1330457321830494, "-91": 92.18433335837076, "-79": 65.76911133393602, "-2": 22.627123289964274}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}}, {"10": {}, "11": [12, 13]}, [], [], null, {}, {}]], [[{}, ["not", "ML", "", "EnIODji", "a", "not", "e", "gA"], {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], [], null, {"5": {}}]], [[{"-62": 43.042669044562615, "33": 1.3715058915995826, "-99": 53.71568193524098, "54": 61.46184466382178, "11": 65.76911133393602, "10": -7.952205791962939}, {"b": {"c": {}}}, {"b": {"c": {}}}, {"a": {}}, {"b": {"c": {}}}, {"-62": 43.042669044562615, "33": 1.3715058915995826, "-99": 53.71568193524098, "54": 61.46184466382178, "11": 65.76911133393602, "10": -7.952205791962939}]], [[{}, {"1": [2, 3], "4": {}}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {}, [], [], null, {}, {}]], [[{"6": [8, 9, 7]}, {"1": [2, 3], "4": {}}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"1": [2, 3], "4": {}}, {"10": {}, "11": [12, 13]}, [], [], null, {}]], [[{}, {}, {"a": []}, {"b": {"c": {}}}, "not a dictionary", {}, {}]], [[{}, {}, {"a": []}, "not a dictionary", {}, {}, {}]], [[{"1": [2, 3], "4": {}}, {}, {}, {}, {}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}]], [[{"b": {"c": {"d": {}}, "e": {}}, "f": {}, "ZQ": {"HrAqs": 77, "aC": -63, "ac": 83, "not ac dictionaary": 33, "KXQgpT": 7}}, {}, {"b": {"c": {"d": {}}, "e": {}}, "f": {}, "ZQ": {"HrAqs": 77, "aC": -63, "ac": 83, "not ac dictionaary": 33, "KXQgpT": 7}}]], [[{}, {}, {"a": {}, "aZQ": {}}, {}, {"a": {}, "aZQ": {}}, {}, {}]], [[{"UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}, {"UGod": {"TJAFRQJ": false, "cc": false, "vh": true, "afxfQrT": false, "PGLIN": true, "Ixeqv": true, "klTHw": false, "S": false}}]], [[{}, {"UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}]], [[{}, {"klTHw": 90, "aanot a dictionary": -89, "AYw": 26}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7, "92.57449240112962": 33}, {}, {}, {}]], [[{"a": [], "aa": [], "Nvq": [false]}, {}, {"a": [], "aa": [], "Nvq": [false]}, {"b": {"c": {}}}, "not a dictionary", {}, {}]], [[{"-80.26622134906248": true, "30.2706462270757": null, "75.27092095772227": -90, "-2.302471181199678": 92.57449240112962, "38.38551117826893": null, "72.31478177273556": "not a dictionary", "46.97122839821134": false, "92.18433335837076": [-53.065570164884846, 62.798876340230635, 92.36872704267992, -51.01141474858157], "-98.647477352081": {"34": false}, "-40.191039725045144": 100}, {"b": {"c": {}}}]], [[{"-20": 38, "4": -90, "9": 11, "-89": 3, "-22": -60, "-54": 10}, {}, {"a": {"6": true, "-70": false, "7": true, "-25": true, "11": false, "54": true, "-2": false, "-64": false, "-99": true}}, {}]], [[{"a": [], "aa": [false, false]}, {}, {"not a dicMLtionabry": 4.407251836292573, "oI": true, "zKO": -2, "XZ": "vXDo", "kcIOLte": -73.81865819664164, "": "sToCuGp", "dictionaaryf": 42, "yjVSaQukg": 50.58433514886977}, {"a": [], "aa": [false, false]}, {"b": {"c": {}}}, "not a dictionary", {}, {}]], [[{"b": {"c": {}}}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7, "62.798876340230635": 33}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7, "62.798876340230635": 33}, {"b": {"c": {}}}, {"b": {"c": {}}}]], [[{"92.18433335837076": true, "89.11950521126712": false, "53.71568193524098": false}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {}}}, {"b": {"c": {}, "cc": {}}}]], [[{"92.18433335837076": true, "89.11950521126712": false, "53.71568193524098": false}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {}}}]], [[false, true, true, false, true, true, true, false, true]], [[{"-20": 38, "4": -90, "9": 11, "-89": 3, "-22": -60, "-54": 10}, {"22.627123289964274": 97.3616540563533}, {}, {"a": {"6": true, "-70": false, "7": true, "-25": true, "11": false, "54": true, "-2": false, "-64": false, "-99": true}}, {}]], [[{"1": [2, 3]}, {}, {}, {}, {"5": {}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}, [], ["dictionaary", "UKHoHrpkrm", "jtQpsBBMVJ", "XZ"], null]], [[{}, {"UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"RSFefUlj": 42, "NYNJtbbtT": 5, "HrAqs": -64, "shCpqoD": -20, "wvVNgJPZ": -25, "EelUqo": 10, "CaVAAPy": 35, "vqzIhwVzMV": -60, "cc": 19}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {}]], [[{"HrAqs": true, "klTHw": false, "ZQ": false}, {"1": [2, 3], "4": {}}, {}, {}, {"5": {}, "4": {"PUGOfbVFa": 21, "not a dicMLtionabry": -64}}, {}, {"5": {}, "4": {"PUGOfbVFa": 21, "not a dicMLtionabry": -64}}, {"6": [8, 9, 7]}, {}, {"10": {}, "11": [12, 13]}]], [[{}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "ZKYs"}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "ZKYs"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "ZKYs"}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "ZKYs"}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "ZKYs"}]], [[{"11": -22, "-94": 86, "-33": -86, "-16": 10, "-86": -63, "56": 93, "33": -50, "-2": 33}, {"a": {}}, {"b": {"c": {"Ixeqv": 4, "aa": -54, "": -16, "not a dictionary": 26, "TJAFRQJ": -94, "ZQ": 42, "sToCuGp": 54, "cc": 10}}, "bb": {"c": {"Ixeqv": 4, "aa": -54, "": -16, "not a dictionary": 26, "TJAFRQJ": -94, "ZQ": 42, "sToCuGp": 54, "cc": 10}}}, {"11": -22, "-94": 86, "-33": -86, "-16": 10, "-86": -63, "56": 93, "33": -50, "-2": 33}]], [[{"a": [], "aa": [false, false]}, {"-3": "bH", "64": "dictionary"}, {"b": {"c": {"56": 21, "10": -16, "15": "ZAYYY", "3": {"62.798876340230635": false, "-3.4453715959889877": true, "9.34410462450414": false, "86.65656456878673": false, "70.41306724688005": false}, "-87": -84.62208713904475, "26": null, "11": -90, "-91": "PUGOfbVFa", "-79": -82.77088369397737, "-11": [true, false, true, false, true]}}}, "NQ", {}]], [[{"92.18433335837076": true, "89.11950521126712": false, "53.71568193524098": false}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}, "cc": {}}}, {"b": {"c": {}, "cc": {}}}]], [[{}, {}, {"a": []}, "not a dictionary", {}, {}, {}, {}]], [[{}, {"a": {"-59.24645714705492": "", "-3.4453715959889877": "jtQpsBBMVJ", "12.859199963659677": "RW", "61.46184466382178": "ZQ", "98.92336865475437": "sToCuGp", "-97.39618113013844": "dictionary", "22.627123289964274": "PUGOfbVFa", "-7.952205791962939": "afxfQrT", "92.18433335837076": "RW"}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"b": {"c": {}}}]], [[{}, {"oI": 100, "MiZRRdhMl": {"NQ": false, "bH": true, "PV": false, "ovGBc": true, "q": false, "not ac dictionary": true, "J": true, "aanot": false, "VDB": true}, "V": "NQ", "a": -99}, {"UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": 25, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}]], [[{"b": {"c": {"d": {}}, "e": {}}, "f": {}, "ZQ": {"HrAqs": 77, "aC": -63, "ac": 83, "not ac dictionaary": 33, "KXQgpT": 7}}, {}, {"b": {"c": {"d": {}}, "e": {}}, "f": {}, "ZQ": {"HrAqs": 77, "aC": -63, "ac": 83, "not ac dictionaary": 33, "KXQgpT": 7}}, {}]], [[{}, {"klTHw": 90, "aanot a dictionary": -89, "AYw": 26}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7, "92.57449240112962": 33}, {}, {"c": true, "JoAvZBsnf": true, "TXEndJK": false, "not a dicMLtionabry": true, "SSHshNX": true, "j": false}, {}, {}]], [[{}, {"a": {}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {"5.444762250701004": 11, "9.488778182354139": -85, "53.71568193524098": 26, "-73.81865819664164": -86, "12.859199963659677": -79, "92.36872704267992": 4, "89.11950521126712": 33, "2.1330457321830494": -13, "-7.952205791962939": 7}, {"b": {"c": {}}}, {"d": "a", "UGod": "d", "dictionary": "UKHoHrpkrm", "ZAYYY": "not a dictionary"}, {}]], [[{"b": {"c": {"d": {}}}}, {"e": {"f": {}}}]]], "contract": "\n assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==True\nassert empty_dit([{}])==True\n"}
{"task_id": "Mbpp/116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n", "entry_point": "tuple_to_int", "canonical_solution": "\ndef tuple_to_int(nums):\n    return int(''.join(map(str,nums)))\n", "base_input": [[[1, 2, 3]], [[4, 5, 6]], [[5, 6, 7]]], "atol": 0, "plus_input": [[[123, 456, 789]], [[987, 654, 321]], [[999, 888, 777]], [[10000000000000000000, 9999999999999999999, 8888888888888888888]], [[1234567891011121314, 9876543210987654321, 1111111111111111111]], [[999999999999999999, 999999999999999998, 999999999999999997]], [[123456789123456789, 987654321987654321, 123456789123456789]], [[77777777777777777777, 88888888888888888888, 99999999999999999999]], [[123456789123456789123456789, 987654321987654321987654321, 123456789123456789123456789]], [[9999999999999999998, 9876543210987654321, 1111111111111111111]], [[123456789123456789, 987654321987654321, 123456789123456789, 123456789123456789]], [[789, 1234567891011121314, 9876543210987654321, 1111111111111111111]], [[10000000000000000000, 8888888888888888888]], [[10000000000000000000, 8888888888888888888, 10000000000000000000]], [[123456789123456789, 987654321987654321, 123456789123456789, 9999999999999999999]], [[123456789123456789, 999999999999999998, 77777777777777777777]], [[123456789123456789, 123456789123456789]], [[999, 888, 1234567891011121314]], [[987654321987654321]], [[123456789123456789, 123456789123456789, 123456789123456789]], [[1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111]], [[456, 789]], [[10000000000000000000, 8888888888888888888, 10000000000000000000, 77777777777777777777, 10000000000000000000]], [[987, 321]], [[321, 322]], [[1111111111111111111]], [[1111111111111111110, 1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111]], [[999, 888]], [[1111111111111111112]], [[10000000000000000000, 9999999999999999999, 322, 77777777777777777777, 10000000000000000000]], [[999, 654, 888, 777, 888]], [[987, 321, 987]], [[10000000000000000000, 9999999999999999999, 8888888888888888889, 8888888888888888887, 8888888888888888888]], [[10000000000000000000, 8888888888888888889, 8888888888888888888]], [[987, 321, 321]], [[987, 77777777777777777777, 321]], [[999999999999999999, 654]], [[888, 123456789123456789, 123456789123456789]], [[10000000000000000000, 1111111111111111110, 8888888888888888889, 8888888888888888887, 8888888888888888888]], [[1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111, 1234567891011121314, 1234567891011121314]], [[788, 789, 1234567891011121314, 9876543210987654321, 1111111111111111111]], [[987654321987654321, 987654321987654321]], [[123456789123456789, 8888888888888888887]], [[123, 456, 122, 789]], [[987, 321, 987, 987, 987]], [[789, 1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111]], [[987]], [[987654321987654321, 987654321987654321, 987654321987654321]], [[999999999999999998, 123456789123456789, 123456789123456789, 123456789123456789]], [[788, 789, 1234567891011121314, 9876543210987654321, 1111111111111111111, 789]], [[124, 456, 789]], [[123, 456, 789, 123]], [[10000000000000000000]], [[9876543210987654321, 987, 321]], [[999999999999999999, 987654321987654321, 987654321987654321]], [[88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999999, 88888888888888888888]], [[123456789123456788, 123456789123456789, 123456789123456789123456789]], [[1111111111111111111, 1111111111111111111]], [[999, 888, 1234567891011121314, 999]], [[999, 987654321987654321987654321, 888]], [[77777777777777777777, 88888888888888888887, 99999999999999999999]], [[123, 456, 1234567891011121314, 123]], [[123, 456, 123]], [[777, 8888888888888888889, 8888888888888888888]], [[9999999999999999999, 10000000000000000000]], [[88888888888888888888, 987654321987654321, 987654321987654321]], [[123456789123456789, 9999999999999999999, 123456789123456789]], [[999, 123456789123456789, 987654321987654321, 998, 123456789123456789, 123456789123456789]], [[987, 321, 987, 987, 986, 987]], [[123456789123456789, 987654321987654321, 123456789123456789, 123456789123456789, 123456789123456789]], [[9876543210987654321, 654, 321]], [[123456789123456789, 999999999999999998, 77777777777777777777, 123456789123456789]], [[9999999999999999998, 9876543210987654321]], [[1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111, 9999999999999999998, 1234567891011121313, 1234567891011121314]], [[788, 789, 9876543210987654321, 1111111111111111111, 789, 789]], [[987, 987]], [[123456789123456789, 987654321987654321, 123456789123456788, 123456789123456789, 123456789123456789]], [[123456789123456789, 987654321987654321, 77777777777777777777, 123456789123456789]], [[123456789123456789, 88888888888888888887, 987654321987654321, 123456789123456789, 123456789123456789, 123456789123456789, 88888888888888888887]], [[123456789123456789, 987654321987654321, 123456789123456788, 123456789123456789]], [[123456789123456790, 987654321987654321, 123456789123456789, 9999999999999999999]], [[321]], [[987, 8888888888888888888, 321]], [[88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999999, 9876543210987654321, 99999999999999999998, 88888888888888888888]], [[123456789123456789, 123456789123456788, 8888888888888888887]], [[88888888888888888888, 987654321987654321, 987654321987654321, 987654321987654321]], [[1000000000000000000, 999999999999999998, 456]], [[88888888888888888888, 987654321987654321, 987654321987654321, 987654321987654321, 987654321987654321]], [[9876543210987654321, 987, 321, 321]], [[999, 1000, 888, 1234567891011121314]], [[999, 123456789123456789, 987654321987654321, 998, 987654321987654321, 123456789123456789, 123456789123456789]], [[123456789123456789, 987654321987654321, 8888888888888888888, 123456789123456789, 123456789123456789]], [[123, 456, 124, 789, 789, 123]], [[987, 987, 654, 321]], [[999999999999999999, 999999999999999998, 999999999999999997, 999999999999999999]], [[999, 888, 999]], [[1000000000000000000, 124, 456, 789, 789]], [[888, 123456789123456789, 123456789123456789, 123456789123456789]], [[88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999998, 88888888888888888888]], [[999999999999999999, 999999999999999998, 999999999999999997, 999999999999999999, 999999999999999999]], [[1234567891011121314, 9876543210987654321, 888, 1111111111111111111, 9999999999999999998, 1234567891011121313, 1234567891011121314]], [[123456789123456789, 999999999999999999, 8888888888888888887]], [[10000000000000000000, 8888888888888888889, 8888888888888888888, 10000000000000000000]], [[9876543210987654321, 986, 986, 321]], [[123, 124, 456, 789]], [[10000000000000000001, 123456789123456788, 10000000000000000000, 9999999999999999999, 8888888888888888888]], [[1234567891011121314, 9876543210987654322, 1234567891011121314, 1111111111111111111, 1234567891011121314, 1234567891011121314]], [[999999999999999999, 999999999999999998, 999999999999999999]], [[788, 789, 9876543210987654321, 1111111111111111111, 789, 789, 9876543210987654321]]], "contract": "\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x > 0 for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n"}
{"task_id": "Mbpp/117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\n", "entry_point": "list_to_float", "canonical_solution": "\ndef list_to_float(test_list):\n  res = []\n  for l in test_list:\n    t = []\n    for e in l:\n      try:\n        t.append(float(e))\n      except:\n        t.append(e)\n    res.append(t)\n  return res\n", "base_input": [[[["3", "4"], ["1", "26.45"], ["7.32", "8"], ["4", "8"]]], [[["4", "4"], ["2", "27"], ["4.12", "9"], ["7", "11"]]], [[["6", "78"], ["5", "26.45"], ["1.33", "4"], ["82", "13"]]]], "atol": 0, "plus_input": [[[[["1", "2", "3", "4"], ["5", "6", "7", "8"]], [["9", "10"], ["11", "12", "13"]]]], [[["1", 2, 3.14, "4.5"], [5, "6", 7.8, "8.9"]]], [[["9", 10.5, "11"], ["12", 13]]], [[[["1", "2", "3", "4"], ["5", "6", "7", "8"]], [["9", "10"], ["11", "12", "13"]], ["14", ["15", "16"]]]], [[[["a", "2", "3", "4"], ["5", "6", "7", "8"]], [["9", "10"], ["11", "12", "13"]]]], [[["1.23", "abc"], ["xyz", "3.14"]]], [[["1", "2", "3", "4"], ["5", "6", "7", "8"], ["9", "10"], ["11", "12", "13"]]], [[["1", "2", "3", "4"], ["5", "6", "7", "8"], ["9", "10"], ["11", "12", "13"], ["a", "b", "c"]]], [[["1", "2.5", "-3.75"], ["4.2", "-5.7", "6"], ["7", "-8", "9.99"]]], [[["10.5", "20.25", "30"], ["-40", "50.5", "60.99"], ["-70", "80", "90"]]], [[["-10", "-20", "-30"], ["-40", "-50", "-60"], ["-70", "-80", "-90"]]], [[[["1.5", "2.7", "-3.9"], ["-4.2", "5", "6.3"]], [["-7", "8"], ["-9.8", "10.6", "11.9"]]]], [[[["a", "b", "c"], ["d", "e", "f"]], [["g", "h"], ["i", "j", "k"]]]], [[["1", 2, 3.14, "4.5"], [true, false, 5]]], [[["1.23", "4.56", true, 7], [8, 9.99]]], [[[["1", "2"], [3, 4]], [["5.5", "6.6"], [7, 8]], [["9", "10"], [11, 12, 13]]]], [[[["1", "2"], ["3", "4"]], [["5", "6"], ["7", "8"]]]], [[[{"key1": "value1"}, {"key2": 2}], [{"key3": 3.14, "key4": "4.5"}]]], [[[[["1"], ["2", "3"]], [["4.5"], [5, "6"]]], [[7, "8"], [["9", "10"], [11, 12]]]]], [[["1", "2.5", "-3.75"], [4, "-5.7", "6"], [7, -8, "9.99"]]], [[[true, false, 5, true]]], [[[["a", "b", "c"], ["d", "e", "f"]]]], [[[["1", "2", "3", "4"], ["5", "6", "7", "8"]], [["9", "10"], ["11", "12", "13"]], ["14", ["15", "16"]], [["9", "10"], ["11", "12", "13"]], ["14", ["15", "16"]]]], [[[{"key1": "value1"}, {"key2": 2}], [{"key1": "value1"}, {"key2": 2}]]], [[[true, false, 5, true], [true, false, 5, true]]], [[["-10", "-20", "-30"]]], [[["-10", "-20", "-30"], ["-40", "-50", "-60"], ["-70", "-80"]]], [[["1.23", "abc"], ["xyz", "3.14", "xyz"]]], [[["1.23", "4.56", 7], [8, 9.99]]], [[[{"key3": 3.14, "key4": "4.5"}, {"key3": 3.14, "key4": "4.5"}]]], [[["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], [8, 9.99]]], [[[true, false, 5]]], [[[true, false, 5, true], [true, false, 5, true], [true, false, 5, true]]], [[["15", "-20", "-30"], ["15", "-20", "-30"]]], [[["15", "-20", "-30", "-30"], ["15", "-20", "-30", "-30"], ["15", "-20", "-30", "-30"]]], [[[true, true], [true, true], [true, true]]], [[[{"key1": "value1"}, {"key2": 2}], [{"key4": "4.5"}, {"key4": "4.5"}]]], [[["1", 2, 3.14, "4.5", "1"], [5, "6", 7.8, "8.9"]]], [[["15", "-20", "-300"], ["15", "-20", "-300"]]], [[[true, true, true], [true, true, true], [true, true, true], [true, true, true], [true, true, true]]], [[["1.23", "4.56", true, 7]]], [[[["a", "b", "c", "c"], ["a", "b", "c", "c"], ["d", "e", "f"]], [["g", "h"], ["i", "j", "k"]], [["g", "h"], ["i", "j", "k"]]]], [[[true], [true], [true]]], [[[true, true, true], [true, true, true], [true, true, true], [true, true, true]]], [[[10.5, "11", "11"]]], [[[["1", "2"], [3, 4]], [["5.5", "6.6"], [7, 8]], [["9", "10"], [11, 12, 13, 13]], [["9", "10"], [11, 12, 13, 13]]]], [[["-10", "-20", "-30"], ["-40", "-50", "-60"], ["-70", "-80", "-90"], ["-70", "-80", "-90"], ["-70", "-80", "-90"]]], [[["15", "-20", "-30"]]], [[["1", "2", "3", ""], ["5", "6", "7", "8"], ["9", "10"], ["11", "12", "13"]]], [[["15", "-20", "-30", "-30"], ["15", "-20", "-30", "-30"]]], [[["1", 2, 3.14, "4.5", "1"], [5, "6", 7.8, "8.9"], ["1", 2, 3.14, "4.5", "1"]]], [[["1", "2", "3", "4"], ["5", "6", "7", "8"], ["9", "10"], ["11", "4", "12", "13"], ["a", "b", "c"], ["9", "10"]]], [[[["a", "b", "c"], ["d", "e", "f"]], [["g", "h"], ["i", "j", "k"]], [["a", "b", "c"], ["d", "e", "f"]]]], [[["1.23", "4.56", "4.", true, 7]]], [[[10.5, "11", "11", "11"]]], [[["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7]]], [[["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], [8, 9.99], ["1.23", "4.56", true, 7]]], [[["-10", "-20", "-30", "-30"], ["-10", "-20", "-30", "-30"], ["-10", "-20", "-30", "-30"]]], [[["1", 2, 3.14, "4.5"], [true, false, 5], [true, false, 5]]], [[["1", "2", "3", ""], ["5", "6", "7", "8"], ["9", "10", "9"], ["9", "10", "9"], ["11", "12", "13"]]], [[[7, -8, "9.99", "9.99"], ["1", "2.5", "-3.75"], [4, "-5.7", "6"], [7, -8, "9.99", "9.99"], [7, -8, "9.99", "9.99"]]], [[[true, true, true, true], [true, true, true, true], [true, true, true, true], [true, true, true, true]]], [[["1", "2", "3", ""], ["5", "6", "7", "8"], ["5.59", "10"]]], [[[["5", "6", "6"], ["7", "8", "8"], ["7", "8"], ["5", "6", "6"]], [["1", "2"], ["3", "4"]], [["5", "6", "6"], ["7", "8", "8"], ["7", "8"], ["5", "6", "6"]], [["5", "6", "6"], ["7", "8", "8"], ["7", "8"], ["5", "6", "6"]]]], [[["10.5", "20.25", "30"], ["-40", "50.5", "60.99"], ["-70", "80", "90"], ["-40", "50.5", "60.99"]]], [[["1", "2.5", "i"], [4, "-5.7", "6"], ["1", "2.5", "i"], [7, -8, "9.99"]]], [[[6, "1.23", "4abc.56", true, 7, "1.23"], [6, "1.23", "4abc.56", true, 7, "1.23"]]], [[["1.2", "9.99", "4.56", true, 7], ["1.2", "9.99", "4.56", true, 7], ["1.2", "9.99", "4.56", true, 7], ["1.2", "9.99", "4.56", true, 7], [8, 9.99], ["1.2", "9.99", "4.56", true, 7]]], [[[["1", "2"], ["3", "4"]], [["5", "6"], ["7", "8"]], [["5", "6"], ["7", "8"]]]], [[["15", "-20", "-30", "-30", "15"], ["15", "-20", "-30", "-30", "15"]]], [[[["5", "6", "7", "8"]], [["9", "10"], ["11", "12", "13"]], ["14", ["15", "16"]], [["9", "10"], ["11", "12", "13"]], ["14", ["15", "16"]]]], [[[true, true, false, 5, true], [true, true, false, 5, true]]], [[["15", "-30"], ["15", "-30"], ["15", "-30"]]], [[[["a", "b", "c"], ["d", "e", "f"]], [["a", "b", "c"], ["d", "e", "f"]]]], [[["1", 2, 3.14, "4.5", "1"], [true, false, 5], [true, false, 5]]], [[["1", 2, 3.14, "4.5", "1"]]], [[["1.2", "9.1599", "4.56", true, 7], ["1.2", "9.1599", "4.56", true, 7], ["1.2", "9.1599", "4.56", true, 7], ["1.2", "9.1599", "4.56", true, 7], [8], [8], ["1.2", "9.1599", "4.56", true, 7]]], [[["-20", "-30"], ["-40", "-50", "-60"], ["-70", "-80"]]], [[[5, "6", 7.8, "8.9"], ["1", 2, 3.14, "4.5", "1"], ["1", 2, 3.14, "4.5", "1"]]], [[[["1", "2"], ["3", "4"]], [["5", "6"]]]], [[[["1.5", "2.7", "-3.9"], ["-4.2", "5", "6.3"]], [["-7", "8"], ["-9.8", "10.6", "11.9"]], [["1.5", "2.7", "-3.9"], ["-4.2", "5", "6.3"]]]], [[["xyz", "i", "xyz"], ["xyz", "i", "xyz"]]], [[["1", "2.5", "-3.75"], [4, "-5.7", "6"], [7, -8, "9.99"], ["1", "2.5", "-3.75"]]], [[[true, true, false, true], [true, true, false, true], [true, true, false, true], [true, true, false, true], [true, true, false, true]]], [[["-10", "-30"], ["-10", "-30"], ["-10", "-30"]]], [[[true, false, 5, true, true], [true, false, 5, true, true], [true, false, 5, true, true], [true, false, 5, true, true], [true, false, 5, true, true]]], [[["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7], ["1.23", "4.56", true, 7]]], [[["14"], [["5", "6", "7", "8"]], [["10"], ["10"], ["11", "12", "13"]], [["10"], ["10"], ["11", "12", "13"]], ["14"], ["14"]]], [[[["1", "2", "3", "4"], ["5", "6", "7", "8"]], ["14", ["15", "16"], "14"], [["9", "10"], ["11", "12", "13"]], ["14", ["15", "16"], "14"], ["14", ["15", "16"], "14"]]], [[["xyz", "3.14", "xyz"]]], [[["-20", "-30"], ["-40", "-50", "-60"], ["-90", "-70", "-80"]]], [[[["1", "2"], [3, 4]], [["5.5", "6.6"], [7, 8]], [[12, 11, 12, 13, 13]], [[12, 11, 12, 13, 13]], [[12, 11, 12, 13, 13]], [[12, 11, 12, 13, 13]]]], [[["-10", "-20", "-30"], ["-40", "-50", "-60", "-40"], ["-70", "-80", "-90"]]], [[[["9", "10"], ["11", "12", "13"]]]], [[[["1", "2"], [3, 4]], [["5.5", "6.6"], [7, 8]], [["9", "10"], [11, 12, 13]], [["1", "2"], [3, 4]]]], [[[["1", "2", "3", "4"], ["5", "6", "7", "8"]], ["14", ["15", "16"]]]], [[["1.23", "4.56", "4.", true, 7], ["1.23", "4.56", "4.", true, 7]]], [[[true], [true], [true], [true]]], [[[["1", "2"], ["3", "4"]], [["5", "-3.9"]]]], [[[10.5, "11", "11"], [10.5, "11", "11"], [10.5, "11", "11"]]], [[["15", "-20", "-30", "-30", "-20"], ["15", "-20", "-30", "-30", "-20"], ["15", "-20", "-30", "-30", "-20"]]], [[["1.23", "4.56", true, 7, true], ["1.23", "4.56", true, 7, true], ["1.23", "4.56", true, 7, true], ["1.23", "4.56", true, 7, true], [8, 9.99], ["1.23", "4.56", true, 7, true]]], [[[["3", "4"]], [["5", "6"]]]], [[[{"key1": "value1", "ke1": "k"}, {"key2": 2}], [{"key1": "value1", "ke1": "k"}, {"key2": 2}], [{"key1": "value1", "ke1": "k"}, {"key2": 2}]]], [[[true, false], [true, false]]], [[[{"key1": "value1", "ke1": "k"}, {"key2": 2}, {"key2": 2}], [{"key1": "value1", "ke1": "k"}, {"key2": 2}, {"key2": 2}], [{"key1": "value1", "ke1": "k"}, {"key2": 2}, {"key2": 2}]]], [[["11", "1", "2.5", "i"], ["11", "1", "2.5", "i"], [4, "-5.7", "6"], ["11", "1", "2.5", "i"], [7, -8, "9.99"]]], [[["15", "-20", "-30"], ["15", "-20", "-30"], ["15", "-20", "-30"], ["15", "-20", "-30"]]], [[["-20", "-30"], ["-70", "-80"]]], [[["1.23", "1.23", "4.56", true, 7], [8, 9.99], ["1.23", "1.23", "4.56", true, 7], ["1.23", "1.23", "4.56", true, 7]]], [[[["a", "b", "c"], ["d", "e", "f"]], [["a", "b", "c"], ["d", "e", "f"]], [["a", "b", "c"], ["d", "e", "f"]], [["a", "b", "c"], ["d", "e", "f"]], [["a", "b", "c"], ["d", "e", "f"]]]], [[["1.2", "9.1599", "4.56", true, 7, "4.5"], ["1.2", "9.1599", "4.56", true, 7, "4.5"], ["1.2", "9.1599", "4.56", true, 7, "4.5"], [8], [8], ["1.2", "9.1599", "4.56", true, 7, "4.5"]]], [[[["1", "2"], [3, 4]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [["5.5", "6.6"], [7, 8]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]]]], [[[["1", "2"], ["3", "4"]], [["5", "-3.", "-3.9"], ["5", "-3.9"]]]], [[[15.65638654599592, "9", 10.5, "11"], [15.65638654599592, "9", 10.5, "11"], ["12", 13]]], [[["1", 2, 3.14, "4.5", 1, "1"], [5, "6", 7.8, "8.9"], ["1", 2, 3.14, "4.5", 1, "1"]]], [[[true, true, true], [true, true, true], [true, true, true], [true, true, true], [true, true, true], [true, true, true]]], [[["1.2", "9.99", "4.56", true, 7], ["1.2", "9.99", "4.56", true, 7], ["1.2", "9.99", "4.56", true, 7], ["1.2", "9.99", "4.56", true, 7], [9.99], ["1.2", "9.99", "4.56", true, 7], [9.99], ["1.2", "9.99", "4.56", true, 7]]], [[["1.23", "e", "4.", true, 7], ["1.23", "e", "4.", true, 7], ["1.23", "e", "4.", true, 7]]], [[[["1", "2"], [3, 4]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [["5.5", "6.6"], [7, 8]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]], [[12, 11, 13, 12, 13, 13], [12, 11, 13, 12, 13, 13]]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, list) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert list_to_float( [[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]] ) == [[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]\nassert list_to_float( [[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]] ) == [[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]\nassert list_to_float( [[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]] ) == [[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]\n"}
{"task_id": "Mbpp/118", "prompt": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n", "entry_point": "string_to_list", "canonical_solution": "\ndef string_to_list(string): \n    return string.split(\" \")\n", "base_input": [["python programming"], ["lists tuples strings"], ["write a program"]], "atol": 0, "plus_input": [[""], ["   python      programming    "], ["1234 5678 9101"], ["string1,string2,string3"], ["My favorite programming language is Python"], ["string1,     string2,       string3"], ["string1,string2,strin3"], ["language"], ["1234 5678 91string1,string2,string301"], ["string1,string2,3"], ["My"], ["1234"], ["l"], ["5678"], ["192314 5678 9101"], ["python"], ["12314"], ["   ng    "], ["56678"], ["favorite"], ["string2,"], ["AeFmnNDd"], ["56"], ["programming"], ["pronggrammin12314g"], ["prog"], ["5striing1,stringg2,strin3"], ["language  ng    "], ["favorit"], ["gvZn"], ["languPythonage  ng    "], ["Python"], ["SfDBdGHKU"], ["is"], ["5stprogriing1,stringg2,strin3"], ["fvorrite"], ["porog"], ["pAeFmnNDdor"], ["propg"], ["languag5678e  ng    "], ["My favorite programming lamnguage is Python"], ["12My favorite programming language is Python34 5678 9101"], ["programmming"], ["My favorite prolanguPythonagegramminlg language is Python"], ["te"], ["fvorrrite"], ["string1,     string2,       sstring3"], ["1234 5678  9101"], ["556is78"], ["My favorite prol anguPythonagegramminlg lanage is Python"], ["vksoeiMq"], ["12My favorite programming language is Python34 5678string2,"], ["5striing1,My favorite proMye ythonpstringg2,strin3"], ["1234 5678 91string1,sPython342,string301"], ["fvorofrite"], ["fvorrreite"], ["favoritprogrammming"], ["Python34"], ["556iss78"], ["peMsMC"], ["ffvorrreite"], ["5striing1,My favorite proMylanguagee ythonpstringg2,strin3"], ["556iss788"], ["spythonring2"], ["string3"], ["Pstring3ython"], ["My favorit5678e prol anguPythonagegramminlg lanage is Pgython"], ["12334 5678  9101"], ["prol"], ["langua g5678e  ng    "], ["rfvorrrite"], ["PlanguPythonage"], ["123My favorite prolanguPythonagegramminlg language is Python4 5678 9101"], ["12 334 5678  9101"], ["fvorofritre"], ["192314"], ["string1,     st ring2,,       string3"], ["lanage"], ["gprolanguPythonagegramminlgvZ12n"], ["fvoorrite"], ["st"], ["anguPythonagegramminlg"], ["12My favorite programming glanguage is Python34 5678string2,"], ["12python3My"], ["languPythonage  ngn    "], ["gg5678e"], ["rfvorrtristring1,     st ring2,,       string3te"], ["languag5678e"], ["string1,     st ring2,languag5678e  ng      string3"], ["5stprogriing1,stiringg2,strin3"], ["My favorite programming language is PytlanguPythonagehon"], ["programmmipng"], ["flvorofrite"], ["tt"], ["1212314M3y"], ["pronggrrammin12314g"], ["string1,     st ring2,,        string3"], ["123My favorite prolanguPythonagegramminlg language is Pythstring1,     string2,       string3on4 5678 9101"], ["fvsstring3e"], ["Pst3ring3ython"], ["string1,     st ring2,languag5678e  ng      string"], ["lan12334 5678  9101gua g5678e  ng    "], ["faorite"], ["91nstring1,string2,string301"], ["prrfvorrtristring1,     st ring2,,       string3teol"], ["556667string1,string2,string3"]], "contract": "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\n"}
{"task_id": "Mbpp/119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n", "entry_point": "search", "canonical_solution": "\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n", "base_input": [[[1, 1, 2, 2, 3]], [[1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]], [[1, 2, 2, 3, 3, 4, 4]]], "atol": 0, "plus_input": [[[]], [[2, 2, 2, 2, 2, 2]], [[1, 1, 1, 1, 1, 1]], [[6]], [[1, 2, 3, 4, 5, 6]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15]], [[5]], [[1, 1, 4, 4, 5, 6]], [[0, 1, 4, 4, 5, 6]], [[4, 5, 5]], [[4, 4, 5]], [[1, 1, 4, 4, 6]], [[0, 1, 4, 4, 5]], [[2, 2, 2, 2, 2]], [[1, 1, 4, 6]], [[0, 4, 4, 5, 6]], [[4, 5]], [[1, 1, 4, 4, 5]], [[1, 1, 1, 1, 1]], [[1, 2, 4, 6]], [[5, 5]], [[4, 5, 5, 5]], [[1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2]], [[2, 2, 2, 2, 2, 2, 2, 2, 2]], [[1, 1, 1]], [[1, 1, 4, 4]], [[0, 1, 4, 4, 8]], [[2, 2, 2, 2, 2, 2, 2, 15]], [[4, 4, 4]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15]], [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [[false, false]], [[6, 6, 6]], [[1, 4, 4]], [[5, 5, 5]], [[4, 5, 5, 5, 5]], [[1, 4]], [[1, 1]], [[6, 6]], [[1, 1, 1, 1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2, 15]], [[1, 2, 3, 3, 4, 5, 6]], [[0, 4, 4, 8]], [[1, 1, 4]], [[1, 4, 6]], [[0, 1, 1, 1, 1, 1, 1, 1, 1]], [[4, 6]], [[false, true]], [[1, 1, 11]], [[1, 1, 2]], [[0, 1, 4, 8]], [[0, 4, 4, 4, 6, 6]], [[2, 2, 2, 2, 2, 2, 2, 2, 2, 15]], [[1, 5]], [[4, 4, 4, 4, 4]], [[3, 5, 5]], [[5, 5, 5, 5]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15]], [[1, 3, 5, 5, 6]], [[0, 4, 8]], [[4, 4, 6]], [[0, 1, 4, 4, 6]], [[1, 1, 4, 4, 5, 5]], [[1, 1, 2, 2]], [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 11, 11]], [[true]], [[4, 4]], [[false, true, true, true, true, true]], [[5, 11]], [[1, 1, 1, 4, 4]], [[4, 4, 4, 4]], [[2, 2, 2, 2, 2, 2, 2]], [[1, 2, 4, 6, 6]], [[4, 4, 8]], [[0, 2, 2, 2, 2]], [[1, 2, 3, 3, 11]], [[4, 4, 6, 6]], [[3, 5]], [[2, 5]], [[0, 1, 1, 1, 1, 1, 1, 1]], [[3, 6]], [[1, 4, 4, 6]], [[0, 2, 2, 2]], [[0, 1, 1]], [[1, 3, 4, 7]], [[1, 4, 6, 6]], [[1, 4, 4, 4]], [[false]], [[1, 1, 10, 11, 11]], [[0, 4, 5, 5]], [[0, 1, 4, 5, 6]], [[1, 4, 4, 5, 6]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 6, 6, 6]], [[4]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 12]], [[0, 2, 6, 6]], [[9]], [[1, 1, 1, 4, 4, 4]], [[1, 11, 11]], [[1, 1, 4, 4, 5, 9]], [[3, 6, 6]], [[1, 3, 3, 5, 13]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1\n"}
{"task_id": "Mbpp/120", "prompt": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n", "entry_point": "max_product_tuple", "canonical_solution": "\ndef max_product_tuple(list1):\n    return max(abs(x * y) for x, y in list1)\n", "base_input": [[[[2, 7], [2, 6], [1, 8], [4, 9]]], [[[10, 20], [15, 2], [5, 10]]], [[[11, 44], [10, 15], [20, 5], [12, 9]]]], "atol": 0.0001, "plus_input": [[[[-10, 20], [15, -2], [-5, 10]]], [[[1000000, 500000], [2000000, 1000000], [3000000, 1500000]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 0], [0, 5]]], [[[-100, 100], [0, 10]]], [[[0, -100], [0, 100]]], [[[-1000000, 1000000], [0, 100000]]], [[[1, 0], [-0.5, 0.5], [2, -2]]], [[[0.1, 0.1], [0.5, -0.5], [0.2, 0.2]]], [[[-9999999, 9999999], [1e-06, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000]]], [[[-1000000, -1000000], [-999, 0]]], [[[0, 0]]], [[[-1000000, 1000000], [0, 99999]]], [[[-10, 20], [15, -2]]], [[[0.5, -0.5], [0.2, 0.2]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[-1000001, -1000000], [0, 100000]]], [[[-999, 0]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 10]]], [[[0.5, -0.5], [0.2, 0.2], [0.5, -0.5]]], [[[10, -1000000]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 20]]], [[[0.1, 0.1], [0.5, 0.1], [0.2, 0.2]]], [[[-10, 0], [0, 100000]]], [[[-10, 20], [100000, -2]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[3000000, 1500000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-10, 20], [-10, 20]]], [[[-10, 20], [15, -2], [15, -2]]], [[[-9, 20]]], [[[-100, 100], [0, 10], [0, 10]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[0.5, -0.5], [0.2, 0.2], [0.5, -0.5], [0.2, 0.2]]], [[[-100, 100]]], [[[0.1, 0.1], [0.5, 0.1], [0.2, 0.2], [0.1, 0.1]]], [[[-999, 0], [-999, 0]]], [[[10, -1000001]]], [[[-1000000000, 1000000]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 10], [-5, 9]]], [[[-2, 0], [0, 5]]], [[[-1000000000, 1000000], [-1000000000, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000]]], [[[-10, 20], [100000, -2], [-10, 20]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1]]], [[[0, -101], [0, -100], [0, 100], [0, -100], [0, 100]]], [[[1000000, -1000000000], [9999999, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9]]], [[[0, 100000], [0, 100000]]], [[[1000000, 9999999], [1000000, 500000], [2000000, 1000000], [3000000, 1500000], [3000000, 1500000]]], [[[-10, 20], [15, -2], [-5, 9]]], [[[15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9]]], [[[-10, 20], [-10, 20], [-10, 20]]], [[[1000000, -1000000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [3000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, 0], [1, -1], [1, -1]]], [[[15, -2], [-5, 9]]], [[[0.1, 0.1], [0.5, 0.1], [0.2, 0.2], [0.1, 0.1], [0.5, 0.1]]], [[[0.2, 0.2], [0.2, 0.2]]], [[[0.1, 0.1], [0.5, 0.1], [0.1, 0.14655870166177412], [0.2, 0.2]]], [[[0, 100000]]], [[[0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2]]], [[[0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2], [0.1, 0.1]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [-1000000001, 1000000]]], [[[0.5, -0.5]]], [[[1, 0], [-0.5, 0.5], [2, -2], [2, -2]]], [[[1000000, 500000], [2000000, 1000000], [3000000, 1500000], [2000000, 1000000]]], [[[0.2, 0.2]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [-1000000001, 1000000], [-1000000001, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -999], [1000000, -1000000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1], [0.5, -0.5]]], [[[0.1, 0.1], [0.5, 1e-06], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1], [0.5, -0.5]]], [[[-2, 0], [0, 5], [0, 5]]], [[[1000000, -1000000000], [9999999, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [9999999, 10], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-10, 0], [-10, 0]]], [[[1000000, -1000000000], [-1000000000, 1000000], [3000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000]]], [[[0.14228615811571196, 0.1], [0.5, 0.1], [0.2, 0.2]]], [[[10, -1000000], [10, -1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 999999], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-1000000, 1000000], [0, 99999], [-1000000, 1000000]]], [[[-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[0.2, 0.2], [0.2, 0.2], [0.2, 0.2], [0.2, 0.2]]], [[[-10, 20], [15, -2], [14, -2]]], [[[0, 10], [-100, 100], [0, 10], [0, 10]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1], [0.5, -0.5], [0.1, 0.1]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 9]]], [[[100000, -2], [-10, 20]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 0]]], [[[0, 99999], [-1000000, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [1000000, -999999999], [-1000000000, 0]]], [[[0.14228615811571196, 0.1], [0.5, 0.1], [0.2, 0.2], [0.14228615811571196, 0.1]]], [[[0.2, 0.2], [0.1, 0.1], [0.2, 0.2]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -999], [1000000, -1000000000]]], [[[100000, -2], [-10, 3000000], [100000, -2]]], [[[0.2, 0.2], [0.2, 0.2], [0.2, 0.2]]], [[[15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9], [15, -2]]], [[[15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9], [15, -2], [-5, 9]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[100000, -2], [-10, 3000000], [100000, -2], [100000, -2]]], [[[0.1, 0.1], [0.1, 0.1], [0.2, 0.2]]], [[[-999, 0], [-999, 0], [-999, 0]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1]]], [[[-1000000000, 1000000], [3000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000], [-1000000000, 1000000]]], [[[0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2]]], [[[-10, 20], [15, -2], [-10, 21], [15, -2]]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[0], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)\n"}
{"task_id": "Mbpp/123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n", "entry_point": "amicable_numbers_sum", "canonical_solution": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "base_input": [[999], [9999], [99]], "atol": 0, "plus_input": [[10000], [5000], [4999], [4998], [5001], [90], [92], [89], [91], [10001], [93], [5002], [4997], [true], [94], [4996], [4995], [10002], [9999], [88], [10003], [5003], [5004], [21], [87], [22], [4994], [95], [86], [96], [20], [9998], [4993], [23], [47], [97], [5005], [10004], [9], [9997], [10005], [85], [8], [46], [9996], [84], [7], [19], [9995], [98], [10006], [18], [99], [100], [101], [24], [68], [61], [69], [44], [43], [17], [5006], [16], [6], [10], [45], [10007], [66], [15], [83], [48], [9994], [81], [60], [74], [5007], [67], [28], [80], [72], [79], [70], [29], [49], [9993], [65], [4992], [4991], [11], [10008], [73], [12], [62], [71], [4990], [5008], [78], [50], [59], [77], [10009]], "contract": "\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    assert limit >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0\n"}
{"task_id": "Mbpp/124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n", "entry_point": "angle_complex", "canonical_solution": "\nimport cmath\ndef angle_complex(a,b):\n  angle=cmath.phase(a+b)\n  return angle\n", "base_input": [["0", "1j"], ["2", "1j"], ["0", "2j"]], "atol": 0.0001, "plus_input": [["0", "0j"], ["0", "1j"], ["1e-100", "1e-100j"], ["1", "(-0-1j)"], ["-3", "4j"], ["-1", "0.5j"], ["-1", "(-0-2j)"], ["5", "(-0-3j)"], ["1", "(-0-1e-16j)"], ["-1000000.0", "1j"], ["0.001", "0.001j"], ["-0.002", "0.003j"], ["5000", "(-0-5000j)"], ["0", "1j"], ["2", "1j"], ["0", "2j"], ["2", "2j"], ["5", "(-0-1e-16j)"], ["-1000000.0", "1e-100j"], ["-1", "-0.2094810906938558j"], ["0.001", "1.0104890444966959j"], ["0", "0.003j"], ["0", "(-0-1e-16j)"], ["0.001", "1e-100j"], ["5", "2j"], ["1", "2.016370180069777j"], ["5", "0.003j"], ["-1000000.0", "0.003j"], ["-1", "-1.1516856344430004j"], ["0.001", "0.6725319152086964j"], ["0", "-0.010355262258335274j"], ["2", "(-0-1j)"], ["-3", "1j"], ["5000", "0j"], ["0", "0.975464332791085j"], ["1", "1j"], ["0", "1.9698673032096357j"], ["0.001", "1.0219314567339677j"], ["5000", "0.003j"], ["1", "1j"], ["5000", "0.3936790862469757j"], ["-1", "0j"], ["1e-100", "1.0219314567339677j"], ["0", "0.6725319152086964j"], ["0.001", "-0.8400056138335225j"], ["0", "1.0623785268964003j"], ["-2", "(-0-2j)"], ["-1", "(-0-1e-16j)"], ["-2", "-1.4466815811938807j"], ["-0.420215439612294", "1.0219314567339677j"], ["0", "-0.8400056138335225j"], ["-1", "0.003j"], ["2", "(-0-3j)"], ["0", "-0.7464229304074054j"], ["5", "(-0-1j)"], ["-1", "0.7612695873124079j"], ["2", "-2.62106615192279j"], ["1", "4j"], ["1", "-0.24099175426302122j"], ["1", "1.0623785268964003j"], ["5001", "0.003j"], ["-3", "0.7612695873124079j"], ["1", "1.0104890444966959j"], ["0.001", "(-0-3j)"], ["1", "0.6725319152086964j"], ["0.001", "-0.8715172340818781j"], ["1", "3.2198297580460986j"], ["-0.24387354740075257", "1.0219314567339677j"], ["0.001", "-1.1516856344430004j"], ["1e-100", "-0.1029778505874197j"], ["5", "-0.2094810906938558j"], ["-763284.5778121873", "1j"], ["2", "0.8691541649826418j"], ["0", "-4999.924286520318j"], ["2", "(-0-1e-16j)"], ["5000", "(-0-1j)"], ["5000", "-0.2094810906938558j"], ["1", "-0.1029778505874197j"], ["5000", "-0.010355262258335274j"], ["0.0007807920872595409", "0.6725319152086964j"], ["5001", "0.975464332791085j"], ["2", "0.975464332791085j"], ["0.0007732910823548642", "0.001j"], ["5000", "0.5697754263979038j"], ["3", "1j"], ["0.0007732910823548642", "-0.6005568184440887j"], ["5", "(-0-2j)"], ["-0.24387354740075257", "1e-100j"], ["-1", "2.016370180069777j"], ["5", "1j"], ["-3", "-0.24099175426302122j"], ["5001", "-0.2094810906938558j"], ["1", "0.746539818763773j"], ["1", "0.6430961891723811j"], ["5", "(-0-1j)"], ["1", "3.0401020209872165j"], ["1", "0.5697754263979038j"], ["3", "0j"], ["5", "0.975464332791085j"], ["1", "-0.010355262258335274j"], ["1", "1.2472534570917213j"], ["0.001", "0.2808016878272164j"], ["-0.24387354740075257", "-0.6005568184440887j"], ["0", "1.6394342209431512j"], ["7", "(-0-1j)"], ["-0.24387354740075257", "0.11629069822069693j"], ["5000", "-4999.787677780481j"], ["2", "1j"], ["0", "-0.6005568184440887j"], ["-1", "1j"], ["5", "-0.7272148602507602j"], ["5001", "1.628767403187359j"], ["0.001", "0.6755064392822638j"], ["7", "1.2472534570917213j"], ["1", "0.8045352400481771j"], ["0", "(-0-1j)"]], "contract": "\n  assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs\" # $_CONTRACT_$\n  assert b.real == 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n"}
{"task_id": "Mbpp/125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n", "entry_point": "find_length", "canonical_solution": "\ndef find_length(string): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n", "base_input": [["11000010001"], ["10111"], ["11011101100101"]], "atol": 0, "plus_inputcontract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n"}
{"task_id": "Mbpp/126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "entry_point": "sum", "canonical_solution": "\nimport math\ndef sum(a,b): \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n", "base_input": [[10, 15], [100, 150], [4, 6]], "atol": 0, "plus_input": [[27, 81], [12, 18], [123, 456], [555, 1111], [987, 654], [10, 3], [987654321, 123456789], [555, 456], [987654322, 81], [555, 987654322], [3, 987654321], [555, 555], [123, 1111], [987654321, 987654321], [456, 456], [81, 555], [123456790, 123456790], [123456789, 987654322], [123, 3], [12, 1111], [123456789, 81], [555, 554], [81, 456], [455, 456], [81, 457], [555, 987654323], [556, 553], [80, 456], [555, 553], [123456789, 456], [456, 987654323], [987, 986], [987654320, 987654321], [987654323, 987654322], [987654323, 987654323], [987654322, 987654321], [987654323, 10], [455, 987654320], [987654322, 987654322], [123456789, 123456790], [554, 457], [26, 82], [11, 3], [986, 987654323], [123, 123], [555, 81], [987654324, 987], [987654321, 18], [987654319, 987654318], [654, 654], [123456790, 455], [3, 987654322], [80, 987654321], [553, 553], [556, 457], [988, 654], [455, 123456789], [654, 987654321], [123456790, 654], [11, 123], [556, 1111], [27, 26], [80, 124], [556, 456], [987, 987], [457, 456], [553, 80], [81, 458], [123456789, 123456789], [457, 457], [457, 3], [123456789, 986], [985, 987], [986, 986], [987654320, 987654320], [456, 458], [2, 3], [124, 987654323], [987654320, 81], [12, 12], [987654321, 987654320], [125, 555], [81, 2], [654, 81], [654, 123456788], [987654319, 80], [81, 554], [457, 554], [987654323, 456], [456, 26], [81, 81], [556, 556], [654, 80], [987654319, 986], [123, 4], [556, 987654320], [456, 556], [987654320, 456], [987654321, 2], [126, 2], [556, 987654322], [18, 123456789], [2, 654], [457, 987654323], [985, 456], [2, 18], [3, 556]], "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3\n"}
{"task_id": "Mbpp/127", "prompt": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n", "entry_point": "multiply_int", "canonical_solution": "\ndef multiply_int(x, y):\n    return x * y\n", "base_input": [[10, 20], [5, 10], [4, 8]], "atol": 0, "plus_input": [[10000000000000000, 9999999999999999], [999999999999999999, 999999999999999999], [0, 999999999999999999], [-999999999999999999, 999999999999999999], [9999999999999999, -999999999999999999], [9999999999999999, 9999999999999999], [0, 0], [10000000000000000, 9999999999999998], [999999999999999998, 999999999999999998], [999999999999999999, 999999999999999998], [-999999999999999999, -999999999999999999], [-999999999999999999, -1000000000000000000], [0, 9999999999999999], [-999999999999999999, -999999999999999998], [10000000000000000, 999999999999999999], [10000000000000000, 10000000000000000], [1000000000000000000, 999999999999999999], [10000000000000001, -999999999999999999], [1000000000000000000, 0], [10000000000000000, -999999999999999998], [999999999999999999, 10000000000000001], [10000000000000001, 10000000000000001], [9999999999999999, 999999999999999999], [10000000000000000, -999999999999999999], [9999999999999999, 9999999999999998], [1, 0], [9999999999999999, 10000000000000000], [999999999999999998, 0], [9999999999999999, 0], [-2, 0], [-999999999999999997, -999999999999999998], [10000000000000000, 999999999999999998], [0, 9999999999999998], [-1, -1], [9999999999999999, -999999999999999998], [-999999999999999999, -1], [-999999999999999999, 0], [-1000000000000000000, 0], [-999999999999999999, 10000000000000000], [9999999999999998, 10000000000000000], [-1000000000000000000, 1000000000000000000], [1, 10000000000000001], [-2, 999999999999999999], [9999999999999998, 9999999999999999], [10000000000000001, 10000000000000000], [-999999999999999999, 999999999999999998], [999999999999999997, 999999999999999998], [10000000000000000, 999999999999999997], [9999999999999997, 9999999999999997], [9999999999999998, 1000000000000000000], [0, -1], [10000000000000001, 0], [9999999999999999, -2], [9999999999999999, 1], [10000000000000000, 10000000000000001], [10000000000000001, -1], [10000000000000001, 9999999999999998], [9999999999999998, 9999999999999998], [-1, 0], [-999999999999999997, -999999999999999997], [1000000000000000000, -999999999999999998], [-3, -1], [999999999999999997, 10000000000000000], [1000000000000000000, 1000000000000000000], [10000000000000000, -1], [1000000000000000001, -999999999999999998], [999999999999999998, -999999999999999999], [-3, 9999999999999997], [1, 1], [1000000000000000000, 9999999999999997], [false, false], [10000000000000000, 0], [1, 999999999999999999], [-999999999999999999, 999999999999999997], [1000000000000000000, -999999999999999997], [1, 1000000000000000001], [1, -999999999999999998], [999999999999999998, 10000000000000000], [0, 10000000000000001], [1, 2], [999999999999999996, 999999999999999998], [-999999999999999998, -3], [9999999999999999, 10000000000000001], [999999999999999998, 10000000000000001], [-999999999999999998, -999999999999999999], [10000000000000000, 1000000000000000000], [-1, 1000000000000000001], [-999999999999999998, -999999999999999998], [1, -1], [10000000000000002, -2], [9999999999999999, 1000000000000000001], [-999999999999999997, 999999999999999998], [-999999999999999998, 0], [10000000000000000, -2], [-1, -999999999999999998], [9999999999999997, -1], [9999999999999997, -999999999999999998], [2, 1], [-1, 1], [999999999999999997, 1000000000000000001], [9999999999999998, 9999999999999997], [-999999999999999998, 10000000000000000], [999999999999999999, -999999999999999998], [-3, -999999999999999998]], "contract": "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32\n"}
{"task_id": "Mbpp/128", "prompt": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n", "entry_point": "long_words", "canonical_solution": "\ndef long_words(n, s):\n    return list(filter(lambda x: len(x) > n, s.split(' ')))\n", "base_input": [[3, "python is a programming language"], [2, "writing a program"], [5, "sorting list"]], "atol": 0, "plus_input": [[0, "abc  def  ghi  jklm  nopqrs   tuvwxyz"], [0, ""], [10, "thisisaverylongword testing wordlengths"], [100, "hello python is a programming language"], [0, "is"], [100, "thisisaverylongwordw testing wordlengths"], [0, "jklm"], [100, "thisisaverylongwordw teseting wordlengths"], [0, "thisisaverylongword testing wordlengths"], [10, "is"], [10, "hello python is a programming language"], [1, "thisisaverylongword testing wordlengths"], [0, "jklam"], [100, "tuvwxyz"], [0, "hello"], [0, "jkjlam"], [100, ""], [1, "jklam"], [100, "thisisaverylongwordnopqrsw teseting wordlengths"], [10, "heogramming language"], [10, ""], [100, "i"], [11, "thisisaverylongword testing wordlengths"], [100, "thisisaverylongword"], [2, ""], [2, "heogramming language"], [2, "hello python is a programming language"], [100, "ii"], [1, "thisisaverylongwordw teseting wordlengths"], [100, "thisisaveriylongwordw testing wordlengths"], [9, "jklm"], [100, "is"], [10, "helloh python is a programming language"], [100, "abc  def  ghi  jklm  nopqrs   tuvwxyz"], [2, "heogramming laneguage"], [0, "ajklamteseting"], [100, "thisisaveriylongwordw"], [100, "thisisaverylongwordw testheogramming languageing wordlengths"], [0, "thisisaverylongwordnopqrsw teseting wordlengths"], [99, "thisisaveriylongwordw"], [0, "a"], [0, "hello python is a programming language"], [0, "aa"], [0, "thisisaveriylongwordw"], [10, "python"], [10, "jkl"], [1, "hello python is a programming language"], [1, "jkllm"], [100, "thisisaverylongwordnopqrsw teseting wordlengthsi"], [101, "thisisaverylongwordw testing wordlengths"], [99, "thisisaverylongwordw teseting wordlengths"], [99, "heogramming langualaneguagege"], [0, "ii"], [101, "thisisaverylongwordw testheogramming languageing wordlengths"], [11, "jkl"], [1, ""], [101, "abc  def  ghi  jklm  nopqrs   tuvwx yz"], [0, "thisisaveriylongwoordw"], [0, "hlello"], [0, "heogramming language"], [1, "heogramming language"], [101, "is"], [9, "thisisaverylongwordnopqrsw teseting wordlengths"], [99, "hello python is a programming language"], [1, "thisisalanguageverylongwordw teseting wordleths"], [10, "jkjlam"], [0, "hlelllo"], [100, "yz"], [0, "ajheogramming languageklamteseting"], [9, "helloh python is a programminlaneguageg language"], [11, "thisisaveriylongwordw"], [2, "thisisaverylongwordw teseting wordlengths"], [2, "hlelllo"], [1, "hello python is a prthisisaverylongwordnopqrsw teseting wordlengthsiogramming language"], [0, "abc  def  ghi  jklm  thisisaveriylongwordwnopqrs   tuvwxyz"], [101, "aaa"], [11, "heogramming language"], [2, "wordlengthsiogramming"], [1, "thisisalanguageverylthisisaverylongwordnopqrsw teseting wordlengthsiongwordw teseting wordleths"], [11, "wordlengthsiongwordw"], [1, "heogramminghelloh python is a programming languagelanguage"], [11, "thisisaverylongword"], [11, "ljkl"], [99, "thisisalanguageverylongwordw"], [1, "ajheogramming languageklamteseting"], [0, "wordlengthsi"], [100, "thisisaveriylongwordwnopqrs"], [102, "aaa"], [102, "aaaa"], [10, "thisisaveriylongwordw testing wordlengths"], [0, "jkl"], [10, "thisisaverylongwordnopqrsw teseting wordlengths"], [10, "jk"], [100, "thisisaverylongwordnopqrsw tegseting wordlengthsi"], [101, "thisisajklmverylongwordw testing wordlengths"], [1, "heogramming laneguage"], [1, "ajklamteseting"], [100, "thisisaverylongwordw testheogramming languagein wordlengths"], [102, "thisisaveriylongwordw testing wordlengths"], [100, "thisisavongwordw"], [100, "hlello"], [0, "hello python is heogramming laneguagea programming language"], [10, "wlengthsiongwordw"], [99, "hello pylanguage"]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n"}
{"task_id": "Mbpp/129", "prompt": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "entry_point": "magic_square_test", "canonical_solution": "\ndef magic_square_test(my_matrix):\n    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True\n", "base_input": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 7]]]], "atol": 0, "plus_input": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5]]], [[[-2, 7, 6], [9, -5, 1], [4, 3, -7]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16]]], [[[1, 2, 3], [4, 5, 6]]], [[[4, 19, -3], [0, 9, -16]]], [[[7, 12, 1, 14], [2, 13, 8, 11]]], [[[7, 1, 14], [7, 1, 14]]], [[[7, 1, 14]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 12, 1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[4, 19, -3], [12, 7, 1], [-16, 9, -16], [12, 7, 1]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[-2, 7, 6], [9, -5, 1]]], [[[1, 2, 3], [4, 5, 6], [4, 5, 6]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16], [12, 7, 1]]], [[[11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14]]], [[[4, 19, -3], [12, 7, 1], [12, 7, 1]]], [[[4, 5, 6]]], [[[-2, 7, 6], [9, -5, 1], [4, 3, -7], [9, -5, 1]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1], [0, 9, -16]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1], [0, 9, -16], [0, 9, -16]]], [[[9, -5, 1], [4, 3, -7]]], [[[7, 12, 1, 2, 14], [7, 12, 1, 2, 14]]], [[[7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12]]], [[[7, 1, 14, 1], [7, 1, 14, 1]]], [[[7, 12, 1, 2], [7, 12, 1, 2]]], [[[7, 14]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [0, 9, -16], [12, 7, -3]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [12, 7, -3]]], [[[9, -5, 1, 9]]], [[[7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12]]], [[[1, 14], [1, 14], [1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 1, 14, 1]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11], [7, 12, 1, 14]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1]]], [[[2, 8, 11, 2], [2, 8, 11, 2], [2, 8, 11, 2]]], [[[7, 14, 14]]], [[[7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12]]], [[[7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6]]], [[[0, 9, -16], [4, 19, -3], [0, 9, -16], [0, 9, -16]]], [[[7, 12, 1, 14], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 12, 16], [7, 12, 16], [7, 12, 16], [7, 12, 16]]], [[[7, 7], [7, 7]]], [[[7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13]]], [[[9, -5, 1], [4, 3, -6]]], [[[7, 12, 1, 2, 14]]], [[[12, 8, 7, 1], [12, 8, 7, 1]]], [[[7, -5, 14], [7, -5, 14], [7, -5, 14], [7, -5, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13]]], [[[8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14]]], [[[7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12]]], [[[4, 19, -16], [12, 7, 1]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16], [0, 9, -16]]], [[[7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15]]], [[[6, 4, 5, 6]]], [[[7, 7, 7], [7, 7, 7], [7, 7, 7]]], [[[-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12]]], [[[7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 12, 1, 2], [7, 12, 1, 2], [7, 12, 1, 2]]], [[[-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7]]], [[[14], [14], [14]]], [[[7, 12, 1, 1, 14], [7, 12, 1, 1, 14], [7, 12, 1, 1, 14], [7, 12, 1, 1, 14]]], [[[6, 12, 1, 14], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 1, 1, 14], [7, 1, 1, 14], [7, 1, 1, 14], [7, 1, 1, 14]]], [[[-2, 7, 6]]], [[[-5, 13, 8, 11], [7, 12, 1, 14], [-5, 13, 8, 11], [16, 3, 10, 5]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [2, 13, 8, 11]]], [[[7, 12, 1, 2, 14], [7, 12, 1, 2, 14], [7, 12, 1, 2, 14], [7, 12, 1, 2, 14]]], [[[1, -16, 3], [4, 5, 6], [4, 5, 6]]], [[[7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12]]], [[[7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6]]], [[[7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 15, 1, 2, 14], [7, 15, 1, 2, 14], [7, 15, 1, 2, 14]]], [[[12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15]]], [[[7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13]]], [[[7, 12, 1, 14], [14, 13, 8, 11], [16, 3, 10, 5], [14, 13, 8, 11]]], [[[7, 14, 14], [7, 14, 14]]], [[[7, 12, 1, 14, 14], [7, 12, 1, 14, 14]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [2, 13, 8, 11], [2, 13, 8, 11]]], [[[6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14]]], [[[7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12]]], [[[7, 12, 1], [7, 12, 1], [7, 12, 1], [7, 12, 1], [7, 12, 1]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [12, 7, -3], [12, 7, -3]]], [[[7, 12, 1, 14], [16, 3, 10, 5], [14, 13, 8, 11]]], [[[7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11]]], [[[2, 8, 2], [2, 8, 2], [2, 8, 2], [2, 8, 2]]], [[[7, 15, 1, 2, 14], [7, 15, 1, 2, 14]]], [[[7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12]]], [[[7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7]]], [[[7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12]]], [[[7, 12, 1, 14, 14]]], [[[7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13]]], [[[7, 12, 1, 10, 14]]], [[[6, 1, 1, 14], [6, 1, 1, 14], [6, 1, 1, 14], [6, 1, 1, 14]]], [[[7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12]]]], "contract": "\n    assert isinstance(my_matrix, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(my_matrix[0]) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in my_matrix for item in row), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n"}
{"task_id": "Mbpp/130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n", "entry_point": "max_occurrences", "canonical_solution": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n", "base_input": [[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]], [[10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 542]], [[72, 1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541]], [[542, 347, 687, 789, 72, 235, 348, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[542, 347, 687, 789, 3, 72, 348, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 71, 687, 542]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 4]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15]], [[1, 2, 3, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 6]], [[1, 2, 3, 4, 347, 6, 7, 8, 9, 10, 11, 12, 13, 14, 4]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10]], [[542, 347, 687, 789, 72, 235, 348, 542, 542, 687, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 1, 542]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 12, 10, 11, 12, 13, 14, 15]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 12, 14]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3]], [[1, 2, 3, 4, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 235, 14]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 3]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 2]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 235, 14, 8]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 687, 72, 14, 15, 1]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15]], [[542, 5, 687, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 2, 10, 11, 12, 14]], [[72, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 541, 347, 347, 687, 542]], [[72, 1, 2, 3, 4, 15, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 235, 14, 8]], [[542, 6, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 541, 347, 347, 687, 542]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15, 1, 1]], [[542, 5, 687, 72, 236, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 3, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 542, 347, 347, 72, 687, 542, 542]], [[542, 347, 687, 72, 235, 348, 542, 542, 687, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542, 347]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 542, 14, 15, 3]], [[1, 2, 3, 4, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 9]], [[1, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 13, 2]], [[542, 71, 347, 687, 789, 72, 235, 348, 542, 542, 687, 789, 789, 542, 72, 542, 543, 347, 347, 72, 687, 542]], [[1, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 13, 2, 7]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 7, 14, 15]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 11, 12, 13, 14, 15, 10]], [[1, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 13, 2, 7, 14]], [[542, 347, 687, 789, 72, 235, 542, 789, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[542, 5, 687, 72, 72, 236, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15, 11]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15, 1, 1]], [[542, 5, 687, 72, 236, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347, 542, 542, 789]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 14, 8]], [[72, 8, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 14]], [[542, 347, 687, 789, 3, 72, 348, 235, 542, 542, 687, 789, 789, 542, 72, 542, 347, 347, 71, 687, 542]], [[1, 2, 3, 4, 6, 7, 8, 8, 9, 10, 11, 11, 13, 3, 15]], [[1, 2, 3, 347, 5, 6, 71, 8, 9, 10, 11, 12, 13, 14]], [[1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 11, 3, 235, 13, 14, 15]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 10, 12, 13, 542, 14, 15, 3, 542]], [[542, 347, 687, 789, 72, 235, 542, 789, 542, 687, 789, 789, 542, 542, 2, 347, 347, 72, 687, 541, 347]], [[72, 8, 2, 3, 4, 347, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 8]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 7, 8, 11, 11, 12, 72, 14, 15, 8]], [[1, 543, 2, 3, 0, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[72, 1, 2, 3, 3, 4, 347, 15, 6, 3, 8, 9, 10, 11, 12, 13, 14]], [[1, 2, 3, 347, 5, 6, 71, 8, 9, 10, 11, 12, 13, 14, 12]], [[1, 2, 3, 4, 15, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 11, 12, 13, 14, 15, 10, 10, 10]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 542]], [[1, 2, 3, 4, 71, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]], [[542, 347, 687, 789, 3, 72, 348, 235, 542, 542, 687, 789, 789, 542, 72, 542, 347, 347, 71, 687, 4, 542, 347]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 2, 12]], [[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 7, 14, 15]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 3, 14, 3]], [[1, 2, 3, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3]], [[1, 2, 3, 4, 5, 7, 9, 11, 11, 12, 13, 14, 235, 15]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3, 12, 14]], [[1, 2, 3, 4, 14, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15, 1, 1, 1]], [[542, 347, 687, 789, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 10]], [[3, 347, 687, 789, 72, 235, 542, 542, 687, 789, 542, 542, 541, 347, 347, 687, 542, 789]], [[2, 3, 347, 5, 6, 71, 8, 9, 11, 12, 13, 14]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 542, 14, 15, 3]], [[1, 2, 3, 4, 347, 6, 7, 9, 10, 11, 12, 13, 14, 4, 13, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 10, 11, 12, 13, 14, 15, 5, 9, 1]], [[3, 347, 687, 789, 72, 235, 542, 687, 789, 542, 542, 541, 347, 348, 687, 542, 789]], [[542, 347, 5, 687, 72, 72, 236, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[0, 1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15, 9]], [[1, 2, 4, 5, 7, 8, 9, 1, 11, 11, 12, 13, 14, 15, 1, 1, 13]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 15, 9]], [[542, 71, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 542, 347, 72, 687, 542]], [[14, 1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3]], [[542, 347, 687, 789, 73, 235, 348, 542, 542, 687, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20\n"}
{"task_id": "Mbpp/131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "entry_point": "reverse_vowels", "canonical_solution": "\ndef reverse_vowels(str1):\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n", "base_input": [["Python"], ["USA"], ["ab"]], "atol": 0, "plus_input": [[""], ["BCDFG"], ["BCDFCCG"], ["BCDFC"], ["BDCBDFC"], ["BDFG"], ["BCDCBDFC"], ["BCDFCCGBCDCBDFC"], ["BCDFCCGBCDCBDFCBCDFCCG"], ["BDFGG"], ["BCDBFC"], ["BCBDCBDFCDBFC"], ["BCBDCBDFCDBBCDCBDFCC"], ["BCDFCCGBCDBDFC"], ["BCBDCBCDFCDBFC"], ["BFGG"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCCGDBFC"], ["CDFCCGBCDBDFC"], ["BBBCBDCBDFCDBBCDCBDFCCDCBDDFC"], ["BCBCDFCDFC"], ["BCCCGBCDBCDFC"], ["DBCBDCBDFCDBBCDCBDFCC"], ["BBCBDCBCBCDFCDFCBDFCDBFC"], ["BCBBCBDCBDFCDBFCDCBDFCDBBCDCBDFCC"], ["DBCDBDCBDFCDBCBDCBDFCDBBCDCBDFCCBBCDCBDFCC"], ["BDCBDCBCDFCDB"], ["BCBDCBCDBFCDBFC"], ["BCDFCCGBCDBD"], ["BBBCBDCBDCBDCBCDFCDBBDFCDBBCDCBDFCCDCBDDFC"], ["BDFGGBCBDCBCDBBBCDFCCGFCDBFC"], ["BCDFCCBGBCDCBDFC"], ["BBBBCBDCBDFCDBBCDCBDFCCDCBDDFC"], ["BBCBDCBCBCDFCBCDBFCDFCBDFCDBFC"], ["CBDFCDBBCDCBDFCC"], ["BBCBDCBCBCDFCBCDBFCDCFCBDFCDBFC"], ["BG"], ["BCDFCCGBDCDBDFC"], ["DDBCBDCBDFCDBBCDCBDFCC"], ["BDBFG"], ["BDDFGG"], ["BDFGDBCBDCBDFCDBBCDCBDFCCG"], ["BBBCBDCBDCBDCBCDFCDBBDFBDDFC"], ["BCDFCCGBCDCBDFCBDFGDBCBDCBDFCDBBCDCBDFCCG"], ["BBFC"], ["CDFCCGBCDBDFCBG"], ["CDFCCGBCDDBDFC"], ["BCDFCCGBCGDBD"], ["BCBDCBCDBFCDBFCC"], ["pzpAwF"], ["DDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDCBDFCBCDFCCGC"], ["BCBDCBCDBFCFDBFC"], ["DDDBCBDCBDFCDBBCDCBDFCC"], ["BCBCDFCCGBDCDBDFCBDCBCDFCDBFC"], ["BCDFCCGBCDCBDFCBCCG"], ["BCDDFCCGBCDBD"], ["CDCFCCGBCDBDFCBG"], ["BBBCBDCBDCBDCBCDFCDBCBDDFC"], ["BCBDCBDFCDBFFC"], ["CDFCCGBCFDBBBBBCBDDCBDFCCDCBDDFCDBDFC"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCDBFC"], ["DDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDBDFGDFCCGC"], ["DDBCBDCBDFCDBBCDCBDFCCDFCCGBCDDBDFCBCDFCCGBCDBDFGDFCCGC"], ["BCDBFBCBCDFCDFCC"], ["BCDFCCGBCDCBDFCBCCCG"], ["BDCBDCBCDFCD"], ["DDDBCBDCBBCDCBDFCC"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFC"], ["BCDCBDBCBDCBCDFCDBFCFC"], ["BCDDFCCGBCCDBD"], ["BCBDCBCDBFCFDBFDC"], ["BDBCDFCCGBDCDBDFCGG"], ["BCDBBFC"], ["DDDBCBDCBBCDCCBDFCC"], ["BCDBCCCGBCDBCDFCCCBGBCDCBDFC"], ["BCCDFCCGBCDDBDFCDDFCCGBCDBD"], ["BBBCBDCBDCBDCGBCDDDBCDBDCBDFCDBCBDCBDFCDBBCDCBDFCCBBCDCBDFCCBDFCC"], ["BCBCDBFCDFCCGBDCDBFDFC"], ["BCCCGBCDBCDFCC"], ["FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFCCDCBDFCD"], ["BCBDCBBCDBFCDBFCC"], ["BCDFCDDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDBDFGDFCCGCCGBCGDBD"], ["BCDFCCGBCDCBDFCBCD"], ["CBDFCDBBBBBCBDCBDFCDBBCDCBDFCCDCBDDFCCDCBDFCC"], ["BCCDFCCGBCDDBDFCDDBDFGCGFCCGBCDBD"], ["BCDFCCGDBCDCBDFCBCD"], ["wqfXCaCb"], ["BCDFCDDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDFCCGBCDCBDFCBCDBCDBDFGDFCCGCCGBCGDBD"], ["BDFGDBCBDCBDFCDG"], ["BCCDFCCBGBCDCBDFC"], ["BCDFCCGBCBCDBFCDBD"], ["BBBBCBDCBDFCDBBCDCBBCBDCBDFCDBFCDFCCDCBDDFC"], ["BCCBDCBCDFCDBFC"], ["BCDFCCDDBD"], ["BDBBFG"], ["BCDFCCGBCDCBBDFCBCD"], ["BBBBCBDCBDFCDBBCDCBBpzpAwFCBDCBDFCDBFFCDFCCDCBDDF"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCDCBFC"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCCDBFC"], ["BCCDFCCBGBCDCCBDFC"], ["FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFBCDFCDDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDFCCGBCDCBDFCBCDBCDBDFGDFCCGCCGBCGDBDDBFCCDCBDFCD"], ["BCDFCCBBCDFCCBGBCDCBDFCDCBDFC"], ["BDFGGBCBDCBCDBBBCDFC"]], "contract": "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n"}
{"task_id": "Mbpp/132", "prompt": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n", "entry_point": "tup_string", "canonical_solution": "\ndef tup_string(tup1):\n  return ''.join(tup1)\n", "base_input": [[["e", "x", "e", "r", "c", "i", "s", "e", "s"]], [["p", "y", "t", "h", "o", "n"]], [["p", "r", "o", "g", "r", "a", "m"]]], "atol": 0, "plus_input": [[[]], [["a"]], [["a", "a"]], [["Z", "a", "ZvCAMhN", "a", "a", "a"]], [["Z", "a", "ZvCAMhN", "a", "aa", "a"]], [["Z", "a", "ZvCAMhN", "a", "aa", "a", "aa"]], [["ZZ", "a", "ZvCAMhN", "a", "a", "a"]], [["a", "ZvCAMhN", "aaZ", "a", "aa", "a"]], [["mKxDJT", "VekfW", "ZvCAMhN", "aaZ", "FiUaYFBklh", "PBEOJoMiY", "aFELUEp", "aaZ", "ZZ"]], [["Z", "a", "ZvCAMhN", "a", "a", "a", "a"]], [["ZZ", "", "ZvCAMhN", "aa", "a", "a"]], [["aa", "mKxDJTaa", "a"]], [["aa", "ZvCAMhN", "a"]], [["aa", "VekfW", "a"]], [["Z", "ZvCAMhN", "a", "a", "a", "Z", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "a", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "a"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "aa", "a", "aa"]], [["aa", "mKxDJTaa", "aa"]], [["a", ""]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "tDuJm", "IWSYg", "Z"]], [["aa", "ZvCAMhN", "a", "aa"]], [["ZZ", "ZvCAMhN", "aa", "a", "a"]], [["Z", "a", "ZvCAMhN", "a", "aa", "a", "a"]], [["mKxDJT", "ZvCAMhN", "aaZ", "a", "aa", "a"]], [["aa", "aFELUEpZ"]], [["mKxDJT", "ZvCAMhN", "aZ", "ZZ", "a", "aa", "a"]], [["Z", "aaZ", "a", "ZvCAMhN", "a", "a", "a", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "aFELUEpa", "a", "a"]], [["aFELUEp", "ZvCAMhN", "a", "aa", "a"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "a", "a", "a", "a"]], [["aZZ", "aFELUEpZ"]], [["ZZZ", "tDuJma", "a", "ZvCAMhN", "a", "a", "ZZ"]], [["ZZ", "ZvCAMhN", "aa", "a", "a", "ZvCAMhN"]], [["aa", "ZvCAMhN", "aa"]], [["Z", "a", "a", "a", "a"]], [["aa", "ZvCAMhN", "aa", "aa"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "PBEOJoMiYa", "a", "a", "a"]], [["", "ZvCAMhN", "aa", "a", "a", "ZvCAMhN"]], [["a", "aa", "a"]], [["amKxDJTaa", "Z", "mKxDJTaaa", "ZvCAMhN", "a", "aa", "a"]], [["Z", "a", "ZvCAMhN", "a", "a", "FiUaYFBklh"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["Z", "a", "a", "a", "Z", "a"]], [["ZZ", "aaZa", "ZvCAMhN", "aa", "a"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "SkSpnaC", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["ZvCAMhN", "aaa", "aa", "aa", "aa"]], [["aa", "a"]], [["ZZ", "aaZa", "ZvCAMhN", "aa", "a", "aa"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "aa", "a", "aa", "a"]], [["a", "IWSYga", "ZvCAMhN", "IWSYg", "aVekfW", "a", "aa", "a"]], [["ZZ", "a", "ZvCAMhN", "a", "aa", "a", "ZvCAMhN"]], [["", "a", "a", "a", "Z", "a"]], [["mKxDJT", "ZvCAMhN", "aZ", "ZZ", "mKxDJT", "aa", "aa", "a"]], [["ZZ", "SkpnaC", "FiUaYFBklh", "a", "a", "a", "a"]], [["Z", "a", "ZvCAMhN", "a", "a", "a", "a", "a"]], [["a", "", ""]], [["ZZ", "a", "ZvCAMhN", "a", "a"]], [["ZZZ", "a", "a", "aFELUEpa", "a"]], [["", "a"]], [["ZZ", "ZvCAMhN", "PBEOJoMiYa", "aa", "a", "a", "ZvCAMhN"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a", "a"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "aFFELUEpa", "a"]], [["ZZ", "ZvCAMhN", "a", "aa", "a"]], [["SkpnaC", "a", "qHPQEqCm", "PyvCTG", "SkSpnaC", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["a", "PBEOJoMiY", ""]], [["Z", "a", "ZvCAMhN", "a", "a", "a", "a", "a", "a"]], [["Z", "ZvCAMhN", "a", "aa", "a", "a", "Z", "a"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "tDuJm", "IWSYg", "Z"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a", "a", "a"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "a", "aa", "mKxDJTaa", "a"]], [["aa", "VekfW", "aa"]], [["IWSYg", "ZZZ", "a", "a", "aFELUEpa", "a"]], [["ZZ", "SkpnaC", "FiUaYFBklh", "a", "a", "a", "a", "a"]], [["ZZ", "aa", "a", "aa", "aa"]], [["aa", "SkpVekfWnaC", "aa"]], [["mKxDJT", "VekfW", "ZvCAMhN", "aaZ", "FiUaYFBklh", "PBEOJoMiY", "aFELUEp", "aaZamKxDJTaa", "ZZ", "VekfW", "PBEOJoMiY"]], [["SkpnaC", "ZZ", "aa", "a", "aa", "aa", "aa"]], [["SkpnaC", "ZZ", "aa", "aPBEOJoMiYaa", "a", "aa", "aa", "aa"]], [["aa", "SkfpVekfWnaC", "aa"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "tDuJm", "IWSYg", "aaZamKxDJTaa"]], [["ZZ", "SkpnaC", "FiUaYFBklh", "aaFELUEpa", "a", "a", "a", "a"]], [["ZZ", "ZvCAMhN", "PBEOJoMiYa", "aa", "a", "a", "ZvCAMhN", "a"]], [["Z", "ZvCAMhN", "aPBEOJoMiYaa", "a", "aa", "a", "Z", "a"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "ZvCACMhN", "aa", "a", "aaFELUEpZ", "aa"]], [["ZZ", "a", "ZvCAMhN", "a", "ZZZ", "a", "a"]], [["ZZ", "a", "tDuJma", "PBEOJoMiY", "a", "aa"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "IWSYg", "Z"]], [["Z", "aaZ", "a", "ZvCAMhN", "a", "a", "a", "a", "a"]], [["mKxDJT", "ZvCAMhN", "aZ", "ZZ", "mKxDJT", "aa", "SkfpVekfWnaC", "aZtDuJm", "aa", "a"]], [["ZvCAMhN", "ZvCAaFELUEpMhN", "aaa", "aaa", "aa", "aa"]], [["mKxDJT", "VekfW", "ZvCAMhN", "aaZ", "aZ", "PBEOJoMiY", "aFELUEp", "aaZ", "ZZ"]], [["ZZZ", "a", "ZvCAMhN", "a", "aFELUEpa", "a", "ZmKxDJTaaavCAMhN", "a"]], [["ZvCNAMhN"]], [["SkpnaC", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a", "a", "a", "a"]], [["ZvCAMhN", "aaa", "aa", "aa", "ZMvCAMhN", "aa"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "IWSYg", "Z", "Z"]], [["ZvCAMhN", "a", "aa", "aa"]], [["Z", "VekfW", "ZvCAMhN", "aaa", "a", "a", "a"]], [["ZZZ", "a", "aFELUEpa"]]], "contract": "\n  assert isinstance(tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, str) for item in tup1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n"}
{"task_id": "Mbpp/133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "entry_point": "sum_negativenum", "canonical_solution": "\ndef sum_negativenum(nums):\n  return sum(x for x in nums if x < 0)\n", "base_input": [[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[10, 15, -14, 13, -18, 12, -20]], [[19, -65, 57, 39, 152, -639, 121, 44, 90, -190]]], "atol": 0, "plus_input": [[[]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[10, 15, 14, 13, 18, 12, 20]], [[3, -5, 1, -7, 2, -8, 4, -6]], [[-10]], [[3, -5, 1, -7, 2.5, -8.9, 4, -6]], [[-10, 15, -14.2, 13, -18, 12, -20.7]], [[3, -5, 1, -7, 2.5, -8.9, 4, -6, 1]], [[2, 3, 4, 5]], [[2, 3, -7, 6]], [[3, 2, -5, 1, -7, 2.5, 4, -6, 1]], [[5, 2, 3, 4, 5]], [[10, 15, 14, 13, 18, 12, 20, 20]], [[10, -1, -2, -3, -4, -5]], [[20, 2, 3, 4, 5]], [[3, -5, 1, -7, 2.5, -8.9, 4, -6, 1, 1]], [[10, 15, 14, 13, 13, 18, 12, 20, 20, 15, 18]], [[10, 15, 14, 13, 18, 12, 20, 14, 20]], [[10, -1, -2, -4, -5]], [[-6, 3, -5, 1, -7, 2, -8, 4, 2, -6]], [[3, 2, -5, 1, -7, 4, -6, 1]], [[1, 2, 3, 1, 5, 1]], [[1, 2, 4, 5, 2, 2]], [[0, 2, -5, 1, -7, 4, -6, 1]], [[1, 2, 3, 0, 1, 5, 1]], [[10, 14, 15, 14, 13, 18, 12, 20, 20]], [[10, 15, 14, 1, 13, 18, 12, 20, 14, 20]], [[5, 2, 20, 4, 4, 6]], [[3, 2, -5, 1, -7, 2.5, 4, 10, 1]], [[1, -8, 2, -10, 4, 5, 2, 2]], [[3, -5, 1, -7, -2, 2.5, -8.9, 4, -6, 1, 1]], [[2, 10, 14, 15, 14, 13, 18, 12, 20, 20]], [[-6, 3, -5, 1, -7, 2, -8, 2, 2, -6]], [[0, 2, -5, 1, -7, 4, 1]], [[0, 2, -5, 1, -7, 1, 4, 1, -7]], [[3, -5, 0, -7, 2.5, -8.9, 4, -6]], [[1, 2, 3, 4, 2, 5, 2, 3]], [[-7, 5, 3, -5, 1, -7, 2, -8, 2, 2, -6]], [[-6, 3, -5, 1, -7, -8, 2, -4, 2, -6]], [[0, 2, -5, 1, -5, -7, 1, 4, 1, -7]], [[0, 2, -5, 1, -5, -7, 1, 4, -4, 1, -7]], [[1, 2, 3, 4, 2, 5, 3]], [[10, -1, -2, -3, -4, 9, -5, -4]], [[5, 2, 20, 4, 4]], [[10, -1, -2, -3, -4, 9, -4]], [[0, 2, -5, 1, -7, 4, 1, 4, 1, -7]], [[1, 2, 3, 4, 4]], [[-10, 15, -14.2, 13, -18, 12, -20.7, 12]], [[10, 14, 15, 14, 13, 21, 18, 12, 20, 20]], [[-6, 3, -5, 1, -7, 2, -8, 4, 1, -6]], [[1, 21, 2, 3, 3, 1, 1, 1]], [[3, -5, 0, -7, 2.5, -8.9, 4, -6, 0]], [[-1, -2, -3, -4, -5, -1]], [[10, 14, -5, 15, 14, 13, 21, 18, 12, 20, 20, 14]], [[-10, -10]], [[-10, 15, 16, -14.2, 13, -18, 12, -20.7]], [[-6, 3, -5, -7, 2, -8, 4, 2, -6]], [[-1, -2, -3, -4, -5, -4]], [[3, -5, 1, -7, 2, 16, -8, 4, -6]], [[3, 2, -5, 1, -7, 2.5, 4, -6, 1, 2]], [[3, -5, -6, 1, -7, 2, 16, 0, 4, -6, 1]], [[-1, -2, -3, -4, -5, -5]], [[3, -5, 0, -7, 2.5, -8.9, 4, -6, 0, 4]], [[3, -5, 0, -7, 2.5, -8.686091893944287, 4, -6, 4]], [[10, 15, 14, 13, 14, 12, 20, 10]], [[1, 2, 3, 3, 3, 4, 4]], [[-6, 3, -5, 1, -7, 2, -8, 4, 1, -6, -7]], [[10, -1, -2, -3, -4, 9, -1, -1, -5]], [[10, -2, -1, -2, -3, -4, 9, -1, -1, -5]], [[10, -1, -2, 16, -4, 9, -4]], [[3, -9.674408997541613, -5, 1, -7, 2.5, -8.9, 4, -6, 1, 1]], [[10, -1, -2, -3, -4, -5, 10]], [[3, -5, 1, -7, 2, 16, -8, 20, -6]], [[10, 15, 14, 13, 13, 18, 12, 20, 20, 15, 18, 12]], [[-7, 3, -7, 6]], [[10, 15, 1, 13, 18, 12, 20, 14, 20]], [[3, -5, 1, -7, 2, 16, 4, -6]], [[10, -1, -2, -3, -4, -5, -1]], [[10, -1, -2, -3, -4, 5, -4]], [[2, 3, 4, 5, 2]], [[3, 2, -5, 1, -7, 2.5, 20, 4, 10, 1]], [[10, -1, -2, 16, -4, 9]], [[1, -6, 2, 3, 4, 2, 5, 3]], [[2, 10, 15, 14, 13, 18, 12, 20, 20]], [[-8, 2, -4, -10, 4, 5, 2]], [[10, 15, 14, 1, 13, 18, 13, 12, 20, 14, 19, 20]], [[-1, -2, -5, -3, -4, -5, -1]], [[10, -2, -2, -3, -4, 9, -1, -1]], [[0, 2, -5, 1, -5, -7, 1, 4, -4, 1, -7, 1]], [[10, 15, 13, 18, 12, 20, 20]], [[1, 2, 3, 4, 2, 5, 4]], [[1, 2, 3, 4, 2, 5, 2, 3, 5, 5]], [[1, 2, 3, 4, 2, 5, 4, 2, 2]], [[-18, 2, 3, 1, 5, 1]], [[2, 9, 15, 21, 18, 12, 20, 20]], [[3, 2, 1, -7, 2.5, 4, -6, 1, 1]], [[1, 21, 3, 3, 1, 1, 1]], [[2, 3, 5, 2]], [[2, 5, 3, 5, 2]], [[-1, -3, -4, -5]], [[10, 14, 15, 14, 13, 21, 18, 12, 20, 20, 14]], [[-2, 16, -3, -4, -5]], [[-10, 15, 16, -14.2, 13, -18, 12, -20.7, -18]], [[5, 2, 20, 4, 4, 2]], [[1, 2, 4, 3, 5, 2, 3]], [[3, 2, -5, 1, -7, 4, -6, 1, -6]], [[0, 2, -4, -5, 1, -7, 4, 1, 4, 1, -7]]], "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n"}
{"task_id": "Mbpp/135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n", "entry_point": "hexagonal_num", "canonical_solution": "\ndef hexagonal_num(n): \n\treturn n * (2 * n - 1) \n", "base_input": [[10], [5], [7]], "atol": 0, "plus_input": [[100], [1000], [10000], [9999], [9998], [10001], [99], [9997], [1001], [10002], [9996], [101], [true], [90], [98], [97], [1002], [10003], [102], [1003], [62], [1004], [false], [96], [103], [9995], [104], [63], [64], [91], [61], [1005], [89], [1006], [60], [105], [66], [59], [65], [87], [88], [10004], [9994], [58], [106], [1007], [22], [92], [10005], [10006], [86], [93], [67], [57], [23], [9993], [68], [85], [39], [21], [84], [5], [94], [40], [83], [999], [1008], [20], [41], [42], [10007], [38], [56], [6], [1009], [107], [69], [82], [55], [9992], [24], [7], [12], [8], [11], [108], [95], [25], [1], [9], [19], [10], [36], [0], [81], [52], [51], [109], [10008], [110], [1010], [10009], [43]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n"}
{"task_id": "Mbpp/137", "prompt": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n", "entry_point": "zero_count", "canonical_solution": "\ndef zero_count(nums):\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n", "base_input": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17]]], "atol": 0.0001, "plus_input": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[0, 1, 0, 2, 0, 3, 0, 4, 0, 5]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, -2, -3, -4, -5, -5, -6, -7, -8, -9, -10]], [[0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 1, -7]], [[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 1]], [[-5, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1]], [[-1, -2, -4, -5, -5, -6, -7, -8, -9, -10, -2]], [[0, 0, 0, 0, 0, -1, 0, 0, 0, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, -7, 0, 1, -7]], [[-5, 0, 1, 0, 0, 1, 0, 1, 0, 1, -3]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[0, 0, 1, 0, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1]], [[0, 0, 0, 1, 1, 1, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 1]], [[-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0, 0, 0, 0, 0, 0, -7, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, -2, -4, -5, -5, -6, -7, -8, -9, -10, -1]], [[0, -1, 0, 0, -8, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1]], [[-5, 0, 1, 0, 1, 0, 1, 1, 1]], [[0, -1, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[-1, 0, 0, 0, 0, 0, -5, 0, 0, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0]], [[-5, 0, 1, -1, 0, 1, 0, 1, 0, 1, 1]], [[-5, 0, 1, -1, 0, 1, -6, 0, 0, 1, 1]], [[0, 0, 1, 0, 1, 1, -2, 1, 1]], [[1, 1, -2, 1, 1, 1, 1, 1, 1, 1]], [[-5, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1]], [[-5, 0, 0, 0, 0, -1, 0, 0, 0]], [[0, -1, 0, -1, -8, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 1, -9, 1, 1, 2, 1, 2, 1]], [[0, 1, 0, 0, 1, 0, 1, 0, 1, 4, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1]], [[0, 1, 0, 1, 0, 1, 0, 1, 1, 0]], [[0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0]], [[-5, 0, 1, 3, 0, 1, 0, 1, 0, 1, 1, 0, 1]], [[-1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1]], [[0, 0, 0, 0, 0, 0, 1, -9, 1, 1, 2, 1, 2, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, -9, 0, 2]], [[-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0]], [[-1, -2, -4, -5, -5, -6, -7, -8, -9, -9, -10, -2]], [[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, -10, 0, 1, 1, 1, 2, 1, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1]], [[-5, 1, 1, 0, 1, 0, 1, 1, 1]], [[0, -2, 0, 0, 0, 0, 0, 0, 0, 1]], [[-1, -2, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1]], [[0, -2, 0, 0, -10, 0, 1, 1, 1, 2, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1]], [[0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1]], [[5, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0]], [[-1, -1, -1, -1, -1, -1, -1, -1, 0, -1]], [[-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[-5, 0, 0, 0, 0, -1, 0, 0]], [[0, 0, 0, 0, -1, 1, 1, 1, 1, -1, 1]], [[-2, -3, -5, -5, -6, -7, -8, -9, -10]], [[-5, 0, 1, -1, 0, 1, -6, 0, 0, 1, 1, 0]], [[-2, -3, -5, -5, -6, -7, -8, -9, -10, -3]], [[0, 0, 0, 0, 0, 0, 0, 0, -1]], [[0, -1, 0, -10, -1, -8, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, -8, 0, 0]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1]], [[0, -6, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0]], [[-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 2, 1]], [[-1, -2, -4, -5, -6, -7, -8, -9, -10, -2]], [[0, 0, 1, 0, 1, -9, 1, 1, 1, 1, 1]], [[0, 1, 0, -2, 2, 0, 3, 0, 4, 0, 1, 5]], [[-1, 0, 0, 0, 0, -8, 0, 0, 1]], [[-2, -3, -5, -5, -5, -7, -8, -9, -10]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, -2, 0, 0, -10, 0, 1, 1, 1, 2, 1, 1, 0]], [[-1, -2, -1, -10, -1, -1, -1, -1, -9, -1, -1, -1, -1]], [[1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 0]], [[0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1]], [[0, 3, 0, -2, 0, -10, 0, 1, 1, 1, 2, 1, 0]], [[-5, 0, 2, 0, 1, 0, 1, 1, 1, 0]], [[-1, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0]], [[0, 0, 0, 0, 0, 1, 1, 1, -5, 1, 2, 1, 0]], [[1, -5, 0, 1, -1, 0, 1, 0, 1, 0, 1, 1]], [[0, 0, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1]], [[-5, 0, 1, 0, -10, -3, 1, 1]], [[-1, -2, -4, -5, -6, -7, -8, -9, -10, -2, -5]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 0, -1, -1]], [[-5, 0, 1, 3, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]], [[0, 0, 0, 0, 0, 1, -7, 0, 0, 1, 0]], [[-5, 1, 1, 0, 1, 0, 1, 1]], [[0, 0, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1, 1]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n"}
{"task_id": "Mbpp/138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "\ndef is_Sum_Of_Powers_Of_Two(n): \n    return n > 0 and n % 2 == 0\n", "base_input": [[10], [7], [14]], "atol": 0, "plus_input": [[123456789], [-14], [-2147483648], [-15], [123456788], [-2147483647], [123456787], [-2147483649], [-2147483650], [true], [-2147483651], [-16], [false], [-2147483646], [123456786], [-17], [-88], [-18], [-19], [-20], [123456785], [-7], [-6], [-2147483652], [-2147483653], [-2147483645], [-2147483654], [123456784], [-86], [-2147483643], [-87], [123456783], [21], [-2147483655], [-85], [-9], [-21], [-10], [19], [-22], [-89], [10], [123456782], [-2147483642], [-23], [-2147483641], [-11], [-8], [-90], [18], [-5], [123456790], [-4], [20], [-2147483640], [9], [123456781], [123456791], [-2147483644], [123456780], [-2147483639], [8], [42], [123456792], [-2147483656], [-13], [-2147483657], [41], [43], [-91], [-2147483638], [-2147483637], [-12], [40], [123456779], [44], [123456793], [28], [29], [45], [123456778], [39], [-55], [82], [-92], [-43], [-3], [27], [11], [-2147483636], [-50], [12], [61], [17], [7], [-75], [81], [-44], [-36], [79], [-45], [-51], [46]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n"}
{"task_id": "Mbpp/139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n", "entry_point": "circle_circumference", "canonical_solution": "\nimport math\ndef circle_circumference(r):\n  return 2 * math.pi * r\n", "base_input": [[10], [5], [4]], "atol": 0.0001, "plus_input": [[1000000], [1000001], [999999], [true], [1000002], [1000003], [999998], [999997], [19], [51], [999996], [18], [999995], [20], [999994], [50], [999993], [17], [49], [52], [21], [16], [78], [77], [48], [15], [1000004], [22], [1000005], [14], [999992], [53], [79], [76], [80], [81], [83], [43], [24], [13], [23], [75], [85], [55], [44], [47], [84], [46], [45], [82], [42], [1000006], [56], [86], [74], [41], [92], [1000007], [12], [25], [1000008], [87], [93], [73], [28], [91], [95], [54], [88], [57], [999991], [96], [97], [40], [26], [90], [2], [11], [89], [27], [94], [1000009], [10], [1000010], [72], [29], [59], [71], [58], [60], [1000011], [30], [98], [70], [3], [99], [31], [64], [9], [100], [33]], "contract": "\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n"}
{"task_id": "Mbpp/140", "prompt": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n", "entry_point": "extract_singly", "canonical_solution": "\ndef extract_singly(test_list):\n  return set([item for sublist in test_list for item in sublist])\n", "base_input": [[[[3, 4, 5], [4, 5, 7], [1, 4]]], [[[1, 2, 3], [4, 2, 3], [7, 8]]], [[[7, 8, 9], [10, 11, 12], [10, 11]]]], "atol": 0, "plus_input": [[[[]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9]]], [[]], [[[1, 2, 3], [4, 2, 3], [7, 8, 9], [4, 2, 3]]], [[[1, 2, 3], [4, 5], [], [6, 7, 8, 9]]], [[[1, 2, 3, 4], [5, 6], [7], [8, 9, 10]]], [[[1, 2, 3], [], [4, 5], [], [6, 7, 8]]], [[[1, 2, 3], [2, 3, 4], [4, 2, 3], [7, 8, 9], [4, 2, 3]]], [[[10000000, 20000000, 30000000], [40000000, 50000000], [60000000], [70000000, 80000000, 90000000]]], [[[4, 5], [6, 7, 8, 9]]], [[[6, 7, 8, 9, 8], [4, 5], [6, 7, 8, 9, 8], [6, 7, 8, 9, 8]]], [[[1, 2, 3, 4], [5, 6], [8, 9, 10, 8], [1, 2, 3, 4]]], [[[1, 2, 3, 4], [5, 6], [7], [9, 10]]], [[[1, 1, 3], [4, 2, 3], [7, 8, 9], [4, 2, 3]]], [[[1, 2, 3], [3, 2, 3], [7, 8, 9], [4, 2, 3]]], [[[8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8], [4, 5], [8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8]]], [[[6, 7, 8, 9, 8], [4, 5], [6, 7, 8, 9, 8], [6, 7, 8, 9, 8], [6, 7, 8, 9, 8]]], [[[70000000, 80000000, 80000001, 90000000], [10000000, 20000000, 30000000], [40000000, 50000000], [], [70000000, 80000000, 80000001, 90000000]]], [[[2, 3], [2, 3], [], [4, 5], [], [6, 7, 8]]], [[[2, 3], [2, 3], [], [4, 5], [], [false, false, true, false]]], [[[8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8], [4, 5], [8, 6, 7, 8, 9, 8, 8, 8]]], [[[70000000, 4, 5], [70000000, 4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [4, 40000000, 2, 3], [4, 2, 3], [7, 8, 9], [4, 40000000, 2, 3]]], [[[1, 2, 3], [], [4, 5], [], [6, 7, 8], []]], [[[8, 6, 7, 9, 8, 8, 8], [8, 6, 7, 9, 8, 8, 8], [8, 6, 7, 9, 8, 8, 8], [8, 6, 7, 9, 8, 8, 8], [8, 6, 7, 9, 8, 8, 8], [4, 5], [8, 6, 7, 9, 8, 8, 8]]], [[[6, 7, 8, 10], [6, 7, 8, 10]]], [[[6, 7, 8, 9, 8], [6, 7, 8, 9, 8], [6, 7, 8, 9, 8]]], [[[1, 2, 3], [4, 5], [7, 8, 9], [7, 8, 9]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 6], [4, 5]]], [[[8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [4, 5], [8, 6, 7, 8, 9, 8, 8, 8, 8]]], [[[1, 2, 3], [], [4, 5], [true, false, true, false, true, true, false], [], [6, 7, 8], []]], [[[2, 3], [2, 3], [5, 4, 5], [5, 4, 5], [], [6, 7, 8, 7]]], [[[1, 2, 3, 4], [5, 6], [9, 10, 10], [7], [9, 10, 10], [9, 10, 10]]], [[[1, 2, 3, 4], [5, 6], [9, 10, 10], [7], [9, 10, 10], [9, 10, 10], [9, 10, 10], [9, 10, 10]]], [[[70000000, 80000000, 80000001, 90000000], [10000000, 20000000, 30000000], [9, 50000000], [9, 50000000], [], [70000000, 80000000, 80000001, 90000000], [9, 50000000]]], [[[2, 3], [2, 3], [5, 4, 5], [5, 4, 5], [], [6, 7, 8, 7], []]], [[[1, 2], [4, 40000000, 2, 3, 3], [4, 2, 3], [7, 8, 9], [4, 40000000, 2, 3, 3]]], [[[1, 1, 3], [4, 2, 3], [7, 8, 9], [4, 2, 3], [4, 2, 3]]], [[[4, 5], [6, 7, 8, 9, 6], [4, 5], [4, 5]]], [[[0, 2, 3, 4], [5, 6], [7], [0, 2, 3, 4], [9, 10]]], [[[70000000, 80000000, 20000000, 90000000], [10000000, 20000000, 30000000], [40000000, 50000000], [], [70000000, 80000000, 20000000, 90000000]]], [[[1, 2, 3], [], [6, 7, 8, 9], []]], [[[1, 2, 3], [6, 7, 8, 9, 6], [4, 5]]], [[[6, 7, 8, 10], [6, 7, 8, 10], [6, 7, 8, 10]]], [[[1, 2, 3], [6, 7, 8, 9]]], [[[2, 3, 2], [2, 3, 2], [5, 4, 5], [2, 3, 2], [5, 4, 5], [], [6, 7, 8, 7]]], [[[1, 2, 3], [], [6, 7, 8, 9], [], []]], [[[4, 2], [1, 1, 3], [4, 2], [4, 2, 3], [4, 2]]], [[[1, 2, 3], [], [4, 5], [], [false, false, false, false, false, false, true], [6, 7, 8], []]], [[[1, 2, 3, 4], [5, 6], [7], [9, 10, 9], [9, 10, 9]]], [[[1, 2, 3], [4, 5], [7, 8, 8], [7, 8, 8], [4, 5]]], [[[1, 2, 3], [], [], [6, 7, 8], []]], [[[1, 2, 3, 4], [5, 6], [10, 10], [10, 10], [10, 10]]], [[[4, 40000000, 2, 3, 3], [4, 2, 3], [7, 8, 9], [4, 40000000, 2, 3, 3], [4, 40000000, 2, 3, 3]]], [[[1, 2, 3, 3], [4, 5], [], [6, 7, 8, 9]]], [[[1, 30000000, 3], [], [], [6, 7, 8], [true, false, true, false, false, true, true], [1, 30000000, 3]]], [[[4, 7, 8, 9]]], [[[2, 3], [5, 4, 5], [5, 4, 5], [], [6, 7, 8, 7], []]], [[[1, 2, 3], [4], [4], [6, 90000000, 8, 9], [], [6, 90000000, 8, 9]]], [[[1, 2, 3, 3], [4, 5], [false, false], [], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[1, 2, 3, 4], [11, 10], [5, 6], [11, 10], [11, 10], [11, 10]]], [[[4, 2], [1, 1, 3], [4, 30000000, 2, 3], [4, 2], [1, 1, 3]]], [[[1, 2, 3, 4], [5, 6], [8, 9, 10, 8, 8], [1, 2, 3, 4]]], [[[7, 8, 11], [7, 8, 11], [7, 8, 11]]], [[[1, 2, 3, 3], [], [-16, 80000000, 5, 1, 70000000, -1, 3, 50000000], [], [false, false], [], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[1, 2, 3, 4, 4], [5, 6], [8, 9, 10, 8], [1, 2, 3, 4, 4], [5, 6]]], [[[8, 6, 8, 7, 8, 9, 8, 8, 8, 8], [8, 6, 8, 7, 8, 9, 8, 8, 8, 8], [8, 6, 8, 7, 8, 9, 8, 8, 8, 8], [8, 6, 8, 7, 8, 9, 8, 8, 8, 8], [4, 5], [8, 6, 8, 7, 8, 9, 8, 8, 8, 8]]], [[[1, 2, 3], [7, 8, 9, 6], [4, 5]]], [[[8, 6, 8, 8, 9, 8, 8, 8], [8, 6, 8, 8, 9, 8, 8, 8], [8, 6, 8, 8, 9, 8, 8, 8], [8, 6, 8, 8, 9, 8, 8, 8], [4, 5], [8, 6, 8, 8, 9, 8, 8, 8]]], [[[1, 2], [4, 40000000, 2, 3, 3], [7, 8, 9]]], [[[1, 30000000, 3], [], [], [6, 7, 8], [true, false, true, false, false, true, true], [1, 30000000, 3], []]], [[[6, 7, 8, 9, 8], [5, 4, 5], [6, 7, 8, 9, 8], [5, 4, 5]]], [[[1, 2, 3, 3], [6, 7, 8, 9, 6], [4, 5], [], [6, 7, 8, 9, 6]]], [[[1, 2, 3, 4], [5, 6], [8, 9, 10, 8, 8, 9], [1, 2, 3, 4], [1, 2, 3, 4], [5, 6]]], [[[1, 2, 3], [6, 7, 8, 9, 6], [4, 5], [4, 5]]], [[[1, 2, 3], [4, 40000000, 2, 3, 3], [4, 2, 3], [7, 8, 9], [4, 40000000, 2, 3, 3]]], [[[1, 2, 3], [], [], [false, false, false, false, false, false, true], [6, 7, 8], [], []]], [[[2, 4, 3], [2, 4, 3], [], [4, 5], []]], [[[1, 2, 3], [5, 6], [8, 9, 10, 8, 8], [1, 2, 3]]], [[[7, 8, 80000001], [7, 8, 80000001], [7, 8, 80000001]]], [[[1, 2], [4, 40000000, 2, 3, 3]]], [[[1, 2]]], [[[7, 8, 10], [7, 8, 10], [7, 8, 10]]], [[[], []]], [[[1, 2, 3, 4, 4], [5, 6], [8, 9, 10, 8, 8, 9], [1, 2, 3, 4, 4], [1, 2, 3, 4, 4], [5, 6]]], [[[70000000, 4, 5], [70000000, 4, 5]]], [[[2, 3], [5, 4, 5], [5, 4, 5], [6, 7, 8, 7], []]], [[[1, 2, 3], [4, 2, 3], [4, 40000000, 2, 3, 3], [4, 2, 3], [7, 8, 9], [4, 40000000, 2, 3, 3]]], [[[1, 2, 3, 4, 4], [5, 6], [8, 9, 10, 8, 8, 9], [1, 2, 3, 4, 4], [5, 6]]], [[[0, 2, 3, 4], [5, 6], [9, 10, 9], [7], [0, 2, 3, 4], [9, 10, 9]]], [[[1, 2], [4, 40000000, 2, 3], [4, 2, 3], [4, 40000000, 2, 3], [7, 8, 9], [4, 40000000, 2, 3]]], [[[1, 2, 3, 3], [4, 5], [], [6, false, 7, 8, 9]]], [[[2, 3], [5, 4, 5], [5, 4, 5], [], [79, 10, -79, false], [6, 7, 8, 7], []]], [[[1, 2, 3, 3], [], [false, false, false], [-16, 80000000, 5, 1, 70000000, -1, 3, 50000000], [], [false, false, false], [], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[1, 1, 3], [2, 3], [7, 8, 9], [3, 2, 3], [1, 1, 3]]], [[[2, 3], [5, 4, 5], [5, 4, 5], [6, 7, 8, 5, 7], []]], [[[1, 2, 3, 3], [], [false, false, false], [-16, 80000000, 5, 1, 70000000, -1, 3, 50000000], [], [false, false, false], [true, true], [6, 7, 8, 9], [6, 7, 8, 9], [1, 2, 3, 3]]], [[[1, 2, 3], [], [4, 5], [], [6, 7, 8], [6, 7, 8]]], [[[1, 2, 3], [-67.78782247261685, 83.24602733926832, -64.83209224493669, -32.228902651098196, 69.90886379841328, -35.80770870297867, 93.05813550801312, -42.59408393983315], [4, 5], [], [6, 7, 8], [-67.78782247261685, 83.24602733926832, -64.83209224493669, -32.228902651098196, 69.90886379841328, -35.80770870297867, 93.05813550801312, -42.59408393983315]]], [[[1, 2, 3, 90000000, 4], [5, 6], [7], [8, 9, 10]]], [[[false, 1, 2, 3], [], [4, 5], [], [6, 7, 8], []]], [[[6, 7], [1, 2, 3], [], [], [false, false, false, false, false, false, true], [6, 7], [], [], [1, 2, 3]]], [[[1, 2, 3, 3], [4, 10000000, 5], [6, 7, 8, 9, 6], [1, 2, 3, 3], [4, 10000000, 5]]], [[[1, 2, 3], [4, 40000000, 2, 3, 3], [4, 6, 3], [7, 8, 9], [4, 40000000, 2, 3, 3]]], [[[1, 2, 3], [4, 5], [], [6, 7, 8], [6, 7, 8]]], [[[1, 2, 3], [6, 7, 8, 9], [], [1, 2, 3]]], [[[2, 3], [2, 3], [], [4, 5], [93.05813550801312, -34.32335254187532, 69.90886379841328], [6, 7, 8]]], [[[2, 3, 2], [2, 3, 2], [3, 5, 4, 5], [2, 3, 2], [3, 5, 4, 5], [], [6, 7, 8, 7]]], [[[8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [8, 6, 7, 8, 9, 8, 8, 8, 8], [4, 5], [8, 6, 7, 8, 9, 8, 8, 8, 8]]]], "contract": "\n  assert isinstance(test_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])\n"}
{"task_id": "Mbpp/141", "prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n", "entry_point": "pancake_sort", "canonical_solution": "\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "base_input": [[[15, 79, 25, 38, 69]], [[98, 12, 54, 36, 85]], [[41, 42, 32, 12, 23]]], "atol": 0, "plus_input": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]], [[7, 21, 76, 39, 52, 45, 83, 16, 35, 93]], [[65, 89, 48, 56, 13, 27, 77, 61, 32, 95]], [[23, 56, 34, 67, 89, 12, 45, 78, 90, 32, 54, 76, 98, 21, 43, 65, 87, 9]], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[100, 50, 75, 25, 10, 90, 80, 30, 60, 20, 40, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, 0]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 89]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[7, 21, 8, 76, 39, 52, 83, 99, 35, 93]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12, 21]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 35, 89]], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 0, 0]], [[99, 88, 77, 66, 55, 44, 11, 33, 22, 11, 0, 88, 33]], [[100, 50, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 100]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 70]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12, 11]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65]], [[70, 1, 3, 5, 7, 9, 2, 4, 6, 8, -1, 0]], [[7, 21, 76, 44, 52, 45, 83, 16, 35, 93]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 99, 95, 55, 100, 65]], [[70, 1, 3, 5, 7, 71, 9, 2, 4, 6, 8, -1, 0, 70]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, -1, 99]], [[7, 20, 76, 44, 52, 45, 83, 16, 35, 93]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 89, 12]], [[99, 88, 77, 33, 66, 55, 44, 33, 11, 0]], [[67, 89, 12, 45, 78, 23, 56, 91, 32, 76, 21, 54, 76, 32, 89]], [[70, 1, 3, 5, 7, 71, 9, 2, 4, 6, 8, 42, -1, 0, 70]], [[100, 75, 75, 25, 10, 90, 80, 30, 54, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 70, 45]], [[7, 21, 8, 76, 39, 52, 83, 99, 35, 93, 83, 52]], [[7, 21, 76, 39, 52, 45, 83, 16, 35, 15, 93]], [[100, 88, 77, 60, 33, 66, 55, 44, 33, 61, 0]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 99, 70, 55, 65, 45, 85, 35, 48, 15, 5, 99, 95, 55, 100, 65, 100]], [[7, 21, 83, 76, 44, 52, 45, 83, 35, 93]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 12, 89, 12]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 67, 76, 21, 54, 76, 32, 89, 12, 21]], [[67, 89, 12, 45, 78, 23, 56, 91, 32, 76, 21, 54, 75, 32, 89]], [[99, 88, 77, 66, 55, 11, 33, 22, 11, 0, 88, 33]], [[7, 88, 21, 76, 39, 52, 45, 83, 16, 35, 93]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 70]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 12, 78]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 35, 15, 5, 95, 55, 70, 60]], [[99, 88, 66, 66, 55, 44, 44, 33, 66, 22, 11, 0, 88, 32]], [[65, 89, 48, 56, 14, 27, 77, 32, 95, 14, 14]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 33, 89, 12, 11]], [[100, 50, 75, 25, 10, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[99, 88, 77, 66, 55, 33, 22, 11, 15]], [[100, 88, 77, 60, 33, 45, 55, 44, 33, 61, 0]], [[70, 1, 3, 5, 7, 9, 2, 4, 6, 8, -1]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 20, 65, 45, 85, 35, 48, 15, 5, 95, 55, 65]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 33, 76, 32, 89]], [[100, 50, 75, 25, 10, 90, 80, 30, 60, 27, 20, 40, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[70, 30, 3, 5, 7, 9, 2, 4, 6, 8, -1]], [[14, 99, 88, 77, 66, 55, 44, 33, 22, 11, 0]], [[70, 1, 3, 5, 7, 87, 71, 9, 2, 4, 6, 8, -1, 0, 70, 8]], [[99, 88, 33, 66, 55, 44, 33, 11, 0]], [[7, 21, 76, 44, 52, 45, 83, 16, 35, 93, 93]], [[100, 50, 75, 25, 10, 90, 20, 80, 30, 60, 20, 40, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[99, 88, 77, 66, 55, 33, 22, 11, 56, 99]], [[99, 88, 67, 77, 66, 55, 33, 22, 11, 56, 99]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 95, 40, 95, 99, 70, 55, 65, 45, 85, 35, 48, 15, 6, 99, 95, 55, 100, 65, 100]], [[100, 88, 77, 60, 33, 45, 55, 44, 95, 33, 61, 0]], [[7, 21, 76, 44, 52, 45, 83, 16, 93, 93]], [[7, 21, 76, 44, 52, 45, 83, 16, 93, 93, 93]], [[71, 99, 88, 67, 77, 66, 55, 33, 22, 11, 56, 99]], [[70, 1, 3, 5, 8, 71, 9, 2, 4, 6, 8, 42, -1, 0, 70]], [[100, 88, 77, 60, 33, 45, 56, 44, 95, 33, 61, 0]], [[99, 88, 77, 66, 98, 55, 33, 22, 11, 57, 84, 99]], [[67, 89, 12, 45, 78, 23, 89, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[67, 54, 89, 12, 45, 78, 84, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12]], [[100, 50, 75, 25, 10, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 25]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 35, 5, 95, 55, 70, 60]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 90, 55, 65, 45, 35, 15, 5, 95, 55, 70, 60]], [[70, 1, 3, 5, 7, 87, 71, 9, 2, 4, 6, 8, -1, 0, 70, 8, 4]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 15, 5, 95, 55, 70, 60]], [[99, 88, 77, 66, 55, 44, 33, 16, 11, 45, -1, 99]], [[70, 1, 3, 5, 7, 9, 2, 4, 6, 8, -1, 0, 70]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 95, 40, 95, 99, 70, 55, 65, 45, 85, 35, 30, 48, 15, 6, 99, 95, 55, 100, 65, 100, 95]], [[7, 11, 76, 44, 52, 45, 83, 16, 93, 93]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, -1, 99, 33]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65, 100]], [[67, 89, 12, 45, 78, 34, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[100, 88, 77, 60, 33, 45, 56, 44, 95, 33, 57, 61, 0, 88]], [[100, 50, 75, 25, 10, 90, 98, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[67, 54, 89, 12, 45, 78, 84, 23, 56, 61, 32, 76, 21, 54, 76, 32, 89, 12]], [[71, 99, 88, 67, 77, 66, 55, 22, 11, 56, 99]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 67, 76, 87, 21, 54, 76, 32, 89, 12, 21]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 67, 65, 100]], [[67, 89, 12, 45, 78, 24, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12, 11]], [[100, 74, 75, 25, 10, 90, 80, 30, 28, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65, 40]], [[99, 88, 30, 66, 55, 44, 33, 11, 0]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 76, 21, 54, 76, 32, 67, 89, 76]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 25, 40, 95, 99, 70, 55, 89, 45, 85, 35, 48, 15, 44, 99, 95, 55, 100, 65, 100]], [[70, 1, 3, 5, 8, 71, 9, 2, 4, 7, 6, 8, 42, -1, 0, 70, 42]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 99, 70, 55, 65, 45, 85, 35, 77, 48, 15, 5, 99, 95, 55, 100, 65, 100, 65]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65, 70]], [[14, 99, 88, 77, 66, 55, 55, 44, 33, 22, 11, 0]], [[70, 1, 3, 5, 7, 87, 71, 12, 2, 4, 6, 8, -1, 0, 70, 8, 4]], [[100, 88, 77, 60, 33, 56, 44, 95, 33, 61, 0]], [[79, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 89]], [[7, 21, 76, 39, 52, 45, 83, 16, 35, 93, 16, 16]], [[100, 88, 77, 60, 33, 45, 55, 44, 33, 61, 42, 0, 44]], [[99, 88, 30, 66, 55, 65, 44, 33, 11, 0]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, -1, 99, 11]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n"}
{"task_id": "Mbpp/142", "prompt": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n", "entry_point": "count_samepair", "canonical_solution": "\ndef count_samepair(list1,list2,list3):\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]], [[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]], [[1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]]], "atol": 0, "plus_input": [[[], [], []], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7, 9, 11, 13]], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]], [["a", "b", "c"], ["x", "y", "z"], ["a", "y", "c"]], [["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["apple", "banana", "cherry"]], [[1.5, 2.5, 3.5], [1.5, 2.5, 3.5], [1.5, 2.5, 3.5]], [[true, false, true], [false, true, false], [false, false, true]], [[], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [], []], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 7]], [[true, false, true], [false, true, false], [false, true, false]], [[1, 2, 4, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]], [[1, 2, 4, 4, 5], [5, 1, 4, 3, 2, 1], [1, 2, 3, 1, 5, 6]], [["x", "y", "z"], ["a", "y", "c"], ["a", "y", "c"]], [[5, 4, 3, 2], [5, 4, 3, 2], [5, 4, 3, 2]], [[true, true, false, true], [false, true, false], [false, true, false]], [[3, 9, 4, 3, 2], [3, 9, 4, 3, 2], [3, 9, 4, 3, 2]], [[1, 2, 4, 4, 5], [5, 1, 4, 3, 2, 1], [1, 2, 3, 1, 5, 6, 5]], [[3.5, 2.5, 46.747180223209085, -90.30409553049626, 1.5, 2.5, 3.5, 2.5, 1.5, 88.92985695524146], [], []], [[true, false, true], [false, true, false, false], [false, true, false, false]], [[1, 2, 3, 1, 5, 6, 5, 2, 2], [5, 1, 4, 3, 2, 1], [1, 2, 3, 1, 5, 6, 5, 2, 2]], [[], [0, 2, 2, 3], [1, 2, 3]], [[5, 1, 4, 2, 2, 1, 1], [5, 1, 4, 2, 2, 1, 1], [5, 1, 4, 2, 2, 1, 1]], [[1, 13, 3], [], []], [[1, 2, 1, 5, 6, 6, 2, 2], [1, 2, 1, 5, 6, 6, 2, 2], [5, 1, 4, 3, 2, 1]], [[3, 9, 4, 3, 10, 2], [3, 9, 4, 3, 10, 2], [3, 9, 4, 3, 10, 2]], [[1.5, 1.9954510959930523, 3.5], [1.5, 2.5, 3.5], [2.5, 3.5]], [[1, 3, 5, 7, 9, 11, 13], [2, 3, 4, 5, 6, 8, 6], [1, 3, 5, 7, 9, 11, 13]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951], [], []], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 47.11473580773872, -78.9255438650951], [false, [null, -82, true], 10.63194549113473, false, [10.227858467690481, -80, 91, 79.0496427022359, "b", 2.5], false, 51.66378356757116, 76.26353952856329], []], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.5423141340579, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951], ["c", -25, ["c", "Qtee", "apple", "dCFuiLg"], [92, 14, -20, -65, -82, -23, 10], {"SXpaqpmSA": -75, "mxHFSWBXK": 1, "aeBJw": -82, "banana": 55, "cherry": -80, "tKeVdUEN": false, "c": false, "UziQri": false, "": 41}, true], []], [[1, 2, 3, 4, 4, 5], [1, 2, 3, 4, 6, 2], [1, 2, 3, 4, 6, 2]], [[1.5, 1.9954510959930523, 3.5], [1.5, 2.5, 3.5, 2.5], [2.5, 3.5]], [[3.5], [1.5, 1.9954510959930523, 3.5], [3.5]], [[1, 4, 4, 5], [1, 4, 4, 5], [1, 4, 4, 5]], [[1, 3, 5, 7, 9, 11, 13], [1, 3, 5, 7, 9, 11, 13], [2, 3, 4, 5, 6, 8, 6]], [[1, 2, 4, 4, 5, 4], [1, 2, 4, 4, 5, 4], [5, 1, 4, 3, 2, 1]], [[5, 1, 4, 3, 2], [5, 1, 4, 3, 2], [5, 1, 4, 3, 2]], [[1, 2, 3], [false, false, false, false, false, true, true], [1, 2, 3]], [[1.5, 1.5211736525382962, 3.5, 3.5, 1.5], [1.5, 1.5211736525382962, 3.5, 3.5, 1.5], [1.5, 2.5, 3.5]], [[1, 2, 4, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 4, 4, 5]], [[], ["banana", "x", "yRKDhGyhw", "", "Vt", "kejsg"], []], [[false, [null, -82, true], 10.63194549113473, false, [10.227858467690481, -80, 91, 79.0496427022359, "b", 2.5], false, 51.66378356757116, 76.26353952856329], [-25, 2, -60, -4, false, -99, 41, 4, -66], [11, "TJhJsrtQz", "iBhMiUf", false, 94, false]], [[1.5, 1.9954510959930523, 3.5, 3.5], [1.5, 88.92985695524146, 3.5], [1.5, 88.92985695524146, 3.5]], [[3, 5, 7, 9, 11, 13, 3], [3, 5, 7, 9, 11, 13, 3], [2, 3, 4, 5, 6, 8, 6]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951], [1.9954510959930523, 8.720727078047432, -0.5578301838399966, -48.01840699120381, 51.66378356757116], [25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951]], [[1.5211736525382962, 3.5, 3.5, 1.5], [1.5211736525382962, 3.5, 3.5, 1.5], [1.5, 2.5, 3.5]], [[2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7, 9, 11, 13], [1, 3, 5, 7, 9, 11, 13]], [[55, 2, 3, 1, 5, 6, 5, 2, 2], [55, 2, 3, 1, 5, 6, 5, 2, 2], [55, 2, 3, 1, 5, 6, 5, 2, 2]], [[true, false, true], [false, false, true, false], [false, false, true, false]], [[5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 3], [1, 2, 3, 4, 5, 6, 3]], [[1.5, 1.5211736525382962, 2.5, 3.5], [1.5, 1.5211736525382962, 2.5, 3.5], [2.5, 3.5]], [["x", "y", "z"], ["a", "y", "a"], ["a", "y", "a"]], [[1, 14, 3, 4, 5, 6, 3], [1, 14, 3, 4, 5, 6, 3], [1, 14, 3, 4, 5, 6, 3]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951, 60.50308501008169], [25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951, 60.50308501008169], []], [[1.5, 1.9954510959930523, 13.324652414249229, 3.5], [1.5, 88.92985695524146, 3.5], [1.5, 88.92985695524146, 3.5]], [["apple", "banana", "cherry"], ["ale", "banana"], ["ale", "banana"]], [[1.5, 1.9954510959930523, 3.5], [1.5, 2.5, 3.5, 2.5, 2.5], [1.5, 2.5, 3.5, 2.5, 2.5]], [[1.140758838768645, 1.5211736525382962, 3.5, 1.5], [1.140758838768645, 1.5211736525382962, 3.5, 1.5], [1.140758838768645, 1.5211736525382962, 3.5, 1.5]], [[1.5, 1.9954510959930523, 13.324652414249229, 3.5], [88.92985695524146, 3.5], [88.92985695524146, 3.5]], [[1.5, 88.92985695524146, 88.92985695524146, 3.5], [1.5, 88.92985695524146, 88.92985695524146, 3.5], [1.5, 88.92985695524146, 88.92985695524146, 3.5]], [["Vt", "dCFuiLg", "INvNd", "z", "iBhMiUf", "dCFuiLg", "xJSJdyoTrG", "TAvDgL"], [false, [null, -82, true], 10.63194549113473, false, [10.227858467690481, -80, 91, 79.0496427022359, "b", 2.5], false, 51.66378356757116, 76.26353952856329], ["Vt", "dCFuiLg", "INvNd", "z", "iBhMiUf", "dCFuiLg", "xJSJdyoTrG", "TAvDgL"]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951], [1.9954510959930523, 8.720727078047432, -0.5578301838399966, 46.5423141340579, -48.01840699120381, 51.66378356757116], [25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951]], [["banana", "kejsg", "banana", "MencsXWpFS", "yRKDhGyhw", "c", "wGAHQEc"], [1, 2, 3, 2], [1, 2, 3]], [[1, 2, 1, 5, 6, 6, 2, 2], [1, 2, 1, 5, 6, 6, 2, 2], [5, 1, 4, 3, -75, 2, 1]], [[1, 2, 4, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 6]], [[1, 3, 7, 9, 11, 13], [2, 3, 4, 5, 6, 8, 6], [1, 3, 7, 9, 11, 13]], [[1, 3, 5, 7, 9, 11, 13, 7], [2, 3, 4, 5, 6, 8, 6], [1, 3, 5, 7, 9, 11, 13, 7]], [[1.5, 1.9954510959930523, 3.918769930762264, 1.5], [3.5], [1.5, 1.9954510959930523, 3.918769930762264, 1.5]], [[false, [null, -82, true], 10.63194549113473, false, [10.227858467690481, -80, 91, 79.0496427022359, "b", 2.5], false, 51.66378356757116, 76.26353952856329, false], [false, [null, -82, true], 10.63194549113473, false, [10.227858467690481, -80, 91, 79.0496427022359, "b", 2.5], false, 51.66378356757116, 76.26353952856329, false], [-25, 2, -60, -4, false, -99, 41, 4, -66]], [[1, 3, 5, 7, 9, 11, 13], [1, 3, 5, 7, 9, 11, 13], [1, 3, 5, 7, 9, 11, 13]], [[1, 2, 4, 4, 5, 5], [3, 3, -25, 1], [1, 2, 3, 4, 5, 6]], [[47.11473580773872, 1.140758838768645, 8.720727078047432, 47.11473580773872, -0.5578301838399966, 2.5, 76.9475439156866], [1, 2, 3], [1, 2, 3, 1]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.5423141340579, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951], ["c", -25, ["c", "Qtee", "apple", "dCFuiLg"], [92, 14, -20, -65, -82, -23, 10], {"SXpaqpmSA": -75, "mxHFSWBXK": 1, "aeBJw": -82, "banana": 55, "cherry": -80, "tKeVdUEN": false, "c": false, "UziQri": false, "": 41}, true], [-61, 9, -80, "MencsXWpFS"]], [["x", "y", "z", "y"], ["a", "b", "c"], ["x", "y", "z", "y"]], [["", "bINvNd", "b", "c"], ["", "bINvNd", "b", "c"], ["yRKDhGyhw", "y", "z"]], [["c", -25, ["c", "Qtee", "apple", "dCFuiLg"], [92, 14, -20, -65, -82, -23, 10], {"SXpaqpmSA": -75, "mxHFSWBXK": 1, "aeBJw": -82, "banana": 55, "cherry": -80, "tKeVdUEN": false, "c": false, "UziQri": false, "": 41}, "dCFuiLg", true], ["c", -25, ["c", "Qtee", "apple", "dCFuiLg"], [92, 14, -20, -65, -82, -23, 10], {"SXpaqpmSA": -75, "mxHFSWBXK": 1, "aeBJw": -82, "banana": 55, "cherry": -80, "tKeVdUEN": false, "c": false, "UziQri": false, "": 41}, "dCFuiLg", true], [-61, 9, -80, "MencsXWpFS"]], [["a", "b"], ["x", "y", "z"], ["a", "y", "yRKDhGyhw", "y"]], [[55, 2, 3, 1, 5, 6, 5, 2, 2, 55], [55, 2, 3, 1, 5, 6, 5, 2, 2, 55], [55, 2, 3, 1, 5, 6, 5, 2, 2, 55]], [[3.5, 2.5, 46.747180223209085, -90.30409553049626, 1.5, 2.5, 3.5, 2.5, 1.5, 88.92985695524146], [], [55, -63]], [["banana", "kejsg", "banana", "MencsXWpFS", "yRKDhGyhw", "c", "wGAHQEc"], [1, 2, 3, 2], [1, 2, 3, 1]], [[1, 2, 3, 4, 5, 6, 7, 5], [2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7, 9, 11, 13]], [[1.5, 1.2295760656866848, -78.9255438650951, 1.5], [1.5, 1.2295760656866848, -78.9255438650951, 1.5], [1.5, 1.2295760656866848, -78.9255438650951, 1.5]], [[1, 3, 5, 7, 9, 11, 13], [2, 3, 4, -75, 6, 8, 6, 2], [1, 3, 5, 7, 9, 11, 13]], [["bb", "a", "b", "c", "b", "bb"], ["x", "y", "z", "y"], ["bb", "a", "b", "c", "b", "bb"]], [[3.5], [1.5, 1.9954510959930523, 3.918769930762264, 1.5], [1.5, 1.9954510959930523, 3.918769930762264, 1.5]], [["x", "y", "z", "y"], ["bb", "a", "b", "c", "b", "bb", "c", "b"], ["bb", "a", "b", "c", "b", "bb", "c", "b"]], [["bb", "a", "", "c", "b", "bb"], ["x", "y", "z", "y"], ["bb", "a", "", "c", "b", "bb"]], [[-23, 1, 3, 5, 7, 9, 11, 13, 7], [2, 3, 4, 5, 6, 8, 6], [-23, 1, 3, 5, 7, 9, 11, 13, 7]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.5423141340579, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085], ["c", -25, ["c", "Qtee", "apple", "dCFuiLg"], [92, 14, -20, -65, -82, -23, 10], {"SXpaqpmSA": -75, "mxHFSWBXK": 1, "aeBJw": -82, "banana": 55, "cherry": -80, "tKeVdUEN": false, "c": false, "UziQri": false, "": 41}, true], [-61, "MencsbananaXWpFS", 9, -80, "MencsXWpFS"]], [[1, 2, 4, 4, 5, 4, 3, 2], [1, 2, 4, 4, 5, 4, 3, 2], [5, 1, 4, 3, 2, 1]], [[2, 3, 4, 5, 6], [1, 3, 5, 7, 9, 11, 13, 9], [1, 3, 5, 7, 9, 11, 13, 9]], [[3, 9, 4, 3, -60], [3, 9, 4, 3, -60], [3, 9, 4, 3, -60]], [[1, 2, 4, 4, 2, 5], [5, 1, 3, 2, 1], [1, 2, 4, 4, 2, 5]], [[55, 2, 3, 5, 6, 5, 2, 2], [55, 2, 3, 5, 6, 5, 2, 2], [55, 2, 3, 5, 6, 5, 2, 2]], [[true, false, false], [true, false, false], [true, false, false]], [[13.568069498372651, 1.5, 1.9954510959930523, 3.5], [88.92985695524146, 3.5], [88.92985695524146, 3.5]], [[1, 3, 5, 2, 7, 9, 11, 13, 11], [1, 3, 5, 2, 7, 9, 11, 13, 11], [1, 3, 5, 2, 7, 9, 11, 13, 11]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951, 60.50308501008169, 46.747180223209085], [25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951, 60.50308501008169, 46.747180223209085], [25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951, 60.50308501008169, 46.747180223209085]], [[3, 9, 4, 3, -60, 4], [3, 9, 4, 3, -60, 4], [3, 9, 4, 3, -60, 4]], [["abINvNd", "y", "yRKDhGyhw", "y"], ["x", "y", "z"], ["abINvNd", "y", "yRKDhGyhw", "y"]], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.747180223209085, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951, 60.50308501008169], [], []], [[25.292264331717163, 8.720727078047432, 13.324652414249229, 46.5423141340579, 10.63194549113473, 60.50308501008169, 76.26353952856329, 46.747180223209085, -78.9255438650951], ["c", -25, ["c", "Qtee", "cherry", "apple", "dCFuiLg"], [92, 14, -20, -65, -82, -23, 10], {"SXpaqpmSA": -75, "mxHFSWBXK": 1, "aeBJw": -82, "banana": 55, "cherry": -80, "tKeVdUEN": false, "c": false, "UziQri": false, "": 41}, true], []], [[1, 5, 5], [1, 5, 5], [1, 5, 5]], [[2, 3, 4, 5, 5, 6, 7, 8], [1, 3, 5, 7, 9, 11, 13], [1, 3, 5, 7, 9, 11, 13]], [[2, 3, 4, 5, false, 6, 8, 6], [3, 5, 7, 9, 6, 11, 13, 3], [2, 3, 4, 5, false, 6, 8, 6]], [[-0.5578301838399966, 3.5], [1.5, 1.5211736525382962, 2.5, 3.5, 1.5], [-0.5578301838399966, 3.5]], [[5, 4, 3, 1], [1, 2, 4, 4, 5, 5, 2], [5, 4, 3, 1]], [[76.9475439156866, 1.5, 2.5, 3.5], [76.9475439156866, 1.5, 2.5, 3.5], [2.5, 3.5]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n"}
{"task_id": "Mbpp/143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n", "entry_point": "find_lists", "canonical_solution": "\ndef find_lists(inputs):\n\treturn sum(isinstance(x, list) for x in inputs)\n", "base_input": [[[[1, 2, 3, 4], [5, 6, 7, 8]]], [[[1, 2], [3, 4], [5, 6]]], [[[9, 8, 7, 6, 5, 4, 3, 2, 1]]]], "atol": 0, "plus_input": [[[]], [[[], [], []]], [[[[], [[]]], [[], [[], []]]]], [[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]], [[[[[[[]]]]], [[]]]], [[[1, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]]]], [[[[1, 2], [3], [4, [5], [6]]], [[7, [8]], []]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10]]]], [[[[], [], []], [[], [], []], [[], [], []]]], [[[[[[[[[]]]]]]], [[[[[[]]]]]]]], [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]]]], [[[[[[[[[]]]]]]]]], [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10]]]], [[[[7, 8, [8, [9, [10]]]], 6, [7, 8, [8, [9, [10]]]]], [[7, 8, [8, [9, [10]]]], 6, [7, 8, [8, [9, [10]]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10]], [[1, 2], [4, [5], [6], [7, [8]]]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[[[[[[[]]]]]]], [[[[[[]]]]]], [[[[[[[]]]]]]]]], [[[[], [], []], [[], [], []], [[], [], [], []], [[], [], []]]], [[[[[[[[[]]]]]]], [], [[[[[[[]]]]]]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]]]], [[[9, [10, 10], [10, 10], 9], [9, [10, 10], [10, 10], 9]]], [[[[[[[[[]]]]]]], [], [[[[[[[]]]]]]], [[[[[[[]]]]]]]]], [[[[[[[[[]]]]]], [[[[[[]]]]]]], [[[[[[[]]]]]], [[[[[[]]]]]]], [], [[[[[[[]]]]]], [[[[[[]]]]]]]]], [[[11]]], [[[11, [7, 12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [11, [7, 12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]], [["hoOVcr", "CBVLPGoFDN", "SwM", "RZ", "ykPU", "y", "CSz"]], [[[[3, 7, 8, [8, [9, [10]]]], [3, 7, 8, [8, [9, [10]]]], 6, [3, 7, 8, [8, [9, [10]]]]], [[3, 7, 8, [8, [9, [10]]]], [3, 7, 8, [8, [9, [10]]]], 6, [3, 7, 8, [8, [9, [10]]]]]]], [[-0.45650711926059273, false, 42, -93.72390149335781, ["CBVLPGoFDN", "", 87, false, true], -42.68179014719327, true]], [[[], [[[[[[[]]]]]]], [[[[[[[]]]]]]]]], [[[9, [10]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[], [[[[[[[]]]]]], [[[[[[]]]]]]], [[[[[[[]]]]]], [[[[[[]]]]]]]]], [[[[1, 2, [3, [4, [5]]]], [6, 5, [7, [8, [9, [10]]]]], [6, 5, [7, [8, [9, [10]]]]]]]], [[[9, [10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [13, 10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [13, 10]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]], [1, 2, [3, [4, [5]]]]]]], [[[[9, 10], [11, 12]]]], [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[9, 10], [11, 12]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]], [1, 2, [3, [4, [5]]]]], [[11, 12, 13], [14, [15, [16]]]], [[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]]]], [[[], [[[[[[[]]]]]]], [[[[[[[]]]]]]], [[[[[[[]]]]]]]]], [[[[[[[[[]]]]]], [[[[[[]]]]]]], [], [[[[[[[]]]]]], [[[[[[]]]]]]], [[[[[[[]]]]]], [[[[[[]]]]]]]]], [[[], [[[[[[[]]]]]]]]], [[[[1, 2, [[4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[12, 13], [12, 13], [14, [15, [16]]]], [[1, 2, [[4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[[1, 2], [3, 4], [5, 6], [7, 8]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]]]], [[[[], []], [[], []], [[[[[[]]]]]], [[], []]]], [[[[1, 2], [3], [4, [5], [6], [6]]], [[1, 2], [3], [4, [5], [6], [6]]], [[7, [8]], []]]], [[[[7, 2], [3], [4, [5], [6]]]]], [[[[3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]], [3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]], [3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]], 6, [3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]]], [[3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]], [3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]], [3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]], 6, [3, 7, false, 8, [8, [9, [10]]], [8, [9, [10]]]]]]], [[[1, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [11, 11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]], [[-42.68179014719327, 42, -93.72390149335781, ["CBVLPGoFDN", "", 87, false, true], -42.68179014719327, true]], [[[], [[]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]], [6, [7, [8, [9, [10]]]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]], [6, [7, [8, [9, [10]]]]]]]], [[[[1, 2], [3], [4, [5], [6], [6]]], [[1, 2], [3], [4, [5], [6], [6]]], [[7, [8]], []], [[1, 2], [3], [4, [5], [6], [6]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]], [3]], [9, [10]], [[1, 2], [4, [5], [6], [7, [8]]]]]], [[[[1, 2, [3, [4, [5]]]], [6, 19, [7, [8, [9, [10]]]]]], [[1, 2, [3, [4, [5]]]], [6, 19, [7, [8, [9, [10]]]]]]]], [[[[1, 1, [3, [4, [5]]]], [1, 1, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[[], [], []], [[], [], []], [[[[[[]]]]]], [[], [], []], [[], [], []]]], [[[[1, 2], [3]], [[1, 2], [3], [4, [5], [6], [6]]], [[7, [8]], []]]], [[-93.72390149335781, 42, -93.72390149335781, ["CBVLPGoFDN", "", 87, false, true], -42.68179014719327, true, -42.68179014719327]], [[[[3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[9, 10], [11, 12]]]], [[[[1, 2, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]], [[1, 2, 2], [3], [4, [5], [6], [7, [8]]]], [[1, 2, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2], [1, 2], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]]]], [[[[1, 2, 1], [3], [4, [5], [6], [7, [8]]], [1, 2, 1]], [[1, 2, 1], [3], [4, [5], [6], [7, [8]]]], [[1, 2, 1], [3], [4, [5], [6], [7, [8]]]], [9, [10]]]], [[-8.375590476451933, -7.930745510619657, -93.72390149335781, 94.9058369768074]], [[[[1, 2], [5], [4, [5], [6], [6]]], [[1, 2], [5], [4, [5], [6], [6]]], [[7, [8]], []], [[7, [8]], []], [[1, 2], [5], [4, [5], [6], [6]]]]], [[[[[]], [[]]], [[[]], [[]]], [], [[[]], [[]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [1, [10], [10]], [1, [10], [10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]], [1, [10], [10]]]], [[[[], [], []]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2]], [[1, 2], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]]]], [["hoOrVcr", "CBVLPGoFDN", "SwM", "RZ", "ykPU", "y", "CSz"]], [["hoOVcr", "CBVLPGoFDN", "SwM", "RZ", "ykPU", "y", "CSz", "SwM"]], [[null, null, false, {"18": 44, "9": 7.447226751914826, "-82": "CBVLPGoFDN", "15": "F", "84": "blH", "-35": [], "-76": false, "7": false}, "sCHYGLVTgh", -93.72390149335781, "", 7, -93.72390149335781]], [[[[3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]], [[13, 14], [15, 14, 16], [15, 14, 16], [17, 18]], [[9, 10], [11, 12]]]], [[[[false, [5], [6], [7, [8]]], [1, 2, 2], [3], [false, [5], [6], [7, [8]]]], [9, [10], [10]], [[1, 2, 2], [3], [false, [5], [6], [7, [8]]]], [[1, 2, 2], [3], [false, [5], [6], [7, [8]]]], [9, [10], [10]], [9, [10], [10]]]], [[[[]], [[]], [[]], [[[[[[]]]]]], [[]]]], [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]], [[[[1, 2, 1], [3], [4, [5], [6], [7, [8]]], [3]], [9, [10]], [9, [10]], [[1, 2, 1], [1, 2, 1], [4, [5], [6], [7, [8]]]], [[1, 2, 1], [4, [5], [6], [7, [8]]]]]], [[[[1, 2], [5], [4, [5], [6], [6]]], [[1, 2], [5]], [[1, 2], [5], [4, [5], [6], [6]]], [[7, [8]], []], [[7, [8]], []], [[1, 2], [5], [4, [5], [6], [6]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [[10]], [[1, 2], [3], [4, [5], [6], [7, [8]]]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]], [14, [15, [16]]], [14, [15, [16]]]], [[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]]]], [[null, null, false, {"18": 44, "9": 7.447226751914826, "-82": "CBVLPGoFDN", "15": "F", "84": "blH", "-35": [], "-76": false, "7": false}, "sCHYGLVTgh", "", -93.72390149335781]], [[[[3, 7, [8, [9, [10]]]], [3, 7, [8, [9, [10]]]], [3, 7, [8, [9, [10]]]], 6, [3, 7, [8, [9, [10]]]]], [[3, 7, [8, [9, [10]]]], [3, 7, [8, [9, [10]]]], [3, 7, [8, [9, [10]]]], 6, [3, 7, [8, [9, [10]]]]]]], [[[[], [], []], [[], [], []], [[[[[[]]]]]], [[], [], []], [[], [], []], [[], [], []]]], [[[[3, 1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]], [[3, 1, 2], [3, 1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]], [[3, 1, 2], [3], [4, [5], [6], [7, [8]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [[10, 10], 9, [10, 10]], [[1, 2], [4, [5], [6], [7, [8]]]]]], [[[[7, 8, [8, [9, [10]]]], 6, [7, 8, [8, [9, [10]]]]], [[7, 8, [8, [9, [10]]]], 6, [7, 8, [8, [9, [10]]]]], [[7, 8, [8, [9, [10]]]], 6, [7, 8, [8, [9, [10]]]]]]], [[[[3], [4, [5], [6], [7, [8]]]], [9, [10], [10]], [[3, 1, 2], [3, 1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]], [[3, 1, 2], [3], [4, [5], [6], [7, [8]]]], [9, [10], [10]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[6, [7, [8, [9, [10]]]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[[[[[[[]]]]]]], [[[[[[[]]]]]]]]], [[[[], [], [], []], [[], [], []], [[], [], []], [[], [], []]]], [[[[1, 2], [3], [4, [5], [6], [6]]], [[7, [8]], []]]], [[[[7, 2], [3], [4, [5], [6]], [4, [5], [6]]], [[7, 2], [3], [4, [5], [6]]], [[7, 2], [3], [4, [5], [6]], [4, [5], [6]]]]], [[[[1, 2, [3, [4, [5]]]], [6, 19, [7, [8, [9, [10]]]]]]]], [[[[[], []], [[], []]], [[[], []], [[], []]], [], [[[], []], [[], []]], [[[], []], [[], []]]]], [[[[[], [true, false]], [[], [true, false]], [[], [true, false]]], [[[], [true, false]], [[], [true, false]], [[], [true, false]]], [[[], [true, false]], [[], [true, false]], [[], [true, false]]], [], [[[], [true, false]], [[], [true, false]], [[], [true, false]]], [[[], [true, false]], [[], [true, false]], [[], [true, false]]]]], [[[[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]], [[1, 2], [1, 2], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]], [14, [15, [16]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [[1, 2], [4, [5], [6], [7, [8]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]]]], [[[[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]], [[11, 12, 13], [14, [15, [16]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]], [1, 2, [3, [4, [5]]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]], [1, 2, [3, [4, [5]]]]], [[1, 2, [3, [4, [5]]]], [6, [7, [8, [9, [10]]]]]]]], [[[[1, 2], [3], [4, [5], [6], [7, [8]]]], [14], [14], [[1, 2], [3], [4, [5], [6], [7, [8]]]], [14]]], [[[[1, 2], [3], [4, [5], [6]]], [[1, 2], [3], [4, [5], [6]]]]], [[[[1, 2], [3]], [[1, 2], [3], [4, [5], [6], [6]]], [[7, [8]], []], [[1, 2], [3], [4, [5], [6], [6]]]]], [[[[], []], [[], []], [[[[[[]]]]]], [[], []], [[], []]]], [[[[1, 2], [4, [5], [6], [7, [8]], [7, [8]]], [4, [5], [6], [7, [8]], [7, [8]]]], [[1, 2], [4, [5], [6], [7, [8]], [7, [8]]], [1, 2]]]]], "contract": "\n\tassert isinstance(inputs, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1], )) == 1\n"}
{"task_id": "Mbpp/145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n", "entry_point": "max_Abs_Diff", "canonical_solution": "\ndef max_Abs_Diff(arr): \n    return max(arr) - min(arr)\n", "base_input": [[[2, 1, 5, 3]], [[9, 3, 2, 5, 1]], [[3, 2, 1]]], "atol": 0, "plus_input": [[[9, -3, 2, 0, -5, 1, 11, -7]], [[1]], [[3, 3, 3, 3]], [[-5, -3, -2, -1]], [[1, 2, 3, 4, 5]], [[-1, 0, 1, 2, -2]], [[-5, -3, 0, -2, -1]], [[-1, 4, 0, 1, 2, -2]], [[2]], [[-5, -3, 0, -3, -1]], [[-7, 2]], [[2, 2]], [[0, 3, 0, 1, 2, -2]], [[-6, -3, 0, -3, -1]], [[1, 1]], [[0, 9, 3, 0, -2]], [[-7, -7, 2]], [[5, -3, 0, -2, -1]], [[-1, -2, 0, 1, 2, -2, 2]], [[1, 2, 3, -3, 5]], [[9, -3, 2, -5, 1, 11, -7]], [[-6, -3, 0, -2, -1]], [[-5, -3, 0, -2, -3, -2]], [[-5, -3, 0, -3, -2, 11, -3, -7]], [[-5, -6, -2, 0, -3, -1]], [[-1, 2, 0, 1, 2, -2, 2]], [[-1, 1, 4, 0, 1, 2, -2]], [[-7, 2, -7]], [[0, 9, 3, 0, 10, -2]], [[2, 3, 3]], [[-5, -3, -2]], [[-5, -3, 0, 0]], [[-5, -3, -2, -1, -1]], [[3, 3, 3]], [[0, 9, 3, 9, 0, 10, -2]], [[-5, 0, 0]], [[0, 3, 0, 1, 2, -2, 0]], [[-7, -7, 3, 2]], [[-23.760842462159786, -91.16655074878469, -69.98937256313435, -23.593017846262015, 49.56089624759201]], [[-5, -3, 0, -2, -3, -3, -2, -5]], [[-5, -3, 0, -2, -3]], [[0, 9, 3, 0, -2, 9, 3]], [[0, 9, 0, -2, 0, 0]], [[3, 4, 3, 3]], [[-8, -2, 3, 2]], [[9, -3, 2, -5, 1, 11, -7, 1]], [[-1, 0, 9, 3, 0, -2, 0]], [[-5, -3, 0, -6, -3, -1]], [[0, 9, 3, 0, -2, 9, 3, 3]], [[-5, -3, -6, -2, 0, -2, -3]], [[2, -8, 1, 1]], [[-6, -3, 0, -3, -1, -3]], [[-6, -3, 0, -3, -1, -2, -3]], [[-5, -3, 0, -2, -3, -3, -2, -5, -5]], [[-6, -3, 0, -3, -1, -2, -3, -6]], [[-1, 4, 0, 1, -2]], [[0, 9, 0, -2, 0, 2]], [[-5, 0, -3, -1]], [[-1, -2, 0, 1, -2, 2]], [[-6, -3, 0, -2, -1, -3]], [[-5, -3, 0, -3, -1, -3]], [[-5, -2, -3, -2]], [[-7, 3, 3, 2]], [[-7, 0, 11, -7, 2]], [[0, 0, 3, 0, -2]], [[9, -6, -3, 5, -3, -1, -2, -3, -6]], [[0, 9, 3, 0, -2, 0]], [[-6, 0, -3, 0, -3, -1, -3]], [[3, 4, 3, 3, 4]], [[-2]], [[1, 2, 3, -3]], [[8, -4, 2, -5, 4, 1, 11, 8, -7, 1]], [[1, 2, 4, 3, -3, 1]], [[3, 3]], [[-1, -4, 4, 0, 1, -2]], [[-5, 0, -1]], [[-7, -7, 2, -7]], [[0, 3, 0, 1, 2, 0, -2, 3]], [[-5, -2, -3, -2, -2]], [[3]], [[1, 2, 2, 4, 5]], [[-4, 8, -4, 2, -5, 4, 1, 11, 8, -7, 8]], [[11, -7, 2]], [[-23.760842462159786, -91.16655074878469, -69.98937256313435, -23.593017846262015]], [[-2, 3, 2]], [[2, 0, 1, 2, -2, 2]], [[0, 3, 1, 2, 0, -2, 3, 3]], [[0, 9, 3, 9, 0, 10, 1, -2]], [[2, 0, 1, 2, 2]], [[-5, -2, -1, -1]], [[-1, -4, 5, 0, 1, -2, 1]], [[-5, -2, -1, 0]], [[-2, 3]], [[-5, 4, 0, -6, -3, -1, -1]], [[-5, -3, 0, -2, -3, -3, -2, -5, -5, -5]], [[2, 3, -6, 3, 3]], [[-6, -3, 0, -3, -1, -7, -2, -3, -6, -3, -1]], [[0, 9, -6, 3, 0, -2, 9, 3, 3]], [[1, 2, 4, 4, -3, 1]], [[2, -4, 4, 5, 4]], [[true, true, false]], [[78, 8, 0, 9, -42, 4, -29, 9, -3, -5]], [[-5, -3, -6, -2, 0, -2, -2]], [[-5, -3, -3, -2]], [[-42, 0, 9, 3, 0, 10, -2, 9, 3]], [[2, 0, 1, 2, -2, 2, 2, 2]]], "contract": "\n    assert isinstance(arr, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2\n"}
{"task_id": "Mbpp/160", "prompt": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n", "entry_point": "find_solution", "canonical_solution": "\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n", "base_input": [[2, 3, 7], [4, 2, 7], [1, 13, 17]], "atol": 0, "plus_input": [[100, 50, 4000], [25, 10, 500], [7, 11, 123], [25, 123, 500], [100, 4000, 4000], [4000, 4000, 4000], [4000, 50, 4000], [25, 123, 7], [500, 50, 4000], [50, 500, 50], [6, 122, 7], [7, 123, 7], [100, 4000, 50], [500, 50, 500], [4000, 50, 50], [6, 122, 122], [7, 123, 123], [50, 123, 7], [122, 7, 122], [122, 7, 11], [123, 25, 50], [4001, 50, 50], [4000, 50, 501], [122, 101, 100], [25, 10, 10], [25, 10, 501], [500, 6, 123], [7, 123, 500], [501, 123, 7], [50, 124, 7], [100, 122, 100], [123, 26, 25], [50, 50, 50], [4001, 26, 25], [499, 50, 4000], [4000, 50, 499], [103, 102, 102], [123, 7, 123], [50, 3999, 4000], [500, 50, 6], [4000, 499, 4000], [101, 103, 4001], [25, 500, 123], [25, 26, 123], [499, 4000, 499], [4000, 11, 4000], [25, 50, 4000], [49, 7, 7], [7, 7, 123], [499, 4000, 4000], [6, 500, 50], [500, 50, 501], [500, 51, 500], [4001, 4001, 499], [4001, 4001, 4001], [499, 4000, 6], [500, 51, 6], [100, 500, 500], [4000, 7, 124], [25, 500, 25], [4000, 49, 50], [499, 499, 4000], [50, 123, 123], [6, 4000, 50], [100, 103, 4001], [50, 121, 122], [501, 8, 7], [25, 499, 25], [10, 10, 500], [4000, 4001, 4000], [4000, 3999, 499], [101, 101, 4001], [500, 50, 7], [3999, 123, 7], [25, 25, 10], [11, 123, 11], [101, 101, 6], [50, 4000, 4000], [100, 51, 4000], [10, 500, 10], [101, 25, 50], [501, 7, 7], [50, 4000, 3999], [10, 500, 25], [25, 499, 123], [501, 49, 6], [102, 102, 102], [121, 4000, 51], [502, 123, 7], [50, 3998, 501], [25, 121, 121], [25, 9, 9], [501, 7, 502], [11, 25, 11], [3999, 101, 500], [7, 12, 500], [7, 122, 7], [499, 6, 499], [25, 11, 25], [499, 11, 4000], [121, 4000, 121], [50, 102, 50], [7, 8, 123]], "contract": "\n\tassert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)\n"}
{"task_id": "Mbpp/161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n", "entry_point": "remove_elements", "canonical_solution": "\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]]], "atol": 0, "plus_input": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 4, 6, 8]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 7]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 7]], [[], []], [[], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9, 11]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], [[1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10], [2, 5, 8]], [[1, "apple", [1, 2], [3, 4], {"name": "John"}, 5.5], [2, "apple", [3, 4], {"name": "John"}, 5.5]], [[], [1, 2, 3, 4, 5]], [[], [1, "a", [2, 3], {"name": "John"}]], [[2, 4, 6, 8, "abc"], ["abc", 4.5, "xyz"]], [["apple", "banana", ["orange", "grape"], 10], [["orange", "grape"], "pineapple", 10, 20]], [[[1, 2], [3, 4], [5, 6]], [[3, 4], [7, 8], [9, 10]]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 7, 5]], [[94.69906992408676], [1, 2, 3, 4, 5]], [[1, 3, 5, 7], [1, 3, 5, 7]], [[], [1, 2, 3, 4, 5, 2]], [[], [0, 3]], [[1, 3, 5, 7, 1], [1, 3, 5, 7, 1]], [["iip", "grape", "grape"], [1, 2, 3, 4, 5, 2]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [8, 5, 7]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [7, 5]], [[1, 3, 5, 7, 10, 11], [1, 3, 5, 7, 10, 11]], [[[4, 10, 4], [3, 4], [7, 8], [4, 10, 4]], [[4, 10, 4], [3, 4], [7, 8], [4, 10, 4]]], [[2, 4, 6, 8, 8], [2, 4, 6, 8, 8]], [[1, "apple", [1, 2], [3, 4], {"name": "John"}, 5.5], [2, "apple", [3, 4], {"name": "John"}, 5.5, 5.5]], [[1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10], [2, 5, 8, 8]], [[1, 0, 3, 5, 7], [1, 0, 3, 5, 7]], [[[1, 2], [3, 4], [5, 6]], [[3, 4, 4], [3, 4, 4], [7, 8], [9, 10]]], [[2, 4, 6, 8, "abc"], ["grapeabc", "abc", 4.5, "xyz"]], [["John"], [1, 2, 3, 4, 5, 2]], [[1, 3, 5, 7, 1, 7], [1, 3, 5, 7, 1, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[94.69906992408676, 5, 5, false, [4.5, [31, -44, 5, 56, 0, 12, 75], true, null], true, 12, 7], []], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 7, 9, 11, 11]], [[1, "apple", [1, 2], [3, 4], {"name": "John"}, 5.5], ["apple", 94.69906992408676, 4.5, [3, 4], {"name": "John"}, 5.5, 5.5, {"name": "John"}]], [[1, 3, 7], [1, 3, 7]], [[1, 3, 3, 3], [1, 3, 3, 3]], [[2, 4, 6, 8, "abc", 8], [2, 4, 6, 8, "abc", 8]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 2, 7]], [[3, 5, 7], [3, 5, 7]], [[10, 9, 8, 7, 6, 1, 5, 4, 3, 2, 1], [5, 7]], [[[3, 4], [7, 8], [4, 10, 4], [4, 10, 4]], [[3, 4], [7, 8], [4, 10, 4], [4, 10, 4]]], [[10, 9, 8, 7, 6, 5, 3, 2, 1], [10, 9, 8, 7, 6, 5, 3, 2, 1]], [[1, 2, 2, 1], [1, 2, 2, 1]], [[2, 3, 5, 6, 7, 8, 9, 10], [2, 3, 5, 6, 7, 8, 9, 10]], [["applegrape", "iip", "applegrae", "grape", "grape", "grape"], [1, 2, 3, 4, 5, 2]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 5], [7, 5]], [[1, 2, 3, 4, 5], []], [[[3], [7, 8], [9, 10], [9, 10]], [[3], [7, 8], [9, 10], [9, 10]]], [[2, 4, 6, 8, "abc", 6], ["abc", 4.5, "xyz"]], [[[1, 2], [3, 4], [5, 6]], [[3, 4, 4, 4], [3, 4, 4, 4], [7, 8], [9, 10], [3, 4, 4, 4]]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1], [8, 5, 7]], [[5, 7], [5, 7]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]], [[3, 5, 7, 7], [3, 5, 7, 7]], [[10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1], [10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1]], [[[1, 2], [3, 4], [5, 6]], [[3, 4], [7, 8], [9, 12, 10]]], [["iip", "grape", "graapplegrapepe", "grape"], [1, 2, 3, 4, 5, 2]], [[94.69906992408676], [1, 2, 3, 4, 5, 1]], [[2, 3, 5, 6, 7, 8, 9, 10, 2], [2, 3, 5, 6, 7, 8, 9, 10, 2]], [["apple", "banana", ["orange", "grape"], 10, ["orange", "grape"]], [["orange", "grape"], "pineapple", 10, 20]], [["applegrape", "iip", "applegrae", "grape", "gragpe", "grape"], [2, 1, 2, 3, 4, 5, 2]], [[10, 9, 8, 7, 6, 5, 4, 3, 3, 2, 1], [7, 5]], [[10, 9, 8, 6, 5, 5, 4, 3, 2, 1], [10, 9, 8, 6, 5, 5, 4, 3, 2, 1]], [[76, -83, 79, 76, 15, 31, 45], []], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 4, 1], [8, 5, 7]], [[-25.992038507469545, 79.87091961628252, 79.87091961628252], [-25.992038507469545, 79.87091961628252, 79.87091961628252]], [[[1, 2], [3, 4]], [[3, 4, 4, 4], [3, 4, 4, 4], [7, 8], [9, 10], [3, 4, 4, 4]]], [[3], [3]], [[[3, 4, 4], [3, 4, 4], [7, 8]], [[3, 4, 4], [3, 4, 4], [7, 8]]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [8, 5, 7, 5]], [["applegrape", "iip", "applegrae", "grape", "grape", "grape"], [1, 2, 3, 4, 5, 1]], [[3, 5, 7, 7, 7], [3, 5, 7, 7, 7]], [[2, 4, 6, 8, "abc"], ["abc", "xyz"]], [[1, 3, 5, 7, 11], [1, 3, 5, 7, 11]], [[1, 3, 5, 7, 1, 7, 1], [1, 3, 5, 7, 1, 7, 1]], [["iip", "grape", "graapplegrapepe", "banana", "graapplegrapepe"], [1, 2, 3, 4, 5, 2]], [[1, 3, 5, 7, 11, 3], [1, 3, 5, 7, 11, 3]], [[7, 5, 7], [7, 5, 7]], [["applegrape", "iip", "grape", "iip"], [2, 1, 2, 3, 4, 5, 2]], [[[4, 10, 4, 4], [3, 4], [4, 10, 4, 4], [4, 10, 4, 4]], [[4, 10, 4, 4], [3, 4], [4, 10, 4, 4], [4, 10, 4, 4]]], [[[1, 2], [3, 4], [5, 6, 5]], [[3, 4], [7, 8], [9, 12, 10]]], [[10, 9, 8, 7, 6, 5, 4, 3, 1, 5], [10, 9, 8, 7, 6, 5, 4, 3, 1, 5]], [[1, "apple", [1, 2], [3, 4], {"name": "John"}, 5.5], [1, "apple", [1, 2], [3, 4], {"name": "John"}, 5.5]], [[1, 3, 5, 7, 1, 1], [1, 3, 5, 7, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 2], [1, 2, 3, 4, 5, 6, 7, 8, 10, 2]], [[10, 8, 6, 5, 5, 4, 3, 2, 1], [10, 8, 6, 5, 5, 4, 3, 2, 1]], [[2, 3, 5, 6, 7, 8, 9, 10, 2, 2], [2, 3, 5, 6, 7, 8, 9, 10, 2, 2]], [[2, 4, 6, 8, "abc"], ["abc", "xyz", "xyz"]], [[10, 9, 8, 6, 5, 4, 3, 13, 2, 1], [10, 9, 8, 6, 5, 4, 3, 13, 2, 1]], [[[10, 6, 5], [1, 2], [10, 6, 5]], [[10, 6, 5], [1, 2], [10, 6, 5]]], [[1, 2, 1], [1, 2, 1]], [["iip", "grape", "grape"], ["iip", "grape", "grape"]], [["applegrape", "iip", "grape", "iip"], ["applegrape", "iip", "grape", "iip"]], [[94.69906992408676, 94.69906992408676], [1, 14, 3, 4, 5, 1]], [[10, 9, 5, 8, 6, 5, 5, 4, 3, 2, 1], [10, 9, 5, 8, 6, 5, 5, 4, 3, 2, 1]], [[1, 3, 7, 10, 11], [1, 3, 7, 10, 11]], [["apple", "banana", ["orange", "grape"], 10], [["orange", "grape"], "pineapple", 10, 20, "pineapple"]], [[8, 5], [8, 5]], [[10, 9, 8, 5, 7, 6, 5, 4, 3, 3, 2, 1], [10, 9, 8, 5, 7, 6, 5, 4, 3, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [8, 5, 7, -44, 5]], [[2, 4, 6, 8, "abc"], [4.5, "xyz"]], [[10, 9, 8, 6, 5, 3, 3, 13, 2, 1, 8], [10, 9, 8, 6, 5, 3, 3, 13, 2, 1, 8]], [[[11], [9, 10], [11], [9, 10]], [[11], [9, 10], [11], [9, 10]]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [5]], [[2, 4, 6, 8, "abc", 6], ["abc", "axyz", 4.5, "applegrape"]], [[4.5], [4.5]], [["ape", "apple", "banana", ["orange", "grape"], 10], [["orange", "grape"], "pineapple", 10, 20]], [[4, 2, -83], [4, 2, -83]], [[1, 3, 5, 7, 1, 7, 1, -44], [1, 3, 5, 7, 1, 7, 1, -44]], [[1, 15, 3, 3, 3, 3], [1, 15, 3, 3, 3, 3]], [[2, 4, 6, 8, 20], [2, 4, 6, 8, 20]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n"}
{"task_id": "Mbpp/162", "prompt": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n", "entry_point": "sum_series", "canonical_solution": "\ndef sum_series(n):\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n", "base_input": [[0], [6], [10], [9]], "atol": 0, "plus_input": [[-5], [-100], [1000000], [462], [1], [463], [-99], [true], [-7], [-8], [-6], [1000001], [false], [0], [77], [464], [465], [461], [78], [2], [3], [460], [4], [-102], [459], [999999], [466], [-103], [-104], [21], [-1], [-2], [999998], [22], [999997], [-3], [20], [18], [5], [-4], [-9], [467], [-65], [23], [19], [468], [999996], [999995], [469], [-98], [-33], [-64], [24], [458], [999994], [76], [1000002], [-66], [470], [-34], [-10], [88], [79], [1000003], [999993], [-105], [-63], [-97], [1000004], [87], [999992], [-35], [17], [457], [16], [-101], [-32], [25], [-40], [-39], [80], [-41], [-42], [15], [-106], [471], [75], [71], [-107], [472], [-96], [-31], [81], [50], [-62], [72], [82], [456], [51], [61], [-69], [86], [62], [26], [-43]], "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25\n"}
{"task_id": "Mbpp/164", "prompt": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\n", "entry_point": "are_equivalent", "canonical_solution": "\nimport math \ndef div_sum(n): \n  total = 1\n  i = 1\n  while i * i <= n:\n    if (n % i == 0):\n      total = total + i + n / i\n    i += 1\n  return total\ndef are_equivalent(num1, num2): \n  return div_sum(num1) == div_sum(num2); \n", "base_input": [[36, 57], [2, 4], [23, 47]], "atol": 0, "plus_input": [[123, 321], [1000, 10000], [122, 123], [122, 10000], [122, 322], [10000, 10000], [123, 10000], [122, 122], [1000, 321], [123, 122], [10000, 123], [122, 323], [10000, 323], [322, 10000], [323, 323], [9999, 999], [123, 123], [124, 10000], [9999, 10000], [321, 10000], [999, 999], [124, 122], [123, 9999], [1001, 9999], [321, 321], [998, 999], [123, 322], [124, 124], [124, 123], [10001, 10000], [1000, 123], [9999, 9999], [10001, 10001], [323, 123], [122, 10001], [1001, 321], [320, 10001], [1000, 1000], [121, 322], [10000, 124], [122, 999], [320, 10000], [1001, 322], [9998, 10000], [9998, 321], [1000, 322], [323, 9999], [125, 122], [1001, 998], [320, 321], [121, 10001], [123, 121], [121, 10003], [1001, 123], [321, 322], [999, 9998], [122, 121], [125, 124], [10004, 10004], [322, 322], [121, 320], [323, 322], [124, 1001], [124, 322], [322, 323], [122, 9999], [323, 10001], [1001, 10000], [126, 126], [1001, 999], [122, 124], [9999, 124], [122, 9998], [10004, 10000], [126, 10004], [323, 998], [10004, 323], [322, 1000], [9998, 122], [323, 124], [10003, 10000], [999, 1000], [323, 10004], [320, 320], [1000, 323], [10000, 10003], [10000, 9999], [999, 322], [121, 10002], [998, 998], [10001, 323], [124, 320], [126, 125], [999, 997], [320, 997], [124, 125], [9999, 127], [1000, 124], [120, 10002], [true, true], [322, true], [9998, 323]], "contract": "\n  assert isinstance(num1, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert num1 > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert num2 > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True\n"}
{"task_id": "Mbpp/165", "prompt": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "entry_point": "count_char_position", "canonical_solution": "\ndef count_char_position(str1): \n    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))\n", "base_input": [["xbcefg"], ["ABcED"], ["AbgdeF"]], "atol": 0, "plus_input": [["xyzXYZ"], ["TheQuickBrownFoxJumpsOverTheLazyDog"], ["tthheellqqiiuucckkbbrrggooowwnnffoottjjuummppssvveerrtttthheelllaazzyydogg"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], [""], ["abcDEF"], ["abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["xyyzXYZ"], ["xyzXxyyzXYZYZ"], ["tthheellqqiiuucckkbbrrggooowwnnffoottjjuummppssvveerrtttthheelllaazzyydoxyzXxyyzXYZYZg"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorld"], ["xyzXxyyzYXYZYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["J"], ["JJ"], ["xyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorlldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["abcdefghijklmnopqrstuvwxyzABCDoHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWlorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWoorldHeFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["xyzXxyyzXYZYZJJ"], ["xyyzX"], ["abcDE"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZYZzXYZYZXYZ"], ["TheQuickBrownFoxJumpsOverTheLazyDogJ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHeelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZXYZYZJJ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHellloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], ["abcdefghijabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWoorldHeFGHIJPQRSTUVWxyzXxyyzXYZYZXYZklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["TheQuickBrumazyDog"], ["xyzXxyZyzYXYZYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["JJabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["xyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZSYZ"], ["HelloWorlldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHellorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZXYZYZJJ"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHellxyyzXYZoWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZXYZYZJJ"], ["kxyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZSYZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldorldHelloWorld"], ["xyzXYxyyzYXYZXJJYZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWoJJrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["abcdefghijklmnopqrstuvwxyzABCDoHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWlorldHelloWorldHelloWorldHelloWorabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWoloWorld"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHeWlloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYxyzXxyyzYXYZYZZJJ"], ["xyzXxyyzxyzXxyyzXYZYZJJXYZYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWyzXxyyzXYhZYZXYZ"], ["xyzvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZS"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHeldloWorldHelloWorldHelloWorldHeelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZ"], ["xyzvwxyzABCDEFGHHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWoJJrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJOPQRSxyzXYZTUVWXYZXxyyzYXYZS"], ["xyzXxyyzHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldxyzXxyyzXYZYZJJXYZYZ"], ["HelloWorlldHelloWorldHelloWrorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["xyzZXYZ"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHellTheQuickBrownFoxJumpsOverTheLazyDogJyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYxyzXxyyzYXYZYZZJJ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTdHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZ"], ["xyzXHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldYXYZYZ"], ["xyzXxyyzXYZYZJTheQuickBrownFoxJumpsOverTheLazyDogJ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHeWlloWorldHelloWorldxyyzXYZdHelloWorld"], ["xyzZYZJJabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHeQlloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorlldEFGHIJPQRSTUVWZ"], ["HelloWorlldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelxyzXYxyyzYXYZXJJYZloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["xyzXHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWolrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldYXYZYZ"], ["JJJ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJJabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZHexyzXxyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["HelloWorlldHelloWorldHelloWorldHelloWloWorldHelloWorldHelloWorldJ"], ["tthheellqqiabcdefghijklmnopqrstuvwxyzABCDoHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWlorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZiuucckkbbrrggooowwnnffoottjjuummppssvveerrtttthheelllaazzyydogg"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZxyzXxyZyzYXYZYZ"], ["abcdefghijklmnoxyzZXYZpqrstuvwxyzABCDHelloWorldHeQlloWorldHelloWorldHelloWorldHelloWoxyzXxyzXYZYZrldHelloWorlldEFGHIJPQRSTUVWZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWWoloWorld"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWoabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZXYZYZJJ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldxyzXHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWolrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldYXYZYZHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXxyyzXYZYZJJrldHelloWorldHelloWoJJrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["abcdefghijklmnopqrstuvwxyzABCDoHelloWorldHelloWorldHelloWordldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWlorldHelloWorldHelloWorldHelloWorabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["xyzXHelloWorldHelloHWorldHelloWorldHelloWorldHelloWorldHelloWolrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldYXYZYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldxyzXHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWolrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZWorldYXYZYZHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["xyzXHelloWorldHelWloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHeloloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldYXYZYZ"], ["abcF"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelxyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZSYZloWorldHeWlloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuHelloWorldHelloWorldHelxyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZSYZloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZxyzXxyZyzYXYZYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHJelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorlxyzXxyyzXYZYZJJdHelxyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZSYZloWorldHeWlloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"], ["JHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorldorldHelloWorld"], ["HelloWorlldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelxyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZSYZloWorldHeWlloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHellolWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZ"], ["xyzXxyZyzYXYyZYZ"], ["xyzabcdefghisjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZXxyyzYXYZYZJJabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["DabcDEF"], ["JJabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["abcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzwXYZrldHelloWorlldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["xyyJJabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWorldHelloWorldHelloWorldHelloWorloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZzXYZ"], ["tthheellqqiabcdefghijklmnopqrstuvwxyzABCDoHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWlorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzffoottjjuummppssvveerrtttthheelllaazzyydogg"], ["xyzXxyyZzXYYZYZJJ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXxyyzXYZYZJJrldHellJrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["HelloWorlldHelloWorldabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldxyzXHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWolrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZWorldYXYZYZHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZHelloWorldHelloWloWorldHelloWorldHelloWorldJ"], ["HelloWorlldHxyzXYxyyzYXYZXJJYZelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["xyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorlodHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHellorldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZXYZYZJJ"], ["xyzXxyyZzXXYYZYZJJ"], ["HelloWorlldHelloWorldHelloWrorldHelloWorldHlloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["abxyzXxyyzabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHellTheQuickBrownFoxJumpsOverTheLazyDogJyyzXYZYZoWorldHelloWorldEFGHIJPQRSTUVWxyzXxyyzXYxyzXxyyzYXYZYZZJJcdefghijklmnoxyzZXYZpqrstuvwxyzABCDHelloWorldHeQlloWorldHelloWorldHelloWorldHelloWoxyzXxyzXYZYZrldHelloWorlldEFGHIJPQRSTUVWZ"], ["HelloWorldHelloWorldHelloWorldHelloWorldHelloWoerldHelloWorldHelloWorldHelloWoJJrldHelloWorldHelloWorldHelloWorldrHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldJ"], ["HelloWorlldHelloWorldabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldxyzXHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWolrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloabcdefghijklmnopqrstuvwxyzABCDoHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWlorldHelloWorldHelloWorldHelloWorabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxZYZXYZWorldYXYZYZHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZHelloWorldHelloWloWorldHelloWorldHelloWorldJ"], ["abcdeflghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHexyzXxyyzXYZYZoWorldHelloWorxyzXxyyzXYZYZldEFGHIJPQRSTUVWxyzXxyyzXYZYZXYZ"], ["DabcDabcFEF"], ["tthheellqqiiuucckkbbrrggooowwnnffoottjjuummppssvveerabcdefghijklmnopqrstuvwxyzABCDHelloWorldHelloWorldHelTheQuickBrownFoxJumpsOverTheLazyDogloWorldHelloWorldHelloWoxyzXYZrldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWWyzXxyyzXYhZYZXYZrtttthheelllaazzyydoxyzXxyyzXYZYZg"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x.isalpha() for x in str1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n"}
{"task_id": "Mbpp/166", "prompt": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n", "entry_point": "find_even_pair", "canonical_solution": "\ndef find_even_pair(A): \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n", "base_input": [[[5, 4, 7, 2, 1]], [[7, 2, 8, 1, 0, 5, 11]], [[1, 2, 3]]], "atol": 0, "plus_input": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]], [[-3, -2, -1, 0, 1, 2, 3]], [[17, -12, 33, 4, -9, 0, 21, -7, 8, -5]], [[100, -200, 75, -50, 125, -250, 175, -40, 80, -60]], [[1, 2, 1, 3, 2, 1, 3, 4]], [[]], [[17, -98, 3, -2, -71, -250, -40, -250]], [[true, true, true, true, true, true, false, false]], [[17, -98, 3, -2, -71, -250]], [[-250, -2, -1, 0, 1, 2, 3]], [[-3, -2, -1, 0, 2, 3]], [[-3, -2, 80, -12, 2, 3]], [[-2, -2, 80, -12, 3, -2]], [[17, -98, 3, -2, -71, -40, -250, -40]], [[true, false, true, false, false, true, false, true, true]], [[1, 2, 1, 3, 2, 1, 1, 3, 4]], [[17, -98, 3, 18, -2, -71, -250]], [[1, 2, 1, 3, 2, 1, 3, 3, 3]], [[1, 2, 1, 2, 1, 1, 3, 5]], [[1, 2, 1, 3, 2, 1, 1, 3, 4, 3]], [[17, 33, 4, -9, 0, 21, -7, 8, -5]], [[1, 2, 1, 3, 21, 0, 1, 3, 3, 3]], [[1, 2, -40, 1, 3, 2, 1, 4]], [[1, 2, 1, 3, 2, 1, 3, 3, 3, 3]], [[1, 2, 1, 3, 2, 1, 3, 3, 3, 3, 2, 1]], [[1, 2, -40, 1, 3, 2, 1, 4, 2, 3]], [[1, 2, -40, 1, 3, 2, 1, -2]], [[17, 33, 4, -9, 0, 21, 75, 8, -5, -9, 17]], [[1, 2, -12, 1, 3, 2, 1, 4, 2, 3]], [[true, false, true, false, false, false, false, true, true, true]], [[1, 3, 5, 7, 9, 2, 2, 4, 6, 8, 10]], [[1, 2, 1, 3, 2, 1, 3, -12, 4, 1]], [[-3, -50, -1, 0, 2, 3]], [[17, -98, 3, -2, -71, -250, -40, -250, -250]], [[1, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3]], [[-3, -2, 0, 2, 3]], [[-50, -2, 0, 2, 3, 2]], [[1, 2, 1, 3, 2, 1, 3, 4, 2]], [[17, -98, 3, 18, -2, -71, -250, 18]], [[-3, -2, 80, -12, 2, 2, 3]], [[-250, -2, -1, 5, 0, -71, 2, 3]], [[1, 2, 1, 3, 1, 1, 4]], [[100, -98, -50, 125, -250, 175, -40, 80, -60]], [[21, -98, 3, 18, -2, -71, -250, 18, 18]], [[17, -98, 3, 18, -2, -71, -250, -71]], [[true, false, true, false, false, true, true, false]], [[-3, -2, 80, -12, 2, 3, 3]], [[-71, -2, -1, 5, 0, -71, 2, 3]], [[-3, -2, 80, -12, -3, 2, 2, 3]], [[1, 2, 75, 1, 3, 2, 1, 3, 4, 2, 1]], [[17, -98, 3, 18, -2, -71, -250, -71, -2]], [[100, -98, -50, 125, -250, 175, -40, 80, -9, -60]], [[2, 2, 1, 3, 2, 1, 1, 3, 4]], [[1, 2, -40, 1, 3, 2, 1, 4, 3]], [[false, false, false, false]], [[true, false, false, false, false, true, true, false]], [[2, -40, 1, 3, 2, 1, -2]], [[-98, 3, -2, -71, -250, -250, -250]], [[5, -98, 3, -2, -71, -250]], [[-3, 4, -2, 0, 2, 3, 2]], [[-40, 1, 2, 1, 3, 2, 1, 3, 4]], [[17, -98, 3, -2, -71, -40, -250, -40, -71]], [[false, false, false]], [[1, 2, -40, 1, 3, 2, -2]], [[-3, -50, -1, 2, 3]], [[-3, -2, 80, -200, 3]], [[1, 2, 1, 3, 1, 3, 3, 3, 9]], [[1, 2, 3, 2, 1, 3, -12, 4]], [[1, 2, 1, 3, 3, 1, 3, 3, 3]], [[-3, 4, -2, 0, 175, 2, 3, 2, 2]], [[1, 2, 1, 3, 2, 33, 1, 3, 4, 3]], [[-250, -2, -60, 0, 1, 2, 3, -2]], [[-3, -2, -1, 0, 1, 1, 3]], [[100, -98, -50, 125, -250, 175, -40, 80, -9]], [[1, 2, -40, 1, 3, 2, 1, 4, 2, 3, 3]], [[-3, -2, -12, -5, -3, 2, 2, 3]], [[1, 2, 1, 3, 2, 1, 3, 4, 2, 4]], [[5, 1, 2, 1, 3, 2, 1, 1, 9, 3, 4]], [[17, -98, 3, -1, -71, -40, -250, -40, -71]], [[1, 2, 1, 2, 1, 3, 5, 3]], [[1, 2, -40, 1, 3, 2, 1, -41, 4, -3, 3]], [[-3, -2, -1, 0, 1, 2, 3, 0]], [[3, 5, 7, 9, 2, 2, -40, -71, 4, 6, 8, 10, 7]], [[100, -98, -50, 125, -250, 175, -40, 80, -9, -9, -250]], [[17, -98, 3, 18, -2, -71, -250, -71, 17]], [[2, -3, -2, 80, -12, -3, 2, 2, 3]], [[1, 2, 1, 17, 3, 2, 1, 1, 3, 4, 2]], [[-3, -2, -1, 0, 1, 3, 2, 3]], [[2, -40, 1, 3, 2, 4, 2, 3]], [[2, 2, 1, 3, 1, 1, 3, 4]], [[-3, -49, -1, 2, 3]], [[1, 2, 1, 3, 9, 2, 1, 3, 3, 3, 3, 3]], [[-3, -2, -12, -3, 2, 2, 3]], [[1, 2, 1, 3, 2, 1, 5, 3, -12, 4, 1]], [[true, false, true, true, false, false, true, true, false]], [[-3, -2, 80, -12, 2, 80, 3]], [[1, 1, 1, 2, 1, 1, 6, 3]], [[false, false, false, false, true, false]], [[-2, -3, -50, -1, 2, 3]], [[100, -98, -51, 125, 175, -40, 80, -9]], [[-3, 80, -12, 1, 80, 3]], [[17, 33, 4, -9, 0, 75, 8, -5, -9, 75]], [[-40, 0, 2, 1, 3, 2, 1, 4, 4]], [[1, 2, -12, 1, 3, 2, 1, 4, 33, 3]], [[17, -98, 6, -2, -71, -250, -40, -250]], [[17, 33, 4, 2, -9, 0, 75, 8, -5, -9, 75, -5]]], "contract": "\n  assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n"}
{"task_id": "Mbpp/167", "prompt": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n", "entry_point": "next_power_of_2", "canonical_solution": "\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n", "base_input": [[0], [5], [17]], "atol": 0, "plus_input": [[1], [2], [8], [128], [1000000], [342788], [567990], [999999999999], [987654321098], [1000000000000], [1234567890123], [987654321], [40], [342789], [false], [41], [1000000000001], [1000001], [true], [987654320], [10], [129], [95], [39], [9], [38], [342790], [94], [987654322], [987654321097], [999999999998], [1000000000002], [1000002], [127], [1234567890122], [987654323], [1000003], [55], [52], [56], [0], [567989], [1000000000003], [1000000000004], [567987], [1000004], [567986], [999999999997], [1234567890124], [1000005], [342787], [7], [11], [54], [999999], [96], [567985], [1234567890125], [6], [57], [987654321095], [342791], [93], [999998], [1000006], [342786], [92], [33], [97], [1234567890126], [36], [987654321096], [37], [53], [35], [5], [1000007], [12], [1000000000005], [987654319], [999999999996], [3], [130], [22], [567988], [987654318], [100], [98], [1000000000006], [131], [67], [132], [987654317], [42], [101], [987654321094], [77], [4], [567991], [342792], [987654321099], [1234567890121], [99], [58], [1000000000007], [342785], [1000000000008], [51], [50], [1000000000009], [133], [21]], "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32\n"}
{"task_id": "Mbpp/168", "prompt": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n", "entry_point": "frequency", "canonical_solution": "\ndef frequency(a,x): \n    return a.count(x)\n", "base_input": [[[1, 2, 3], 4], [[1, 2, 2, 3, 3, 3, 4], 3], [[0, 1, 2, 3, 1, 2], 1]], "atol": 0, "plus_input": [[[], 1], [[], 4], [[false], 4], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], 1], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], 1], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], false], [["CL", "vGL", "VjygOQ", "IV", "VjPshwex", "ICMkS", "", ""], 1], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], 0], [[true, false, false, true, false, true, true, true, false], 2], [["CL", "vGL", "VjygOQ", "IV", "VjPVjygOQshwex", "VjPshwex", "ICMkS", "", ""], 1], [[], 2], [[4.779178548584724, 20.12336259087077], 1], [[4.779178548584724, 72.59056638104303, 92.53457117882732], true], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 20.12336259087077], false], [["CL", "vGL", "VjygOQ", "IV", "VjPVjygOQshwex", "VjPshwex", "ICMkS", "", "", "CL", "IV"], 1], [[true, false, false, true, false, true, true, false, true, false], 2], [[6.671642720053646, 72.59056638104303, 92.53457117882732, 20.12336259087077], 4], [["CL", "vGL", "VjygOQ", "IV", "VjPVjygOQshwex", "VjPshwex", "ICMkS", "VjPVjygOQshwVjPshwexex", "", "", "CL", "IV"], 5], [[false, false], 4], [[5.159327309211834, 4.779178548584724], 1], [[4.779178548584724, 73.08137236933901, 92.53457117882732, 20.12336259087077], true], [[true, false], 4], [[23.020319535944452, [5, false, -74, -50, -9, 5, 4, -97], "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwVjPshwexex", "q"], 2], [[4.779178548584724, 20.12336259087077, 4.779178548584724], false], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], 0], [[true, true], 4], [["CL", "vGL", "VjygOQ", "IV", "VjPVjygOQshwex", "ICMkS", "", "", "CL", "IV"], -50], [[5], 2], [[23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwVjPshwexex", "q", [5, false, -74, -50, -9, 5, 4, -97]], 2], [[5], false], [[23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwex", [5, false, -74, -50, -9, 5, 4, -97]], -50], [[5, 5], false], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], true], [[72.59056638104303, 92.53457117882732, 23.408003718694573, 20.12336259087077, 92.53457117882732], false], [[60, 4, 4, -43, 4, 81, -50, 5, 99, -97], 4], [[5.599696065924146], 4], [[23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "VIV", "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwex", [5, false, -74, -50, -9, 5, 4, -97]], -51], [["CL", "vGL", "VjygOQ", "IV", "VjPVjygOQshwex", "ICMkS", "", "", "CL", "IV"], -74], [[], 3], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], -51], [[4.779178548584724, 20.12336259087077], false], [[20.12336259087077], false], [[23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwVjPshwexex", "q"], 2], [[4.779178548584724, 20.12336259087077, 4.779178548584724], true], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], 2], [[5, 5], true], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 92.53457117882732], true], [[6.671642720053646, 73.08137236933901, 4.779178548584724, 20.12336259087077], 4], [[true], 4], [[true], 1], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], -9], [[72.59056638104303, 92.53457117882732, 23.408003718694573, 20.12336259087077, 92.53457117882732], true], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], -51], [[5.159327309211834, 4.779178548584724], -97], [[], 5], [[4.779178548584724, 23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "VIV", "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwex", [5, false, -74, -50, -9, 5, 4, -97]], -51], [[72.59056638104303, 92.53457117882732, 25.495320338145287, 23.408003718694573, 104.92811756855819, 20.12336259087077, 92.53457117882732], false], [[23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwVjPshwexex", "q", [5, false, -74, -50, -9, 5, 4, -97]], 3], [[true, false, false, true, false, true, true, true, false], 81], [[72.59056638104303, 92.53457117882732, 20.12336259087077], 1], [[4.779178548584724, 73.08137236933901, 92.53457117882732], true], [[21.457739778830753, 4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], 0], [[5], 1], [[60, 4, 4, -43, 4, 82, -50, 5, 3, 99], 4], [[4.779178548584724, 72.59056638104303, 91.9284337556918, 92.53457117882732, 20.12336259087077], -51], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.95740817891545], -1], [[72.59056638104303, 92.53457117882732, 12.618578392571889, 20.12336259087077, 92.53457117882732], false], [["CL", "vGL", "VjygOQ", "IV", "VjPVjygOQshwex", "ICMkS", "", "", "CL", "IV"], -43], [[], -9], [[], 82], [[72.59056638104303, 92.53457117882732, 23.408003718694573, 91.9284337556918, 92.53457117882732], true], [[5], -1], [[72.59056638104303, 92.53457117882732, 91.9284337556918, 92.53457117882732], false], [[false, true, false], 4], [[4.779178548584724, 23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "VIV", "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwex", [5, false, -74, -50, -9, 5, 4, -97], "VIV"], -51], [[99, -31, 82, -60], 3], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732, 92.53457117882732], 4], [[null, 73.08137236933901, -72.0136627571263, -2.6946579959743957, "grmqd", {}, "VjPVjygOQshwex", {"-32": 12.618578392571889, "5": [66.8966114578121, -3.026526737101335, 4.779178548584724], "2": true, "-51": 81, "-77": 60}, 81], 5], [[4.779178548584724, 23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "VIV", "", [], false, 2, "VjPVjygOQshwex", "VjPVjygOQshwex", [5, false, -74, -50, -9, 5, 4, -97], "VVIV"], -51], [[72.59056638104303, 92.53457117882732, 20.12336259087077], 0], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], false], [[20.95740817891545, 5.599696065924146, 5.599696065924146], 4], [[5, 6], false], [["vGL", "GEMQus", "VjPVjygOQshwex", "o", "", "", "ICMkS", "GHTx", "grmqd", "LvGL", "vGL"], 5], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 20.12336259087077, 72.59056638104303], false], [[20.95740817891545, 5.599696065924146, 5.599696065924146, 5.599696065924146], 4], [[4.638246081712282, 4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732], 2], [[-3.026526737101335, -51.21354843845134, -50.84067158641727], 5], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077], 2], [[4.779178548584724, 72.59056638104303, 93.00370740734236, 20.12336259087077], 1], [[4.779178548584724, 72.59056638104303, 92.53457117882732], false], [[23.408003718694573, 93.00370740734236, 72.59056638104303, 25.495320338145287, 104.92811756855819, -72.0136627571263, 104.92811756855819, 59.68770177971405, -62.798823266707295, 5.159327309211834], 4], [[5], 5], [[60, 3, 4, 4, -43, 4, 81, -50, 5, 99, -97], 4], [[4.779178548584724, 20.12336259087077], true], [[20.95740817891545, 5.599696065924146, 4.638246081712282, 5.599696065924146, 5.599696065924146], 4], [[false, false], -43], [[4.779178548584724, 72.59056638104303, 92.53457117882732, 20.12336259087077, 92.53457117882732, 92.53457117882732], 3], [[], -77], [[4.000120888560737, 20.12336259087077], false], [[60, 4, -50, -43, 4, 81, -50, 5, 99, -97, 99], -60], [[23.020319535944452, "IV", [5, false, -74, -50, -9, 5, 4, -97], "", [], true, 2, "VjPVjygOQshwex", "VjPVjygOQshwVjPshwexex", "q"], 2]], "contract": "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2\n"}
{"task_id": "Mbpp/170", "prompt": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n", "entry_point": "sum_range_list", "canonical_solution": "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n", "base_input": [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10]], "atol": 0, "plus_input": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3, 7], [[-10, -5, 0, 5, 10, 15, 20, 25, 30], 0, 8], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 11], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 6], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 1, 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 3, 9], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 8], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 7], [[2, 1, 12, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 11], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 5], [[-10, -5, 0, 5, 10, -6, 15, 20, 25, 30], 0, 8], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 5], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18], 2, 5], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 11], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 3, 1], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[0, 1, 2, 3, 5, 8, 13, 21, 34], 3, 1], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 1], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12], 11, 11], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12], 2, 2], [[-3, 20, -1, 4, 6, 9, 12, 15, 18], 2, 5], [[-3, -8, 16, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[-8, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 0], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 21], 3, 1], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 9, 3], [[-10, -5, 0, 5, 10, -6, 15, 20, 25, 30], 0, 9], [[-3, -8, -1, 4, 6, 30, 12, 15, 18, 9], 2, 6], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, -1], 2, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 11, 0], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 8, 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 9, 9], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 1, 4], [[-10, -5, 0, 5, 10, -6, 15, 0, 20, 25, 30, 15], 0, 8], [[2, 1, 12, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 9, 11], [[-3, -8, 5, 6, 12, 15, 18, 9], 2, 7], [[-8, -1, 4, 6, 12, 15, 19, 12], 2, 6], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 12], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 3], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 8, 11], [[-3, 40, -8, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12], 11, 10], [[-2, -1, 0, 1, 2, 3, 5, 6, 7, 8], 3, 7], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 0, 11], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11, 6], 1, 11], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 2, 6], [[-8, -1, 4, 6, 9, -2, 12, 15, 18], 2, 2], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 7, 7], [[-8, -1, 4, 6, 30, 9, 12, 15, 18], 2, 2], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 8, 4], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 9, 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 4, 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 2, 9], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 6, 2], [[1, 3, 5, 7, 11, 13, 15, 17, -5, 19], 4, 3], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5], [[2, 1, 12, 5, 6, 8, 4, 7, 10, 11, 8, 12], 0, 11], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100], 8, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8], 11, 11], [[2, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11, 6], 1, 11], [[2, 1, 12, 5, -5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 8, 11], [[0, -6, 2, 3, 5, 8, 13, 21, 34], 3, 1], [[2, 1, 12, 5, -5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 9, 8], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 7], [[-3, -8, 5, 6, 6, 12, 15, 18, 9], 2, 7], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100, 100], 7, 5], [[-10, -5, 0, 5, 10, -6, 15, 20, 25, 30], 0, 0], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 5, 5], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 5, 6], [[-3, -8, -1, 6, 9, 12, 15, 18], 7, 7], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 9, 5], [[-3, -1, 4, 6, 9, 12, 15, 18], 2, 5], [[-3, -8, -2, 4, 6, 9, 12, 15, 18], 2, 2], [[-3, -8, -1, 4, 6, 9, 12, -10, 15, 18], 2, 2], [[2, 1, 12, 5, 6, 8, 3, 16, 9, 10, 11, 8, 12], 9, 11], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 2, 5], [[-10, -5, 0, 5, 10, -6, 15, 0, 20, 25, 30, 15, 30], 0, 3], [[9, 2, 1, 5, 6, 8, 3, 4, 16, 10, 11, 8, 12, 11], 11, 11], [[0, 1, 1, 2, 3, 5, 8, 13, 34, 21, 34], 3, 1], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 1, 5], [[-3, 20, -1, 4, 6, 9, 12, 15, 18, 20], 2, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8, 6], 11, 11], [[-10, -5, 0, 5, 26, 10, -6, 15, 0, 20, 25, 30, 15], 0, 8], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 1, 7], [[0, 1, 2, 3, 5, 8, 13, 21, 34], 3, 0], [[-3, 50, -1, 4, 6, 9, 12, 15, 11, 3, 12], 1, 5], [[-3, -8, -1, 4, 6, 100, 9, 12, 15, 18], 2, 5], [[70, -8, -1, 4, 6, 9, 12, 15, 18, 4], 2, 2], [[-10, -5, 0, 5, 10, -6, 15, 0, 20, 25, 30, 15, 30, 15], 0, 3], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 1, 2], [[1, 3, 5, 7, 13, 15, 17, -5, 19], 4, 3], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8, 11], 11, 11], [[-3, -8, 16, -1, 4, 6, 9, 12, 15, 18], 1, 1], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 9], [[-3, 40, -8, -1, 4, 6, 9, 12, 15, 18], 2, 4], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8, 11], 10, 11], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 2, 2], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11, 6, 9], 1, 11], [[-3, 20, -1, 4, 6, 9, 12, 15, 18], 6, 2], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 2, 1], [[1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19], 3, 9], [[-2, -1, 0, 1, 2, 3, 5, 6, 7, 8], 2, 7], [[1, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 6, 1], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12, 1], 11, 11], [[-3, 20, -1, 4, 6, 9, 12, 15, 18, 20], 1, 2], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100], 7, 4]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n"}
{"task_id": "Mbpp/171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n", "entry_point": "perimeter_pentagon", "canonical_solution": "\ndef perimeter_pentagon(a):\n  return 5 * a\n", "base_input": [[5], [10], [15]], "atol": 0, "plus_input": [[0], [-10], [1000000], [3.5], [1.5], [1.0505829058331777], [0.8232153234250026], [-11], [1.1423795213926284], [0.09982566847914054], [-1], [false], [1000001], [-2], [0.8077261706133441], [true], [1.1028493478364014], [-0.6792391618130493], [0.909551532381226], [1000002], [-0.005504686729706451], [0.9868175569774722], [-9], [0.9232556249681736], [1000003], [0.6965793033660621], [0.6294263989650178], [0.6535078983353], [1.6349329383768112], [0.7902235974897384], [1.5172735829864554], [-0.934803278457003], [-1.1192650882858737], [1.2342082553789273], [-1.698603118139952], [0.5935859571226136], [1.6830234032997775], [0.785792688601003], [31.370495378968002], [84.01235804122422], [1.1276189613088303], [107.78498426566843], [-0.0029078677287501745], [-12], [75.6566983607087], [1.554842829586259], [-15.68855646866227], [0.5528325585260435], [1.9252801407864577], [0.7737942113653675], [1.2772250645310455], [0.3658008762332865], [1.2131766463211393], [0.9390038351214784], [2.2831918031216305], [1.882254037648374], [-8], [0.13542016819864997], [0.1399805018824617], [-0.021518766852972826], [1.2249594487730122], [4.73142092326178], [2.5041511619949257], [-29.226547220922924], [1.232187069270112], [0.9315663577437784], [0.16130662172278876], [-3], [1.2353805704290877], [-0.23618264271757206], [-1.9412533512158896], [0.7590332508942004], [1.8855707948477347], [0.12461000378614799], [3.713397178947464], [1.1646860674476625], [5.061520744124105], [2.362488974509084], [1.8219258427481917], [0.7781797011317402], [16.251173065770736], [1.2275912517626453], [0.26717467520648097], [-7], [0.7750635059012929], [0.9746470744694342], [0.8564961031500605], [-0.8398787134682071], [0.6562631390141311], [0.860561999847218], [0.9087877034647631], [89.7106724186805], [-0.575457086018061], [-28.33971230831976], [0.11108589002626337], [0.38766169842712256], [-4], [0.7952111107175209], [0.2900179424349849], [-15.637668202519894], [1.4496382242194237], [147.8513725235397], [-0.7256171557364777], [-1.8438320948223208], [-0.1244805889183841]], "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\n"}
{"task_id": "Mbpp/172", "prompt": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "entry_point": "count_occurance", "canonical_solution": "\ndef count_occurance(s):\n  return s.count('std')\n", "base_input": [["letstdlenstdporstd"], ["truststdsolensporsd"], ["makestdsostdworthit"], ["stds"], [""]], "atol": 0, "plus_input": [["stdstdstdstd"], ["stdstdststdstdstdstddstd"], ["stdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstd"], ["stdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdsttstdstdstdsttdststdstdstdstddstd"], ["stdsdtdstdstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["st"], ["stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdsdttdstd"], ["sst"], ["stdsdttdstdstd"], ["stdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddst"], ["sttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstd"], ["stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdststdssstdsdtdstdstdtdstdstdsttstdstdstdsttdststdstdstdstddssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdtdtdstdstddstd"], ["stdstdststdstdstdstdddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsstdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdstdststdstdstdstddst"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstddstdststdstdstdstddd"], ["stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstdstdstdstd"], ["stdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd"], ["stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstdd"], ["sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd"], ["stdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdsdstdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdttdstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsstdstdstdsstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdstdststdstdstdstddst"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstdstdstd"], ["stdstdststdstdstdsssttdddstd"], ["tstdstdststdd"], ["stddstdstdstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdsttstdstdstdstddstdtdstdstdstdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd"], ["stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsdstdstdstddstd"], ["stdstdsttstdstdstdstddstdtdstdtstdstddstdstdststtdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstddstdstd"], ["stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstdstdstdstd"], ["stdsdttdsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstd"], ["stdstdstdsttstdstdstdsttdststdstdstdsttddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["sttdstdsttstdstdstdstdddtdstdtstdstddstdstdstdstdstd"], ["stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstdstdsttstdstdstdstddstdtdstdstdstdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd"], ["stdstdsstdstdstdsssttdddstd"], ["stdstdstdstststdstdstdstddsstdstdstdsttstdstdstdsttdststdstdstdstddstdtdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddsdtdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd"], ["stdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstd"], ["sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttd"], ["stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdttdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["ssst"], ["stdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstd"], ["stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdsstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdsdttdsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttsstdstdststdstdstdstdddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstd"], ["stdstdstdstststdstdstdstddsstdstdstdsttstdstdstdsttdststdstdstdstddstdtdtdstdtstdstddstdstdstdstdstdstdststsdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdststdstdststdstdstdstddststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd"], ["stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdstdststdstdstdstddstd"], ["stdstdstdsttstdsttddstd"], ["sssst"], ["stdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdsstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstd"], ["sttdstdsttstdstdstdstddsststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttddtdstdtstdstddstdstdstdstdstd"], ["stdstdststdssstdsdtdstdsttdtdstdstdsttstdstdstdsttdststdstdstdstddssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdtdtdstdstddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstddstdststdstdstdstdddddstd"], ["stddsdttdstdstd"], ["sststdstdstdsttstddstdstdstddstdtdstdtstsdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["dstdstdstdsttstdsttdddstd"], ["sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttd"], ["sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstdtd"], ["stdsdstdstdstdststdstdstdstddsstdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdsstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstdtdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdttdstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdsdstddstd"], ["stdstdsttstdstdstdstddstdtdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdsdstddstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd"], ["stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdsstdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttdtdststdstdstdstddstd"], ["stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdststdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstddststdstdstdstddstd"], ["stdstdstdsttdstdstdstdstddstdtdstdtstdstddstdststdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsstdstdstdsstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdstdststdstdstdstddst"], ["sststdstdstdsttstddstsstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd"], ["stdstdstdststdstdstdstddstdstdssttstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdstdststdstdstdststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstdstdstdstdddstddstddstdtdstdstdstddstdstdstdstdstd"], ["stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstd"], ["stdtstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstdddstddstd"], ["stdstdsstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["ststtdddstd"], ["stdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstsdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstd"], ["stdstdstdststdstdstdsstdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdssttstdstdstdstddstdtdstdstdstddstdstdd"], ["sststdstdstdsttstddstsstdsdtdstdstdstdstdstsdtdstdstdstddstdtdstdsttd"], ["stdstdstdstststdstdsttdstddstdtdstdtsttdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdsstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstd"], ["stdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdsdtdstd"], ["stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdsttdstdstdstdstsdstdstdstddstd"], ["stdstdstdststdstdstdstddstdstdssttstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdstdststdstdstdststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdststdstdstdsttstdstdstdstdstdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstsdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstdstdstdstdddstddstddstdtdstdstdstddstdstdstdstdstd"], ["stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstdstdsttstdstdstdstddstdtdstdstdstdstdstdsttsstdstdstdsttstdsttdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd"], ["stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstdstdsttstdstdstdstddstdtdsstdstdstdstdstdsttsstdstdstdsttstdsttdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstd"], ["stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdststdstdstdstststdstdsttdstddstdtdstsststdstdstdsttstddstdstdstddstdtdstdtstsdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttddtstdstddstdstdstdstdstdstdststdstdstdstddstddstdststdstdstdstddd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsststdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdsstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstddtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"], ["stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdststdstdstdsttstdstdstdsttdststdstdstdstddstddstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd"]], "contract": "\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n"}
{"task_id": "Mbpp/222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n", "entry_point": "check_type", "canonical_solution": "\ndef check_type(test_tuple):\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n", "base_input": [[[5, 6, 7, 3, 5, 6]], [[1, 2, "4"]], [[3, 2, 1, 4, 5]]], "atol": 0, "plus_input": [[[5.5, 7.3, 9.2, 3.1, 6.4]], [["apple", "banana", "cherry", "date"]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[{"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob", "age": 35}]], [[[1, 2], [3, 4], [5, 6]]], [[true, false, false, true]], [[1, "apple", [3, 4], {"name": "John"}]], [[[[1, 2], [3]], [[4, 5], [6]], [[7, 8], [9]]]], [[[{"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob", "age": 35}], [{"name": "Alice", "age": 28}, {"name": "Eve", "age": 22}]]], [[["red", "green", "blue"], ["purple", "orange", "yellow"]]], [[[[1, 2, 3], [4, 5, 6], [8, 9, 7]], [[10, 11, 12], [13, 14, 15]]]], [[[], [1, 2, "3"], {"1": "one", "2": "two", "3": "three"}]], [[[], {"1": [1, 2, 3], "2": [4, 5, 6]}, [{"a": 1, "b": 2}, {"c": 3, "d": 4}]]], [[[[1, 2, 3], [4, 5, 6], [8, 9, 7]], {"10": [10, 20, 30], "11": [40, 50, 60]}, [[1, 2, 3], [4, 5, 6]]]], [[[1, 2, 3], {"a": "apple", "b": "banana", "c": "cherry"}, [["red", "green", "blue"], ["purple", "yellow", "orange"]]]], [[[["b", "a"], ["c", "d"]], [1, 2, 3], [4, 5, 6], [[[1], [2], [3]], [[4], [5], [6]]]]], [[{"1": "one"}, {"2": "two"}, {"3": "three"}]], [[[1, 2, "apple"], [3.14, "banana", "cherry"], ["date", 20, true]]], [[[[1, 2], [3.14, "banana"], ["c", "b", "a"]], [["red", "green", "blue"], ["purple", "yellow", "orange"]]]], [[{"1": "apple", "2": "banana", "3": "cherry"}, {"4": [10, 20, 30], "5": [40, "50", 60]}, [[1, 2, 3], [4, 5, 6]]]], [[[[], [], []], [[], [], []]]], [[[[[], []], [[], []]], [[[[], []], [[], []]], [[[], []], [[], []]]]]], [[[{"1": true, "2": false}, {"3": true, "4": true}], [{"5": false, "6": false}, {"7": false, "8": false}]]], [[[{"9": [1, 2, 3], "10": [4, 5, 6]}, {"11": [7, 8, 9], "12": [10, 11, 12]}], [{"13": [13, 14, 15], "14": [16, 17, 18]}, {"19": [19, 20, 21], "20": [22, 23, 24]}]]], [[1, "apple"]], [[4.0, 5.0, 6.0]], [[1, "apple", true, [1, 2, 3], {"a": 1, "b": 2}]], [[1.5, "banana", [1, 2, 3], {"a": 1, "b": 2}, ["apple", "banana"]]], [["dattwo", "apple", "banana", "cherry", "date"]], [[[{"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob", "age": 35}, {"name": "Jane", "age": 30}], [{"name": "Alice", "age": 28}, {"name": "Eve", "age": 22}], [{"name": "Alice", "age": 28}, {"name": "Eve", "age": 22}]]], [[[[60, 1, 2], [3.14, "banana"], ["c", "b", "a"]], [["red", "green", "blue"], ["purple", "yellow", "orange"]]]], [[[], [1, 2, "3"]]], [["chercry", "dattwo", "apple", "banana", "cherry", "date"]], [["apple", "banana", "cherry", "ccherry", "date"]], [[[], {}]], [[30, [3, 4], {"name": "John"}]], [[{"1": "apple", "2": "banana", "3": "cherry", "11": "pple"}, {"4": [10, 20, 30], "5": [40, "50", 60]}, [[1, 2, 3], [4, 5, 6]]]], [[{"name": "John", "age": 25}, {"age": 30}, {"name": "Bob", "age": 35}]], [[true, true, false, true, false, true, false]], [["chercry", "dattwo", "apple", "banana", "cherry", "date", "banana"]], [[1, "green", 1]], [[2, 1, "apple", 1, 1]], [[1, "apple", false, true, [1, 2, 3], {"a": 1, "b": 2}]], [[{"1": "apple", "2": "banana", "3": "cherry", "11": "pple"}, [[1, 2, 3]], {"4": [10, 20, 30], "5": [40, "50", 60]}, [[1, 2, 3]]]], [["dattwo", "apple", "banana", "cherry", "date", "banana"]], [[{"1": "apple", "2": "banana", "3": "cherry", "11": "pplJanee"}, {"4": [10, 20, 30], "5": [40, "50", 60]}, [[1, 2, 3], [4, 5, 6]]]], [[[[1, 2], [3]], [[4, 5], [6]], [[7, 8], [9]], [[4, 5], [6]]]], [[true, true, false, true, false, true, false, false]], [[[[], [], []], [[], [], []], [[], [], []]]], [[1, "green", 1, 1]], [[{"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob"}, {"name": "Bob"}]], [[[{"1": true, "2": false}, {"3": true, "4": true}], [{"1": true, "2": false}, {"3": true, "4": true}]]], [["apple", "banana", "ccherrry", "cherry", "ccherry", "date"]], [[[[1, 2, 3]]]], [[[{"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob", "age": 35}], [{"name": "Alice", "age": 28, "agge": "Aliredce"}, {"name": "Eve", "age": 22}], [{"name": "Alice", "age": 28, "agge": "Aliredce"}, {"name": "Eve", "age": 22}]]], [[[1, 2], [3, 4], [5, 6], [5, 6]]], [[[{"1": true, "2": false}, {"3": true, "4": true}], [{"1": true, "2": false}, {"3": true, "4": true}], [{"5": false, "6": false}, {"7": false, "8": false}]]], [[[], {"20": -27.237212019107332, "41": 7.3, "-10": 5.5, "9": 3.1, "96": 4.0, "25": 5.0}]], [[[[1, 2], [3]], [[1, 2], [3]], [[4, 5], [6]], [[7, 8], [9], [9]], [[7, 8], [9]]]], [[[{"1": false, "2": false}, {"1": false, "2": false}, {"3": true, "4": true}], [{"5": false, "6": false}, {"7": false}], [{"5": false, "6": false}, {"7": false}], [{"1": false, "2": false}, {"1": false, "2": false}, {"3": true, "4": true}], [{"1": false, "2": false}, {"1": false, "2": false}, {"3": true, "4": true}]]], [[[]]], [[[]]], [[[{"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob", "age": 35}], [{"name": "Alice", "age": 28, "agge": "Aliredce", "3": "c"}, {"name": "Alice", "age": 28, "agge": "Aliredce", "3": "c"}, {"name": "Eve", "age": 22}], [{"name": "Alice", "age": 28, "agge": "Aliredce", "3": "c"}, {"name": "Alice", "age": 28, "agge": "Aliredce", "3": "c"}, {"name": "Eve", "age": 22}], [{"name": "Alice", "age": 28, "agge": "Aliredce", "3": "c"}, {"name": "Alice", "age": 28, "agge": "Aliredce", "3": "c"}, {"name": "Eve", "age": 22}]]], [[[{"3": true}, {"3": true}], [{"3": true}, {"3": true}], [{"3": true}, {"3": true}], [{"3": true}, {"3": true}], [{"3": true}, {"3": true}]]], [[{"1": "one"}, {"2": "two"}, {"3": "three", "20": "Alice"}, {"3": "three", "20": "Alice"}]], [["banana", "ccherrry", "cherry", "ccherry", "date"]], [[{"name": "John", "age": 25}, {"name": "Jnane", "age": 30}, {"name": "Jnane", "age": 30}, {"name": "Bob", "age": 35}]], [[[[], [], []]]], [[[], {}, []]], [[[["b", "a"], ["c", "d"], ["b", "a"]], [1, 2, 3], [4, 5, 6, 5], [[[1], [2], [3]], [[4], [5], [6]]]]], [[[1, 2, 3], {"a": "apple", "b": "banana", "c": "cherry"}, [["red", "green", "blue"], ["purple", "yellow", "orange"]], [1, 2, 3]]], [[[{"3": true}], [{"3": true}], [{"3": true}], [{"3": true}], [{"3": true}]]], [[{"name": "3John", "age": 25}, {"age": 17}, {"age": 17}, {"age": 17}, {"name": "Bob", "age": 35}]], [[false, true, false, true, false, true, false]], [[[{"1": true, "2": false}, {"3": true, "4": true}], [{"1": true, "2": false}, {"3": true, "4": true}], [{"5": false, "6": false}, {"7": false, "8": false}], [{"1": true, "2": false}, {"3": true, "4": true}]]], [[1.5, "banana", [1, 2, 3], {"b": 2}, ["apple", "banana"]]], [[[{"1": false, "2": false}, {"1": false, "2": false}], [{"5": false, "6": false}, {"7": false}], [{"5": false, "6": false}, {"7": false}], [{"1": false, "2": false}, {"1": false, "2": false}], [{"1": false, "2": false}, {"1": false, "2": false}], [{"1": false, "2": false}, {"1": false, "2": false}], [{"5": false, "6": false}, {"7": false}]]], [[{"32": "P", "6": "3John", "96": "apple", "50": "oIZ", "9": "Alice", "-60": "Jane"}, [], {}]], [[[2, 3, 4, 4], {"name": "John"}]], [[2, 1, 1, 1]], [[[["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []], [["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []], [[], [], []]]], [["apple", "banana", "cherry", "cherry", "date"]], [["chercry", "dattwo", "apple", "banana", "cherry"]], [[[1, 2, "3", "3"], [], [1, 2, "3"], [93.91696605104102, 9.2, -41.18839790246442, 7.3], {"1": "one", "2": "two", "3": "three"}]], [[[["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []], [["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []], [[], [], []], [["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []]]], [[2, "green", 1, 1]], [[[[60, 1, 2], ["c", "b", "a"]], [["red", "green", "blue"], ["purple", "yellow", "orange"]], [[60, 1, 2], ["c", "b", "a"]], [[60, 1, 2], ["c", "b", "a"]]]], [[30, [3, false, 4], {}]], [[1, 1, "gnamereen", 1, 1, 1, 1, 1]], [[{"1": "one", "2": "two", "3": "tbhree", "25": "c"}, {"1": "one", "2": "two", "3": "tbhree", "25": "c"}, [], [1, 2, "3"], {"1": "one", "2": "two", "3": "tbhree", "25": "c"}]], [[[[1, 2, 3], [4, 5, 6], [8, 9, 7]], {"10": [10, 20, 30], "11": [40, 50, 60]}, [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]], [[[{"3": true}, {"3": true}], [{"3": true}, {"3": true}], [{"3": true}, {"3": true}], [{"3": true}, {"3": true}]]], [[1, "green", 1, 1, 1]], [[1.5, "banana", [1, 2, 3], {"b": 2}, ["apple", "banana"], {"b": 2}]], [[[[3.14, "banana"], ["c", "b", "a"]], [[3.14, "banana"], ["c", "b", "a"]]]], [[2, "green", 1, "Aliredce", 1, "Aliredce"]], [["chercry", "dattwo", "apple", "banana", "cherry", "cherry", "dattwo"]], [[[1, 1, 3], {"a": "apple", "b": "banana", "c": "cherry"}, [["red", "green", "blue"], ["purple", "yellow", "orange"]]]], [[1, "apple", false, true, [17, 1, 2, 3], [17, 1, 2, 3], {"a": 1, "b": 2}]], [[[{}], [{}], [{}], [{}], [{}], [{}]]], [[[{"1": true, "2": false}, {"3": true, "4": true}], [{"1": true, "2": false}, {"3": true, "4": true}], [{"7": false, "8": false}], [{"1": true, "2": false}, {"3": true, "4": true}]]], [[[true, 26, 8.278263346367723, "Jane", "XRuBLHNn", false, -80], []]], [[["tbhree", "vDRltNQ", "pplJanee", "cherry"], {}]], [[[{"1": false}, {"1": false}, {"1": false}, {"3": true, "4": true}], [{"5": false, "6": false}, {"7": false}], [{"5": false, "6": false}, {"7": false}], [{"1": false}, {"1": false}, {"1": false}, {"3": true, "4": true}], [{"1": false}, {"1": false}, {"1": false}, {"3": true, "4": true}]]], [[[["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []], [["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []], [[3.1, 93.91696605104102, -9.674549136974946, 9.2, 4.0, 1.5, -41.18839790246442, 11.974815865245986], [], [], []], [["d", "TdZQiyPXDo", "c", "two", "LYbdegAC", "m", "one", "Jane", "lOgg"], [], [], []]]], [[["green", "blue"], ["purple", "orange", "yellow"]]], [[[[1, 2], [3]], [[1, 2], [3]], [[4, 5], [6]], [[7, 8], [9], [9]], [[7, 8], [9]], [[1, 2], [3]]]], [[19, "green", 1, 1, 1]], [[[[], [], []], [[], []]]], [[{"name": "Bob"}, {"name": "John", "age": 25}, {"name": "Jane", "age": 30}, {"name": "Bob"}]], [["dattwo", "apple", "baapplenana", "cherry", "date"]], [[[[], [], [-74.25370956493562, -12.399945640410806, 8.278263346367723, -9.674549136974946, -89.51696270839595, 4.0, 6.4, -98.76694370423638, 5.0], []], [[], [], [-74.25370956493562, -12.399945640410806, 8.278263346367723, -9.674549136974946, -89.51696270839595, 4.0, 6.4, -98.76694370423638, 5.0], []], [[], [], [-74.25370956493562, -12.399945640410806, 8.278263346367723, -9.674549136974946, -89.51696270839595, 4.0, 6.4, -98.76694370423638, 5.0], []]]], [[[[], [], [], []], [[], []]]], [[[[4, 5, 6]], {"1": "apple", "2": "banana", "3": "cherry", "11": "pplJanee"}, {"4": [10, 20, 30], "5": [40, "50", 60]}, [[4, 5, 6]]]], [[{"1": "apple", "2": "banana", "3": "cherry", "11": "pple"}, [[1, 2, 3], [1, 2, 3], [1, 2, 3]], {"4": [10, 20, 30], "5": [40, "50", 60]}, [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]], [["dattwo", "apple", "banana", "d", "cherry", "date"]], [["apple", "apple"]], [[[["b", "a"], ["c", "d"]], [4, 5, 6], [[[1], [2], [3]], [[4], [5], [6]]]]], [[[1, 2, "3"]]], [[[2, 3, 4, 4, 2], [2, 3, 4, 4, 2], [2, 3, 4, 4, 2], [2, 3, 4, 4, 2]]], [["chercry", "dattwo", "applae", "banana", "cherry", "cherry", "dattwo"]], [[{"1": "one"}, {"2": "two"}, {"3": "three", "20": "Alice"}]], [[[[1, 2], [3]], [[1, 2], [3]], [[4, 5], [6]], [[7, 8], [9], [9]], [[7, 8], [9]], [[4, 5], [6]]]], [[[[60, 1, 2]], [[60, 1, 2]], [["red", "green", "blue"], ["purple", "yellow", "orange"]], [[60, 1, 2]], [[60, 1, 2]], [[60, 1, 2]]]], [["apple", [3, 4], {"name": "John"}]], [[[[1, 2], [3]], [[7, 8], [9], [9]], [[7, 8], [9]]]], [[1.5, "banana", [1, 2, 3], {"b": 2}, ["apple", "banana"], {"b": 2}, 1.5]], [[0, "apple"]]], "contract": "\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(test_tuple) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\n"}
{"task_id": "Mbpp/223", "prompt": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "entry_point": "is_majority", "canonical_solution": "\nfrom bisect import bisect_left, bisect_right\ndef is_majority(arr, n, x):\n\tif x not in arr:\n\t\treturn False\n\tl = bisect_left(arr, x)\n\tr = bisect_right(arr, x)\n\treturn r - l > n / 2\n", "base_input": [[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 2, 4, 4, 4, 6, 6], 8, 4], [[1, 1, 1, 2, 2], 5, 1]], "atol": 0, "plus_input": [[[], 0, 1], [[], 1, 0], [[], 1, 1], [[], 0, 0], [[], 0, -1], [[true], 1, 2], [[], 2, 0], [[], 2, -1], [[], 2, 2], [[], 1, 2], [[], 2, 1], [[], 0, 2], [[52], 2, 0], [[], 1, -1], [[52], 2, 2], [[], 3, 2], [[], 52, 2], [[], 53, 2], [[], 52, 1], [[], 52, 53], [[true], 2, 2], [[52], 3, 2], [[], 52, 52], [[], 53, 53], [[], 52, -1], [[], 3, 0], [[], 53, 3], [[], 52, 0], [[], 2, 53], [[52, 52], 3, 2], [[52, 52], 4, 2], [[52], 3, 0], [[], 4, 1], [[52, 52, 52], 52, 2], [[52, 52], 53, 53], [[52, 52, 52, 52], 52, 2], [[52, 52, 52], 53, 53], [[52], 2, 1], [[52, 52], 2, -1], [[], 52, 4], [[], 3, -1], [[52, 52], 52, 52], [[52], 53, 53], [[28.804254987535558], 3, 3], [[], 4, -1], [[], 3, 3], [[52, 52, 52], 52, 3], [[], 4, 4], [[53], 3, 3], [[], 4, 53], [[28.804254987535558], 53, 2], [[28.804254987535558], 4, 2], [[true], 52, 2], [[true], 53, 2], [[28.804254987535558], 4, 3], [[], 54, 53], [[25.39355163010451], 54, 3], [[true], 2, 1], [[], 2, 3], [[true], 2, 0], [[true], 54, 0], [[52, 52], 52, 53], [[52], 1, 4], [[], 54, -1], [[52, 52], 53, 2], [[53], 3, 2], [[], 54, 2], [[], 4, 2], [[25.39355163010451], 3, 3], [[], 3, 53], [[53], 4, 3], [[true], 2, 3], [[28.804254987535558, 28.804254987535558], 4, 3], [[true, true], 53, 52], [[], 53, 52], [[true, true], 4, 4], [[true, true], 3, 4], [[52], 1, 2], [[false, false, true], 52, 52], [[28.804254987535558, 28.804254987535558], 2, 4], [[52, 52, 52, 52], 52, 1], [[51, 52, 52], 52, 53], [[28.804254987535558], 5, 2], [[52, 52, 52, 52], 52, 0], [[], 3, 4], [[true], 52, 53], [[true, true, true], 53, 2], [[true, true, true], 4, 4], [[true, true], 54, 0], [[52, 52, 52], 51, 51], [[28.804254987535558, 28.804254987535558], 53, 2], [[true], 2, 4], [[23.860250214479723], 52, 2], [[28.804254987535558], 5, 1], [[true], 54, 4], [[52], 3, 3], [[28.804254987535558], 5, 3], [[28.804254987535558, 28.804254987535558], 53, 53], [[52, 52], 53, 54], [[52, 52], 52, 54], [[52], 4, 3]], "contract": "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in arr), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(a <= b for a, b in zip(arr[:n], arr[1:n])), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) <= n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n"}
{"task_id": "Mbpp/224", "prompt": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "entry_point": "count_Set_Bits", "canonical_solution": "\ndef count_Set_Bits(n): \n    return bin(n)[2:].count('1')\n", "base_input": [[2], [4], [6]], "atol": 0, "plus_input": [[999999999], [1000000000], [true], [false], [1000000001], [999999998], [67], [999999997], [999999996], [1000000002], [1000000003], [66], [999999995], [65], [999999994], [68], [69], [71], [72], [999999993], [1000000004], [1], [2], [73], [70], [64], [1000000005], [74], [98], [63], [0], [999999992], [1000000006], [3], [61], [62], [97], [999999991], [75], [4], [11], [95], [1000000007], [94], [93], [96], [92], [76], [12], [77], [9], [44], [13], [10], [1000000008], [14], [91], [78], [79], [59], [99], [80], [90], [999999990], [85], [60], [57], [1000000009], [58], [84], [100], [43], [101], [48], [6], [23], [1000000010], [56], [86], [55], [102], [5], [53], [46], [81], [47], [52], [49], [54], [83], [45], [16], [50], [30], [28], [82], [42], [33], [17], [31], [41], [51]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n"}
{"task_id": "Mbpp/226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "entry_point": "odd_values_string", "canonical_solution": "\ndef odd_values_string(str1):\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n", "base_input": [["abcdef"], ["python"], ["data"], ["lambs"]], "atol": 0, "plus_input": [[""], ["abcdefghijklmnopqrstuvwxyz"], ["bbbbbbbb"], ["abcdijklmnopqrstuvwxyz"], ["ZD"], ["ZZD"], ["abcdefghiZDjklmnopqrstuvwxyz"], ["babcdefghijklmnopqrstuvwxyzbbbbbbb"], ["bbbbbbbbb"], ["abcdefghbbbbbbbbbijklabcdijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklabcdijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdijkljmnopqrstuvwxyz"], ["bbbbbbbbbZZD"], ["abcdlefghijklmnopqrstuvwxyz"], ["abcdlmnopqrstuvwxyz"], ["babcdefghijklmnopqrstuvwxyzbbbbbbbb"], ["bbbbbbbbbbb"], ["abcdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdefghijkqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklabcdijklmnopqrbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqrstuvwxyz"], ["ZDZD"], ["DAxuCd"], ["abicdijklmnopqrstuvwxyz"], ["ababcdefghiZDjklmnopqrstuvwxyzcdefghbbbbbbbbbijklabcdijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdefghiZDjkelmnopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqrstuvwxyz"], ["abicdijklmnopqrwstuvwxyz"], ["babcdefghijklmnopqrsabcdlefghijklmnopqrstuvwxyz"], ["bbbb"], ["bbbbbbbabcdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyzbbZZD"], ["zz"], ["abcdefghijkqrstuvwxwyz"], ["ZDDZD"], ["xy"], ["abcdefghijkqrstuvwxyzbabcdefghijklmnopqrsabcdlefghijklmnopqrstuvwxyz"], ["abcdefghiZDjokelmnopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopyzmnopqrstuvwxy"], ["abcdlmnwxyz"], ["abcdlefghijklmnabcdefghijkqrstuvwxwyzopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklazbbbbbbbstuvwxyzmnopqrstuvwxyz"], ["xabcdijklmnopqrstuvwxmyz"], ["abcdefghabcdefghijkqrstuvwxyzbbbbbbbbbijpklabcdijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklabcdijklmnopqrstuvwxyzmnoZDpqrstuvwxyz"], ["ababcdefghbbbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopyzmnopqrstuvwxycdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqruvwxyz"], ["babcdbefghijklmnopqrszztuvwxyzbbbbbbbb"], ["abcdefghbbbbbbbbbiojpklabcdijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["abcdefghbbbbbbbbbijpkbabcdefghijklmnopqrstuvwxyzbbbbbbbblabcdijklmnopqbabcdbefghijklmnopqrszztuvwxyzbbbbbbbbrstuvwxyzmnopqrstuvwxyz"], ["zabicdijklmnopqrstuvwxyz"], ["bbbbbbbabcdbefghijklmnopqrszztuvwxyzbbbbbbbb"], ["babcdefghijklmnopqrstuabicdijklmnopqrstuvwxyzzbbbbbbb"], ["abcdefghbbbbbbbbbiqrabcdefghijklmnopqrstuvwxyzwxyz"], ["ababcdefghbubbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopyzmnopqrstuvwxycdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["babcdefbabcdefghijklmnopqrsabcdlefghijklmnopqrstuvwxyzghijklmnopqrstuvwuxyzbbbbbbbb"], ["bbababcdefghiZDjklmnopqrstuvwxyzcdefghbbbbbbbbbijklabcdijklmnopqrstuvwxyzmnopqrstuvwxyzbbbbbb"], ["ababcdeffghbubbbbbbbbijpklabbcdwijklmnopqrbabcdefghijklmnopyzmnopqrstuvwxycdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["babcdefghijklmnopqrstuvbbababcdefghiZDjklmnopqrstuvwxyzcdefghbbbbbbbbbijklabcdijklmnopqrstuvwxyzmnopqrstuvwxyzbbbbbbbbb"], ["abcdefghbbbbbbbbbijpklabbcdijklmnopqrbbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqruvwxyz"], ["abcdefghiZDjklmnopqrstuvabcdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyzwxyz"], ["abcdefghbbbbbbbbbijpklabcdijklmnopqrstuvwxyzmnoZDpqrstuvwxy"], ["abcdefghbbbbbbbbbijpkuvwxyz"], ["abcdefghiZDjklmnvopqrstuvabcdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyzwxyz"], ["ZZZD"], ["bbababcdefghiZDjklmnopqrstuvwxyzcdefghbbbbbbbbbijklabcdijklmnopqrstuvwxyzmnopqrstuvwxyzbbbbb"], ["zabicdijklmnopqrjstuvwxyz"], ["abcdefghbbbbbbbbbijpklabcdijkzmnoZDpqrstuvwxyz"], ["abcdlefghijklmnabcdefghijkqrstustuvwxyz"], ["abicdijklmnopqrstbabcdefghijklmnopqrstuvwxyzbbbbbbbbuvwxyz"], ["aibcdlefghijklabcdefghbbbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopyzmnopqrstuvwxymnopqrstuvwxyz"], ["abcdefghbbpbbbbbbbiojpklabcdijklmnopqrstuvwxyzmnopqrstuvwxyz"], ["bbababcdefghiZDjklmnopqrstuvwxyzcdefghbbbbbbbbbijklabcdijklmnopqrstuvwxy"], ["zabicdipqrstuvwxyz"], ["bbbbbbbabcdefghbbbbbbbbbijklabcbdmijklmnopqrstuvwxyzmnopqrstuvwxyzbbZZD"], ["babcdefghijklmnopqrsabcdmnopqrstuvwxyz"], ["abcdefghabcdefghijkqrstuvwxyzbbbbbbbbbijpklabcdijklmnopwqrstuvwxyzmnopqrstuvwxyz"], ["abicdijklmnabcdlefghijklmnabcdefghibjkqrstustuvwxyzopqrwstuvwxyz"], ["abicdipqrwstuvwxayz"], ["abcdefghbbbbbbbbbiqrabcdefghijklmnbopqrstuvwxyzwxyz"], ["abcdijklmnopqrstababcdefghiZDjklmnopqrstuvwxyzcdefghbbbbbbbbbbijklabcdijklmnopyqrstuvwxyzmnopqrstuvwxyzuvwxyz"], ["ZabcdefghbbbbbbbbbijpklabcdijklmnopqrbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqrstuvwxyzDZD"], ["bbbbbbbbbbbbbbbbbbb"], ["abcdefghijkrstuvwxwyz"], ["bbbDAxuCdbbbbbbZZD"], ["abicbabcdefghijklmnopqrstuvbbababcdefghiZDjklmnqrwstuvwxayz"], ["ZZDD"], ["abicdijklmnabcdlefghijklmjnabcdefghibjkqrstustuvwxyzopqrwstuvwxyz"], ["babcdefghijklmnopqrsabcdlefghijkmlmnopqrstuvwxyz"], ["uI"], ["zabicdipqabicdijklmnotuvwxyzrstuvwxyz"], ["jabcdefghbbbbbbbbbijpkuvwxyzZZZD"], ["abcdefghiZDjklmnopqrstuqvwxyz"], ["abicdijklmnabcdlefghijklmnabcdefghibjkqrvwxyzopqrwstuvwxyz"], ["babcdbefghijklmnopqrszztuvwxyzkbbbbbbbb"], ["abcdefghiZDjklmnopqrstuvabcdefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyizwxyz"], ["abcdefghbbbbbbbbbiqrabcdefghijklmnopqrabcdefghabcdefghijkqrstuvwxyzbbbbbbbbbijpklabcdijklmnopwqrstuvwxyzmnopqrstuvwxyzstuvwxyzwxyz"], ["aibcdlefghijklabcdefghbbbbbbbabcdefghbbbbbbbbbijpklabbcdijklmnopqrbbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqruvwxyzbbijpklabbcdijklmnopqrbabcdefghijklmnopyzmnopqrstuvwxymnopqrstuvwxyz"], ["babcdefghijklmnopqdrstuvwxyzbbbbbbb"], ["ZabcdefghbbxybbbbbbbijpkltabcdijklmnopqrbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqrstuvwxyzDZD"], ["babcdefbabcdefghijklmnopqrsabcdlefghijklmnopqrstuvwxyzlghijklmnopqrstuvwuxyzbbbbbbbb"], ["abcdefghiZDjklmnopqrstuvabcdabcdefghbbbbbbbbbijpklabbcdijklmnopqrbabcdefghijklmnopqrstuvwxyzbbbbbbbstuvwxyzmnopqruvwxyzefghbbbbbbbbbijklabcdmijklmnopqrstuvwxyzmnopqrstuvwxyizwxyz"], ["aZDbcdefghijkqrstuvwxyz"], ["abcdefghbbbbbbebbbijklabcdijklmnopqrstuvwxzabicdijklmnopqrstuvwxyzyzmnopqrstuvwxyz"], ["abcadijklmnopqrstuvwxyz"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'\n"}
{"task_id": "Mbpp/227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n", "entry_point": "min_of_three", "canonical_solution": "\ndef min_of_three(a,b,c): \n  return min(a, b, c)\n", "base_input": [[10, 20, 0], [19, 15, 18], [-10, -20, -30]], "atol": 0, "plus_input": [[1000000, 2000000, 3000000], [1000000000, 999999999, 999999998], [1.5, 2.5, 3.5], [-1.75, 0.25, 1.5], [10.75, -2.5, 5.25], [-1.3812949223956517, 0.25, 0.25], [1000000, 2000000, 2000000], [999999, 2000000, 2000000], [999999999, 2000000, 2000000], [0.20488397953788226, 0.25, 1.5], [1.5, 2.5, 3.3437604275080233], [0.25, 1.5, 0.25], [2000000, 1000000000, 3000000], [1000000000, 3000000, 1000000000], [0.25, 0.25, 0.25], [-1.75, 0.25, 0.25], [0.20488397953788226, 2.497409389352824, 3.3437604275080233], [0.17611024919184165, -1.75, 0.25], [999999, 1000000000, 3000000], [1.5, 10.75, 3.5], [3.7890029635472247, 2.5, 3.9317345052748065], [1.5, -1.3812949223956517, 3.3437604275080233], [0.25, 1.5, 1.5], [-2.5, 3.7890029635472247, 5.25], [-1.918312672054964, 0.25, 2.497409389352824], [-1.918312672054964, 0.25, 2.183076392319643], [0.17611024919184165, -1.75, -1.75], [2.5612669577905645, 2.7101763997809707, 2.497409389352824], [2.5, 3.9317345052748065, 3.9317345052748065], [1.5, 1.272867059860154, 1.5], [10.75, 3.006337625967327, 3.5], [-1.75, 10.75, -2.661664813980879], [-2.5, 3.7890029635472247, -2.5], [-1.1167380933821645, 10.75, -2.661664813980879], [999999998, 999999, 1000000001], [2.5, 10.75, 3.5], [1.5, 1.272867059860154, 0.7953338906861538], [-2.860283823066491, 3.7890029635472247, 0.20488397953788226], [2.5, 11.067988481984312, 10.75], [2.183076392319643, 10.75, 10.75], [-1.3322026502757378, 0.20321740000095526, 0.25], [0.20488397953788226, -1.3322026502757378, 3.3437604275080233], [0.25, 0.20321740000095526, 0.25], [2.542576612131854, 3.339994408063236, 2.497409389352824], [999999, 999999999, 999999998], [2000000, 1000000000, 999999999], [999999, 3000000, 1000000000], [1000001, 999999998, 2000000], [0.25, 2.497409389352824, 2.497409389352824], [0.23138836931395312, 1.5, 0.25], [1.5, -1.784944220031555, 3.3437604275080233], [-2.860283823066491, -1.1167380933821645, 0.2317946251259954], [-2.5, -1.75, -1.75], [0.20488397953788226, 3.3437604275080233, 3.3437604275080233], [0.2317946251259954, -1.784944220031555, 1.5], [1.5, 1.5, 1.7539550971097109], [0.2057319869888941, 1.5, 1.7159542385547792], [3000000, 999999998, 1000000000], [0.25, 0.16771769444791357, 0.25], [2.5, 2.005042027615088, 3.9317345052748065], [0.20488397953788226, 0.8948515726423616, 1.7321264212932135], [-3.0180377045824702, 3.7890029635472247, -2.5], [0.17611024919184165, -1.75, 0.2057319869888941], [0.7449345921902422, 2.655338717321931, 3.3437604275080233], [1000000000, 2000000, 999999998], [5.25, -1.1167380933821645, 10.75], [2.655338717321931, 3.3437604275080233, 3.3437604275080233], [-1.1167380933821645, 10.75, 3.006337625967327], [-1.918312672054964, 2.487800059617913, 2.497409389352824], [999999, 2000000, 3000000], [999999998, 1000001, 1000000001], [0.2178481359441579, 0.25, 0.25], [3.3437604275080233, 3.3437604275080233, 3.382112374954924], [999999999, 999999999, 999999998], [2000001, 1000000000, 1000000000], [0.25, 0.7822054945762149, 0.16771769444791357], [2000001, 1000001, 1000000000], [5.25, 3.3437604275080233, 3.382112374954924], [-2.860283823066491, 0.2317946251259954, -1.1167380933821645], [0.20488397953788226, 3.3437604275080233, 0.9749443969127325], [-2.5, 3.5054779127270486, -1.9832450617287465], [-3.684200358639524, 5.551432150054553, 10.75], [-2.419583301611894, 3.382112374954924, 2.5], [-2.5, 3.7890029635472247, -1.3322026502757378], [0.2057319869888941, 1.5, 3.5], [999999999, 999999997, 999999997], [-1.75, -1.75, -1.75], [2000000, 3000001, 3000000], [1.226646627958301, 3.3364402247615583, 2.487800059617913], [1.226646627958301, 2.487800059617913, 2.487800059617913], [3.9317345052748065, 1.272867059860154, 0.7953338906861538], [0.12182452942816296, 0.20488397953788226, 1.7321264212932135], [3.339994408063236, 0.2178481359441579, 1.272867059860154], [0.20488397953788226, 3.3437604275080233, -1.784944220031555], [3.477734585733067, 0.20488397953788226, 3.3437604275080233], [3.3437604275080233, 3.382112374954924, 3.382112374954924], [2000001, 1000000000, 3000000], [0.20488397953788226, 3.5, 0.20488397953788226], [0.17611024919184165, 2.5, 0.2178481359441579], [1.5, 10.75, 4.169373639575513], [-2.860283823066491, -3.1548052929478647, -2.249476681153046], [2.183076392319643, 2.5612669577905645, 3.382112374954924], [1.226646627958301, 2.487800059617913, 1.5], [2.487800059617913, 1.5, 2.487800059617913], [0.20488397953788226, 3.3437604275080233, 0.45168629516729597]], "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n"}
{"task_id": "Mbpp/229", "prompt": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n", "entry_point": "re_arrange_array", "canonical_solution": "\ndef re_arrange_array(arr, n):\n  negatives = [x for x in arr[:n] if x < 0]\n  positives = [x for x in arr[:n] if x >= 0]\n  return negatives + positives + arr[n:]\n", "base_input": [[[-1, 2, -3, 4, 5, 6, -7, 8, 9], 9], [[12, -14, -26, 13, 15], 5], [[10, 24, 36, -42, -39, -78, 85], 7]], "atol": 0, "plus_input": [[[], 0], [[-3, -5, -2, -1, -4], 5], [[-10, -5, -2, -7], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9], [[0, 0, 0, 0, 0, 0, 0, 0, 0], 9], [[10, -5, -2, 7, 0, 0, 0, -10, -5], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 5], [[-1, -2, -3, -4, -5, -6, -7, -8, -9], 9], [[1, 2, -3, 4, -5, 6, -7, 8, -9], 9], [[10, -5, -2, 0, 7, 0, 0, 0, -10, -5], 3], [[-3, -6, -5, -2, -1, -4], 0], [[1, -7, 3, 4, 5, 6, 7, 8, 9], 9], [[10, -5, -2, 0, 7, 0, 0, -10, -5], 2], [[1, 2, -3, 4, -5, 6, -7, 8, -9, 4], 9], [[-3, 4, -5, -2, -1, -4], 0], [[1, 2, 3, -5, 5, 6, 7, 8, 9], 5], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5], 2], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5], 1], [[10, -5, -2, 0, 7, 0, 0, 0, -10, -2, -5], 3], [[-5, -2, 0, 10, 7, 0, 0, -10, -5, 10], 1], [[1, -7, 3, 5, 5, 6, 7, 8, 9], 0], [[10, -5, -2, -10, 0, 10, 7, 0, 0, -10, -5], 2], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5, -5], 1], [[1, -7, 3, 4, 5, 6, 7, 8, 9], 4], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5], 7], [[1, 2, -3, 4, -5, 6, -7, 8, -9, 4], 3], [[10, -7, -2, 0, 10, 7, 0, 0, -10, -5], 2], [[1, -7, 3, 5, 6, 7, 8, 9], 4], [[1, 2, 3, 4, 5, 6, 7, 8, -4, 9], 6], [[1, 2, -4, 4, 5, 6, 7, 8, 1, -4, 9], 5], [[1, 2, 3, 4, 5, 6, 7, 8, -4, 9], 5], [[1, 2, 3, -5, 5, 0, 6, 7, 8, 9], 5], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5, -5], 2], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5, -5, 0], 1], [[10, -5, -2, -10, 0, 10, 7, 0, 0, -10, -5], 3], [[-3, -6, -5, -2, -1, -4], 3], [[1, 2, -3, 4, -5, 10, 6, -7, 8, -9, 4], 3], [[10, -4, -5, -2, -1, 0, 10, 7, 0, 0, -10, -5], 1], [[1, 2, 6, 4, -5, 6, -7, 8, -9, 4], 9], [[1, -7, 3, 5, 5, 6, 7, 8, 9], 9], [[10, -5, -2, 0, 7, 0, 0, -10, -5], 1], [[1, 2, 1, -3, 4, -5, 6, -7, 8, 4], 3], [[1, 2, -3, 4, -5, 6, -7, 8, -9, 4, -5], 9], [[-3, -5, -2, -1, -4], 2], [[10, -4, -5, 6, -1, 0, 10, 7, 0, 0, -10, -5], 1], [[10, -7, -2, 0, 10, 7, 0, 0, -10, -5], 1], [[-3, 4, -5, -2, -1, -4, 4], 0], [[-3, -9, -2, -1, -4], 4], [[10, -5, -2, 0, 10, 7, 0, -10, -5, 0], 0], [[0, -7, 3, 4, 5, 10, 6, 7, 8, 9], 9], [[-3, 4, -5, -2, -1, -4], 4], [[-3, -6, -5, -2, -1, -4, -6], 3], [[1, 2, 6, 4, -5, 6, -7, 8, -9, 4], 10], [[10, -5, -2, 0, 7, 0, 0, -10, -5, -10], 2], [[-3, 4, -5, -2, -1, -4, 4], 1], [[1, -7, 3, 5, 5, 6, 7, 8, 9], 8], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 6], [[10, -4, -5, -2, -1, 0, 10, 7, 0, 0, -10, -5], 2], [[-1, -2, -3, -4, -5, -6, -7, -8, -9], 8], [[-3, -5, 4, -5, -2, -1, -4], 0], [[1, -7, 3, 5, 5, 6, 7, 8, -9, 3], 0], [[1, -3, 4, -5, 10, 6, -7, 8, 11, 7, -9, 4], 3], [[1, 2, 6, 4, -5, 6, -7, 0, 8, -9, 4, -7], 9], [[1, -7, 3, 5, 5, 6, 7, 8, 9], 2], [[1, -3, 4, -5, 10, 6, -7, 11, 7, -9, 4], 3], [[10, -5, 0, 7, 0, 0, -10, -5, -10], 2], [[1, 2, -3, 4, -5, 6, -7, 8, -3, -9], 9], [[-3, 4, -5, -2, -1, -4], 1], [[1, 2, 10, 4, -5, 6, -7, 0, 8, -9, 4, -7], 10], [[10, -7, -2, 0, 10, 7, 0, 0, -10, -5, 7], 2], [[1, 2, -4, 4, 5, 6, 7, 8, 1, 9, -4], 5], [[1, 2, 6, 6, 4, -5, 6, -7, 8, -9, 4], 10], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5, 0], 6], [[-3, -5, 2, -2, -1, -4, -5], 5], [[1, 2, 3, -5, 1, 5, 6, 7, 8, 9], 5], [[10, -7, -2, 0, 10, 7, 0, 0, -10, -5], 8], [[4, 1, -7, 3, 4, 5, 6, 7, 8, 9], 4], [[-3, -5, 4, -5, -2, -1, -4, 4], 1], [[1, 2, -3, 4, -9, -5, 6, -7, 8, 9, -9, -9], 9], [[1, 2, 6, 6, 4, -5, 6, -7, 8, -9], 10], [[1, 2, 3, 4, 5, 6, 7, 8, -5, 9], 6], [[10, -5, -2, 7, 0, 0, 0, -10, 4, -5], 9], [[-5, -2, 0, 10, 7, 0, -1, -10, -5, 10, -5, -5], 1], [[10, -5, -2, 0, -5, 7, 0, 0, -10, -5], 1], [[1, -7, 3, 5, 6, 7, 8, 9, -7], 5], [[1, 2, -4, 4, 5, 6, 0, 8, 1, -4, 9], 6], [[-4, 10, -5, -2, 0, -5, 7, 0, 0, -10, -5], 1], [[10, -7, -2, 0, -3, 10, 7, 0, 0, -10, -5], 2], [[1, 2, -3, 4, -5, 6, -7, 8, 9, -9, -9], 9], [[1, 2, -3, 4, -5, 9, 6, -7, 8, -3, -3, -9], 9], [[10, -5, -2, 3, 10, 7, 0, 0, -10, -5, 0], 6], [[1, 2, 10, 4, -5, 6, -7, 0, 8, -9, 4, -7], 6], [[-5, -2, 0, 10, 7, -3, 0, 0, -10, -5, 10], 1], [[-3, 4, -5, -5, -2, -1, -4], 1], [[-3, 2, -2, -1, -4, -5], 5], [[10, -5, -2, 0, 0, 0, 0, -10, -5], 3], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 9], [[10, -5, -2, 0, 10, 9, 0, -10, -5, 0], 0], [[10, -5, -2, 0, 10, 7, 0, 0, -10, -5], 0], [[-5, -2, 0, 5, 10, 7, 0, 0, -10, -5, 10], 1], [[-3, 4, -5, -2, -1, -4, -3], 1], [[10, -4, -5, -2, 0, 10, 7, 0, 0, -10, -5], 2], [[1, 2, -3, 4, -5, 6, -7, 8, -9, 4], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 3], 9], [[10, -5, -2, 7, 11, 0, 0, -10, -5], 2], [[1, 2, -3, 4, -5, 10, 6, -7, 8, -8, 4], 4], [[10, -5, -2, 7, 11, 0, 0, -10, -5], 7], [[-3, -4, 2, -2, -1, -4, -5, -5], 5], [[1, 2, -3, 4, -5, 6, -7, 8, -9, 4, -9], 3]], "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 2, 4, 5, 6, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n"}
{"task_id": "Mbpp/230", "prompt": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n", "entry_point": "replace_blank", "canonical_solution": "\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)\n", "base_input": [["hello people", "@"], ["python program language", "$"], ["blank space", "-"]], "atol": 0, "plus_input": [["pythonprogramlanguage", "$"], ["    ", "*"], ["a_A_b", "!"], ["Testing one, two, three!", " "], ["pythonprogTesting one, two, three!ramlanguage", "$"], ["pythonprogramlanguage", " "], ["pytho!nprogramlanguage", "$"], ["pythonprogTesting one, two, three!ramlanguage ", " "], ["pythonprogTesting one, two, three!ramlanguage", " "], ["$", "$"], ["pythonprogTest *   a_A_b", " "], ["pythonprogTpythonprogTesting one, two, three!ramlanguageramlanguage", "!"], ["pythonprogramlanguage ", " "], ["pythonprogTest *   a_A_b ", " "], ["pytoho!nprogramlanguage", "$"], ["pythonprtwo,oggramlanguage", " "], ["pythonprogTst *   a_A_b ", "$"], [" ", " "], ["!!", "!"], ["a_A_b", "$"], ["pythonprtwo,oggramnguage", " "], ["pythonprogTst *    a_A_b ", "$"], ["pythonprogTst *    a_A_b  ", " "], ["     ", "*"], ["  ", " "], [" pythonprogTest ", " "], ["!", "!"], ["pythonprtwo,oggramngupytho!nprogramlanguageage", " "], ["pypythonprtwo,oggramngupytho!nprogramlanguageagethonprogTest *   a_A_b", " "], ["pytho!nprogramlanguagpe", "$"], ["three!", "$"], ["ppythonprtwo,oggramlanguagee", " "], ["p ytho!nprogramlanguage", "*"], ["Testing one, two, three!", "p"], ["pytho!nprogramlanguag  ", "!"], ["!  !", "!"], ["pythonprogTpythonprogTesting one, two, three!ramlanguageramlanguage", " "], ["p!", "!"], ["   ", " "], ["!!", " "], ["pytho!nprogramlangnuage", "$"], ["pythonprogTest *   a_A", " "], ["pythonprogTsto *    a_A_b  ", " "], ["a_A_a_A", "$"], ["*", "*"], ["pythonprogramlanguag$e", " "], ["pytho!nprogramlanguag  !", "!"], ["pythor!nprogramlanguage", "*"], ["pytho!nprogramlanguage", "!"], ["pythonprogTst *  h  a_A_b  ", " "], ["pytho!nprpythonprogTstoogramlanguage", "$"], ["pytho!nprogramlanguag", " "], ["h$$", "$"], ["   ", "!"], ["p", " "], ["pngupytho!nprogramlanguageage", " "], ["ppythonprtwo,oggramlanguagee", "p"], ["pythonprogramlanguag$e", "$"], ["h$", "$"], [" pythonprogTest ", "!"], ["pythonprogmlanguag$e", " "], ["$", " "], ["pythonprogTsto *    a_A_b  ", "!"], ["!!pythonprogramlanguag$e", " "], ["pythonprogramlanguagee ", " "], ["pytoho!nprogramlanguage", "!"], ["Testing one, two, three!pythonprogTst *    a_A_b  !", "!"], ["pythonprogTesting one, two, three!ramlapytho!nprogramlangnuagenguage ", " "], ["pytoho!nprogramlangua ge", "!"], ["pythonprogmlpythonprogTstuag$e", " "], ["pythonprogramlanguagee $", "$"], ["ppythonprpytho!nprogramlanguag  two,oggramlanguagee", " "], ["!pythonprogTst *    a_A_b  !pythonprogramlanguag$e", "!"], ["pythonprogTpythonprogTesting one, two, three!ramlanguageramlangpythonprogTest *   a_A_b ge", " "], ["p ytho!nprogramlanguae", "*"], ["pytho!nprogramlaanguag  ", "!"], ["!pythonprogramlanguag$e*", "*"], ["two,", "*"], ["h$", " "], ["ttwo,", "*"], ["pythonprtwo,oggramngupypytho!nprogramlangnuagetho!nprogramlanguageage", " "], ["ppythonprtwo,oggramlanguagee$$", " "], ["pythothree!ramlapytho!nprogramlangnuagenguage!nprogramlanguage", "$"], ["", " "], ["*", " "], ["pythonprtwo,oggramlanguage!", "!"], ["pythonprogTesting one, twoe, three!ramlapytho!nprogramlangnuagenguage ", " "], ["pytho!nprogramlangp ytho!nprogramlanguaenuage", "$"], ["pytho!nprogramlanguaggpe", " "], ["pytthor!nprogramlanguage", "*"], ["pypythonprtwo,oggramngupytho!nprogramlanguageagethonprogTest *   a_A_b", "$"], ["pypythonprtwo,oggramngupytho!nprogramlangguageagethonprogTest", " "], ["$$", "$"], ["pytho!nprogramlanguag  !", " "], ["p", "$"], ["pythothree!ramlapytho!nprogramlangnuagenguage!nprogramlanguaage", "$"], ["hh$", "$"], ["pytoho!nprogramlangpythonprogTstua ge", "!"], [" pythonprogramlanguage ", " "], ["p", "p"], ["pythonprogTesting one$$, two, three!ramlanguage", "$"], ["pythothreae!ramlapytho!nprogramlangnuagenguage!nprogramlanguaage", "$"], ["pytho!nprogramlaanguag  ", " "], ["pythonprogramlanguagee ", "p"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n"}
{"task_id": "Mbpp/232", "prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n", "entry_point": "larg_nnum", "canonical_solution": "\nimport heapq\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n,list1)\n", "base_input": [[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2], [[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5], [[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3]], "atol": 0, "plus_input": [[[1, 5, 3, 8, 7, 2, 6, 4, 9], 4], [[3, 2, 1], 2], [[], 0], [[5, 95, 81, -20, 8, 72, 0], 0], [[1, 5, 4, 3, 8, 7, 2, 6, 4, 9], 4], [[1, 5, 3, 8, 7, 2, 6, 4], 4], [[4, 5, 3, 8, 7, 2, 6, 4], 4], [[4, 5, 3, 8, 5, 2, 6, 4], 4], [[1, 5, 3, 8, 7, 2, 6, 4, 9], 5], [[1, 5, 5, 8, 7, 2, 6, 4, 9], 5], [[8, 1, 5, 3, 8, 7, 2, 6, 4], 3], [[1, 6, 3, 7, 8, 7, 2, 6, 6, 4, 9], 4], [[1, 4, 3, 8, 7, 2, 6, 4, 9], 4], [[8, 2, 1], 2], [[4, 5, 3, 8, 7, 2, 6, 4], 3], [[1, 5, 3, 8, 7, 2, 6, 4, 9], 1], [[2, 1], 2], [[1, 5, 3, 8, 7, 2, 6, 4, 9], 3], [[1, 4, 3, 8, 7, 2, 6, 4, 9], 3], [[7, 5, 3, 8, 7, 2, 6, 4, 9], 4], [[1, 5, 3, 8, 7, 2, 6, 4, 9, 1], 5], [[4, 5, 3, 8, 8, 2, 6, 4], 3], [[1, 5, 3, 8, 7, 2, 6, 9], 3], [[4, 5, 3, 8, 7, 2, 6, 4], 8], [[1, 6, 7, 8, 7, 2, 6, 6, 4, 9], 4], [[1, 5, 3, 8, 7, 2, 6, 9], 4], [[3, 5, 3, 8, 8, 2, 6, 4], 3], [[1, 5, 3, 8, 7, 2, 6, 4, 9, 1], 6], [[6, 3, 7, 8, 7, 2, 6, 6, 4, 9, 8], 3], [[6, 3, 7, 8, 7, 2, 6, 4, 9, 8], 3], [[1, 5, 3, 8, 7, 2, 6, 9], 2], [[8, 1, 5, 8, 7, 2, 6, 4], 3], [[4, 5, 3, 8, 8, 2, 6, 4], 4], [[1, 5, 3, 8, 7, 2, 6, 4, 9], 0], [[1, 5, 4, 3, 8, 7, 2, 6, 7, 9], 4], [[true, false, false, true, false, false, false, true, true], 0], [[1, 5, 5, 9, 8, 7, 2, 6, 4, 9], 5], [[1, 5, 3, 8, 7, 6, 4], 4], [[1, 6, 3, 7, 8, 7, 2, 6, 6, 4, 9], 7], [[1, 6, 3, 7, 8, 7, 2, 6, 6, 4, 9], 9], [[4, 5, 3, 8, 5, 2, 6, 4], 8], [[1, 5, 3, 8, 7, 2, 6, 4, 10], 5], [[1, 5, 3, 8, 7, 4, 6, 4], 4], [[1, 6, 3, 7, 8, 7, 2, 6, 4, 9], 7], [[1, 5, 3, 8, 7, 2, 6, 4, 9, 1], 0], [[1, 5, 3, 8, 1, 4, 6, 4], 4], [[8, 1, 5, 8, 7, 2, 4], 3], [[3, 5, 3, 8, 8, 2, 6, 4, 2], 9], [[1, 4, 3, 8, 7, 2, 6, 4, 9], 7], [[1, 5, 3, 8, 7, 2, 6, 9, 9], 4], [[1, 5, 3, 8, 7, 2, 6, 9, 9], 5], [[1, 6, 3, 7, 8, 7, 2, 6, 6, 4, 9], 3], [[1, 5, 8, 7, 2, 6, 4, 9], 3], [[1, 5, 3, 8, 2, 6, 4, 9], 0], [[6, 3, 7, 8, 7, 6, 4, 9, 8], 3], [[1, 6, 3, 7, 8, 7, 2, 95, 6, 4, 9], 5], [[1, 5, 3, 8, 7, 2, 6, 4, 9, 7], 5], [[1, 3, 8, 7, 2, 7, 4, 9], 4], [[7, 2, 1], 2], [[1, 1, 2, 3, 8, 7, 2, 6, 9, 7], 6], [[1, 5, 3, 8, 7, 2, 6, 4, 95, 9, 7], 5], [[3, 5, 3, 8, 8, 2, 6, 4], 2], [[1, 5, 3, 8, 7, 2, 6, 5, 95, 9, 7], 10], [[1, 4, 8, 7, 2, 6, 4, 9], 8], [[3, 1, 5, 3, 8, 7, 2, 6, 4, 9], 5], [[1, 5, 3, 8, 7, 2, 6, 9, 9], 3], [[1, 5, 3, 8, 2, 6, 9, 9], 4], [[1, 1, 3, 8, 7, 2, 6, 4, 9, 1], 5], [[1, 1, 3, 8, 7, 2, 4, 9, 1], 5], [[8, 1, 5, 8, 7, 2, 6, 4], 2], [[1, 6, 3, 7, 8, 7, 2, 6, 4, 9], 8], [[4, 5, 3, 8, 7, 2, -20, 7, 4], 8], [[3, 72, 2, 1], 2], [[7, 7, 1], 2], [[5, 96, 81, -20, 8, 6], 0], [[1, 1, 2, 3, 8, 7, 2, 6, 9, 7], 9], [[1, 3, 8, 7, 2, 6, 4, 95, 9, 7], 5], [[1, 3, 8, 7, 2, 6, 95, 9, 7], 5], [[1, 5, 4, 3, 8, 7, 10, 2, 6, 7, 9], 4], [[1, 5, 5, 9, 8, 7, 2, 6, 4, 9], 3], [[3, 1, 5, 3, 8, 7, 2, 6, 4, 9], 6], [[1, 5, 3, 8, 7, 2, 6, 5, 95, 9, 7], 5], [[4, 5, 3, 8, 8, 2, 6, 4], 1], [[1, 1, 2, 3, 8, 7, 2, 6, 9, 7, 3], 6], [[1, 5, 3, 8, 7, 4], 3], [[1, 5, 5, 9, 8, 8, 7, 2, 6, 4, 9], 4], [[1, 1, 6, 3, 7, 8, 7, 2, 6, 6, 4, 9], 9], [[true, false, false, true, false, false, false, true, true], 6], [[4, 5, 3, 8, 7, 2, 6, 4], 1], [[1, 8, 7, 2, 6, 4, 9], 4], [[1, 5, 4, 3, 8, 7, 10, 2, 6, 7, 9, 9], 4], [[3, 5, 3, 8, 8, 2, 6, 4], 6], [[3, 5, 3, 8, 8, 2, 6, 4], 7], [[1, 4, 0, 8, 7, 2, 6, 4, 9], 4], [[1, 5, 3, 8, 7, 2, 6, 4, 9, 7], 3], [[1, 5, 3, 8, 4, 7, 2, 6, 4, 9], 0], [[1, 1, 6, 3, 7, 8, 7, 2, 6, 6, 4, 9], 3], [[1, 5, 3, 8, 7, 4, 5], 6], [[1, 5, 3, 8, 7, 2, 6, 4, 9, 1, 6], 5], [[1, 5, 3, 8, 5, 7, 4], 3], [[1, 5, 3, 8, 7, 2, 6, 4, 95, 9, 1, 7], 5], [[1, 5, 5, 9, 8, 8, 7, 2, 6, 95, 9], 4], [[1, 5, 5, 9, 8, 8, 7, 2, 6, 4, 9], 3]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n"}
{"task_id": "Mbpp/233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n", "entry_point": "lateralsuface_cylinder", "canonical_solution": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  return 2 * math.pi * r * h\n", "base_input": [[10, 5], [4, 5], [4, 10]], "atol": 0.0001, "plus_input": [[0.5, 5], [0.7027468654940519, 0.5], [0.7335291819198695, 0.7335291819198695], [0.5, 0.5], [4, 0.5], [0.7027468654940519, 0.5661462978153864], [0.7027468654940519, 5], [0.5, 4], [0.492181629811239, 0.492181629811239], [4, 5], [0.5, 0.28069556559376435], [0.7213641388816401, 0.5], [5, 5], [0.31110334517211913, 5], [4, 6], [0.9167131745198713, 0.5661462978153864], [0.9167131745198713, 0.7213641388816401], [0.31110334517211913, 0.5], [0.894771544934736, 0.6584073971476168], [0.5, 6], [0.5, 0.5661462978153864], [0.5661462978153864, 0.894771544934736], [0.5, 0.7335291819198695], [0.7335291819198695, 0.5], [6, 5], [5, 4], [0.9167131745198713, 0.492181629811239], [0.492181629811239, 0.5661462978153864], [0.7335291819198695, 4], [0.7027468654940519, 1.2069759206398682], [0.682671724053624, 0.492181629811239], [0.6584073971476168, true], [4, 98], [0.6012317221228634, 0.7335291819198695], [1.0522681221757273, 0.7335291819198695], [4, 4], [0.28069556559376435, 0.5316974012629883], [1.2069759206398682, 0.5661462978153864], [0.6012317221228634, 0.5661462978153864], [0.7213641388816401, 0.7213641388816401], [0.9167131745198713, 4], [1.9431531904128063, 1.2069759206398682], [5, 0.5], [true, true], [0.8450165089801128, 0.492181629811239], [0.39584711221219915, 0.492181629811239], [6, 6], [0.5661462978153864, 0.492181629811239], [0.5, true], [0.7335291819198695, 0.9167131745198713], [true, 5], [0.31110334517211913, 0.7335291819198695], [0.25319882598470783, 0.7335291819198695], [0.894771544934736, 0.894771544934736], [0.9167131745198713, 0.894771544934736], [0.39584711221219915, 1.3528960048460803], [0.7993772590469483, 0.6012317221228634], [0.6584073971476168, 0.894771544934736], [0.7134218290804064, 0.25319882598470783], [5, 0.4826503239931337], [0.31110334517211913, 0.31110334517211913], [1.9431531904128063, 1.9431531904128063], [1.2069759206398682, 0.492181629811239], [0.9167131745198713, 0.9167131745198713], [4, 3], [0.5316974012629883, 1.2069759206398682], [0.4826503239931337, 0.5], [3, 3], [0.5316974012629883, 0.5316974012629883], [0.5661462978153864, 3], [0.7027468654940519, 0.7134218290804064], [0.7027468654940519, 0.5314253015161418], [0.6066623230028867, 0.492181629811239], [0.9861962005378273, 0.28069556559376435], [5, 6], [0.714370838265556, 0.7335291819198695], [0.7335291819198695, 6], [0.894771544934736, 0.5], [0.4559293649982712, 0.714370838265556], [1.2069759206398682, 1.2069759206398682], [0.6584073971476168, 0.6584073971476168], [0.4559293649982712, 1.197600099889013], [0.5661462978153864, 0.5], [0.4559293649982712, 0.25319882598470783], [1.4678677501506512, 1.4678677501506512], [0.31110334517211913, 0.2989266998025376], [0.894771544934736, 0.34716723618756606], [0.2989266998025376, 1.9431531904128063], [0.39584711221219915, 0.39584711221219915], [0.28069556559376435, 0.25527358064266886], [1.3528960048460803, 0.7027468654940519], [0.492181629811239, 0.5316974012629883], [0.5, 0.682671724053624], [1.9431531904128063, 0.7027468654940519], [0.7213641388816401, 0.3245051312142714], [0.24333546688495555, 0.4826503239931337], [0.5, 0.7213641388816401], [1.3528960048460803, 0.714370838265556], [0.25527358064266886, 2], [0.4559293649982712, 0.9861962005378273], [1.2069759206398682, 0.947064480762244]], "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n"}
{"task_id": "Mbpp/234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n", "entry_point": "volume_cube", "canonical_solution": "\ndef volume_cube(l):\n  return l ** 3\n", "base_input": [[3], [2], [5]], "atol": 0, "plus_input": [[2.5], [1.768116407397588], [1.5330053387267233], [1.9409769466405233], [1.0356135456814313], [1.037763337581918], [1.028168921286162], [2.7426133283647474], [1.765616780512917], [3.9316946516263895], [0.9973720595122996], [2.500545981587986], [1.5471918358270063], [1.8932750500326467], [1.3384468899118565], [0.7724375366243361], [3.1594535359035825], [1.3824667962587152], [2.7470452952934243], [0.9156953778182462], [34], [3.819138685765539], [1.4852904495738046], [0.23333006553317204], [1.4833943990344491], [1.5762124498957681], [2.1453705140814767], [2.0656643626262605], [1.998117239983417], [0.7317945310911964], [0.7070489633316177], [1.5058980780463802], [0.6138472691338149], [1.886424605194764], [0.08168965641450154], [0.18480474894634202], [1.366617929835222], [1.6299804234811697], [0.26349775076805804], [0.1547548264158745], [1.4522052790699127], [1.352441827883809], [0.38606015130413257], [1.7757473200891363], [0.614856877384917], [1.092355188478646], [0.3278779481525271], [1.2118163861770028], [1.749229601188382], [0.7956349837789919], [3.058711440212882], [1.4631345109269929], [1.1100051438831426], [2.0112906528412884], [1.768699928888167], [3.328031163589532], [1.2766431508113951], [1.4012381668068086], [2.0974957803273613], [1.7965130249661876], [0.0013239186479343523], [true], [4.251410459943179], [0.8009116513441019], [29], [0.7710089491068963], [2.5816025535251335], [3.0782604418271386], [0.03179620192173771], [0.8071981441876176], [0.7514475069968345], [0.8414426924543517], [1.569979981693539], [1.5211274206864358], [1.8099459378857916], [0.0017356944757310683], [0.3907431982365772], [0.7382628147228494], [0.9555707899605295], [2.725023494814321], [4.283520965958573], [1.51773208972581], [2.1318839221754122], [3.6634136940364126], [3.0123612083786675], [2.356275015399078], [2.1281846741167216], [0.797257273379254], [3.473310475795803], [1.7076616217920995], [0.25816778679886393], [3.8940301896154903], [3.6099763184907694], [0.781946355279999], [2.9534714352068647], [77.01634556267851], [77.21550881078151], [0.0013626847553614187], [3.522566373363042], [0.3181745290034501], [0.6136495769697746]], "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125\n"}
{"task_id": "Mbpp/235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "entry_point": "even_bit_set_number", "canonical_solution": "\ndef even_bit_set_number(n): \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n", "base_input": [[10], [20], [30]], "atol": 0, "plus_input": [[999999999], [1000000000], [1000000001], [false], [true], [1000000002], [999999998], [49], [48], [1000000003], [999999997], [1000000004], [50], [999999996], [1000000005], [999999995], [58], [57], [59], [47], [51], [44], [46], [52], [53], [43], [89], [42], [60], [90], [1000000006], [45], [61], [91], [1000000007], [999999994], [62], [92], [41], [1000000008], [54], [56], [93], [1000000009], [94], [82], [95], [55], [96], [88], [81], [999999993], [63], [80], [1000000010], [97], [83], [40], [1000000011], [999999992], [24], [99], [23], [39], [22], [84], [999999991], [98], [66], [25], [87], [20], [85], [86], [67], [19], [68], [79], [999999990], [64], [1000000012], [69], [70], [78], [26], [72], [999999989], [21], [38], [71], [999999988], [37], [999999987], [73], [65], [28], [1000000013], [36], [18], [1000000014], [15], [27]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n"}
{"task_id": "Mbpp/237", "prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n", "entry_point": "check_occurences", "canonical_solution": "\nfrom collections import Counter \ndef check_occurences(test_list):\n  return dict(Counter(tuple(sorted(t)) for t in test_list))\n", "base_input": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]], [[[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]], [[[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]]], "atol": 0, "plus_input": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]], [[[1], [2, 3], [4, 5, 6], [7, 8], [9], [1], [2, 3]]], [[[1, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9]]], [[]], [[[1, 2], [2, 1]]], [[[1, 2], [2, 1], [1, 2]]], [[[1, 2], [2, 1], [1, 2], [2, 1]]], [[[1, 2], [2, 1], [1, 2], [2, 1], [1, 3]]], [[[1, 2, 3], [2, 1, 3], [1, 2, 3]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [1, 2]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1, 2], [2, 1]]], [[[1, 2], [1], [2, 1], [8, 1, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [1, 2], [1, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [1], [1, 2], [1, 2]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [1, 2], [1, 2, 3, 4]]], [[[2, 1], [1, 2], [2, 1], [1, 2]]], [[[3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [1, 1], [1, 2], [1, 2]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [1, 2, 3, 4]]], [[[1, 2], [2, 4, 1]]], [[[1, 2], [2], [2, 1], [8, 1, 2]]], [[[5, 5], [3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2]]], [[[1, 2, 3], [2, 1, 3, 3], [2, 1, 3], [1, 2, 3]]], [[[1, 2], [2, 1], [1, 2], [2, 1], [1, 3], [1, 2]]], [[[1, 2], [2], [0, 2], [2, 1], [8, 1, 2]]], [[[5, 5], [3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [6, 7, 8, 9], [3, 2]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1], [2, 1], [2, 1]]], [[[1, 2]]], [[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3], [1, 3], [2, 2]]], [[[1, 2], [2], [0, 2], [2, 1], [8, 1, 7, 2], [2]]], [[[1, 2], [2, 1], [1, 3, 2], [1], [0, 2], [1, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [1], [0, 2], [1, 2], [1]]], [[[1, 2], [2, 8, 1]]], [[[1, 2], [2, 1], [2, 1, 1], [1, 3], [2, 1]]], [[[1, 2], [2, 8, 1, 8]]], [[[1, 2], [1, 2, 3], [2, 1, 3], [1, 2, 3]]], [[[2, 1], [1], [1, 2], [2, 1], [1, 2]]], [[[2, 2], [2, 1], [1, 3, 2], [1], [1, 2, 2], [1, 2], [1, 2]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [1, 2], [1, 2, 3, 4], [1]]], [[[1, 2], [2, 1, 3], [1, 2, 3]]], [[[1, 2], [2], [0, 2], [2, 1], [8, 1, 2], [8, 1, 2]]], [[[1, 1], [2, 1], [2, 1]]], [[[1], [2], [0, 2], [2, 1], [8, 1, 2]]], [[[1, 2], [2, 1], [1, 2], [2, 1], [1, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [1], [0, 2], [1, 2], [1, 3, 2]]], [[[2, 8, 1, 8]]], [[[1, 2], [2, 1], [2], [2, 1]]], [[[2, 1], [1, 2], [2, 1], [1, 3], [1, 2]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [false, false, true], [1, 2, 3, 4]]], [[[1, 2], [2], [0, 2]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1], [4], [2, 1], [2, 1]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [1, 2], [1, 2, 3, 4], [1]]], [[[1, 2], [1], [2, 1], [2, 1], [4, 3], [1]]], [[[1], [2], [0, 2], [0, 2, 2], [2, 1], [8, 1, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [1, 3, 2], [1, 2], [1, 2], [1, 2]]], [[[0], [2, 3, 4], [1, 2, 3, 4], [5, 3, 4, 5], [1, 2]]], [[[1, 2], [2], [2, 1], [8, 1, 7, 2], [2, 2]]], [[[1, 2], [2], [2, 1], [8, 1, 2], [1, 2]]], [[[1, 7, 2, 3, 6], [0], [2, 3, 4], [1, 2, 3, 4], [5, 3, 4, 5], [1, 2], [5, 3, 4, 5]]], [[[], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [1, 2, 3], [], [1, 2]]], [[[1, 1], [2], [0, 2], [2, 1], [8, 1, 2]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [false, false, true], [1, 2, 3, 4], [3, 4, 5]]], [[[2, 8, 1]]], [[[1, 2], [1, 3, 2], [1, 2], [1, 2]]], [[[3, 2], [2, 3, 4], [2, 3, 2], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2]]], [[[2, 1, 2], [1, 2], [2, 1], [1, 2]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [1, 2, 3, 4], [1]]], [[[3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [5]]], [[[1, 7, 2, 3, 6], [0], [2, 3, 4], [5, 3, 4, 5], [1, 2], [5, 3, 4, 5]]], [[[1, 1], [1, 0, 2, 3, 4], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [1, 2, 3], [1, 2]]], [[[2, 1], [1, 2], [2, 1], [1, 3], [1, 2], [1, 2]]], [[[2, 1, 2], [1, 2], [2, 1, 1, 2], [2, 1], [1, 2], [2, 1, 2]]], [[[1, 2], [2, 1], [1, 3, 2], [2, 1], [0, 2], [1, 2], [1, 3, 2]]], [[[2, 1], [1, 2, 1], [2, 1], [1, 2]]], [[[2, 1, 3], [1, 2, 3]]], [[[2, 1, 2], [1, 2], [2, 1, 1, 2], [2, 1], [1, 2], [2, 1, 2], [1, 2]]], [[[1, 2], [2, 8, 1], [1, 2]]], [[[3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [5, 5], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2]]], [[[1], [1, 2], [2, 8, 1, 8]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [4, 5], [1], [4], [2, 1], [2, 1], [4]]], [[[2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [], [1, 2, 1], [1, 2, 3, 4]]], [[[2, 1], [8, 1, 2], [1, 2], [2, 1], [1, 2]]], [[[3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [], [6, 7, 8, 9], [3, 2], [5]]], [[[2, 8, 1], [2, 8, 1], [2, 8, 1]]], [[[0], [1, 2, 3, 4], [5, 3, 4, 5]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [4, 5], [1], [5], [2, 1], [2, 1], [4]]], [[[5, 5], [2, 3, 2], [3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [6, 7, 8, 9], [3, 2]]], [[[1, 2, 2, 2], [2, 1], [8, 1, 2], [1, 2]]], [[[3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [5, 5], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [5]]], [[[1, 2], [2, 1, 3], [2, 1, 3, 2], [1, 2, 3]]], [[[1, 1], [1], [2], [0, 2], [2, 1], [8, 1, 2]]], [[[0, 2], [1, 2], [2, 1], [1, 2], [2, 1], [1, 3]]], [[[1, 1], [2], [0, 2], [2, 1]]], [[[1, 1], [2], [2], [2, 1]]], [[[2, 1, 2], [2], [2, 1, 2], [1, 2], [2, 2, 1, 2]]], [[[1], [2], [0, 2], [2, 1]]], [[[3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [6, 7, 8, 9], [3, 2]]], [[[2], [1, 1], [2], [0, 2], [2, 1], [2]]], [[[3, 2], [2, 3, 4], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [5]]], [[[1, 2], [2, 1], [1], [0, 2], [1, 2]]], [[[6, 2, 8, 2, 1, 8]]], [[[1, 3, 2], [1, 2], [1, 2]]], [[[0], [1, 2, 3, 4], [5, 3, 4, 5, 4], [5, 3, 4, 5]]], [[[2], [1, 1, 1], [2], [0, 2], [2, 1], [2]]], [[[5, 5], [2, 3, 2], [3, 2], [2, 3, 4], [5], [6, 7, 8, 9], [1, 2], [5], [5], [6, 7, 8, 9], [3, 2], [6, 7, 8, 9], [2], [3, 2]]], [[[2, 1, 3], [1, 2], [1, 2, 3]]], [[[1], [2, 3, 4], [1, 2, 3, 4], [3, 4, 5], [1, 2, 3, 4], [1]]], [[[2, 2], [2, 1], [1, 3, 2], [1], [1, 1, 2, 2], [1, 2], [1, 3]]], [[[1], [1, 2], [2, 8, 8], [2, 8, 1, 8]]], [[[2, 1], [1, 2]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n"}
{"task_id": "Mbpp/238", "prompt": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "entry_point": "number_of_substrings", "canonical_solution": "\ndef number_of_substrings(str1): \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n", "base_input": [["abc"], ["abcd"], ["abcde"]], "atol": 0, "plus_input": [[""], ["aaaaaa"], ["aaaaaaa"], ["aaaaa"], ["aaaaaaaaaaaa"], ["aaaaaaaaaaa"], ["aaaaaaaa"], ["aaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaa"], ["a"], ["aaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaa"], ["TLPpppcX"], ["aaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaa"], ["aa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["emHJqf"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["TLPPp"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["nBHaRIQKSz"], ["aaTLPPp"], ["nBHaRIQKSzaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["nBHaRIaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaQKSz"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaanBHaRIQKSz"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["nBHaRIQSz"], ["TLPpppccX"], ["aaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaa"], ["emmHJqf"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["nBHaRIaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaQKSz"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaanBHaRIQKSaaaaaaaaaaaaaaaaaaaaaaaaaz"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaTLPPp"], ["aaaaaaaaaaaaaaaaaaaaemHJqfaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["HemmHJqf"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["QYbgEVf"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaemmHJqfaaaaaaaaa"], ["eJmmHJqf"], ["aaaaaaaaaaaaaaaaaaaaaaanBHaRIQSzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaemHJqfaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaanBHaRIQSza"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["QYbaagEVf"], ["aaaaaaaaaaaaaaaaa"], ["emmaaaaHJqf"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["TLemmHTJqfPp"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaemHJqfaaaaaanBHaRIQKSz"], ["TLPpppcpcX"], ["TLPPPp"]], "contract": "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n"}
{"task_id": "Mbpp/239", "prompt": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n", "entry_point": "get_total_number_of_sequences", "canonical_solution": "\ndef get_total_number_of_sequences(m, n):\n\tT=[[0 for _ in range(n + 1)] for _ in range(m + 1)] \n\tfor i in range(m + 1): \n\t\tfor j in range(n + 1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j] = 0\n\t\t\telif i<j: \n\t\t\t\tT[i][j] = 0\n\t\t\telif j==1: \n\t\t\t\tT[i][j] = i \n\t\t\telse: \n\t\t\t\tT[i][j] = T[i-1][j] + T[i//2][j-1] \n\treturn T[m][n]\n", "base_input": [[10, 4], [5, 2], [16, 3]], "atol": 0, "plus_input": [[100, 10], [50, 5], [20, 8], [200, 6], [20, 20], [199, 6], [49, 6], [5, 6], [200, 100], [5, 5], [49, 49], [49, 50], [199, 20], [50, 6], [50, 49], [199, 8], [10, 8], [49, 5], [20, 5], [49, 20], [7, 6], [20, 10], [8, 200], [8, 5], [11, 10], [200, 200], [6, 6], [50, 50], [49, 199], [199, 199], [5, 20], [11, 7], [11, 12], [200, 20], [50, 201], [9, 8], [100, 100], [8, 10], [100, 6], [200, 50], [198, 100], [10, 10], [8, 9], [9, 9], [12, 11], [51, 6], [20, 6], [8, 8], [201, 50], [9, 10], [10, 9], [9, 6], [49, 200], [201, 201], [20, 21], [6, 201], [202, 202], [21, 21], [20, 200], [200, 202], [198, 20], [5, 100], [21, 12], [7, 8], [198, 101], [8, 6], [198, 198], [9, 50], [198, 199], [8, 51], [10, 5], [51, 21], [199, 101], [4, 50], [50, 198], [13, 13], [52, 51], [8, 7], [5, 9], [7, 101], [202, 7], [6, 7], [49, 7], [201, 52], [12, 7], [12, 8], [51, 202], [12, 12], [7, 7], [100, 101], [13, 12], [201, 200], [6, 200], [202, 9], [202, 12], [12, 9], [199, 50], [9, 201], [101, 100], [9, 51], [13, 100], [202, 52], [5, 50], [20, 51]], "contract": "\n\tassert isinstance(m, int) and m > 0, \"invalid inputs\" # $_CONTRACT_$ \n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\n"}
{"task_id": "Mbpp/240", "prompt": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n", "entry_point": "replace_list", "canonical_solution": "\ndef replace_list(list1, list2):\n    return list1[:-1] + list2\n", "base_input": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5], [5, 6, 7, 8]], [["red", "blue", "green"], ["yellow"]]], "atol": 0, "plus_input": [[[1, 2, 3, 4], []], [[1, 2, 3], []], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]], [[5], [1, 2, 3, 4, 5]], [[1, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14, 16]], [[1, 2], [3, 4, 5]], [[10, 50, 100, 500, 1000], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 3, [5, [7, [9], 10]], [2, [4, [6, [8]]]]], [[11, [13, [15]]], [12, [14, [16]]]]], [[1, [2, [3, [4, [5]]]]], [[6, [7, [8]]], [9, [10, [11]]]]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[11, 12, 13], [14, 15]]], [[1, "two", true, 4.5], ["five", false, 6, "seven"]], [[{"1": "one"}, [2, "two"], {"three": 3}], [[4, "four"], {"five": 5}]], [["red", "blue", "green"], [[]]], [[["apple", 1], ["banana", 2]], [null, ["cherry", 3]]], [[1, "two", true, 4.5, true], ["five", false, 6, "seven"]], [[10, 50, 100, 500, 1000], [1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 12]], [[1, 3, 5, 7, 9], [4, 6, 8]], [[1, "two", true, 4.5], ["five", false, 6, "cherryfive", "seven"]], [[1, 2, 3, 4], [-9, 1, 6, 91, 9, 56]], [[10, 50, 1000], [10, 50, 1000]], [[1, 3, 5, 7, 9], [1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10, 12, 14, 16, 10], [2, 4, 6, 8, 10, 12, 14, 16, 10]], [[1, 3, 5, 7, 9, 7], [1, 3, 5, 7, 9, 7]], [[3, 4, 5, 3], [3, 4, 5, 3]], [[{"three": 3}, {"three": 3}], [{"three": 3}, {"three": 3}]], [[3, 4], [3, 4]], [[{"1": "one"}, [2, "two"], {"three": 3}], [{"five": 5, "fifve": 14}, [4, "four"], {"five": 5, "fifve": 14}]], [[3, 5, 7, 9], [3, 5, 7, 9]], [[2, 4, 6, 8, 10, 12, 14, 11], [2, 4, 6, 8, 10, 12, 14, 11]], [[10, 999], [10, 999]], [[{"five": 5, "red": 9}, [4, "four"], {"five": 5, "red": 9}], [{"1": "one"}, [2, "two"], {"three": 3}]], [[3, 5, 2, 7, 4, 9], [3, 5, 2, 7, 4, 9]], [[-9, 1, 6, 91, 9, 56], [-9, 1, 6, 91, 9, 56]], [[1, 3, 5, 7, 9, 9, 9, 3], [1, 3, 5, 7, 9, 9, 9, 3]], [[["apple", 1], ["banana", 2]], [["cherry", 3]]], [[2, 4, 6, 8, 10, 12, 11, 8], [2, 4, 6, 8, 10, 12, 11, 8]], [[3, 1, 5, 2, 7, 4, 9], [3, 1, 5, 2, 7, 4, 9]], [[3, 4, 3], [3, 4, 3]], [[1, 3, 5, 7, 9], [4, 5, 8]], [[4, 6, 9, 8], [4, 6, 9, 8]], [[10, 50, 1000, 10], [10, 50, 1000, 10]], [[{"1": "one"}, [2, "two"], {"three": 3}], [[4, "four"]]], [[0, 1, 2, 3], [4, false, "vBHB", -94, 46.84204088708893, false, 80.50554519978891, 59]], [[[false, false]], [[false, false]]], [[10, 50, 2, 100, 500, 1000], [1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 12]], [[{"1": "one"}, [2, "two"], {"three": 3}], [{"1": "one"}, [2, "two"], {"three": 3}]], [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]], [[{"five": 5, "red": 9}, [4, "four"], {"five": 5, "red": 9}], [{"five": 5, "red": 9}, [4, "four"], {"five": 5, "red": 9}]], [[1, 3, 5, 7, 9], [9, 4, 6, 8]], [[{"three": 10}, {"three": 10}], [{"three": 10}, {"three": 10}]], [[2, 4, 6, 8, 10, 12, 14], [1, 3, 14, 5, 7, 9, 11, 13, 15]], [[1, false, true, 4.5, true], [1, false, true, 4.5, true]], [[10, 1000, 10, 10], [10, 1000, 10, 10]], [[499, 10, 50, 100, 500, 1000], [499, 10, 50, 100, 500, 1000]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]], [[7, 2, 4, 6, 8, 10, 12, 14], [1, 3, 14, 5, 7, 9, 11, 13, 15]], [[{"1": "one"}, [2, "two"], {}], [[4, "four"], {}]], [[1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 12], [1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 12]], [[10, 999, 998, 999], [10, 999, 998, 999]], [[{"1": "one"}, [2, "two"], {"three": 3}], [{"five": 5, "fifve": 14}, [4, "four"], {"five": 5, "fifve": 14}, [4, "four"]]], [[4, false, "vBHB", -94, 46.84204088708893, false, 80.50554519978891, 59], [4, false, "vBHB", -94, 46.84204088708893, false, 80.50554519978891, 59]], [[499, 9, 50, 51, 100, 500, 1000, 50], [499, 9, 50, 51, 100, 500, 1000, 50]], [[4], [4]], [[4, false, "vBvHB", -94, 46.84204088708893, false, 80.50554519978891, 59, 4, 80.50554519978891], [4, false, "vBvHB", -94, 46.84204088708893, false, 80.50554519978891, 59, 4, 80.50554519978891]], [[4, false, "cherryfive", 46.84204088708893, false, 80.50554519978891, 59], [4, false, "cherryfive", 46.84204088708893, false, 80.50554519978891, 59]], [[10, 1000, 10], [10, 1000, 10]], [[1, 2, 3, 16, 4, 5, 6, 7, 8, 9], [1, 2, 3, 16, 4, 5, 6, 7, 8, 9]], [[4, 6, 10, 8], [4, 6, 10, 8]], [[[3, 2, "two"], {"1": "one"}, [3, 2, "two"], {"three": 3}], [[3, 2, "two"], {"1": "one"}, [3, 2, "two"], {"three": 3}]], [[51, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14, 16]], [[2, 4, 6, 8, 10, 12, 14, 11, 6], [2, 4, 6, 8, 10, 12, 14, 11, 6]], [[4, 4.5, false, "vBHB", -94, 46.84204088708893, true, 80.50554519978891, 59], [4, 4.5, false, "vBHB", -94, 46.84204088708893, true, 80.50554519978891, 59]], [[4, false, "vBvHB", -94, 46.84204088708893, false, 80.50554519978891, 60, 4, 80.50554519978891], [4, false, "vBvHB", -94, 46.84204088708893, false, 80.50554519978891, 60, 4, 80.50554519978891]], [[1, 3, 6, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14, 16]], [[4, 6, 8, 10, 14, 11], [4, 6, 8, 10, 14, 11]], [[3, 14, 5, 2, 7, 4, 9], [3, 14, 5, 2, 7, 4, 9]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[15], [11, 12, 13], [15]]], [[10, 9, 1000, 10], [10, 9, 1000, 10]], [[10, 50, 1000, 9, 10], [10, 50, 1000, 9, 10]], [[499, 999, 10, 100, 500, 1000], [499, 999, 10, 100, 500, 1000]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[15, 11, 12, 60], [15, 11, 12, 60], [14, 15]]], [[1, [[3, [4, [3], [3]], [4, [3], [3]]], 2, [3, [4, [3], [3]], [4, [3], [3]]]]], [1, [[3, [4, [3], [3]], [4, [3], [3]]], 2, [3, [4, [3], [3]], [4, [3], [3]]]]]], [[4, false, "vBHB", -94, 46.84204088708893, false, 16, 80.50554519978891, 59, "vBHB"], [4, false, "vBHB", -94, 46.84204088708893, false, 16, 80.50554519978891, 59, "vBHB"]], [[{"three": 9}, {"three": 9}], [{"three": 9}, {"three": 9}]], [[4, 6, 4, 8], [4, 6, 4, 8]], [[-9, 1, 6, 91, 9, 56, 1], [-9, 1, 6, 91, 9, 56, 1]], [[5, 5], [1, 2, 3, 4, 5]], [[2, 4, 6, 50, 7, 10, 12, 14, 11, 6], [2, 4, 6, 50, 7, 10, 12, 14, 11, 6]], [[499, 10, 100, 500, 1000], [499, 10, 100, 500, 1000]], [[{"three": 3, "t": 499}, {"three": 3, "t": 499}], [{"three": 3, "t": 499}, {"three": 3, "t": 499}]], [[4, false, "vBHB", -94, true, 46.84204088708893, false, 16, false, 80.50554519978891, 59, "vBHB"], [4, false, "vBHB", -94, true, 46.84204088708893, false, 16, false, 80.50554519978891, 59, "vBHB"]], [[1, 3, 5, 7, 9, 11, 13, 15], [1, 3, 5, 7, 9, 11, 13, 15]], [[10, 50, 100, 500, 1000], [10, 50, 100, 500, 1000]], [[2, 4, 6, 13, 7, 10, 12, 13, 14, 11, 6, 6], [2, 4, 6, 13, 7, 10, 12, 13, 14, 11, 6, 6]], [[3, 6, 5, 15, 9, 11, 13, 15], [3, 6, 5, 15, 9, 11, 13, 15]], [[4, 4], [4, 4]], [[4, "vBvHB", -94, 80.4210480089324, 46.84204088708893, false, 80.50554519978891, 60, 4, 80.50554519978891, 4], [4, "vBvHB", -94, 80.4210480089324, 46.84204088708893, false, 80.50554519978891, 60, 4, 80.50554519978891, 4]], [[1, 2, 3, 4, 5, 6, 14, 8, 9, 12, 14], [1, 2, 3, 4, 5, 6, 14, 8, 9, 12, 14]], [[499, 10, 100, 100, 1000, 499], [499, 10, 100, 100, 1000, 499]], [[1, "two", true, 4.5, true], [1, "two", true, 4.5, true]], [[1, 3, 14, 5, 7, 9, 11, 13, 15, 9], [1, 3, 14, 5, 7, 9, 11, 13, 15, 9]], [[4, false, "vBHB", -94, 46.84204088708893, false, 16, 80.50554519978891, 59, "vBHB", 59, "vBHB"], [4, false, "vBHB", -94, 46.84204088708893, false, 16, 80.50554519978891, 59, "vBHB", 59, "vBHB"]], [[{}, {}], [{}, {}]], [[1, 3, 14, 5, 7, 9, 11, 15], [1, 3, 14, 5, 7, 9, 11, 15]], [[1, 2, 3, 4], [-9, 1, 6, 91, 9, 56, 56]], [[56, 4], [56, 4]], [[2, 4, 6, 8, 10, 12, 14, 16, 60, 10, 10], [2, 4, 6, 8, 10, 12, 14, 16, 60, 10, 10]], [["Mhrbldw", null, 29.04635642164004, "two", ["vBvHB", "red", "banana", "fzAKPhIsu"], 4.5, false, 17, "cdL"], []], [[[[[8, 8], 7, [8, 8]], 5, [[8, 8], 7, [8, 8]]], [[[8, 8], 7, [8, 8]], 5, [[8, 8], 7, [8, 8]]], [[[8, 8], 7, [8, 8]], 5, [[8, 8], 7, [8, 8]]], [9, [10, [11]]]], [[[[8, 8], 7, [8, 8]], 5, [[8, 8], 7, [8, 8]]], [[[8, 8], 7, [8, 8]], 5, [[8, 8], 7, [8, 8]]], [[[8, 8], 7, [8, 8]], 5, [[8, 8], 7, [8, 8]]], [9, [10, [11]]]]], [[4, 10, 1, 3, 5, 7, 9], [4, 10, 1, 3, 5, 7, 9]], [[1, 3, 14, 5, 7, 9, 13, 15, 9], [1, 3, 14, 5, 7, 9, 13, 15, 9]], [[4, 6, 8, 10, 14, 11, 8], [4, 6, 8, 10, 14, 11, 8]], [[2, 4, 8, 10, 12, 14, 16], [2, 4, 8, 10, 12, 14, 16]], [[{"1": "one"}, [2, "two"], {"three": 3}], [{"five": 5, "fifve": 14, "fivfe": 5}, [4, "four"], {"five": 5, "fifve": 14, "fivfe": 5}, [4, "four"]]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n"}
{"task_id": "Mbpp/242", "prompt": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n", "entry_point": "count_charac", "canonical_solution": "\ndef count_charac(str1):\n    return len(str1)\n", "base_input": [["python programming"], ["language"], ["words"]], "atol": 0, "plus_input": [[""], ["a"], ["\u0262\u1d1c\u1d0d\u026a\u1d07\ua731"], ["cMPNwvV"], ["ccMPNwvV"], ["ccMPcMPNwvVNwvV"], ["accMPNwvV"], ["aaccMPNwvV"], ["ccMPNwV"], ["ccMPNwvVcMPNwvV"], ["aaccMPNwv"], ["ccMPcMPNwvVNvV"], ["\u0262\u1d1caaccMPNwv\u1d0d\u026a\u1d07\ua731"], ["aacccMPNwvVMPNwv"], ["aaaccccMPcMPNwvVNwvVNwv"], ["cccMPcMPNwvVNvV"], ["aaccMPNw"], ["cNMPNwvV"], ["cNMPNwvcNMPNwvVV"], ["ccMPV"], ["accaaccMPNwvMPNwvV"], ["aaccccMPNwvVcMPNwvVMPNwvV"], ["aaaccccMPcMPNwvcMPNwvVVNwvVNwv"], ["ccMPccccMPcMPNwvVNvVMPNwvVNwvV"], ["aaccMPaccaaccMPNwvMPNwvVNw"], ["aaaaccMPNcMPNwvVwv"], ["ccMPccccMPcMPNwvVNvVMPNwvVNcwvV"], ["ccMPcMPNwvVNwvvV"], ["accV"], ["cNMPNwvcNMwPNwvVV"], ["accaaccMPNwccMPcMPNwvVNwvvVvMPccMPVNwvV"], ["aaacccccMPcMPNwvVNwvVcNwv"], ["\u0262\u1d1c\u1d0dccMPcMPNwvVNvV\u026a\u1d07\ua731accMPNwvV"], ["ccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvV"], ["\u0262\u1d1caaccMPNwv\u1d0daccaaccMPNwccMPcMPNwvVNwvvVvMPccMPVNwvV\u026a\u1d07\ua731"], ["ccMPNwaccMPNwvVVvV"], ["aaccMPaNwvMPNwvVNw"], ["accaaccMPNwccMPcMPNwvVNwvvVvMPMccvV"], ["ccMPcMPNwvVNvaaacccaaccMPNwccMPcMPNwvVNwvVcNwvV"], ["aaccMPNww"], ["aaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNwvVVvV"], ["aaaaaccMPNcMPNwvVwv"], ["acacVcccMPcMPNwvVNvV"], ["ccMPccccMPcMPNNwvVNvVMPNwvVNcwvV"], ["cNMPNwv"], ["\u0262\u1d1caa\u0262ccMPNwv\u1d0d\u026a\u1d07\ua731"], ["aaacMPNwvVNwvVcNwv"], ["aaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNccMPNwVVV"], ["accaaccMPNPwvMPNwvV"], ["\u0262\u1d1c\u1d0dV"], ["accaaccMPccMPNwVNPwaacccMwPNwvVMPNwv"], ["ccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVccMPcMPNwvVNwvV"], ["cMPNwccMPcMPNwvVNwvvVvMPMccvV"], ["aaccccMPNwvVcV"], ["aaccccMPNwvNwvV"], ["\u0262\u1d1caaccMPNwv\u1d0daacccMPNwvVMPNwv\u026a\u1d07\ua731"], ["ccMPcMPNwvVNvaaacccaac\u0262\u1d1caaccMPNwv\u1d0daacccMPNwvVMPNwv\u026a\u1d07\ua731cMPNwccMPcMPNwvVNwvVcNwvV"], ["ccMPcMPNwNwvVNwvVcNwvV"], ["aaccMPaccaaccMPwNwvMPNwvVNwV"], ["accaaccMPNwccMPcccMPVvMPNwvVNwvvVvMPccMPVNwvV"], ["ccMPcMPNwvVNvaaccMPNwwV"], ["ccMPcccccMPcMPNNwvVNvVMPNVwvVNcwvV"], ["aaccaaccVaccMPNwvVNMPNwcNMccMPcMPNwvVNvaaacccaac\u0262\u1d1caaccMPNwv\u1d0daacccMPNwvVMPNwv\u026a\u1d07\ua731cMPNwccMPcMPNwvVNwvVcNwvVPNwvcNMaacccMPNwvVMPNwvwPNccMPNwVVV"], ["ccMPccccMPcMPNccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVNwvVNvVMPNwvVNcwvaaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNwvVVvVV"], ["ccMccMPNwVPcMPccMPccccMPcMPNccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVNwvVNvVMPNwvVNcwvaaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNwvVVvVV"], ["aacccMPNwaaacccccMPcMPNwvVNwvVcNwvvVMPNwv"], ["ccMPcMPNwvaaaacMPNwvVNwvVcNwvaaaccMPNcMPNwvVwvVNwvV"], ["ccMPcccPcMPNwvVNvVMPNwvVNwvV"], ["aaccccMPNwvVcMPNwvVccMPcccccMPcMPNNwvVNvVMPNVwvVNcwvVMPNwvV"], ["aaccMPaMNwvMPNwvVNw"], ["\u0262\u1d1caaccMPNwv\u1d0daccaacccMccMPNwVPcMPccMPccccMPcMPNccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVNwvVNvVMPNwvVNcwvaaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNwvVVvVVcMPNwccMPcMPNwvVNwvvVvMPccMPVNwvV\u026a\u1d07\ua731"], ["accaaccMPccMPNwVNPwaacccMwPNaaccMPNwvVwv"], ["cccMaaccccMPNwvNwvVPcMPNwvVNvV"], ["aaccccMPNwvVwcV"], ["\u0262\u1d1c\u1d0d"], ["accaaccMPaNwccMPcccMPVvMPNwVNwvvVvMPccMPVNwvV"], ["ccMPccccMPcMccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVccMPcMPNwvVNwvVPNwvVNvVMPNwvVNcwvV"], ["aaacMPNwvVNwvVcNwvv"], ["aaccccMPcccPcMPNwvVNvVMPNwvVNwvVMv"], ["\u0262\u1d1caa\u0262ccMPNwv\u1d0d\u1d0d\u026a\u1d07\ua731"], ["accaaccMPNwccMPcccMPVvMPNwvVNwvcMPNwccMPcMPNwvVNwvvVvMPMccvVvVvMPccMPVNwvV"], ["ccMPcMPNPwvVNvaaacccaac\u0262\u1d1caaccMPNwv\u1d0daacccMPNwvVMPNwv\u026a\u1d07\ua731cMPNwccMPcMPNwvVNwvVcNwvV"], ["aaccMPNwaaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNwvVVvVw"], ["\u0262\u1d1c\u1d0dccMPcMPNwvVN\u0262vV\u026a\u1d07\ua731accMPNwvV"], ["ccMPVaaacMPNwvVNwvVcNwvv"], ["acacVcccVNvV"], ["accaaccMPcccMPNwVNPwaacccMwPNaaccMPNwvVwv"], ["cccMPcMPPNwvVNvV"], ["aaccaaccMPNwvVMPNwcNMPNwvcNMaaaacccMPNwvVMPNwvcccMPNwvVMPNwvwPNwvVVvV"], ["aaccMPNwvccMPcMPNwvVNvaaacccaaccMPvNwccMPcMPNwvVNwvVcNwvV"], ["cccMPc\u0262\u1d1c\u1d0d\u026a\u1d07\ua731MPPNwvVNvVaaccMPNwvV"], ["accaaccMPNw\u0262\u1d1caa\u0262ccMPNwv\u1d0d\u026a\u1d07\ua731ccMPcMPNwvVNwvvVvMPMccvV"], ["aaaccMPNwvV"], ["ccMPNcccccMPcMPNNwvVNvVMPNVwvVNcwvV"], ["aaaccccMPcvcMPNwvVVNwvVNwv"], ["aaccaaccVaccMPNwvVNMPNwcNMvccMPcMPNwvVNvaaacccaac\u0262\u1d1caaccMPNwv\u1d0daacccMPNwvVMPNwv\u026a\u1d07\ua731cMPNwccMPcMPNwvVNwvVcNwvVPNwvcNMaacccMPNwvVMPNwvwPNccMPNwVVV"], ["ccMPccccMPcMccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVccMPcMPNwvVNwvVPNwvVMPNwvVNcwvV"], ["aaccMPNaaccMPaMNwvMPNwvVNww"], ["ccMPcccMPccccMPcMPNccMPcMPNwvVNvaaacccccMPcMPNwvVNwvVcNwvVNwvVNvVMPNwvVNcwvaaccaaccMPNwvVMPNwcNMPNwvcNMaacccMPNwvVMPNwvwPNwvVVvVVPcMPNwvVNvVMPNwvVNcwvV"], ["cccMaccccMPNwvNwvVPcMPNwvVNvV"], ["waccMPNwvV"], ["cccMPcMPNaaaccccMPcMPNwvcMPNwvVVNwvVNwv"], ["ccMPNcccccMPcMPNNwvVNvVMPNVVwvVNcwvV"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5\n"}
{"task_id": "Mbpp/244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n", "entry_point": "next_Perfect_Square", "canonical_solution": "\nimport math  \ndef next_Perfect_Square(N): \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n", "base_input": [[35], [6], [9]], "atol": 0, "plus_input": [[-5], [3.14], [0], [1], [-10], [2.0], [1000000], [99999999], [1000000000000], [3.7831588542515604], [5.302859454099729], [true], [2.4682613401002937], [99999998], [1.3453957712310967], [1.0399013203829814], [99999997], [5.684417641308899], [99999996], [4.510369394904734], [3.6621080850729113], [3.322051512362575], [1000000000001], [-11], [2.3742619906307163], [2.6748360710113177], [3.4473095447178936], [5.57812470410088], [99999995], [4.647261498089122], [1.5329222521720727], [2.6809843384176872], [-1], [false], [1.5107938841218733], [0.875196021901653], [4.529854518921115], [1.7032459621984142], [1.8504217376600358], [2.188160542701604], [1.8956297256654226], [2.4314765544566113], [5.813827850518426], [2.3809692137960456], [2.446463005958287], [1.9423279622572451], [2.1946783538521406], [2.6687036689581713], [2.0326735919423498], [100000000], [2.468678626532637], [1000001], [2.5238311325906344], [1.7822986116186494], [2.3311279543074095], [-22.844596598850202], [2.5605349010057803], [6.083079662936755], [100000001], [1.5746458078326158], [6.588039035035163], [3.1483586672721007], [1000000000002], [3.456020835359328], [34.43923911097559], [1.0089233418138062], [4.2295065796525115], [-78.55181920500208], [1.0803737520419845], [2.605728433563439], [38.98925404921724], [4.4174458158812255], [1.644335866314361], [1.8218151507901879], [3.037371820443729], [2.709277112928487], [4.378962886905937], [34.821872058003486], [-77.542809657578], [2.5759758416813416], [-12], [3.1543786398736704], [0.7865023181429288], [3.2249050005349247], [0.9910005166913101], [3.195728446958819], [1.614635244145928], [2.192134061504989], [-9], [3.47933130145955], [3.806186148917977], [1.4663753283678982], [0.945455886591849], [2.805849529482408], [-6], [1.909977828399661], [2.3945594411492657], [2.943996722081795], [4.945353788299947], [-80], [2.847513147814003], [2.040611668519119], [2.6516104349052276], [3.547091908942516], [999999999999], [-21.849993780773154], [2.09983974207191], [2.7416667760599114], [2.953394448977245]], "contract": "\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n"}
{"task_id": "Mbpp/245", "prompt": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n", "entry_point": "max_sum", "canonical_solution": "\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "base_input": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]], [[80, 60, 30, 40, 20, 10]], [[2, 3, 14, 16, 21, 23, 29, 30]]], "atol": 0, "plus_input": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 4, 3, 3, 1, 6]], [[10, 9, 8, 7, 6, 4, 3, 2, 1]], [[10, 8, 7, 6, 5, 4, 4, 3, 3, 1, 6]], [[10, 9, 8, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9]], [[10, 9, 8, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 10]], [[9, 8, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 10]], [[10, 9, 8, 7, 6, 5, 3, 3, 2, 1]], [[1, 9, 8, 7, 7, 5, 4, 4, 3, 3, 1, 6]], [[1, 9, 8, 7, 7, 5, 4, 4, 3, 3, 1, 5, 8]], [[10, 9, 9, 7, 6, 5, 3, 3, 2, 1, 9]], [[6, 9, 6, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9]], [[10, 7, 10, 5, 4, 4, 3, 1, 6]], [[0, 10, 8, 7, 6, 5, 4, 4, 3, 3, 1, 5, 6]], [[10, 8, 8, 7, 6, 5, 3, 3, 2, 10]], [[10, 4, 9, 8, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9]], [[10, 9, 9, 7, 5, 3, 3, 2, 1, 9]], [[10, 4, 9, 8, 7, 6, 5, 9, 4, 4, 3, 6, 9]], [[6, 9, 6, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9, 9, 9]], [[10, 9, 9, 7, 5, 3, 3, 2, 9]], [[0, 10, 7, 7, 6, 5, 4, 4, 3, 3, 1, 5, 6]], [[6, 9, 6, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9, 9]], [[10, 9, 8, 7, 4, 5, 4, 4, 3, 3, 1, 6]], [[1, 5, 9, 8, 7, 7, 5, 4, 0, 3, 3, 1, 6]], [[10, 9, 8, 7, 4, 5, 4, 4, 3, 3, 9, 1, 6]], [[10, 9, 8, 7, 6, 5, 4, 4, 5, 3, 2, 1]], [[10, 9, 8, 7, 4, 4, 3, 2, 1]], [[6, 9, 6, 2, 7, 0, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9]], [[0, 10, 7, 7, 6, 4, 3, 3, 1, 5, 6, 6]], [[6, 9, 6, 2, 7, 0, 6, 5, 9, 4, 4, 3, 3, 1, 6, 6]], [[6, 9, 6, 2, 7, 0, 6, 5, 9, 4, 8, 2, 4, 3, 3, 1, 6, 6, 4]], [[10, 8, 7, 4, 4, 3, 2, 1, 7]], [[10, 9, 9, 7, 5, 3, 3, 2, 0, 9]], [[7, 10, 5, 4, 4, 3, 1, 6]], [[10, 8, 7, 6, 5, 4, 4, 3, 1, 6, 6]], [[10, 9, 9, 7, 6, 5, 4, 4, 3, 2, 1]], [[0, 10, 7, 6, 4, 3, 3, 6, 1, 5, 6, 6]], [[10, 8, 7, 6, 5, 4, 4, 3, 1, 6]], [[10, 9, 8, 9, 7, 5, 3, 3, 2, 1, 9]], [[10, 10, 5, 4, 4, 3, 1, 6, 7]], [[10, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 5, 9, 9, 7, 7, 5, 4, 0, 3, 3, 1, 6]], [[10, 9, 8, 7, 6, 5, 4, 4, 5, 3, 2, 1, 2]], [[10, 6, 9, 8, 7, 6, 5, 4, 5, 3, 2]], [[6, 9, 6, 2, 7, 0, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9, 6]], [[9, 9, 8, 7, 4, 5, 4, 4, 7, 3, 1, 6]], [[10, 9, 8, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9, 9]], [[10, 10, 9, 8, 7, 6, 4, 3, 2, 2]], [[9, 9, 7, 5, 3, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 4, 5, 3, 2, 1, 2, 5]], [[10, 9, 7, 6, 5, 9, 9, 4, 4, 3, 3, 1, 6, 10]], [[10, 9, 9, 7, 5, 4, 4, 3, 2, 1]], [[10, 9, 9, 7, 9, 5, 3, 3, 2, 1, 9]], [[10, 8, 0, 5, 4, 4, 3, 1, 6, 7]], [[10, 9, 7, 9, 7, 6, 5, 3, 2, 1, 9]], [[1, 9, 8, 7, 7, 5, 4, 3, 3, 1, 6]], [[10, 9, 9, 7, 7, 5, 3, 3, 2, 1, 9, 9]], [[11, 9, 8, 7, 0, 5, 3, 1]], [[true, false]], [[10, 4, 9, 8, 7, 6, 5, 4, 4, 3, 3, 1, 6, 9]], [[10, 7, 9, 9, 7, 5, 3, 2, 9]], [[1, 9, 8, 7, 4, 5, 4, 4, 3, 3, 9, 1, 6]], [[0, 10, 7, 6, 4, 3, 3, 6, 5, 6, 6, 3]], [[10, 9, 9, 7, 6, 5, 4, 9, 3, 2, 1, 9]], [[9, 8, 7, 4, 4, 3, 2, 1]], [[10, 8, 0, 5, 4, 4, 1, 6, 7]], [[10, 1, 8, 7, 6, 5, 4, 3, 11, 1, 11]], [[10, 9, 7, 10, 5, 9, 9, 4, 4, 3, 3, 1, 6, 10]], [[10, 7, 7, 6, 5, 4, 4, 3, 3, 1, 5, 6]], [[true, true, false]], [[10, 8, 8, 7, 4, 6, 5, 3, 3, 2, 10]], [[1, 5, 9, 8, 7, 7, 5, 4, 0, 3, 3, 3, 1, 6]], [[6, 9, 6, 7, 5, 9, 4, 4, 3, 8, 3, 1, 6, 9]], [[10, 9, 7, 5, 4, 4, 3, 2, 1]], [[6, 9, 6, 7, 6, 5, 9, 4, 4, 3, 3, 1, 6, 9, 6, 9]], [[true, true, true, false]], [[10, 9, 8, 7, 4, 5, 4, 4, 3, 0, 7, 1, 6]], [[7, 9, 9, 7, 5, 3, 2, 9]], [[2, 10, 8, 8, 7, 6, 5, 3, 3, 2, 10]], [[10, 4, 9, 8, 7, 5, 9, 4, 4, 3, 6, 9]], [[10, 10, 9, 8, 7, 6, 6, 4, 3, 2, 2]], [[8, 9, 8, 7, 4, 3, 2, 1]], [[10, 9, 7, 5, 4, 4, 3, 2, 2, 4]], [[11, 9, 9, 7, 5, 3, 3, 2, 1, 9]], [[10, 4, 9, 8, 7, 6, 5, 4, 4, 3, 3, 1, 5, 9]], [[10, 9, 7, 5, 3, 4, 3, 2, 4]], [[10, 9, 8, 7, 6, 1, 5, 4, 3, 2, 1]], [[10, 9, 9, 7, 6, 5, 3, 3, 2, 1, 9, 3]], [[1, 9, 8, 7, 4, 5, 4, 4, 3, 3, 9, 1, 6, 3]], [[10, 9, 7, 10, 5, 9, 9, 9, 4, 4, 3, 3, 1, 6, 10]], [[10, 9, 8, 7, 6, 4, 3, 2, 1, 10]], [[1, 9, 8, 7, 7, 4, 4, 4, 3, 3, 1, 5, 8]], [[6, 9, 6, 7, 0, 6, 5, 9, 4, 4, 3, 1, 6, 6]], [[10, 9, 8, 7, 6, 4, 0, 3, 2, 1]], [[1, 9, 8, 4, 5, 4, 4, 3, 3, 9, 1, 6]], [[7, 9, 7, 5, 3, 2, 9]], [[1, 9, 2, 7, 4, 5, 6, 4, 4, 3, 3, 9, 1, 6]], [[1, 9, 8, 7, 4, 5, 4, 4, 3, 1, 6, 3]], [[10, 8, 0, 5, 4, 4, 1, 7]], [[10, 9, 8, 8, 9, 7, 5, 3, 3, 2, 1, 9]]], "contract": "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n"}
{"task_id": "Mbpp/247", "prompt": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n", "entry_point": "lps", "canonical_solution": "\ndef lps(str1): \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n", "base_input": [["TENS FOR TENS"], ["CARDIO FOR CARDS"], ["PART OF THE JOURNEY IS PART"]], "atol": 0, "plus_input": [["NDZWBHEJKTPQGAOSLYCRMYEX"], ["AAAAAAA"], ["BBBBBBBBB"], ["CCCCCCCCCCCC"], ["CCCCCCCAAAAAAACCCCC"], ["CCCCCCCAAAAAABBBBBBBBBCCCCC"], ["BBBBBBBBBB"], ["CCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCC"], ["CCCCCCCAACCCCCCCCCCCCCAAAAACCCCC"], ["NDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEX"], ["CCCCCCCCCCCCCCCCCCCAAAAAAACCCCC"], ["BNDZWBHEJKTPQGAOSLYCRMYEXBBBBBBBBB"], ["CCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCCAAAAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["AAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCA"], ["CCCCCCCCCCCCC"], ["CCCCCCCCCCCCCCCCCCCCAAAAAA"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCCCAAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCCCCCCAAAAAACCCCCCCCCCCCCCCCAAAAAA"], ["BBBBBBBAAAAAAABBB"], ["AAAACCCCCCCAAAAAABBBBBBBBBCCCCCAAA"], ["CCCCCCCAACCCCCCCCCCCCCAAAACCC"], ["AAAAAACCCCCCCCCCCCCCCCCCCCAAAAAA"], ["CCCCCCCAACCCCCCCCCCCCCAAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCAAAAAABBBBBBBBBCCCCCCCCCCCCCCCCCC"], ["CCCCCCCAACCCCCCCCCCCCCCAAAACYCCCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["BBBBBBBBBBB"], ["CCCCAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCACCCCCAAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCBBBBBBBBBAAAAAAACCCCC"], ["BBBBBBBBBBBB"], ["CCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAA"], ["CCCCCCCCCCCCCCCAAAAAAACCCCAAAAAA"], ["BCCCCCCCBBBBBBBBBAAAAAAACCCCC"], ["CCCCCCCACACCCCCCCCCCCCCAAAAACCCCC"], ["BBBBBBBBAAAAAAABBB"], ["CCCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXCCCCCC"], ["CCCCCCCACAACCCCCCCCCCCCCAAAAACCCCC"], ["CCCCCCCAAACCCCCCCCCCCCCAAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCAAAAAABBCCCCCCCCCCCCCCCCCCCCAAAAAABBBBBBBCCCCCCCCCCCCCCCCCC"], ["AAAAAACCCCCCCAACCCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCA"], ["CCCCCCCCAACCCCCCCCCCCCCAAAAACCCCC"], ["CCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCCCCCCAAAAAACCCCCCCCCCCCCCCCACCCCCCCBBBBBBBBBAAAAAAACCCCCAAAAA"], ["AAAACCCCCCCAAAAAABBBBBBBCCCCCAAA"], ["CCCCCCCCCCCCACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["NDZWBHEJKTPQGAOSLDYCRMYEX"], ["CCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCACCCCCAAAAACCCCCCCCC"], ["AAAACCCCCCCCAAAAAABBBBBBCCCCAAA"], ["CCCCCCCACAACCCCCCCCCCCCCAAAAACCCCCC"], ["AAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCA"], ["CCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["AAAACCCCCCCCAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAAABBBBBBCCCCAAA"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAA"], ["CCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCC"], ["AAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCACAAACCCCCA"], ["CCCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCCCAAAAACCCCCHCRMYEXCCCCCC"], ["CCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCAAAAAABBCCCCCCCCCCCCCCCCCCCCAAAACCCCCCCCCAAAAACCCCCAABBBBBBBCCCCCCCCCCCCCCCCCC"], ["CCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCACCCCCAAAAACCCCCCCCC"], ["AAAACCAAA"], ["CCCCCCCAAAAAABBBB"], ["M"], ["CCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCCCCACACACCCCCCCCCCCCCAAAAACCCCCCCCCAAAACCCCC"], ["xZQOogNh"], ["CCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCACACCCCCCCCCCCCCAAAAACCCCCMYEXCCCCCAAAACCCCC"], ["AAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAACCCCCCCCCCCCCCCCCCCCAAAAAA"], ["ACCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCRMYEXCCCCCAAAACCCCCAAACCCCCCCAAAAAABBBBBBBCCCCCAAA"], ["NDZWBHEJKOSLDYCRMYEX"], ["ACCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAACCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCRMYEXCCCCCAAAACCCCCAAACCCCCCCAAAAAABBBBBBBCCCCCAAA"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZAAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAACCCCCCCCCCCCCCCCCCCCAAAAAAWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAA"], ["CCCCCCCC"], ["CCCCNDZWCBHEJKTPQGAOSLYCRMYEXCCCCCCCCACACACCCCCCCCCCCCCAAAAACCCCCCCCCAAAACCCCC"], ["BBBBNDZWBHEJKTPQGAOSLDYCRMYEXBBBBBB"], ["AAAAAAAA"], ["Q"], ["CCCCCCAAABBBBBBBBBCCCCC"], ["CCCCCCCABAAAAAABBBB"], ["LCCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCC"], ["NDZWBCCCCCCBCCCCCCCBBBBBBBBBAAAAAAACCCCCCCCHCRMYEX"], ["BNDZWACCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAACCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCRMYEXCCCCCAAAACCCCCAAACCCCCCCAAAAAABBBBBBBCCCCCAAABHEJKTPQGAOSLYCRMYEXBBBBBBBBB"], ["NDZWBHEEJKOSLDYCRMYEX"], ["CCCCCCBAAABBBBBBBBBCCCCC"], ["CCCCCCBAAAABBBBBBBBBCCCCC"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZAAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAACCCCCCCCCCCCCCCCCCCCAAAAAAWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAA"], ["CCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXCCAAAAAABBBB"], ["CCCCCCCCCCCCCCCCCCAAAAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAACCCCCCCAAAAAABBBBBBBBBCCCCCAAAACCCCCRMYEXCCCCCAAAACCCCC"], ["CCWCCCCCNDZWBHEJKTPQGAOSLYCRMNDZWBHEJKTPQGAOSLDYCRMYEXYEXCCCCC"], ["CCCCCCCCCCCCACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQCGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZCWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC"], ["CCCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXCBBBBBBBAAAAAAABBBCCCCC"], ["CCCCCCBAAABBBBBBBBBCCCCCC"], ["AAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSCLYCRMYEXCCCCCACAAACCCCCA"], ["BCCCCCCCAAAAACCCCC"], ["NDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXNDAAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCACAAACCCCCAZWBHEJKTPQGAOSLDYCRMYEX"], ["CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGCCCCCCCACAACCCCCCCCCCCCCAAAAACCCCCCAOSLYCCCCCCCCCCCCCCCCCCCCAAACCCCCCCAAAAAABBBBBBBBBCCCCCAAAACCCCCRMYEXCCCCCAAAACCCCC"], ["BBBBBBCCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAABBBBB"], ["CCCxZQOogNhCCCCCCCCCACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQCGAOSLYCRMYEXCCCCCAAAACCCCC"], ["BBBBNDZWBHEBBBBBB"], ["CCCCCCCACACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCACACCCCCCCCCCCCCAAAAACCCCCMYEXCCCCCAAAACCCCCCCAAAAACCCCC"], ["CCCCCCCCCCAACCCC"]], "contract": "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9\n"}
{"task_id": "Mbpp/249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n", "entry_point": "intersection_array", "canonical_solution": "\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n", "base_input": [[[1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]], [[1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]], [[1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]]], "atol": 0, "plus_input": [[[], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], []], [[], []], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]], [[], [false, false, true, false, true, false]], [[], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""]], [[], ["zm", "guWZdvsBGL", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""]], [["", "zm", null, "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""]], [[], [false, false, false, true, false, true, false]], [["", "zm", null, "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", ""]], [[1, 9, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], [[1, 9, 12, 4, 5, 6, 7, 8, 9, 10], [1, 9, 12, 4, 5, 6, 7, 8, 9, 10]], [[false, false, true, false, true, false], [false, false, true, false, true, false]], [[2, 4, 6, 8, 2, 6], [2, 4, 6, 8, 2, 6]], [[], ["zlm", "guWZdvsBGL", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""]], [["", "zm", null, "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "guWZdvsBGL", "l", "QlDxdG", "ertYo", ""]], [[7, 4, 6, 8, 2, 6], [7, 4, 6, 8, 2, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 3], [2, 4, 6, 8, 10]], [["mhxItVmqJ", "KtghtIBs", "Xe", "QUGweiSK", "iDfnCyFguX", "Xe", "YUXTxa", "", "xsQS", "dtFvvIs"], [1, 2, 3, 4, 5, 3]], [[1, 9, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 15]], [[1, 3, 5, 7], [2, 4, 6, 8, 10]], [[false, false, true, true, false, true, false], [false, false, true, true, false, true, false]], [["", "zm", "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", ""]], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 6], [1, 2, 4, 5, 6, 7, 8, 9, 10, 6]], [[false, false, true, false, true, false, false, false], [false, false, true, false, true, false, false, false]], [[7, 4, 6, 8, 2, 6, 8], [7, 4, 6, 8, 2, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 3]], [[3, 4, 5, 4], [3, 4, 5, 4]], [["mhxItVmqJ", "KtghtIBs", "Xe", "QUGweiSK", "iDfnCyFguX", "Xe", "YUXTxa", "", "dtFvvIs"], [1, 2, 3, 4, 5, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 12, 14, 15]], [[1, 2, 4, 5, 6, 7, 8, 3, 9, 7, 10, 6], [1, 2, 4, 5, 6, 7, 8, 3, 9, 7, 10, 6]], [[11, 12, 14, 12, 14, 10, 15], [11, 12, 14, 12, 14, 10, 15]], [[false, false, true, true, false, true, true, false, false], [false, false, true, true, false, true, true, false, false]], [["zlm", "guWZdvsBGL", "guWZdvsBGL", "QlDxdGl", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp"], ["zlm", "guWZdvsBGL", "guWZdvsBGL", "QlDxdGl", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 5, 12, 12, 14, 15, 2]], [["", "zm", "zFvpm", "QkDxdG", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv"], ["", "zm", "zFvpm", "QkDxdG", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv"]], [["QkDxmhxItVmqJdG", "", "zm", null, "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", ""]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1], [11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 10]], [["", "zm", "zFvpm", "QkDxdG", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv", "", "QlDxdGl"], ["", "zm", "zFvpm", "QkDxdG", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv", "", "QlDxdGl"]], [[3, 4, 4, 4, 7, 3], [3, 4, 4, 4, 7, 3]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 4, 3, 4, 5], [1, 2, 4, 3, 4, 5]], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 6, 9], [1, 2, 4, 5, 6, 7, 8, 9, 10, 6, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 3, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 3, 8]], [[12, 13, 14, 15, 15], [12, 13, 14, 15, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 10, 10]], [[1, 2, 3, 4, 5], [false, false, false, true, false, false]], [["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", "", "Fvp"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", "", "Fvp"]], [[2, 4, 6, 8, 2, 6, 2], [2, 4, 6, 8, 2, 6, 2]], [[2, 4, 6, 8, 10], [1, 3, 5, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 10, 6], [1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 10, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 4, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 10, 4, 9, 10]], [["", "mhxItVmqJ", "zFvpm", "QkDxdG", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv", "", "QlDxdGl", "", "QlDxdGl"], ["", "mhxItVmqJ", "zFvpm", "QkDxdG", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv", "", "QlDxdGl", "", "QlDxdGl"]], [["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "Fvp", "", "Fvp"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "Fvp", "", "Fvp"]], [[1, 1, 3, 4, 5], [1, 1, 3, 4, 5]], [["", "zm", null, "Xe", "ertYo", 14, 14, "gv"], ["", "zm", null, "Xe", "ertYo", 14, 14, "gv"]], [[1, 2, 4, 5, 6, 7, 8, 10, 6, 9, 1], [1, 2, 4, 5, 6, 7, 8, 10, 6, 9, 1]], [["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", ""], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", ""]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 12, 14, 15, 15]], [[3, 4, 4, 4, 12, 7, 3], [3, 4, 4, 4, 12, 7, 3]], [[2, 4, 6, 8, 10, 10], [2, 4, 6, 8, 10, 10]], [[7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], [7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2]], [[1, 2, 3, 4, 5, 2], [5, 4, 3, 2, 1]], [["", "mhxItVmqJ", "zFvpm", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv", "", "QlDxdGl", "", "QlDxdGl"], ["", "mhxItVmqJ", "zFvpm", "Xe", "QlDxdGl", "ertYo", 14, "gv", "gv", "", "QlDxdGl", "", "QlDxdGl"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 12, 14, 15, 12]], [[1, 3, 4, 5, 6, 7, 8, 9, 10, 8, 3], [1, 3, 4, 5, 6, 7, 8, 9, 10, 8, 3]], [[false, false, true, true, true, true, false, false, false], [false, false, true, true, true, true, false, false, false]], [[1, 3, 5, 7], [7, 2, 4, 6, 8, 10]], [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]], [[2, 4, 6, 10, 8, 2, 6, 2], [2, 4, 6, 10, 8, 2, 6, 2]], [["zm", "FvKtghtIBsp", "QUGweiSK", "l", "QkDxdG", "Fvp", "", "Fvp"], ["zm", "FvKtghtIBsp", "QUGweiSK", "l", "QkDxdG", "Fvp", "", "Fvp"]], [["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", "", "QUGweiSK"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "ertYo", "Fvp", "", "QUGweiSK"]], [[9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 4, 9, 10], [9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 4, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]], [[12, 1, 9, 12, 4, 5, 6, 7, 8, 10], [12, 1, 9, 12, 4, 5, 6, 7, 8, 10]], [[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10]], [[true, true, true, false, true], [true, true, true, false, true]], [[3, 2, 3, 4, 5, 3], [3, 2, 3, 4, 5, 3]], [["zm", "erYtYo", "guWZdvsBGL", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""], ["zm", "erYtYo", "guWZdvsBGL", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""]], [[12, 1, 9, 6, 4, 5, 6, 7, 8, 10, 5], [12, 1, 9, 6, 4, 5, 6, 7, 8, 10, 5]], [["", "zm", null, "mzm", "Xe", "ertYo", 14, 14, "gv"], ["", "zm", null, "mzm", "Xe", "ertYo", 14, 14, "gv"]], [[2, 4, 6, 8, 11, 2, 6, 2], [2, 4, 6, 8, 11, 2, 6, 2]], [[1, 2, 3, 4, 5, 6, 7, 9, 10], [11, 12, 13, 14, 15]], [[0, 2, 3, 4, 5, 4], [0, 2, 3, 4, 5, 4]], [[1, 2, 3, 4, 5, 6, 7, 2, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 4, 5, 6, 7, 8, 9, 10], [11, 12, 12, 14, 15]], [[3, 2, 3, 13, 4, 5, 3], [3, 2, 3, 13, 4, 5, 3]], [[false, false, true, true, false, true, true, false], [false, false, true, true, false, true, true, false]], [[7, 4, 6, 2, 6], [7, 4, 6, 2, 6]], [[2, 3, 4, 6, 8, 2, 6, 8, 2], [2, 3, 4, 6, 8, 2, 6, 8, 2]], [[false, false, true, true], [false, false, true, true]], [[7, 4, 6, 8, 2, 6, 8, 7], [7, 4, 6, 8, 2, 6, 8, 7]], [[1, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]], [["dixb", "", "safGD"], ["zm", "guWZdvsBGL", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", "", "ertYo"]], [[1, 2, 3, 5, 5, 6, 7, 8, 9, 10, 9, 3], [2, 4, 6, 8, 10]], [[false, false, true, false, true, true, false, false, false], [false, false, true, false, true, true, false, false, false]], [["", "zm", null, "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "erYtYo", "l", "QlDxdG", "ertYo", ""]], [[false, true, false], [false, true, false]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 10, 6, 4], [1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 10, 6, 4]], [[-50.724117119720646, -27.508080650603688, 26.48203500196165, 78.61995120553024, 24.362209758825543, 87.04877850014387, 14.536718690968357, -61.67031259036615], []], [[4, 6, 8, 10], [1, 2, 3, 5, 5, 6, 7, 8, 9, 10, 9, 3]], [[9, 1, 2, 5, 3, 4, 5, 6, 7, 8, 10, 4, 9, 10], [9, 1, 2, 5, 3, 4, 5, 6, 7, 8, 10, 4, 9, 10]], [[7, 6, 4, 6, 8, 3, 2, 6], [7, 6, 4, 6, 8, 3, 2, 6]]], "contract": "\n    assert isinstance(array_nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(array_nums2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])) == set([1, 2, 8, 9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])) == set([3,5,7,9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])) == set([10])\n"}
{"task_id": "Mbpp/250", "prompt": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n", "entry_point": "count_X", "canonical_solution": "\ndef count_X(tup, x): \n    return tup.count(x)\n", "base_input": [[[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4], [[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10], [[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8]], "atol": 0, "plus_input": [[[5, 10, 15, 20, 25, 30], 15], [[1.5, 2.3, 4.7, 1.5, 7.8, 9.1, 1.5], 1.5], [["apple", "banana", "cherry", "apple", "banana", "apple"], "apple"], [["apple", 1, 3.14, "banana", 1, "apple", "banana", 3.14], "apple"], [[], 10], [[], "apple"], [[], ""], [[["apple", "banana"], ["cherry", "apple", "banana"], ["apple", "cherry"]], "apple"], [[], 5], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]], [1, 2, 3]], [[1, "hello", true, 5.5, [1, 2, 3], [4, 5, 6], {"a": 1, "b": 2}, true, "hello", "hello", false], "hello"], [[10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true], "apple"], [[], []], [[["cherry", "apple", "banana"], ["apple", "cherry"]], "apple"], [[1, true, 5.5, [1, 2, 3], [4, 5, 6], {"a": 1, "b": 2}, true, "hello", "hello", false], "hello"], [[5, 10, 15, 25, 30], 7], [[1, 2, 3], [1, 5, 2, 3]], [[7, 10, 15, 20, 25, 30], 15], [[1, 2, 3], [1, 5, 2, 3, 2]], [[5, 10, 15, 20, 25, 30], 16], [[24, 1, 2, 25, 3], [1, 5, 2, 5, 3, 2]], [[0, 24, 1, 2, 3], [1, 5, 2, 5, 3, 2]], [[5, 10, 15, 20, 25, 30], [5, 10, 15, 20, 25, 30]], [[10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true], [10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true]], [[10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true], [10, 15, 9, 20, "apple", "banana", "apple", "cherry", true, false, true]], [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6], [7, 8, 9, 20]]], [[1, 5, 2, 5, 3, 2], [1, 5, 2, 5, 3, 2]], [["banana"], 10], [[5, 10, 15, 20, 25, 30], 25], [[], "aepple"], [[1, 5, 2, 3], [1, 5, 2, 3]], [[0, 24, 1, 2, 3], [0, 24, 1, 2, 3]], [[5, 6, 10, 15, 20, 25, 30], 16], [[1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false], [[4, 6], 1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false]], [[null, 74, null, 5.5, false, "cherry", 9.1, -51, true], []], [[1, 5, 2, 5, 3, 2], [1, 5, 2, 5, 3, 2, 2]], [["apple", "a", "JMv", "MzMX"], 5], [["baJMva", "banana", "banana"], 10], [[null, 74, null, 5.5, false, "cherry", 9.1, -51, true], [true, false, false, false]], [[1, "hello", true, 5.5, [1, 2, 3], [4, 5, 6], {"a": 1, "b": 3}, true, "hello", "hello", false], "hello"], [[false, true, true], []], [[56.56098853425999, 69, 8], []], [["banana"], ["banana"]], [["apple", "a", "JJMv", "MzMX", "apple"], ["apple", "a", "JMv", "MzMX", "apple"]], [["apple", "banana", "chrerry", "apple", "banana", "apple"], "apple"], [[7.20597881844995, 5.5, 5.5, 12.262087321967073, 2.3, -43.60056353102604], []], [[false, false, true, false, true, false, true, false], "aepple"], [[1, 5, 3], [1, 5, 2, 3]], [[], -51], [[10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true, true], [10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true]], [[["cherry", "apple", "banana"], ["apple", "cherry"]], [["cherry", "apple", "banana"], ["apple", "cherry"]]], [["apple", 1, 3.14, "banana", 1, "apple", "banana", 6, 3.14], "apple"], [["a", "MzMX", "apple"], ["apple", "a", "JMv", "MzMX", "apple", "apple"]], [[[1, 2, 3], [4, 5, 6], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], [[1, 5, 2, 6, 5, 3, 2], [1, 5, 2, 5, 3, 2]], [["apple", 7, 3.14, 1, "apple", "banana", 6, 3.14], "cherry"], [["apple", 1, 3.14, "banana", 1, "apple", "banana", 3.14, "apple"], "cherry"], [[1, 2, 5, 3], [1, 5, 2, 3]], [[1.5, 2.3, 4.7, 1.019517386952951, 7.8, 9.1, 1.5], 1.5], [[1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false], [[4, 6], 1, true, 5.5, [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [4, 5, 6]], [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]], [["bananaapple", "a", "JJMv", "MzMX", "apple"], ["apple", "a", "JJMv", "MzMX", "apple"]], [["apple", "a", "MzMX", "a"], 5], [[false, false, true, true, false], []], [["a", "MzMX", "aaepplepple"], ["a", "MzMX", "apple"]], [["apple", "banana", "chrerrhelloy", "chrerry", "banana", "baanana", "apple"], ["apple", "banana", "chrerry", "banana", "apple"]], [[1, 2, 3, 2], [1, 5, 2, 3, 2]], [["MzMX", "aaepplepple"], ["a", "MzMX", "a", "apple"]], [[30, 0, 24, 1, 2, 3, 0, 2], [30, 0, 24, 1, 2, 3, 0]], [["baJMva", "banana", "banana"], 1], [["apple", "a", "JJMv", "aaaepplepple", "MzMX", "apple", "apple"], ["apple", "a", "JJMv", "MzMX", "apple", "apple"]], [["MzMX", "aaepplepple"], ["a", "MzMX", "apple"]], [[5, 6, 10, 15, 25, 30], 17], [[30, 0, 24, 1, 2, 3, 25, 0, 2], [30, 0, 24, 1, 2, 3, 25, 0, 2]], [[2.3, 7.20597881844995, 5.5, 5.5, 12.262087321967073, 2.3, -43.60056353102604, 12.262087321967073], [2.3, 7.20597881844995, 5.5, 5.5, 12.262087321967073, 2.3, -43.60056353102604]], [[], [["apple", "cherry"]]], [[24, 1, 2, 25, 3], [24, 1, 2, 24, 3]], [[1, 2, 3, 3, 2, 3], [1, 5, 2, 3, 2]], [["apple", 3.14, "banana", 1, "apple", "banana", 6, 3.14], ["apple", 1, 3.14, "banana", 1, "apple", "banana", 6, 3.14]], [[0, 24, 1, 2, 3, 24], [3, 0, 24, 1, 2, 3]], [[56.56098853425999, 69, 8], [74, 20, false, -89]], [[1, 5, 2, 2, 5], [1, 2, 3]], [[1, 2, 5, 3, 2], [1, 5, 2, 3]], [[30, 0, 24, 1, 2, 3, 25, 0, 2], [30, 0, 1, 2, 3, 25, 0, 2]], [[1, 2, 7], [1, 2, 2]], [[1, 6, 2, 3], [1, 2, 4, 5, 3]], [[1, 2, 3], [1, 2, 3, 2]], [[5, 6, 10, 15, 20, 25, 31, 30], 6], [[false, false, true, false, true, false, false, true, false], [false, false, true, false, true, false, false, true, false]], [[24, 1, 2, 26, 3], [24, 1, 2, 26, 3, 26]], [["apple", 1, 3.14, "banana", 1, "apple", "banana", "appple", 3.14, "apple"], ["apple", 1, 3.14, "banana", 1, "apple", 3.14, "apple"]], [[1, 5, 2, 3], [3, 1, 5, 2, 3]], [[30, 0, 24, 1, 2, 4, 0], [30, 24, 1, 2, 3, 0]], [[30, 0, 24, 1, 2, 3, 0, 2], [30, 0, 24, 1, 2, 2, 3, 0, 2]], [[10, 15, 20, "apple", "banana", "apple", true, false, true, true, "apple"], [10, 15, 9, 20, "apple", "banana", "apple", "cherry", true, false, true]], [[5, 6, 10, 15, 20, 25, 31, 30], -51], [[30, 0, 24, 1, 2, 3, 0, 2], [30, 0, 24, 1, 2, 3, 0, 2]], [[10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true], [10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true]], [["apple", "banana", "chrerry", "apple", "banana", "apple"], "applehello"], [[1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", false], [1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false]], [[7, 10, 15, 20, 25], 9], [[0, 24, 1, 2, 3, 0, 2], [30, 0, 24, 1, 2, 3, 0]], [[1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", false, "hello"], [1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false]], [[10, 15, 20, "apple", "banana", "apple", "cherry", true, false, true, true, "apple"], [10, 15, 9, 20, "apple", "banana", "apple", "cherry", true, false, true]], [[[1, 2, 3], [4, 6], [7, 8, 9, 10], [4, 5, 6]], [[1, 2, 3], [4, 6, 5, 6], [7, 8, 9, 10]]], [[24, 1, 2, 26, 3, 26], [24, 1, 2, 26, 3, 26]], [["apple", "banana", 1, "apple", "banana", 6, 3.14], ["apple", 1, 3.14, "banana", 1, "apple", "banana", 6, 3.14]], [[1, 2, 3, 2], [1, 2, 3, 2]], [[[1, 2, 3], [1, 2, 3], [4, 5, 6, 4], [4, 5, 7], [7, 8, 9, 10], [4, 5, 6]], [[1, 2, 3], [4, 5, 6, 4], [4, 5, 7], [7, 8, 9, 10], [4, 5, 6]]], [["apple", "a", "JMv", "MzMX"], false], [[1, true, 5.5, [1, 16, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", false], [1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false, 1]], [[1, true, 5.5, [1, 2, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", "hello", false, 25], [1, true, 5.5, [1, 0, 16, 3], [4, 6], {"a": 1, "b": 2}, true, "hello", false]]], "contract": "\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n"}
{"task_id": "Mbpp/251", "prompt": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n", "entry_point": "insert_element", "canonical_solution": "\ndef insert_element(list1, element):\n    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1\n", "base_input": [[["Red", "Green", "Black"], "c"], [["python", "java"], "program"], [["happy", "sad"], "laugh"]], "atol": 0, "plus_input": [[[], "hello"], [[], ""], [[], "a"], [[], "test"], [[-94.19039842971628, -3.4031380684866406, -22.045351968568852, -94.19039842971628], "a"], [[-94.19039842971628, -3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628], [-94.19039842971628, -3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628]], [[-3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628], [-3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628]], [[], []], [[], [true, null, false, 13, -94.19039842971628, true, [false, true, false], "a", "Kt", -22.045351968568852]], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628], "KKt"], [[-110.18868196148436, -22.045351968568852, -3.4031380684866406, -94.19039842971628, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628], [-110.18868196148436, -22.045351968568852, -3.4031380684866406, -94.19039842971628, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628]], [["hello", "", "WDPtUNwkN"], []], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628], [false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628]], [[false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406], "hello"], [[-22.045351968568852, -82.8763282419803, -2.803921953211244, -21.852741451510866], ""], [[-94.19039842971628, -3.4031380684866406, -22.045351968568852, -94.19039842971628], [-94.19039842971628, -3.4031380684866406, -22.045351968568852, -94.19039842971628]], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628], "KK"], [[-3.4031380684866406, -22.045351968568852, -94.19039842971628], [-3.4031380684866406, -22.045351968568852, -94.19039842971628]], [[true, null, false, 13, -94.19039842971628, true, [false, true, false], "hello", "Kt", -22.045351968568852], [true, null, false, 13, -94.19039842971628, true, [false, true, false], "hello", "Kt", -22.045351968568852]], [[-3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -3.196651036104], [-3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -3.196651036104]], [[false, null, true, "KFgDNCb", true, null, -2.57707920570307, -94.19039842971628], [false, null, true, "KFgDNCb", true, null, -2.57707920570307, -94.19039842971628]], [[true, null, false, 13, true, [false, true, false], "hello", "Kt", -22.045351968568852], [true, null, false, 13, true, [false, true, false], "hello", "Kt", -22.045351968568852]], [[true, null, 13, -94.19039842971628, true, [false, true, false], "hello", "Kt", -22.045351968568852], [true, null, 13, -94.19039842971628, true, [false, true, false], "hello", "Kt", -22.045351968568852]], [["hello", "hello", "WDPtUNwkN"], ["hello", "hello", "WDPtUNwkN"]], [["hello", "test", "", "WDPtUNwkN"], ["hello", "test", "", "WDPtUNwkN"]], [[-3.4031380684866406, -25.009170281817564, -94.19039842971628], [-3.4031380684866406, -25.009170281817564, -94.19039842971628]], [[false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406], "hellvQqwGo"], [[-3.4031380684866406, -25.009170281817564, -94.19039842971628, -3.4031380684866406], [-3.4031380684866406, -25.009170281817564, -94.19039842971628, -3.4031380684866406]], [[true, null, false, 13, -94.19039842971628, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852], [true, null, false, 13, -94.19039842971628, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852]], [[false, null, true, true, null, -3.196651036104, -94.19039842971628], "KKt"], [[-110.18868196148436, -22.045351968568852, -3.4031380684866406, -86.22192429070427, -94.19039842971628, -94.19039842971628, -22.045351968568852, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628], [-110.18868196148436, -22.045351968568852, -3.4031380684866406, -86.22192429070427, -94.19039842971628, -94.19039842971628, -22.045351968568852, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628]], [[[false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852], [[false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852]], [[], ["hello", "Qsu", "gQF", "", "WDPtUNwkN", "KKt", "pgSRk", "phsacmTi"]], [[false, null, null, true, "KFgDNCb", true, -3.196651036104, -94.19039842971628], [false, null, null, true, "KFgDNCb", true, -3.196651036104, -94.19039842971628]], [["hello", ""], []], [[-110.18868196148436, -22.045351968568852, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628, -94.19039842971628], [-110.18868196148436, -22.045351968568852, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628, -94.19039842971628]], [[false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406], [false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406]], [["tesst", "", "WDPtUNwkN"], ["tesst", "", "WDPtUNwkN"]], [[true, false, true, false, false, false, false, false, true], [true, false, true, false, false, false, false, false, true]], [[], "KKta"], [[-22.045351968568852, -3.4031380684866406, -86.22192429070427, -94.19039842971628, -94.19039842971628, -22.045351968568852, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852], [-22.045351968568852, -3.4031380684866406, -86.22192429070427, -94.19039842971628, -94.19039842971628, -22.045351968568852, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852]], [[false, null, false, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628], [false, null, false, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628]], [[-3.4031380684866406, -2.57707920570307, -94.19039842971628], [-3.4031380684866406, -2.57707920570307, -94.19039842971628]], [[true, null, false, 13, true, [false, true], [false, true, false], "a", -22.045351968568852], [true, null, false, 13, true, [false, true], [false, true, false], "a", -22.045351968568852]], [["tesst", "", "WDPtUNwkN", ""], ["tesst", "", "WDPtUNwkN", ""]], [[false, true, true, true, true, true, true], []], [[false, false, false, true, true, true, true], [false, false, false, true, true, true, true]], [[[true, false, true], [false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "a"], [[true, false, true], [false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "a"]], [[true, null, false, 13, -94.19039842971628, true, [false, true], [false, true, false], "WDPtUNwkN", "Kt", -22.045351968568852], [true, null, false, 13, -94.19039842971628, true, [false, true], [false, true, false], "WDPtUNwkN", "Kt", -22.045351968568852]], [[-3.196651036104, -94.19039842971628, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628, -3.196651036104], [-3.196651036104, -94.19039842971628, -94.19039842971628, -22.045351968568852, -3.196651036104, -94.19039842971628, -3.196651036104]], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628], "heKKtallo"], [[69.06024154700933, -43.46372371400851, -22.045351968568852, -40.40554092503732, 73.33460451864283, -46.34526064348461, -110.18868196148436, 73.33460451864283], "test"], [[[true, false, true], [false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "a", "a"], [[true, false, true], [false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "a", "a"]], [[true, null, false, 13, -94.19039842971628, true, [false, true, false], "a", "Kt", -22.045351968568852], [true, null, false, 13, -94.19039842971628, true, [false, true, false], "a", "Kt", -22.045351968568852]], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628], "WDPtUNwkN"], [[false], "a"], [[true, null, false, 13, -94.19039842971628, false, [false, true, true], [false, true, false], "WDPtUNwkN", "Kt", -22.045351968568852], [true, null, false, 13, -94.19039842971628, false, [false, true, true], [false, true, false], "WDPtUNwkN", "Kt", -22.045351968568852]], [["", "WDPtUNwkN"], ["", "WDPtUNwkN"]], [[-22.045351968568852], [-22.045351968568852]], [[true, null, 13, -94.19039842971628, true, [false, true, false], "hello", "Kt", -22.045351968568852, 13], [true, null, 13, -94.19039842971628, true, [false, true, false], "hello", "Kt", -22.045351968568852, 13]], [[false, null, null, true, "KFgDNCb", false, -3.196651036104, -94.19039842971628], [false, null, null, true, "KFgDNCb", false, -3.196651036104, -94.19039842971628]], [["hello", "heello", ""], []], [[true, null, 13, -94.19039842971628, true, [false, true, false], [false, true], "hello", "Kt", -22.045351968568852, "hello"], [true, null, 13, -94.19039842971628, true, [false, true, false], [false, true], "hello", "Kt", -22.045351968568852, "hello"]], [[-3.4031380684866406, -25.009170281817564, -94.19039842971628, -94.19039842971628], [-3.4031380684866406, -25.009170281817564, -94.19039842971628, -94.19039842971628]], [[false, "miBGIG", "hello", {}, -47.901138589551515, [false, null, true, 34.46298598167968, [-52, 57, false, -20, -60]], true, [80.80611394097215, 91.28180027393006, -127.70265372891836, -86.37155595068646], "a"], []], [["tesst", "", "WDPtUNwkN", "Kt"], ["tesst", "", "WDPtUNwkN", "Kt"]], [["hello", "", "hello"], [true, true, true]], [[-22.045351968568852, -3.4031380684866406, -86.22192429070427, -94.19039842971628, -94.19039842971628, -22.045351968568852, -110.61432450803059, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -94.19039842971628], [-22.045351968568852, -3.4031380684866406, -86.22192429070427, -94.19039842971628, -94.19039842971628, -22.045351968568852, -110.61432450803059, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -94.19039842971628]], [[-3.4031380684866406, -25.009170281817564, -3.4031380684866406], [-3.4031380684866406, -25.009170281817564, -3.4031380684866406]], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628, null], [false, null, true, "KFgDNCb", true, null, -3.196651036104, -94.19039842971628, null]], [[-50.04786752277453, -3.4031380684866406, -22.045351968568852, -94.19039842971628], [-50.04786752277453, -3.4031380684866406, -22.045351968568852, -94.19039842971628]], [[-110.18868196148436, -22.045351968568852, -3.4031380684866406, -94.19039842971628, -22.045351968568852, 73.33460451864283, -3.196651036104, -94.19039842971628, -94.19039842971628], [-110.18868196148436, -22.045351968568852, -3.4031380684866406, -94.19039842971628, -22.045351968568852, 73.33460451864283, -3.196651036104, -94.19039842971628, -94.19039842971628]], [[false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406, -3.196651036104], [false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406, -3.196651036104]], [[-110.61432450803059, -3.4031380684866406, -94.19039842971628, -3.4031380684866406, -110.61432450803059], [-110.61432450803059, -3.4031380684866406, -94.19039842971628, -3.4031380684866406, -110.61432450803059]], [[true, null, false, 13, -94.19039842971628, [false, true, false], "hello", "Kt", -22.045351968568852], [true, null, false, 13, -94.19039842971628, [false, true, false], "hello", "Kt", -22.045351968568852]], [[false, true, true, true, true, true, true, true], []], [[-22.045351968568852, -3.4031380684866406, -86.22192429070427, -3.4031380684866406, -94.19039842971628, -94.19039842971628, -22.045351968568852, -110.61432450803059, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -94.19039842971628], [-22.045351968568852, -3.4031380684866406, -86.22192429070427, -3.4031380684866406, -94.19039842971628, -94.19039842971628, -22.045351968568852, -110.61432450803059, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -94.19039842971628]], [[-3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628], [-3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628]], [["KKta", "tesst", "WDPtUNwkN", ""], ["KKta", "tesst", "WDPtUNwkN", ""]], [["tesst", "", ""], ["tesst", "", ""]], [[false, null, true, "KFgDNCb", true, null, -3.196651036104, null], [false, null, true, "KFgDNCb", true, null, -3.196651036104, null]], [[true, null, false, 13, true, "Ktest", [false, true, false], "hello", "Kt", -22.045351968568852], [true, null, false, 13, true, "Ktest", [false, true, false], "hello", "Kt", -22.045351968568852]], [[-93.5229606452169, -3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -3.196651036104, -93.5229606452169], [-93.5229606452169, -3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -3.196651036104, -93.5229606452169]], [[-2.556941464179389, -22.045351968568852, -94.19039842971628, -94.19039842971628, -3.196651036104], [-2.556941464179389, -22.045351968568852, -94.19039842971628, -94.19039842971628, -3.196651036104]], [[-94.19039842971628, -3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -94.19039842971628], [-94.19039842971628, -3.196651036104, -22.045351968568852, -94.19039842971628, -94.19039842971628, -94.19039842971628]], [[], [27, 54, 81, -99, 44, -83, 11, 13, 48, -60]], [[false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406, -3.196651036104, -21.852741451510866], [false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, false, -3.4031380684866406, -3.196651036104, -21.852741451510866]], [[[true, false, true], [false, false, false], true, null, false, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "aa", [true, false, true]], [[true, false, true], [false, false, false], true, null, false, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "aa", [true, false, true]]], [[[true, false, true], [false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "aa"], [[true, false, true], [false, false, false], true, null, false, 13, true, [false, true], [false, true, false], "a", "Kt", -22.045351968568852, "Kt", "aa"]], [[false], [false]], [[false, true, true, true, true, true, true, true, true], [false, true, true, true, true, true, true, true, true]], [[-22.045351968568852, -3.4031380684866406, -86.22192429070427, -3.4031380684866406, -94.19039842971628, -94.19039842971628, -22.045351968568852, -110.61432450803059, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -94.19039842971628, -110.61432450803059], [-22.045351968568852, -3.4031380684866406, -86.22192429070427, -3.4031380684866406, -94.19039842971628, -94.19039842971628, -22.045351968568852, -110.61432450803059, -127.70265372891836, -3.196651036104, -3.4031380684866406, -94.19039842971628, -22.045351968568852, -94.19039842971628, -110.61432450803059]], [[-31.812214775047895, -22.045351968568852], [-31.812214775047895, -22.045351968568852]], [[-94.19039842971628, -3.196651036104, -22.045351968568852, -94.81098849960834, -94.19039842971628, -3.196651036104], [-94.19039842971628, -3.196651036104, -22.045351968568852, -94.81098849960834, -94.19039842971628, -3.196651036104]], [[true, null, false, 13, true, "Ktest", "hello", "Kt", -22.045351968568852, 13, "Kt"], [true, null, false, 13, true, "Ktest", "hello", "Kt", -22.045351968568852, 13, "Kt"]], [["hello", "", "WDPtUNwkN"], [-49.20601520980918, -34.97265878807312, -97.55747426953346, -2.556941464179389, 61.877729171555785, 39.82666015791048, -0.4221719048091046]], [[false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, true, false, -3.4031380684866406, -3.6401136548919855], [false, "aCPbIjyB", -21.852741451510866, "vQqwG", -2.803921953211244, false, -3.196651036104, true, false, -3.4031380684866406, -3.6401136548919855]], [[-94.70818325523408, -94.19039842971628, -3.4031380684866406, -22.045351968568852, 61.877729171555785, -94.19039842971628], [-94.70818325523408, -94.19039842971628, -3.4031380684866406, -22.045351968568852, 61.877729171555785, -94.19039842971628]], [[false, true, false, true, true, true, true], [false, true, false, true, true, true, true]], [[false, null, true, "KgFgDNCb", true, null, -3.196651036104, null], [false, null, true, "KgFgDNCb", true, null, -3.196651036104, null]], [["phsacmTi", "WDPtUNwkN"], ["phsacmTi", "WDPtUNwkN"]], [[-22.045351968568852, -82.8763282419803, -2.803921953211244, -25.644850042784427], "hellvQqwGo"], [[true, null, false, 13, -94.19039842971628, true, [false, true], [false, true, false], "WDPtUNwkN", "Kt", -22.045351968568852, true], [true, null, false, 13, -94.19039842971628, true, [false, true], [false, true, false], "WDPtUNwkN", "Kt", -22.045351968568852, true]], [[true, true], [true, true]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n"}
{"task_id": "Mbpp/252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "entry_point": "convert", "canonical_solution": "\nimport cmath  \ndef convert(numbers):    \n  return cmath.polar(numbers)  \n", "base_input": [[1], [4], [5]], "atol": 0, "plus_input": [["(1+2j)"], ["(-3+4j)"], ["(2-5j)"], ["(2+3j)"], ["(-4-2j)"], ["5j"], ["(1-1j)"], ["(6+0j)"], ["(3+0j)"], ["-3j"], ["(0.5+0.5j)"], ["(3-4j)"], ["(-2+3j)"], ["1j"], ["(4+3j)"], ["0j"], ["(4+2j)"], ["(-1-4j)"], ["6j"], ["(2+2j)"], ["(5-3j)"], ["(-3+5j)"], ["69.02761442257642"], ["4.480282583176166j"], ["(-0-2.8866591213002657j)"], ["1.8339464931468865j"], ["1.1632560023978717j"], ["5.586903526274092j"], ["4.9325950056031465j"], ["5.982229804759806j"], ["1"], ["0"], ["69.9026432060336"], ["68.89398657521126"], ["(-0-1.7734628811885071j)"], ["(-0-1.3923179090484485j)"], ["(-0-2.4244997922730285j)"], ["1.0653576332470696j"], ["5.654751542806139j"], ["(-0-3.3513367267140888j)"], ["69.95759903803496"], ["64.60629626821124"], ["2.523101886352822j"], ["2.4723827442830064j"], ["1.5954448547729851j"], ["0.28095482047285447j"], ["(-0-2.8437961395593727j)"], ["2.718200483696477j"], ["81.61240705438665"], ["2.427286174918197j"], ["(-0-3.1383875539106447j)"], ["0.7671828756486694j"], ["0.5646275311487383j"], ["1.3241308894242676j"], ["1.9653544762525699j"], ["0.483965259991584j"], ["1.2806038249577065j"], ["(-0-2.742593821091259j)"], ["39.14336844635568"], ["(-0-1.554220231492268j)"], ["(-0-0.06002590618992332j)"], ["0.359476671590649j"], ["(-0-1.4780861733597002j)"], ["84.71154294399365"], ["65.87093338696945"], ["1.4148452935192064j"], ["63.68365464704737"], ["(-0-2.453133050376202j)"], ["(-0-3.365888737477067j)"], ["5.119849769359963j"], ["(-0-2.9770669277716193j)"], ["1.0268278439540401j"], ["(-0-2.2848792242860476j)"], ["(-0-2.5315094242643674j)"], ["5.946927975746798j"], ["(-0-2.6888219799266664j)"], ["(-0-1.4026270187478314j)"], ["(-0-0.7647685359700735j)"], ["5.799372252854404j"], ["69.20131118955786"], ["2.824626575647983j"], ["0.11045819635759302j"], ["1.781743445228249j"], ["(-0-1.0570051223587917j)"], ["(-0-0.40367510752848546j)"], ["(-0-1.0945668230765322j)"], ["1.4422081370591302j"], ["66.37710776621364"], ["0.7954150660711281j"], ["2.0205767116812545j"], ["83.7742294602561"], ["(-0-0.5105311516531497j)"], ["64.07916373840905"], ["0.6460925139263856j"], ["(-0-0.20205617139005683j)"], ["3.4342717587111635j"], ["1.534974182792563j"], ["1.0987650448789927j"], ["0.31022207996584994j"], ["5.929383106401057j"], ["2.1996207875536746j"], ["(-0-1.9502206049649806j)"], ["(-0-0.05372412411858196j)"], ["1.8654862042995812j"], ["(-0-1.2613497262525142j)"], ["-58.97820691559647"], ["2.3409994111314996j"], ["69.52491267479274"], ["1.2048735288511763j"], ["(-0-0.8775801175894351j)"], ["2.4348272708295844j"], ["6.428277805264403j"], ["3.3735223968848786j"], ["(-0-3.102461443790692j)"], ["6.246725845665113j"], ["5.617377472771601j"], ["(-0-3.178715770909393j)"], ["68.96072133838915"], ["0.8803089947178533j"], ["(-0-1.4610235926529014j)"], ["1.307920964727237j"], ["(-0-1.1043456934929188j)"]], "contract": "\n  assert isinstance(numbers, (int, float, complex)), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)\n"}
{"task_id": "Mbpp/253", "prompt": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n", "entry_point": "count_integer", "canonical_solution": "\ndef count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)\n", "base_input": [[[1, 2, "abc", 1.2]], [[1, 2, 3]], [[1, 1.2, 4, 5.1]]], "atol": 0, "plus_input": [[[1, [2, 3], "abc", {"4": 5}, [6, 7]]], [[]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[[9]]]]], [[1, 2, 3, 4, 5]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[1, [2, [3, [4, [5]]]]]], [[[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]]]], [[[["a", "b"], ["c", "d"]], [["e", "f"], ["g", "h"]]]], [[[[1, "a"], ["b", 2]], [[3, "c"], ["d", 4]]]], [[[[1, 2], [3, 4]], [[[5, 6]]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]]]], [[[[1, 2], [3, 4]], [[5, 6]], [[[9]]]]], [[11, 1]], [[11, 1, 1]], [[[1, 2], [1, 4], [5, 6], [7, 8], [5, 6]]], [[[1, 4], [5, 6], [7, 8], [5, 6]]], [[[3, 4], [5, 6], [7, 8]]], [[[3, 4, 3], [5, 6], [7, 8]]], [[[[1], [2], [3]], [[7], [8], [9]]]], [["kPNXDG", "SHDvQ", "f", "g", "abc", "LBmjm", "Us", "abc", "a"]], [["kPNXDG", "SHDvQ", "f", "g", "abc", "LBmjm", "Us", "abbc", "a", "g"]], [[[[1, 2], [3, 4]], [[5, 6]], [], []]], [[[[1, 2, 3], [4, 6]], [[1, 2, 3], [4, 6]], [[10, 11, 12]], [[10, 11, 12]]]], [[[[[9], [9]]], [[1, 2], [3, 4]], [[5, 6]], [[[9], [9]]], [[[9], [9]]]]], [[1, [2, 3, 2], "abc", {"4": 5}, [6, 7]]], [[[[1], [2], [3]], [[7], [8], [9]], [[7], [8], [9]]]], [[1, [2, 3], [2, 7], "abc", {"4": 5}, [6, 7]]], [[[[1, "a"], ["b", 2], [1, "a"]], [[3, "c"], ["d", 4], ["d", 4]]]], [[[[1, 2, 3], [4, 6]], [[1, 2, 3], [4, 6]], [], [], []]], [[1, [2, 3], [2, 7], "abc", {"4": 5}, [6, 7], [2, 3]]], [[1, [2, 3], [2, 7], "abc", {"4": 5}, [7], [2, 3]]], [[[[1, 1], [], [1, 1], [2], []], [[7], [8], [9]], [[1, 1], [], [1, 1], [2], []], [[1, 1], [], [1, 1], [2], []], [[7], [8], [9]]]], [[[3, 4], [5, 6], [7], [7]]], [[[[1, 2, 3], [4, 6]], [[1, 2, 3], [4, 6]], [], [], [], []]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"], [[1, 2, 3], [4, 6]], [], []]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"], [[1, 2, 3], [4, 6]], [], [], []]], [[[["a", "b"], ["c", "d"], ["a", "b"]], [["e", "f"], ["g", "h"]]]], [[[[1, 2, 3], [4, 5, 6]]]], [[[[1, 2, 3], [4, 6]], [[1, 2, 3], [4, 6]], [false, 3, "kPNXDG", 9, ["e"], null], [], [true, true, false, false, false, false, false, false, true]]], [[[["cc", "d"], ["a", "b"], ["cc", "d"]], [["e", "f"], ["g", "h"]]]], [[[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]], [[[2, 3], "abc", {"4": 5}, [6, 7]]], [[1, 1]], [[[3, 4], [5, 6, 5], [5, 6, 5], [7, 11]]], [[[[1, "a"], ["b", 2]], [[3, "c"], ["dd", 4]], [[3, "c"], ["dd", 4]]]], [[[[1], [2, 2], [3]], [[4], [5], [6]], [[7], [8], [9]]]], [[[[1, 2], [3, 4]], [[[5, 6]]], [[[5, 6]]]]], [[[[1, 2], [3, 4]], [[5, 6], [5, 6]], [], []]], [[[[1, 2], [3, 4]], [], [], [], []]], [[11, 1, 0]], [[[1, 2], [5, 6, 5], [1, 4], [5, 6, 5], [7, 8, 8], [5, 6, 5], [5, 6, 5]]], [[[[1, 2], [3, 4]], [[5, 6]], [], [[5, 6]], []]], [[[[1, "a"], ["b", 2]], [[3, "c"], ["dd", 4]]]], [[[[1, 2, 3], [4, 5], [4, 5]], [[1, 2, 3], [4, 5], [4, 5]], [[1, 2, 3], [4, 5], [4, 5]]]], [[[4], [5, 6, 5, 5], [5, 6, 5, 5], [5, 6, 5, 5], [7, 11]]], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], [[[3, 4], [5, 6], [], []]], [["kPNXDG", "SHDvQ", "f", "g", "abc", "LBmjm", "Us", "abc", "a", "abc"]], [[[4], [5, 6, 5, 5], [5, 6, 5, 5], [7, 11], [5, 6, 5, 5]]], [[[[1, 2], [3, 4]], [[5, 6], [5, 6], [5, 6]], [[5, 6], [5, 6], [5, 6]], [], []]], [[1]], [[[["c"], ["c"], ["d", 4]], [[1, "a"], ["b", 2]], [["c"], ["c"], ["d", 4]]]], [[[[1, 2, 3], [4, 6]], [[1, 2, 3], [4, 6]], [false, 3, "kPNXDG", 9, ["e"], null], [], [true, true, false, false, false, false, false, false, false, true]]], [[[2, 4], [5, 6], [], []]], [[[[1, 2, 3], [4, 6]], [], []]], [[[["e", "f"], ["g", "h"], ["e", "f"]], [["cc", "d"], ["a", "b"], ["cc", "d"]], [["e", "f"], ["g", "h"], ["e", "f"]], [["e", "f"], ["g", "h"], ["e", "f"]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]]], [[[[[9], [9], [9]]], [], [[1, 2], [3, 4]], [], [[[9], [9], [9]]], [[[9], [9], [9]]]]], [[[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]], [["kPNXDG", "SHDvQ", "g", "abc", "LBmjm", "Us", "abc", "a"]], [[[[1, 2], [3, 4]], [], [true, false, false, true, false, true, true, true, true, false], [], [], []]], [[[[5, 6], [1, 2, 3], [5, 6], [1, 2, 3]], [[5, 6], [1, 2, 3], [5, 6], [1, 2, 3]], [[5, 6], [1, 2, 3], [5, 6], [1, 2, 3]]]], [[[["e", "f"], ["g", "", "h"], ["e", "f"]], [["a", "bb"], ["cc", "d"], ["a", "bb"], ["cc", "d"]], [["a", "bb"], ["cc", "d"], ["a", "bb"], ["cc", "d"]], [["e", "f"], ["g", "", "h"], ["e", "f"]], [["e", "f"], ["g", "", "h"], ["e", "f"]], [["e", "f"], ["g", "", "h"], ["e", "f"]], [["e", "f"], ["g", "", "h"], ["e", "f"]]]], [[[1, 2], [1, 4], [5, 6], [7, 8], [5, 6], [1, 2]]], [[[[1, 2]], [[5, 6], [7, 8]], [[[9]]]]], [[1, [2, 3], {"4": 13}, [2, 7], "abc", {"4": 13}, 15, [6, 7]]], [[[1, 2], [1, 4], [5, 6], [5, 6]]], [[1, [2, 3], "", {"4": 5}, [6, 7]]], [[[[1, 2], [3, 4]], [true, false, false, true, false, true, true, true, true, false], [], [], []]], [["kPNXDG", "SHDvQ", "g", "abc", "LBmjm", "Us", "abc", "a", "SHDvQ"]], [[[[1, 2], [8, 3, 4]], [[5, 6]], [[1, 2], [8, 3, 4]], [[[9]]], [[1, 2], [8, 3, 4]]]], [[[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]], [[7], [8], [9]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]]], [[4]], [[[3, 4, 3], [5, 6], [7, 8], [5, 6]]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g", "JUVQOY"], [[1, 2, 3], [4, 6]], [], ["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g", "JUVQOY"], [], [[[59, 11, 30]], false, 11.194887701191348, -32.617974916245785, false, -30, "h", false], []]], [[[["e", "f"], ["hh", "g", "", "h"]], [["e", "f"], ["hh", "g", "", "h"]], [["a", "bb"], ["cc", "d"], ["a", "bb"], ["cc", "d"]], [["a", "bb"], ["cc", "d"], ["a", "bb"], ["cc", "d"]], [["e", "f"], ["hh", "g", "", "h"]], [["e", "f"], ["hh", "g", "", "h"]], [["e", "f"], ["hh", "g", "", "h"]], [["e", "f"], ["hh", "g", "", "h"]]]], [[[[1, 2], [8, 3, 4]], [[5, 6]], [[1, 2], [8, 3, 4]], [[[9]]]]], [[11]], [[[[1], [2], [3]], [[7], [8], [9]], [[1], [2], [3]]]], [[[3, 4, 3], [5, 6], [7, 8], [5, 6], [5, 6]]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"], [[1, 2, 3], [4, 6]], [true, false, false, true, true, false, true], [], []]], [[[[1, 2], [3, 4]], [[5, 6], [5, 6]], [], [], []]], [[[3, 11, 3], [5, 6], [3, 11, 3], [7, 8]]], [[[["a", "b"], ["c", "d"]], [["c", "e", "f"], ["c", "e", "f"], ["g", "h"]], [["c", "e", "f"], ["c", "e", "f"], ["g", "h"]]]], [[[2], {"4": 5}, [6, 7]]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"], [[1, 2, 3], [4, 6]], [true, false, false, true, true, false, true], [], ["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"]]], [[[[1, 2, 3], [4, 6]], [[1, 2, 3], [4, 6]], [[13, 10, 11, 12], [13, 10, 11, 12]], [[13, 10, 11, 12], [13, 10, 11, 12]]]], [[[], [], [], [false, [true, true], 8.958597109125321, [-32.617974916245785, -32.617974916245785], "vxnCJetyq", -57.174621216111944, -51, 50, 11.194887701191348]]], [[[["e", "f"], ["g", "h"]], [["e", "f"], ["g", "h"]]]], [[-32.617974916245785, 56.289568976775286, 65.82961136010562, 65.82961136010562]], [[[[1, 2], [8, 3, 4]], [[5, 6]], [[1, 2], [8, 3, 4]], [[1, 2], [8, 3, 4]]]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"], [[4, 6]], [true, false, false, true, true, false, true], [], [], []]], [[[4, 5, 6, 6], [1, 2, 3], [4, 5, 6, 6], [7, 8, 9], [1, 2, 3]]], [[["abbc", "abbc", "SHDvQ", "JUVQOY", "ysuXY", "g"], [[4, 6]], [true, false, false, true, true, false, true], [], [], [true, true, false, true]]], [[[3, 4], [6, 6], [6, 6], [7, 8]]], [["kPNXDG", "SHDvQ", "g", "abc", "LBmjm", "Us", "abc", "SHDvQ"]], [[[[1, 1, 3], [4, 5, 6]]]], [["kPNXDG", "SHDvQ", "f", "g", "abc", "Us", "abc", "a", "abc"]], [[[[1], [2], [3]]]], [["kPNXDG", "aa", "SHDvQ", "f", "g", "abc", "LBmjm", "Us", "abbc", "a", "g", "a"]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2\n"}
{"task_id": "Mbpp/255", "prompt": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n", "entry_point": "combinations_colors", "canonical_solution": "\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n", "base_input": [[["Red", "Green", "Blue"], 1], [["Red", "Green", "Blue"], 2], [["Red", "Green", "Blue"], 3]], "atol": 0, "plus_input": [[[], 0], [[], 2], [["A", "B", "C", "D"], 4], [["1", "2", "3", "4", "5"], 3], [["X", "Y", "Z", "W", "V"], 5], [["Dog", "Cat", "Bird", "Fish"], 2], [["Apple", "Banana", "Orange"], 3], [[], 3], [[], 5], [[96.2114299656439, 7.2887651994648195, 57.22322518606262, 57.22322518606262], 5], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262], 5], [[-15.974759744741093, -56.940078121175475, 7.2887651994648195, -46.32457755815658], 2], [[-15.974759744741093, -56.940078121175475, 7.2887651994648195, -46.32457755815658], 3], [[true, false, false, false, true, true, false, false], 2], [["1", "2", "3", "4", "5"], 2], [["Apple", "Bird", "Banana", "Orange"], 3], [[], 4], [[true, false, false, false, true, true, false, false, true], 2], [[2, true, 7, -44], 2], [[true, false, false, true, true, false, false, true], 0], [[true, -44, 77, 13, -6], 3], [[7.2887651994648195, 57.22322518606262, 57.22322518606262], 5], [["Apple", "Banana", "Orange"], true], [["1", "2", "B", "3", "4", "5"], 3], [[96.2114299656439, 7.2887651994648195, 57.22322518606262], 5], [[96.2114299656439, 7.2887651994648195, 56.50649563542532], 5], [[96.2114299656439, 7.2887651994648195, 56.50649563542532, 7.2887651994648195], 5], [[true, -44, 77, 13], 2], [["X", "Y", "Z", "W", "V"], 13], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.2114299656439], 5], [[true], 4], [[2, true, 7, -45], 2], [["Dog", "Cat", "Bird", "Fish", "Cat"], 2], [["D", "gFZNMZdhcV", "XWJuC", "Bird", "1", "SXWexM", "Z", "BAATOxwnYH", "qkuW", "V"], 2], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.2114299656439], 4], [[], 6], [[false, -44, 77, 13, -6, 77], 3], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.73431974512846], 5], [[true, false, false, false, true, true, false, false], 4], [[true, false, false, false, true, true, false, false, true, false], 2], [[-15.974759744741093, -56.940078121175475, 7.2887651994648195, -9.30673522512974, -46.32457755815658], 2], [["A", "C", "D", "A"], 4], [[true, false, false, true, false, false, true], 0], [["Dog", "Cat", "Bird", "Fish"], 5], [[96.2114299656439, 7.2887651994648195], 5], [[true, false, false, true, false, false, true, true], 5], [[true, true, false, false, false, true, true, false, false], 4], [["Dog", "Cat", "Bird", "Fish", "Cat"], 1], [[57.22322518606262], 5], [[false, -44, 77, 13, -6, 77, 77], 3], [["Dog", "F1ish", "Cat", "Bird", "Fish", "Fish"], 5], [[-15.974759744741093, -56.940078121175475, 7.2887651994648195, -16.50492279989501, -46.32457755815658], 3], [[-15.974759744741093, -56.940078121175475, 7.2887651994648195], 5], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439], 3], [[-15.236427883245629, -56.940078121175475, 7.2887651994648195], 5], [[true], 5], [["Apple", "Bird", "Fish", "Orange", "Fish"], 3], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439], 2], [[-44, 77, 13, -6, 77, 77], 3], [["A", "B", "D"], 6], [[-16.50492279989501, 57.22322518606262, 57.22322518606262], 5], [[true, false, false, true, false, false, true, true, true], 5], [[false, true, "XWJuC"], 6], [[true, false, false, true, false, false, true, false], 5], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.2114299656439], 5], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.2114299656439], 3], [[true, false, false, true, false, false, true, false], 6], [[-44, 77, 13, 77, 77], 0], [["1", "2", "3", "4", "5"], 4], [[true, false, false, true, false, false, true, true, true], 6], [[-15.974759744741093, -56.940078121175475, -46.32457755815658], 3], [["Dog", "Cat", "Bird", "Fish", "Cat"], 0], [[false, -44, 77, 13, -6, 76, 77], 3], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.2114299656439, 96.2114299656439], 5], [["Apple", "ApSXWexMple", "Banana", "Orange"], 3], [[-15.974759744741093, -50.02392339800485, -56.940078121175475, 7.2887651994648195, -46.32457755815658], 3], [[false, true, "B"], 6], [[true, false, false, true, false, true, true, true], 6], [["D", "gFZNMZdhcV", "XWJuC", "Bird", "11", "SXWexM", "Z", "BAATOxwnYH", "qkuW", "V"], 2], [[-15.974759744741093, -56.940078121175475, 7.2887651994648195, -9.30673522512974, -46.32457755815658], 5], [["Dog", "Cat", "Bird", "Fish", "Bird"], 2], [["A", "B", "C", "D", "B"], 13], [["WW", "X", "Y", "Z", "W", "V"], 13], [[57.22322518606262, 96.2114299656439, 7.2887651994648195, 56.50649563542532], 5], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439, 96.2114299656439], 2], [["Dog", "Cat", "CatBird", "Bird", "Fish"], 77], [["Dog", "Cat", "Bird", "Fish"], 77], [["Apple", "Bird", "Fish", "Orange", "Fish", "Bird"], 2], [["Dog", "Cat", "Dog", "Bird", "Fish", "Cat", "Cat"], 1], [["Apple", "Banana", "Orange"], false], [["Dog", "Cat", "Bird", "Fish"], 76], [["Dog", "Cat", "Dog", "Bird", "Fish", "Cat", "Cat", "Cat"], 1], [["Apple", "ApSXWexMple", "Banana", "Orange"], 0], [[-15.974759744741093, -56.940078121175475], 3], [[false, -44, 77, 13, -6, 76, 77, -6], 3], [[false, true], 6], [[2, true, 7, -44], 76], [[false, -44, 77, 13, -6, 77], 7], [[false, -44, 77, 13, -6, 77, -6], 6], [["Dog", "CAat", "Bird", "Fish", "Cat"], 1], [[57.22322518606262, 96.2114299656439, 7.2887651994648195, 56.50649563542532], 77], [[96.2114299656439, 7.2887651994648195, 96.2114299656439, 57.22322518606262, 96.2114299656439, 7.2887651994648195], 2], [[], true], [["Dog", "C4at", "Fish"], 3], [["Banana", "Orange"], true], [[false, true, true, "XWXJuC", "XWJuC"], 6], [[84, 15], 2], [[96.2114299656439, 7.2887651994648195, 57.22322518606262, 96.2114299656439], 2], [[2, true, 7, -44], true]], "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n"}
{"task_id": "Mbpp/256", "prompt": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "entry_point": "count_Primes_nums", "canonical_solution": "\ndef count_Primes_nums(n):\n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n", "base_input": [[5], [10], [100]], "atol": 0, "plus_input": [[1000], [1001], [1002], [1003], [999], [true], [false], [998], [65], [66], [67], [997], [68], [64], [1004], [1005], [99], [996], [63], [995], [1006], [1007], [1008], [62], [994], [86], [1009], [85], [61], [87], [60], [44], [1010], [1011], [45], [59], [80], [100], [69], [70], [71], [98], [97], [79], [1012], [2], [1013], [84], [56], [1], [0], [81], [78], [43], [1014], [72], [1015], [90], [42], [41], [46], [88], [3], [1016], [57], [4], [38], [993], [1017], [77], [101], [1018], [83], [82], [76], [58], [73], [39], [74], [89], [40], [75], [1019], [96], [47], [94], [95], [55], [48], [5], [54], [1020], [102], [53], [91], [992], [1021], [991], [11], [92], [37]], "contract": "\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n", "assertion": "\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n"}
{"task_id": "Mbpp/257", "prompt": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "entry_point": "swap_numbers", "canonical_solution": "\ndef swap_numbers(a,b):\n    return (b, a)\n", "base_input": [[10, 20], [15, 17], [100, 200]], "atol": 0, "plus_input": [[-5, -10], [-100, -200], [-7, -3], [3.14, 2.718], [1.0, -0.5], [-100.5, 200.75], [5, 5], [-10, -10], [1.23, 1.23], [2.718, -0.5], [3.5839953593217544, 2.718], [5, -10], [-5, -11], [-8, -9], [-8, -10], [-8, -8], [1.0, 200.75], [200.75, 200.75], [-5, -8], [-100, -100], [200.0168272694265, 200.75], [6, -9], [1.7816735844630143, -0.5], [-5, -9], [-100.5, 1.7816735844630143], [1.110891875212232, 200.0168272694265], [-4, -11], [-5, -4], [-5, -5], [-102, -10], [0.9096439911291, 200.75], [-0.5, 200.75], [-8, -5], [-101, -100], [6, -11], [-9, -9], [-11, -11], [-4, -4], [-7, -10], [-11, -100], [-100.5, -0.6246510737114712], [1.110891875212232, 199.9586278490392], [199.80254729935734, 200.75], [200.0168272694265, 200.0168272694265], [-10, -200], [1.110891875212232, -100.5], [-4, -10], [-4, -12], [-0.34485327561456525, -0.5], [-4, -100], [-10, -12], [5, -3], [-7, -4], [-8, -7], [2.490084004197559, 1.7816735844630143], [201.10785660080364, 200.75], [-10, -8], [-10, -11], [109.06389054379079, 200.75], [1.110891875212232, 167.10351385707486], [-102, -101], [2.1330119070118485, -100.5], [true, 1.23], [124.61838179160847, 200.75], [-100, -10], [-9, -10], [-12, -10], [3.5839953593217544, -100.5], [2.1330119070118485, 124.14572872953535], [2.718, 200.0168272694265], [-13, -10], [2.1330119070118485, 200.75], [-102, -8], [-5, -13], [3.5839953593217544, 199.80254729935734], [0.9096439911291, 198.1727902022114], [-10, -4], [201.10785660080364, 201.10785660080364], [-13, -12], [-13, -13], [124.61838179160847, -0.24953757954867695], [-12, -12], [-5, 6], [2.22631597518509, 1.7816735844630143], [-9, -8], [-10, -9], [199.80254729935734, 247.7275752312867], [1.430105248193135, 200.75], [2.154236201660944, 2.4273044050861996], [1.7816735844630143, 1.7816735844630143], [-0.6246510737114712, 1.7816735844630143], [false, 266.8266128826292], [4.42809307831693, 2.718], [-7, -12], [124.61838179160847, 2.4273044050861996], [-13, -9], [-12, -11], [-0.6246510737114712, -0.6246510737114712], [-200, -11], [200.68795799999515, 200.75], [266.8266128826292, 266.8266128826292], [-7, -13], [0.4054844111976208, -0.5], [1.7816735844630143, 2.490084004197559], [4, 5], [-5, -101], [-5, -100], [5, -9], [-11, -10]], "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)\n"}
{"task_id": "Mbpp/259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n", "entry_point": "maximize_elements", "canonical_solution": "\ndef maximize_elements(test_tup1, test_tup2):\n  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n", "base_input": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]], [[[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]], [[[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]]], "atol": 0, "plus_input": [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[8, 7], [6, 5], [4, 3], [2, 1]]], [[[1, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [5, 6], [7, 8], [7, 8]]], [[[1, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [3, 4], [5, 6], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [7, 8]], [[1, 2], [5, 6], [7, 8], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [7, 8]], [[1, 2], [3, 4], [5, 6], [7, 8]]], [[[1, 2], [5, 6], [7, 8]], [[1, 2], [5, 6], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [7, 8]], [[1, 2], [4, 6], [7, 8], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [3, 8]], [[1, 2], [4, 6], [7, 8], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [1, 2]], [[1, 2], [4, 6], [7, 8], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [3, 8]], [[1, 2], [5, 6], [7, 8], [3, 8]]], [[[1, 2], [4, 6], [7, 8], [7, 8]], [[1, 2], [4, 6], [7, 8], [7, 8]]], [[[1, 2], [4, 6], [7, 8], [7, 8]], [[1, 2], [5, 6], [7, 8], [3, 8]]], [[[1, 2], [5, 6], [7, 8], [3, 8], [7, 8]], [[1, 2], [5, 6], [7, 8], [3, 8], [7, 8]]], [[[8, 7], [6, 5], [4, 3], [2, 1]], [[8, 7], [6, 5], [4, 3], [2, 1]]], [[[1, 2], [4, 6], [7, 8], [7, 8]], [[1, 2], [4, 4], [7, 8], [7, 8]]], [[[5, 6], [7, 8], [7, 8]], [[5, 6], [7, 8], [5, 6]]], [[[1, 2], [4, 4], [7, 8], [7, 8]], [[1, 2], [4, 4], [7, 8], [7, 8]]], [[[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[5, 6], [7, 8], [5, 6]], [[5, 6], [7, 8], [5, 6]]], [[[5, 6], [7, 8], [7, 8]], [[5, 3], [7, 8], [5, 6]]], [[[7, 8], [5, 6], [7, 8]], [[7, 8], [5, 6], [7, 8]]], [[[1, 2], [7, 8]], [[1, 2], [7, 8]]], [[[7, 8], [5, 6], [7, 8], [7, 8]], [[7, 8], [5, 6], [7, 8], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [1, 2]], [[1, 2], [5, 6], [7, 8], [1, 2]]], [[[5, 6], [7, 8], [5, 6]], [[5, 6], [7, 5], [5, 6]]], [[[1, 2], [4, 6], [7, 8]], [[1, 2], [4, 6], [7, 8]]], [[[5, 2], [5, 6], [7, 8], [7, 8]], [[5, 2], [5, 6], [7, 8], [7, 8]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8], [5, 6]]], [[[5, 6], [7, 8], [5, 6]], [[3, 6], [7, 8], [5, 6]]], [[[3, 5], [3, 4], [5, 6], [7, 8]], [[3, 5], [3, 4], [5, 6], [7, 8]]], [[[5, 6], [7, 8]], [[5, 6], [7, 8]]], [[[5, 6], [7, 5], [5, 6], [7, 5]], [[5, 6], [7, 5], [5, 6], [7, 5]]], [[[1, 2], [4, 6], [7, 8]], [[1, 2], [4, 6], [4, 6]]], [[[8, 7], [6, 5], [7, 3], [2, 1]], [[8, 7], [6, 5], [4, 3], [2, 1]]], [[[5, 6], [7, 5], [5, 6], [7, 5]], [[4, 6], [7, 5], [5, 6], [7, 5]]], [[[1, 2], [4, 5], [7, 8], [7, 8], [7, 8], [7, 8]], [[1, 2], [4, 5], [7, 8], [7, 8], [7, 8], [7, 8]]], [[[5, 6], [7, 5], [5, 6]], [[5, 6], [7, 5], [5, 6]]], [[[3, 5], [3, 4], [5, 6]], [[3, 5], [3, 4], [5, 6]]], [[[5, 3], [7, 8], [5, 6]], [[5, 3], [7, 8], [5, 6]]], [[[1, 2], [4, 6], [4, 6]], [[1, 2], [4, 6], [4, 6]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]], [[[7, 8], [5, 6], [7, 8], [7, 8], [5, 6]], [[7, 8], [5, 6], [7, 8], [7, 8], [5, 6]]], [[[1, 2], [3, 4], [5, 6], [7, 8]], [[6, 5], [4, 3], [2, 1], [2, 1]]], [[[2, 2], [2, 4], [5, 6], [7, 8]], [[1, 2], [5, 7], [7, 8], [7, 8]]], [[[1, 2], [5, 6], [7, 8], [1, 2]], [[2, 2], [5, 6], [7, 8], [1, 2]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8], [5, 6]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1], [8, 7]]], [[[1, 2], [3, 2], [5, 6], [7, 8], [7, 8]], [[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]]], [[[8, 7], [6, 5], [4, 3], [2, 1]], [[1, 2], [3, 4], [5, 6], [7, 8]]], [[[2, 2], [2, 4], [5, 6], [7, 8]], [[2, 2], [2, 4], [5, 6], [7, 8]]], [[[4, 6], [7, 5], [5, 6], [7, 5]], [[5, 6], [7, 5], [5, 6], [7, 5]]], [[[1, 2], [4, 6], [7, 8], [4, 6]], [[1, 2], [4, 6], [7, 8], [4, 6]]], [[[2, 2], [5, 6], [7, 8], [1, 2]], [[2, 2], [5, 6], [7, 8], [1, 2]]], [[[3, 4], [5, 6], [7, 8], [7, 8], [5, 6], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1], [8, 7]]], [[[5, 6], [7, 5]], [[5, 6], [7, 5]]], [[[2, 2], [2, 4], [5, 4], [7, 8]], [[2, 2], [2, 4], [5, 6], [7, 8]]], [[[5, 6], [7, 8], [7, 8]], [[5, 6], [7, 8], [7, 8]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [3, 4]], [[1, 2], [3, 4], [5, 6], [7, 8], [3, 4]]], [[[6, 5], [2, 1], [2, 1]], [[6, 5], [2, 1], [2, 1]]], [[[5, 6], [7, 8], [7, 8], [5, 6]], [[5, 6], [7, 8], [7, 8], [5, 6]]], [[[1, 5], [4, 6], [7, 8], [7, 8]], [[1, 2], [4, 6], [7, 8], [7, 8]]], [[[6, 3], [7, 8], [5, 6]], [[5, 3], [7, 8], [5, 6]]], [[[1, 6], [7, 8], [5, 6]], [[3, 6], [7, 8], [5, 6]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [3, 4], [3, 4]], [[1, 2], [3, 4], [5, 6], [7, 8], [3, 4], [1, 2]]], [[[3, 6], [7, 8], [5, 6]], [[3, 6], [7, 8], [5, 6]]], [[[6, 3], [7, 8], [5, 6], [7, 8]], [[5, 3], [7, 8], [5, 6], [5, 3]]], [[[1, 2], [4, 6], [4, 6], [4, 6]], [[1, 2], [4, 6], [4, 6], [4, 6]]], [[[5, 2], [7, 8], [5, 6], [7, 8], [7, 8]], [[5, 2], [5, 6], [7, 8], [7, 8], [7, 8]]], [[[1, 2], [4, 6], [7, 8], [7, 8], [1, 2]], [[1, 2], [4, 6], [7, 8], [7, 8], [1, 2]]], [[[5, 3], [7, 8]], [[5, 3], [7, 8]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [5, 6]], [[1, 1], [3, 4], [5, 6], [7, 8], [5, 6]]], [[[6, 3], [7, 8], [5, 6]], [[6, 3], [7, 8], [5, 6]]], [[[5, 6], [7, 5], [5, 6], [7, 5]], [[5, 6], [7, 5], [5, 6], [5, 6]]], [[[1, 2], [1, 2]], [[1, 2], [1, 2]]], [[[3, 4], [5, 6], [7, 8], [7, 8], [5, 6], [7, 8], [7, 8]], [[3, 4], [5, 6], [7, 8], [7, 2], [7, 8], [5, 6], [7, 8]]], [[[5, 6], [7, 8], [5, 6]], [[5, 6], [5, 6], [5, 6]]], [[[4, 6], [7, 5], [5, 6], [7, 5]], [[4, 6], [7, 5], [5, 6], [7, 5]]], [[[3, 2], [5, 6], [7, 8], [1, 2]], [[2, 2], [5, 6], [7, 8], [1, 2]]], [[[1, 2], [5, 6], [7, 8], [7, 8], [5, 6]], [[1, 2], [5, 6], [7, 8], [7, 8], [5, 6]]], [[[1, 2], [4, 6], [7, 8], [4, 6], [4, 6], [1, 2]], [[1, 2], [4, 6], [7, 8], [4, 6], [4, 6], [1, 2]]], [[[1, 2], [5, 6], [1, 2]], [[1, 2], [5, 6], [7, 8]]], [[[4, 6], [7, 3], [5, 6], [7, 5]], [[4, 6], [7, 5], [5, 6], [7, 5]]], [[[5, 6], [7, 8], [1, 2], [5, 6]], [[2, 2], [5, 6], [7, 8], [1, 2]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [3, 4], [1, 2]], [[1, 2], [3, 4], [5, 6], [7, 8], [3, 4], [1, 2]]], [[[2, 2], [5, 6], [7, 8], [1, 2]], [[2, 2], [5, 6], [7, 6], [1, 2]]], [[[4, 6], [4, 6]], [[1, 2], [4, 6]]], [[[1, 6], [7, 8], [5, 6]], [[1, 6], [7, 8], [5, 6]]], [[[8, 7], [6, 5], [4, 3], [2, 1], [8, 7]], [[8, 7], [6, 5], [4, 3], [2, 1], [8, 7]]], [[[6, 5], [2, 1], [2, 1]], [[6, 5], [2, 2], [2, 1]]], [[[1, 2], [3, 4], [7, 8]], [[6, 5], [2, 1], [2, 1]]], [[[3, 2], [5, 6], [1, 2]], [[2, 2], [7, 8], [1, 2]]], [[[5, 3], [7, 8], [4, 6]], [[5, 3], [7, 8], [5, 6]]], [[[1, 1], [3, 4], [5, 6], [7, 8], [5, 6]], [[1, 1], [3, 4], [5, 6], [7, 8], [5, 6]]], [[[1, 2], [5, 6], [5, 6]], [[1, 2], [5, 6], [7, 8]]], [[[4, 6], [7, 3], [7, 5]], [[4, 6], [7, 3], [7, 5]]], [[[1, 2], [3, 5], [5, 6], [7, 8]], [[1, 2], [3, 5], [5, 6], [7, 8]]], [[[6, 5], [4, 3], [2, 1], [2, 1]], [[6, 5], [4, 3], [2, 1], [2, 1]]], [[[1, 2], [4, 6], [7, 8]], [[1, 2], [7, 8], [7, 8]]], [[[7, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [5, 6], [7, 8], [7, 8]]], [[[8, 7], [6, 5], [7, 3], [2, 1]], [[8, 7], [6, 5], [7, 3], [2, 1]]], [[[5, 2], [5, 6], [7, 8], [7, 8]], [[5, 2], [5, 6], [7, 7], [7, 8]]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n"}
{"task_id": "Mbpp/260", "prompt": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n", "entry_point": "newman_prime", "canonical_solution": "\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n", "base_input": [[3], [4], [5]], "atol": 0, "plus_input": [[100], [0], [1], [1234], [99], [false], [1235], [true], [1233], [98], [97], [87], [2], [1232], [1236], [1231], [101], [88], [1237], [86], [20], [21], [89], [102], [103], [6], [96], [1230], [104], [91], [1239], [92], [3], [22], [90], [7], [1238], [23], [95], [1229], [10], [19], [85], [1240], [5], [11], [8], [1241], [18], [84], [24], [9], [93], [94], [1228], [17], [83], [12], [13], [82], [25], [1227], [4], [67], [81], [1226], [1225], [26], [1242], [68], [1243], [16], [73], [105], [1224], [66], [65], [14], [1223], [74], [75], [64], [15], [27], [106], [72], [80], [62], [43], [78], [76], [44], [69], [79], [70], [45], [46], [1244], [42], [107], [29], [61], [108], [71]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n"}
{"task_id": "Mbpp/261", "prompt": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n", "entry_point": "division_elements", "canonical_solution": "\ndef division_elements(test_tup1, test_tup2):\n  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n", "base_input": [[[10, 4, 6, 9], [5, 2, 3, 3]], [[12, 6, 8, 16], [6, 3, 4, 4]], [[20, 14, 36, 18], [5, 7, 6, 9]]], "atol": 0, "plus_input": [[[0, 0, 0, 0], [5, 2, 3, 3]], [[5, 2, 3, 3], [5, 2, 3, 3]], [[5, 2, 3, 3, 3], [5, 2, 3, 3, 3]], [[5, 3, 3], [5, 3, 3]], [[5, 3, 3, 3], [5, 3, 3, 3]], [[5, 2, 3, 3], [5, 2, 3, 4]], [[3, 3, 3], [3, 3, 3]], [[3, 2, 3, 3], [3, 2, 3, 3]], [[3, 2, 3, 3, 3], [3, 2, 3, 3, 3]], [[3, 3, 3], [4, 3, 3]], [[3, 1, 2, 3], [3, 2, 3, 3]], [[3, 1, 3, 2, 3], [3, 2, 3, 3, 2]], [[3, 4, 3], [4, 3, 3]], [[4, 4, 4, 3], [4, 4, 4, 3]], [[4, 3, 3], [4, 3, 3]], [[5, 3, 0, 3], [5, 3, 3, 3]], [[3, 4, 2], [4, 3, 3]], [[5, 3, 3, 3], [5, 3, 3, 5]], [[4, 2, 0, 3], [4, 2, 4, 3]], [[4, 4, 3, 3], [4, 4, 3, 3]], [[0, 0, 0, 2], [5, 2, 3, 3]], [[3, 4, 1, 2], [4, 3, 3, 4]], [[5, 3, 3, 3], [5, 3, 2, 3]], [[4, 2, 4, 3], [4, 2, 4, 3]], [[4, 3, 3], [3, 4, 4]], [[3, 2, 2, 3], [3, 2, 3, 3]], [[3, 5, 2], [3, 1, 2]], [[0, 0, 0], [5, 2, 3]], [[3, 4, 3, 4], [3, 4, 4, 4]], [[4, 2, 2, 4, 3], [4, 2, 4, 3, 4]], [[3, 4, 3], [3, 4, 3]], [[3, 1, 2, 1], [3, 1, 2, 1]], [[1, 3, 3], [3, 4, 4]], [[3, 4, 3, 4], [3, 4, 3, 4]], [[5, 3, 4], [5, 3, 3]], [[3, 3, 4], [3, 3, 3]], [[5, 3, 3], [4, 3, 3]], [[3, 4, 3], [2, 4, 3]], [[4, 2, 3, 3], [4, 2, 3, 3]], [[4, 3, 3], [5, 3, 3]], [[3, 4, 1, 4], [3, 4, 4, 4]], [[3, 5, 2, 2], [3, 5, 2, 2]], [[5, 2, 3, 2, 3], [5, 2, 3, 2, 3]], [[3, 4, 1, 4], [3, 5, 4, 4]], [[5, 1, 3, 3], [5, 2, 3, 4]], [[2, 3, 3, 3], [2, 3, 3, 3]], [[4, 3, 3, 5], [4, 3, 3, 5]], [[3, 4, 1, 4], [3, 4, 1, 4]], [[3, 4, 3], [2, 4, 4]], [[2, 5, 3, 3, 3], [1, 5, 3, 3, 3]], [[2, 3, 3], [2, 3, 3]], [[3, 3, 3, 3], [3, 3, 3, 3]], [[3, 4, 3, 3], [4, 4, 3, 3]], [[3, 3], [3, 3]], [[3], [3]], [[4, 3], [4, 3]], [[3, 1, 3], [3, 1, 3]], [[1, 2, 3, 3, 3], [3, 2, 3, 3, 4]], [[3, 2, 3, 3, 4], [3, 2, 3, 3, 4]], [[3, 3, 3, 4], [3, 4, 4, 4]], [[1, 3, 3, 3], [4, 4, 4, 4]], [[3, 1, 2], [4, 3, 3]], [[3, 5, 4, 4], [3, 5, 4, 4]], [[3, 4, 4, 4], [3, 4, 3, 4]], [[4, 3, 2], [4, 3, 3]], [[3, 4, 4, 3], [4, 4, 4, 3]], [[3, 4, 4], [4, 3, 3]], [[4, 3, 3, 4], [3, 4, 4, 3]], [[5, 2, 3, 3, 2], [2, 5, 2, 3, 3]], [[3, 2, 3, 3, 3, 3], [3, 4, 2, 3, 3, 3]], [[2, 5, 3, 3, 3], [1, 5, 3, 3, 2]], [[2, 3, 3, 5], [2, 3, 3, 5]], [[4, 3, 3, 4], [4, 3, 3, 4]], [[5, 1, 3, 3], [5, 2, 3, 3]], [[5, 4], [5, 4]], [[5, 3], [4, 3]], [[5, 3], [4, 1]], [[6, 5, 3, 3], [6, 5, 3, 3]], [[3, 2, 3], [3, 1, 3]], [[3, 1, 2], [4, 3, 5]], [[3, 5, 2], [3, 5, 2]], [[3, 1, 3, 2, 3], [2, 2, 3, 3, 2]], [[3, 4, 0, 2], [4, 3, 3, 4]], [[5, 2, 3, 3], [5, 1, 3, 3]], [[6, 5, 3, 3], [5, 5, 3, 3]], [[3, 2, 3, 3, 6, 2], [3, 2, 3, 3, 6, 2]], [[3, 5], [3, 5]], [[3, 1, 0, 3, 3], [3, 1, 2, 3, 3]], [[3, 2, 3, 3, 4, 3], [3, 2, 3, 3, 3, 3]], [[3, 5, 5, 4], [3, 5, 4, 4]], [[4, 3, 3, 4, 3], [3, 4, 4, 3, 3]], [[4, 3, 2], [4, 3, 2]], [[3, 4, 6, 4], [3, 4, 6, 4]], [[2, 4, 3], [3, 4, 3]], [[2, 4, 3, 4], [2, 4, 3, 4]], [[3, 2, 4, 1], [3, 2, 4, 3]], [[4, 4, 3], [4, 4, 3]], [[4, 4, 3, 4, 4], [4, 4, 3, 4, 4]], [[3, 2, 3, 3, 3, 3], [3, 2, 3, 3, 3, 3]], [[4, 3, 4], [4, 3, 4]], [[3, 2, 4, 1], [3, 5, 4, 3]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n"}
{"task_id": "Mbpp/262", "prompt": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n", "entry_point": "split_two_parts", "canonical_solution": "\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n", "base_input": [[[1, 1, 2, 3, 4, 4, 5, 1], 3], [["a", "b", "c", "d"], 2], [["p", "y", "t", "h", "o", "n"], 4]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], 0], [[], 0], [[1, 1, 1, 2, 2, 3, 3], 4], [["apple", "banana", "cherry", "date"], 2], [["a", 1, true, [1, 2, 3], ["x", "y", "z"]], 3], [[-5, -10, -15, -20, -25], 2], [[null, 10, null, 20, null, 30], 3], [["", "", "apple", "apple", "", "banana", ""], 4], [[0.5, 1.23, 4.56, 7.89, 10.1], 3], [[7.89, 1.23, 4.56, 7.89, 10.1], 3], [[0.5, 1.23, 4.56, 7.89, 10.1], 2], [[1, 1, 1, 2, 2, 3, -5], 4], [[null, 10, null, null, 30], 2], [[4, 8, 45, 4, 57, -47, -25], 0], [["a", 1, true, [1, 2, 3], ["x", "y", "z"], [1, 2, 3]], 3], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1], 3], [[null, 10, null, 20, 9, null, 30], 2], [[1, 1, 1, 2, 2, 2, 3, 3, 1], 2], [[1.23, 1.23, 1.23, 0.5, -55.23706380927258, 89.6402161175196, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 0], [[null, null, 20, 9, null, 30], 2], [["a", 1, true, [1, 2, 3], ["x", "y", "z"]], 4], [[-5, -10, -15, -20, -20, -25], 1], [[-5, -10, -15, -20, -20, -25, -20], 1], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 4], [[1, 1, 1, 2, 2, 3, 2, -5], 4], [[7.89, 1.23, 4.56, 7.89, 10.1, 1.23], 3], [["a", 1, true, [1, 2, 3], ["x", "y", "z"], [1, 2, 3], "a"], 3], [["", "", "apple", "apple", "", "banana", ""], 5], [[7.89, 1.23, 4.56, 7.89, 10.1], 2], [[-5, -10, 8, -15, -20, -20, -25], 1], [[1, true, [1, 2, 3], ["x", "y", "z"]], 3], [[1, true, ["x", "y", "z"]], 3], [["", "", "applee", "apple", "", "banana", ""], 4], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 2], [[0.5, 11.340237585890215, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89, 10.1], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 7], 0], [["", "", "applee", "", "banana", ""], 4], [[1.23, 1.23, 1.23, 0.5, -55.23706380927258, 90.13486538547112, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 0], [[null, 10, null, null, 30], 3], [[1, 1, 1, 2, 2, 3, -5], 3], [[9, 2, 3, 4, 5, 6, 7, 8, 9], 4], [["a", 1, true, [1, 2, 3], ["x", "y"], [1, 2, 3]], 3], [[1, 1, 1, 2, 2, 3, 3, 3], 4], [[null, 20, 9, null, 30], 2], [[0.5, 1.23, 4.56, 7.89, 10.1, 10.1], 2], [[7.89, 1.23, 4.56, 8.010812766922186, 7.89, 10.1], 2], [[0.5, 1.164606856585469, 4.56, 7.89, 10.722160024930544, 10.1, 89.6402161175196, 7.89], 7], [["", "", "applee", "apple", "", "banana", ""], 5], [[30, "a", 1, true, [1, 2, 3], ["x", "y", "z"], [1, 2, 3], "a", 1], 4], [["a", 1, true, [1, 2, 3], [1, 2, 3], "a"], 3], [[7.89, 1.23, 4.56, 7.89, 10.1, 1.23], 2], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 3], [[4, 8, 45, 4, 57, -47, -25], 3], [[null, 10, null, null, 30, 10], 3], [[1, 1, 1, 2, 2, 3, -5], 2], [[30, "a", 1, true, [1, 2, 3], ["x", "y", "z"], [1, 2, 3], "a", 1, 1], 4], [[4, 8, 45, 3, 57, -47, -25, 8], 3], [[1, 1, -10, 4, 2, 2, 3, 3, 3], 4], [[8.350167246320567, 1.23, 4.56, 7.89, 10.1, 1.23, 7.89], 3], [["", "", "apple", "apple", "", "banana", "", "apple"], 5], [[1.23, 1.23, 1.23, 0.5, -55.23706380927258, 90.13486538547112, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 2], [["apple", "a", 1, true, [1, 2, 3], ["x", "y", "z"], [1, 2, 3], "a", 1], 4], [["", "", "apple", "apple", "", "banana", "date", "apple"], 6], [[0.5, 1.23, 4.56, 7.89, 10.1, 10.1], 1], [["", "", "apple", "", "banana", "date", "apple"], 6], [[-5, 8, -15, -20, -20, -25], 1], [[1.23, 4.56, 7.89, 10.1, 4.56], 3], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 5], [[1, 1, 2, 2, 3, -5], 4], [[4, 8, 45, 3, 57, -47, -25, 8, -47], 3], [[0.3227382585908316, 1.23, 90.13486538547112, 1.164606856585469], 0], [["a", 1, true, [1, 2, 3], [1, 2, 3], false, "a"], 3], [[null, 10, null, null, 30, 10], 4], [[0.5, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 5], [[["x", "y", "z", "z"], "a", true, 1, true, [1, 2, 3], ["x", "y", "z"], [1, 2, 3], "a"], 3], [[null, null, -25, 20, 9, null, 30], 2], [["", "", "apple", "apple", "", "banayna", ""], 5], [["", "x", "applee", "", "banana", ""], 4], [[null, 10, 20, null, 30], 4], [["", "", "applee", "apple", "", "banana", ""], 6], [[1, 1, 1, 2, 2, 3, 3, 3], 3], [[null, 20, 9, null, 30], 3], [[4, 8, 45, 3, 57, -47, -25, 8, 8], 3], [[-5, -10, -15, -20, -20, -25], 0], [[-5, -10, -15, -20, -25], 3], [[1, true, ["x", "y", "z"], true], 3], [[null, 10, null, 20, null, 30], 4], [["", "", "applee", "apple", "", "banana", "", ""], 4], [["", "", "apple", "apple", "", "banana", "date", "apple", ""], 6], [[4, 8, 45, 3, 57, -47, -25, 8, 8, 4], 3], [["", "", "applee", "apple", "", "", ""], 5], [["a", -47, true, [1, 2, 3], [1, 2, 3], "a"], 3], [["apple", "a", 1, true, [2, 3], ["x", "y", "z"], [2, 3], "a", 1], 4], [["a", 1, true, [1, 2, 3], "aa", ["x", "y", "z"], [1, 2, 3], "a"], 3], [[null, 10, 20, null, 30, null], 4], [[1, true, ["cherry", "y", "z"], ["x", "y", "z"]], 3], [[0.5, 1.164606856585469, 4.56, 7.89, 10.722160024930544, 10.1, 89.6402161175196, 7.89], 8], [[0.5, 1.23, 4.56, 7.89, 0.48611073602407395, 10.722160024930544, 10.1, 7.89], 2], [[0.5, 4.56, 7.89, 10.1, 10.1], 1], [[0.5, 1.23, 5.399620468840612, 7.89, 10.722160024930544, 10.1, 7.89], 4], [[0.5, 1.23, 5.399620468840612, 10.722160024930544, 10.1, 7.89], 4], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89, 10.1], 5], [[0.5, 1.23, 5.399620468840612, 7.89, 10.722160024930544, 10.1, 7.89, 10.1], 4], [["", "", "apple", "apple", "", "banana", "date", ""], 6], [[7, 4, 8, 45, 3, 56, -47, -25, 8, 4, 8, 4], 3], [[1, 1, 1, 2, 2, 1, 3, 3, 3], 3], [[45, null, null, 10, null, 30, null], 4], [[0.3227382585908316, 1.23, 90.13486538547112, 1.164606856585469], 1], [[90.13486538547112, 1.23, 1.23, 0.5, -55.23706380927258, 89.6402161175196, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 0]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(L, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n"}
{"task_id": "Mbpp/264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n", "entry_point": "dog_age", "canonical_solution": "\ndef dog_age(h_age):\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n", "base_input": [[12], [15], [24]], "atol": 0, "plus_input": [[100], [0], [30], [29], [99], [101], [28], [98], [27], [26], [true], [false], [97], [25], [24], [31], [32], [33], [23], [21], [34], [1], [35], [2], [22], [36], [3], [96], [95], [4], [102], [56], [5], [55], [54], [6], [20], [37], [39], [19], [38], [7], [53], [57], [8], [93], [43], [103], [104], [9], [18], [17], [52], [64], [16], [65], [94], [40], [66], [92], [41], [67], [58], [63], [68], [105], [60], [69], [59], [106], [51], [70], [42], [88], [89], [107], [50], [71], [91], [62], [49], [10], [48], [108], [44], [61], [87], [109], [90], [110], [111], [15], [45], [11], [46], [47], [12], [72], [112], [76], [86], [113], [114]], "contract": "\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert h_age >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\n"}
{"task_id": "Mbpp/265", "prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n", "entry_point": "list_split", "canonical_solution": "\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n", "base_input": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3], [["python", "java", "C", "C++", "DBMS", "SQL"], 2]], "atol": 0, "plus_input": [[[], 1], [[], 2], [[], 3], [["a", "a", "b", "b", "c", "c", "d"], 3], [[1, "abc", true, 2.5, "def", false, 3, "ghi"], 4], [["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], 3], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]], 2], [[[1, 2, 3, 4], [], [5, 6, 7], [8, 9]], 3], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13], [14]], 4], [["a", "b", "c", "c", "d"], 3], [["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], 14], [["a", "b", "c", "d", "e", "g", "h", "i", "j"], 14], [[[1, 2, 3, 4], [], [5, 6, 7], [8, 9]], 4], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13], [14]], 5], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]], 13], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9]], 2], [["a", "b", "c", "d", "e", "g", "h", "i", "j", "c"], 13], [["dghi", "a", "a", "b", "b", "c", "c", "d"], 3], [["a", "dghi", "c", "d"], 4], [["a", "dghi", "c", "d", "d"], 5], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]], 1], [["a", "dghi", "c", "d", "d"], 1], [[null, true, false, true, "b", 5, [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5]], 3], [[null, true, false, true, "b", 5, [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5]], 12], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13], [14], [14]], 11], [["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], 4], [["a", "b", "c", "e", "f", "g", "h", "i", "j"], 14], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]], 2], [[-19.284629521995882, -53.96698092094727, -63.59002692746978], 1], [["a", "b", "c", "c", "d", "d"], 3], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14]], 4], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [14]], 4], [[], 8], [[false, false, false, true], 8], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]], 2], [["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], 8], [[[1, 2, 3], [6, 7, 8, 9, 10]], 13], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5], 2], [[[1, 2, 3], [4, 5, 6], [8, 9], [8, 9], [8, 9]], 2], [["a", "b", "c", "def", "d", "e", "g", "h", "i", "j", "c"], 12], [["a", "b", "c", "c", "d"], 2], [["a", "b", "c", "d", "e", "f", "g", "hh", "i", "j"], 8], [["", "djM", "etJiRi", "i", "c", "FjRZCu", "dghi", "c", "f"], 1], [["a", "b", "c", "d", "e", "g", "h", "i", "j", "c"], 3], [["dgabchi", "a", "dghi", "c", "d"], true], [["a", "b", "c", "e", "f", "g", "h", "i", "j"], 13], [[-1.5316450765312055, -53.96698092094727, 97.65103377714536, 1.849713974754394], 1], [["a", "dghi", "c", "c", "d", "d"], 1], [[93, 2, 60, 6, 9], 1], [[[1, 3], [1, 3], [4, 5, 6], [7, 8, 9]], 2], [[[1, 2], [3, 3], [4, 5, 6, 7], [8, 9, 10], [14]], 4], [[null, true, false, true, "b", 5], 12], [[[1, 2, 3, 3], [6, 7, 8, 9, 10]], 13], [["cg", "a", "dghi", "c", "d", "d", "d"], 5], [["etJiRi", "def", "h", "def", "WwcZ", ""], 1], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14]], 10], [[1, "abc", true, 2.5, "def", false, 3, "ghi"], 3], [[[1, 2, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 2], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14], [1, 2]], 10], [["a", "b", "c", "e", "f", "g", "h", "i", "djMe", "j"], 13], [["cg", "a", "dghi", "c", "d", "d", "d"], 3], [["a", "b", "c", "d", "e", "f", "g", "hh", "i", "j"], 9], [[[1, 2, 3, 4], [], [8, 9, 9], [5, 6, 7], [8, 9, 9]], 4], [["a", "b", "c", "c", "bb", "d"], 13], [["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 7]], 2], [["dgabchi", "a", "dghi", "c", "d", "dghi"], true], [[null, true, false, true, "b", 5, [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5]], 2], [[false, false, true, false, true, true, false, false, false, true], 1], [["a", "b", "c", "d", "e", "h", "i", "j"], 14], [[], 14], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13]], 11], [[[1, 2, 3], [13, 7, 8], [13, 7, 8], [4, 5, 6], [13, 7, 8], [13, 7, 8], [13, 7, 8]], 2], [["a", "b", "c", "c", "g"], 2], [["a", "b", "c", "d", "e", "ghi", "f", "g", "h", "i", "j"], 8], [[[1, 2, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 6], [7, 8, 6], [7, 8, 6], [7, 8, 6]], 1], [[[1, 2, 3, 3], [1, 2, 3, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 2], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5], 93], [["a", "b", "c", "def", "d", "e", "h", "i", "j", "c", "a"], 12], [[null, true, false, true, "b", 5, [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5]], 1], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13]], 12], [[null, true, false, true, "b", 5, [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5], [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5]], 3], [[[1, 2], [3], [8, 9, 10], [11, 12, 13], [11, 12, 13]], 11], [[false, null, true, "bb", false, true, "b", 5], 10], [["a", "b", "c", "d", "e", "f", "g", "hh", "i", "j"], 10], [[-19.284629521995882, -53.96698092094727, -63.59002692746978, -19.284629521995882], 1], [["dgabchi", "a", "dghi", "c", "dghi"], true], [["a", "b", "c", "f", "g", "h", "i", "djMe", "j"], 13], [["a", "b", "c", "d", "e", "f", "g", "hh", "i", "j"], 11], [["dghi", "c", "FjRZCud", "d", "d"], 5], [["a", "b", "c", "d", "e", "f", "g", "hh", "i", "d"], 11], [["cg", "a", "dghi", "c", "d", "d", "d", "d"], 3], [[28.72990406606783, -53.96698092094727, false, true, -11.801379885851944, -84.92256440771797, -68.8837440787106], 1], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5], 93], [["a", "b", "c", "c", "g"], 5], [[[1, 2, 3, 3], [1, 2, 3, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 2], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5, -19.284629521995882], 93], [["a", "dghi", "c", "d"], 60], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14], [14]], 4], [[[7, 8, 9, 8], [1, 2, 3], [4, 5, 6], [7, 8, 9, 8], [7, 8, 9, 8], [7, 8, 9, 8]], 2], [["cg", "a", "dghi", "c", "d", "d", "d"], 4], [[null, true, null, false, true, "b", 5, [-50, -19.284629521995882, ["h"], "qgSu", false, true, false, "g", 2.5]], 1], [["a", "dghi", "c", "d", "d"], 6], [[[1, 2, 3], [4, 5, 6], [8, 9], [8, 9], [8, 9], [8, 9]], 2], [[false, false, true, true, true, false, false, false, true], 3], [["a", "a", "c", "d", "d", "d"], 1], [[-19.284629521995882, -53.96698092094727, -1.5316450765312055, -19.284629521995882], 1]], "contract": "\n    assert isinstance(S, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(step, int), \"invalid inputs\" # $_CONTRACT_$\n    assert step > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n"}
{"task_id": "Mbpp/266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "entry_point": "lateralsurface_cube", "canonical_solution": "\ndef lateralsurface_cube(l):\n  return 4 * l * l\n", "base_input": [[5], [9], [10]], "atol": 0, "plus_input": [[100], [256], [500], [1000], [498], [501], [99], [66.89191997931741], [499], [101], [58.21525080612692], [255], [56.54995057201372], [66.89685310561087], [83.57157718204266], [257], [56.515998521878785], [502], [94], [44.81065373727037], [57.988194173394064], [258], [254], [44.14277592544646], [56.21634924802973], [89.96609117849408], [66.1048816215708], [88.13624919640782], [79.6724987089057], [39.52432765735469], [true], [90.07330615375426], [88.87446543484394], [80.34469028251331], [49.60482371300252], [72.10961391578658], [45.66474918863301], [49.36550800651825], [96.36174327164798], [49.5519341974717], [46.77734594153838], [58.60446127338968], [43.96898505055638], [71.53271932911613], [74.8787595686315], [503], [46.16814427525153], [111.66234638131426], [88.08382305305746], [49.49303485405071], [61.37019967563893], [32.91553737053482], [66.36780157713834], [57.29823626732467], [22.379094693696736], [54.96499328054807], [36.1581754122743], [66.92178864353467], [46.768786306758976], [45.70770179810679], [167.1370719989952], [47.58561323936907], [177.1807622449919], [88.511622782816], [75.47079545748679], [131.7505984206982], [47.072828054103255], [44.70281907116363], [39.63955404134835], [204.65193122740226], [74.5525427247953], [99.26181704026428], [21.120055544612296], [79.31702556710835], [74.78374726509155], [76.34666896378033], [87.40201417119114], [81.44166666320646], [103.47341378006003], [80.48426490964339], [150.05803234410334], [83.47216295269475], [149.60372427578594], [58.449276101423614], [89.42036866377818], [261.58475368046663], [74.10117623814627], [88.29944030057857], [44.370912453575414], [71.18054521166749], [90.63536438039682], [235.15522010358956], [149.81299725780573], [82], [22], [55.29773209779792], [57.762852719453875], [33.23388199757163], [78.68210551259803], [86.74383027879837], [54.974906483559266], [16.361378713598747], [82.82980927890722], [62.87886571752386]], "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n"}
{"task_id": "Mbpp/267", "prompt": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "entry_point": "square_Sum", "canonical_solution": "\ndef square_Sum(n):  \n    return n * (4 * n * n - 1) / 3\n", "base_input": [[2], [3], [4]], "atol": 0, "plus_input": [[1000000.0], [10000000.0], [100000000.0], [1], [10], [100], [123456789], [999999999], [5], [7], [15], [50000], [999999], [1234567890], [3], [4], [2], [3], [4], [14], [8], [6], [9], [16], [1000000000], [999999998], [95], [13], [123456788], [101], [123456787], [17], [true], [12], [89], [1234567891], [102], [90], [1000000001], [88], [26], [1000000], [98], [96], [23], [24], [103], [25], [91], [1234567889], [1000000002], [27], [1000000003], [11], [97], [999998], [18], [50002], [104], [99], [1000000004], [49999], [50001], [19], [94], [93], [22], [20], [1234567892], [74], [59], [92], [28], [77], [1000001], [58], [999997], [999996], [75], [999999997], [60], [123456790], [50003], [50004], [87], [78], [76], [999995], [21], [999994], [50005], [123456791], [29], [85], [73], [49998], [50006], [123456792], [1234567888], [999999996], [57], [1234567893], [86], [84], [1234567887], [83], [50007], [49997], [79], [30], [50008], [31], [64], [105], [1234567886], [61], [62], [1234567885], [999999994]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n"}
{"task_id": "Mbpp/268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "entry_point": "find_star_num", "canonical_solution": "\ndef find_star_num(n): \n\treturn 6 * n * (n - 1) + 1 \n", "base_input": [[3], [4], [5]], "atol": 0, "plus_input": [[1000000], [543210], [98765432], [999999], [999998], [543211], [543212], [999997], [true], [543213], [543214], [1000001], [999996], [1000002], [1000004], [1000003], [98765433], [543215], [543209], [1000005], [98765434], [67], [98765435], [98765430], [98765431], [77], [76], [75], [78], [999995], [53], [1000006], [74], [73], [52], [98765429], [1000007], [98765428], [999994], [54], [543216], [72], [543208], [543207], [999993], [71], [543217], [68], [50], [66], [55], [543206], [51], [70], [98765427], [543205], [56], [17], [49], [1000008], [543204], [57], [1000009], [98765436], [999992], [24], [1000010], [1000011], [1000012], [16], [59], [58], [23], [1000013], [93], [15], [22], [94], [48], [543218], [14], [98765426], [95], [79], [92], [98765437], [18], [69], [1000014], [46], [543219], [98765425], [91], [45], [25], [98765423], [21], [13], [47], [27], [80], [1000015], [26]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n"}
{"task_id": "Mbpp/269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n", "entry_point": "ascii_value", "canonical_solution": "\ndef ascii_value(k):\n  return ord(k)\n", "base_input": [["A"], ["R"], ["S"]], "atol": 0, "plus_input": [["@"], ["\u00ae"], ["!"], [" "], ["\u0635"], ["&"], ["\n"], ["\u20ac"], ["^"], ["\u00e4"], ["\u03c0"], ["~"], ["\t"], ["\u00a9"], ["\u0e51"], ["$"], ["7"], ["%"], ["["], ["{"], ["\u00e9"], ["\u0000"], ["\u001d"], ["\u2665"], ["\uffff"], ["\u007f"], ["\u0080"], ["\u2122"], ["\u6587"], ["\u2192"], ["R"], ["A"], ["F"], ["q"], ["E"], ["o"], ["W"], ["U"], ["O"], ["K"], ["v"], ["Z"], ["N"], ["P"], ["b"], ["y"], ["l"], ["V"], ["D"], ["u"], ["s"], ["I"], ["h"], ["H"], ["B"], ["k"], ["X"], ["L"], ["S"], ["p"], ["Y"], ["c"], ["J"], ["T"], ["a"], ["e"], ["r"], ["G"], ["j"], ["m"], ["z"], ["n"], ["g"], ["t"], ["i"], ["d"], ["M"], ["x"], ["f"], ["C"], ["Q"], ["w"]], "contract": "\n  assert isinstance(k, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n"}
{"task_id": "Mbpp/270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n", "entry_point": "sum_even_and_even_index", "canonical_solution": "\ndef sum_even_and_even_index(arr):  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n", "base_input": [[[5, 6, 12, 1, 18, 8]], [[3, 20, 17, 9, 2, 10, 18, 13, 6, 18]], [[5, 6, 12, 1]]], "atol": 0, "plus_input": [[[]], [[2]], [[2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]], [[1, 3, 5, 7, 9]], [[3, 1, 8, 6, 2, 4, 9, 7]], [[3, 1, 8, 6, 2, 3, 9, 7]], [[1, 3, 7, 9]], [[1, 2, 3, 7, 9, 1]], [[3, 1, 8, 6, 2, 2, 3, 9, 7, 3]], [[3, 1, 8, 7, 6, 2, 4, 9, 7]], [[128, 1, 8, 6, 4, 9, 7]], [[1024, 2, 3, 7, 9]], [[1, 3, 7]], [[9, 90]], [[1, 3, 7, 0, 1, 1]], [[1024, 7, 9, 1]], [[128, 1, 8, 6, 4, 90, 7, 128]], [[1, 2, 90, 7, 10, 2]], [[3, 1, 8, 6, 3, 9, 7]], [[3, 1, 6, 2, 4, 9, 7]], [[1, 8, 3, 7]], [[256, 1, 8, 6, 2, 3, 9, 7, 3]], [[128, 1, 8, 6, 4, 9, 0, 7]], [[0, 256, 1, 8, 6, 2, 3, 8, 7, 3, 3]], [[1, 2, 3, 7, 9, 1, 2]], [[3, 1, 5, 7, 6, 2, 4, 9, 7]], [[3]], [[3, 1, 2, 4, 9, 7]], [[3, 1, 8, 6, 2, 3, 3, 9, 7]], [[128, 2, 8, 6, 90, 7, 128]], [[1, 3, 7, 0, 1, 0]], [[1, 3, 2, 7]], [[1, 3, 5, 7, 9, 1]], [[128, 1, 1, 6, 8, 6, 0, 7]], [[2, 4, 8, 16, 32, 64, 128, 128, 512, 1024]], [[3, 1, 8, 6, 2, 2, 3, 9, 7, 3, 3]], [[1, 8, 3, 7, 1]], [[3, 4, 8, 32, 64, 128, 128, 1024, 1024]], [[1, 2, 9, 7, 10, 2]], [[128, 1, 8, 6, 4, 10, 0, 7, 1]], [[1, 5, 7, 1]], [[1, 9, 7, 10, 2]], [[3, 1, 2, 8, 6, 2, 4, 9, 7, 1, 4]], [[1, 8, 3, 1, 1]], [[128, 1, 8, 32, 4, 9, 0, 7]], [[3, 1, 10, 8, 6, 2, 4, 9, 7, 3]], [[1, 5, 7, 9]], [[128, 2, 8, 6, 4, 9, 7]], [[3, 1, 8, 6, 2, 2, 3, 9, 2, 7, 3]], [[1, 5, 7, 9, 9]], [[1, 7, 5, 7, 9]], [[128, 8, 1, 8, 6, 4, 90, 7, 128]], [[1, 8, 3, 1, 128, 1]], [[3, 1, 8, 6, 2, 2, 3, 9, 3, 1]], [[1024, 2, 7, 9]], [[1024, 1, 2, 7, 9]], [[129, 1, 1, 6, 8, 6, 0, 7, 128]], [[1, 8, 3, 1, 128, 1, 3]], [[1024, 1, 2, 7, 9, 7]], [[1024, 7, 9]], [[32, 1, 8, 3, 2, 128, 1, 3]], [[1, 9, 7, 9, 2]], [[512, 8, 256, 3, 1, 1]], [[128, 1, 8, 6, 4, 90, 7, 5, 128]], [[4, 1, 2, 4, 9, 7]], [[3, 9, 1, 2, 8, 6, 4, 8, 7, 1, 4]], [[3, 3, 1, 10, 8, 6, 2, 4, 9, 7, 3]], [[128, 1, 6, 9, 8, 6, 0, 7]], [[1, 9, 7, 10, 2, 9]], [[4, 1, 9, 7, 9, 2, 7]], [[4, 1, 4, 9, 7, 1]], [[5, 1, 9, 8, 7, 6, 1, 4, 9, 7]], [[1, 5, 7, 9, 7]], [[128, 1, 6, 9, 8, 1024, 0, 7, 6]], [[256, 1, 8, 6, 2, 3, 9, 7, 2, 3]], [[128, 1, 8, 6, 4, 10, 0, 7, 1, 128]], [[32, 1, 8, 6, 2, 3, 3, 9, 7]], [[16, 1, 8, 6, 2, 4, 9, 7]], [[3, 1, 2, 4, 9, 7, 7]], [[1, 1024, 2, 3, 7, 9, 1]], [[128, 1, 8, 6, 7, 4, 90, 7]], [[1, 8, 7, 9, 2]], [[1024, 7, 3, 1024]], [[1, 3, 7, 8, 0, 1, 1]], [[1, 7, 10, 7, 9]], [[128, 1, 1, 6, 8, 6, 0, 7, 128]], [[128, 1, 6, 8, 9, 8, 1024, 0, 7, 6, 0, 6]], [[1, 9, 8, 7, 9, 2]], [[1, 512, 7, 10, 9]], [[3, 1, 8, 6, 2, 2, 3, 9, 7, 3, 2, 3]], [[1, 3, 7, 1, 0]], [[4, 1, 8, 6, 2, 2, 3, 9, 7, 3, 7, 3]], [[256, 1, 8, 6, 2, 3, 9, 8, 3]], [[32, 1, 8, 3, 2, 128, 10, 3, 10]], [[1024, 9, 5]], [[3, 1, 8, 6, 2, 2, 3, 2, 9, 7, 3, 3]], [[7, 1]], [[129, 1, 1, 6, 8, 6, 0, 128]], [[1, 3, 7, 0, 1, 1, 7]], [[3, 9, 1, 2, 8, 0, 4, 8, 7, 1, 4, 9]], [[4, 1, 9, 6, 9, 2, 16]], [[128, 1, 8, 8, 32, 4, 9, 0, 7]], [[3, 1, 7, 6, 2, 2, 3, 9, 1, 7, 3, 2, 3]], [[1, 3, 4, 5, 7, 9, 1]], [[4, 1, 7, 6, 2, 2, 3, 9, 1, 7, 3, 2, 3, 3]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12\n"}
{"task_id": "Mbpp/271", "prompt": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "entry_point": "even_Power_Sum", "canonical_solution": "\ndef even_Power_Sum(n): \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n", "base_input": [[2], [3], [1]], "atol": 0, "plus_input": [[10], [100], [1000], [1000000], [500000], [250000], [100000], [249999], [999], [101], [62], [11], [249998], [99], [499999], [61], [102], [63], [249997], [64], [999999], [35], [997], [36], [100001], [1000001], [9], [499997], [true], [996], [499996], [499995], [250001], [37], [98], [65], [97], [999998], [34], [60], [59], [12], [500001], [66], [13], [93], [67], [500002], [92], [103], [68], [100002], [1000002], [1000003], [995], [94], [500003], [8], [1001], [80], [96], [1003], [499998], [79], [95], [78], [90], [999997], [499994], [29], [91], [1], [30], [28], [999996], [100003], [999995], [1002], [2], [998], [999994], [100004], [89], [250002], [58], [999993], [994], [26], [999991], [88], [33], [1000004], [100005], [999990], [81], [1000005], [99999], [57], [1000006], [32], [87], [249996], [999992], [993], [104], [82], [76]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n"}
{"task_id": "Mbpp/272", "prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n", "entry_point": "rear_extract", "canonical_solution": "\ndef rear_extract(test_list):\n  return [x[-1] for x in test_list]\n", "base_input": [[[[1, "Rash", 21], [2, "Varsha", 20], [3, "Kil", 19]]], [[[1, "Sai", 36], [2, "Ayesha", 25], [3, "Salman", 45]]], [[[1, "Sudeep", 14], [2, "Vandana", 36], [3, "Dawood", 56]]]], "atol": 0, "plus_input": [[[]], [[[1, ["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]]]], [[[1, ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]], [["E", 5], ["F", 6]]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]], [["E", 5], ["F", 6]], [["G", 7], ["H", 8]]]], [[[["A", "x"], [1, "y"]], [[true, 3.14], ["hello", "world"]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], ["E", 9]]]], [[[["A", 1], ["B", "C"]], ["D", 2], [[3, 4], 5]]], [[[["A", ["B", ["C", ["D", ["E", "F"]]]]], 1]]], [[[[[1, "a"], [2, "b"]], [[3, "c"], [4, "d"]]], [[[5, "e"], [6, "f"]], [[7, "g"], [8, "h"]]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], [[["g", "h"], ["i", "j"]], ["k", "l"]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", "l"]], ["m", "n"]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", 1]], ["l", 2]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]]]], [[[[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]], [["E", 5], ["F", 6]], [["G", 7], ["H", 8]], [["G", 7], ["H", 8]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[1, ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]], [3, ["Alice", ["Johnson", 28]]]]], [[[["A"], ["A", ["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["B", ["C", ["D", ["E", "F"]]]]], 1]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["B", ["C", ["D", ["E", "F"]]]]], 1]]], [[["h"], [[["a", "b"], ["c", "d"]], ["e", "f"]], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]], [[["a", "b"], ["c", "d"]], ["e", "f"]]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]], [["E", 5], ["F", 6], ["F", 6]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[1, ["John", ["Doe", 25]]], [1, [["Doe", 25]], ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]], [3, ["Alice", ["Johnson", 28]]]]], [[[["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]]]], [[[1, ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [2], [2, [["Smitth", 30], "Jane", ["Smith", 30]]], [3]]], [[[["A", "x"], ["A"], [1, "y"]], [["A", "x", "A"], [1, "y"]], [["A", "x"], [1, "y"]]]], [[[["C", 3], ["D", 4]], [["E", 6, 5], ["F", 6]], [["E", 5], ["F", 6]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], [["D", 7], 1], ["E", 9]]]], [[[["C"], [4, ["B", 5]], ["C", 6]], [["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[["A", "x"], ["d"], ["A"], [1, "y"], ["A"]], [["A", "x"], ["A"], [1, "y"], ["A"]], [["A", "x", "A"], [1, "y"]], [["A", "x"], [1, "y"]]]], [[[["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["B", ["C", ["D", ["E", "F"]]]]], 1, 1]]], [[[1, ["John", ["Doe", 25]], ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6], ["C", 6]], [[["D", 7], 8], ["E", 9]]]], [[[[["g", "h"], ["i", "j"]], ["k", "l"]]]], [[[["A", 1], ["c", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]], [2, ["Varsha", 20]]]], [[[["A", "x"], [1, "y"], [1, "y"]], [[true, 3.14], ["hello", "world"], ["hello", "world"]], [[true, 3.14], ["hello", "world"]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6], ["C", 6]], [[["D", 7], 8], ["E", 9]]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["B", ["C", ["D", ["E", "F"]]]]], 1, ["A"], 1]]], [[[[["g", "h"], ["i", "j"]], ["k", "l"]], [[["g", "h"], ["i", "j"]], ["k", "l"]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]], [[["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]]]], [[[["A", "x"], ["A"], [1, "y"]]]], [[[[["g", "h"], ["i", "j"]], ["ll", "k", "l"]], [[["g", "h"], ["i", "j"]], ["k", "l"]]]], [[[[["g", "h"], ["i", "j"]], ["k", "l"], ["k", "l"]], [[["g", "h"], ["i", "j"]], ["k", "l"]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6], ["C", 6]], [[["D", 7], 8], ["E", 9]], [[["D", 7], 8], ["E", 9]]]], [[[["Rash", 21]], [1, ["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"]]], [[[["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]], [["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1, ["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]]], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1]]], [[[["A", ["B", ["C", ["D", ["E", "F"]]]]], 1, ["A", ["B", ["C", ["D", ["E", "F"]]]]]], [["A", ["B", ["C", ["D", ["E", "F"]]]]], 1]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", "l"]], ["m", "n"]], ["g", "h"]]], [[["h"], [[["a", "b"], ["c", "d"]], ["e", "f"]], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]]]], [[[[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[["B", 5]], ["C", 6]]]], [[["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]]]], [[[["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], [["D", 7], 1], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[["A", 1], [2, 3]], [[["D", 7], 8], ["E", 9]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", 1]], ["l", 2]], [[["i", "j"], ["k", 1]], ["l", 2]]]], [[[1, ["John", ["Doe", 25]], ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]], [3, ["Alice", ["Johnson", 28]]]]], [[[["A", 1], [2, 3], ["A", 1]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], [["D", 7], 1], ["E", 9]]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]]]], [[["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]]]], [[[1, ["John", ["Doe", 25]]], [1, [["Doe", 25]], ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnsona", "b"], ["c", "d"]], ["e", "f"]]]], [[[["A", 1], ["c", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]]]], [[[1, ["John", ["Doe", 25]], ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]], ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]], [1, ["John", ["Doe", 25]], ["John", ["Doe", 25]]]]], [[[["A", "x"], [1, "y"]], [[true, 3.14], ["hello", "world"]], [["A", "x"], [1, "y"]]]], [[[["B"], ["A", 1], ["B", "C"]], [["A", 1], ["B", "C"]], ["D", 2], [[3, 4], 5]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", "l"]], ["m", "n"]], [[["a", "b"], ["c", "d"]], ["e", "f"]]]], [[[2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]], [3]]], [[[[["a", "aa", "b"], ["c", "d"]]], ["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["B", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], ["A", ["B", ["C", ["D", ["E", "F"]]]]], 1, 1]]], [[[["A", 1], ["c", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"], ["G", "H"]], [[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]]]], [[[[2, "C", 6], [4, ["B", 5]], ["C", 6]], [["A", 1], ["c", 1], [2, 3]], [[4, ["B", 5], ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g"], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]], [[["k", ["l", "m"]]], ["n", 2]]]], [[[[["g", "h"], ["i", "j"]]], [[["g", "h"], ["i", "j"]], ["k", "l"]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["f"]], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]]]], [[[["A", 1], [2, 3], ["A", 1]], [["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[["A", 1], ["B", "C"]], ["D", 2], [[3, 5, 4], 5]]], [[[[4, ["B", 5]], ["C", 6]], [["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[["B", 5]], ["C", 6]]]], [[[["A", ["B", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], ["A", ["B", ["C", ["D", ["E", "F"]]]]], 1, 1]]], [[[["C", 3], ["D", 4]], [["E", 5], ["F", 6]]]], [[[1, ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28], ["Johnson", 28]], ["Alice", ["Johnson", 28]]], [1, ["John", ["Doe", 25]]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["gF", "g", "h"], [[["a", "aa", "b"], ["c", "d"]]], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2], [["k", ["l", "m"]]]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], [["k", ["l", "m"]]], ["n", 2]], ["g", "h"]]], [[[["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"], ["G", "H"]], [[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]], [["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]], [["E", 5], ["F", 6]], [["G", 7], ["H", 8]], [["E", 5], ["F", 6]]]], [[[1, ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]], 2], [3, ["Alice", ["Johnson", 28], ["Johnson", 28]], ["Alice", ["Johnson", 28]]], [3, ["Alice", ["Johnson", 28], ["Johnson", 28]], ["Alice", ["Johnson", 28]]]]], [[[["A", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6], ["C", 6]], [[["D", 7], 8], ["E", 9]], [["A", 1], [2, 3]], [["A", 1], [2, 3]]]], [[[["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [["SmithH", "G", "H"], [["A", "B"], ["C", ["D", ["E", "F"]]]]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]]]], [[[[["a", "aa", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["a", "aa", "b"], ["c", "d"]], ["e", "f"]]]], [[[[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"]]]], [[[["A", 1], ["B", 2]], [["C", 3], ["D", 4]], [["E", 5], ["F", 6]], [["A", 1], ["B", 2]]]], [[[[4, ["B", 5], 4], [4, ["B", 5]], ["C", 6]], [["A", 1], ["c", 1], [2, 3]], [[4, ["B", 5]], ["C", 6]], [[["D", 7], 8], ["E", 9]], [[4, ["B", 5]], ["C", 6]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], [[["i", "j"], ["k", "l"]], ["m", "n"]]]], [[[[3.14], [true, 3.14], ["hello", "world"]], [["A", "x"], [1, "y"]], [[true, 3.14]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], [[["a", "b"], ["c", "d"]], ["e", "f"]]]], [[[["A", "x"]], [["A", "x"], [1, "y"]], [[true, 3.14], ["hello", "world"]]]], [[[["C", 3], ["D", 4]], [[3], ["D", 4]], [["E", 5], ["F", 6]]]], [[[[["A", "B"], ["C", ["D", ["E", "F"]]]], ["G", "H"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"], ["N", "O"]], [[["I", "J"], ["K", ["L", "M"]]], ["N", "O"], ["N", "O"]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"]], ["g", "h"], [[["i", "F", "j"], ["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]]]], [[["g", "h"], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]], ["i", "j"]], ["n", 2]], [[["i", "j"], ["k", ["l", "m"]]]]]], [[[[["a", "b"], ["c", "d"]], ["e"]], [[["a", "b"], ["c", "d"]], ["e", "f"]]]], [[[["John", ["Doe", 25]], ["John", ["Doe", 25]]], [1, ["John", ["Doe", 25]], ["John", ["Doe", 25]]], [2, ["Jane", ["Smith", 30]]], [3, ["Alice", ["Johnson", 28]]], [["John", ["Doe", 25]], ["John", ["Doe", 25]]]]], [[[[["a", "b"], ["c", "d"]], ["e", "f"], ["e", "f"]], [[["a", "b"], ["c", "d"]], ["e", "f"]]]], [[[[4, ["B", 5]], [["B", 5]], ["C", 6, 6]], [[4, ["B", 5]], ["C", 6]], [[4, ["B", 5]], ["C", 6, 6]], [[["D", 7], 8], ["E", 9]], [[["B", 5]], ["C", 6]], [[["D", 7], 8], ["E", 9]]]], [[[["A"], [["B", ["C", ["D", ["E", "F"]]]]], 1], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1, ["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]]], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1, ["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], ["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]]], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1, ["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]]], [["A", ["", ["C", ["D", ["E", "F"]]]], ["B", ["C", ["D", ["E", "F"]]]]], 1, 1]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n"}
{"task_id": "Mbpp/273", "prompt": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "entry_point": "substract_elements", "canonical_solution": "\ndef substract_elements(test_tup1, test_tup2):\n  return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n", "base_input": [[[10, 4, 5], [2, 5, 18]], [[11, 2, 3], [24, 45, 16]], [[7, 18, 9], [10, 11, 12]]], "atol": 0, "plus_input": [[[1000000000000, 2000000000000], [900000000000, 3000000000000]], [[999999999999, 555555555555], [123456789012, 987654321098]], [[999999999999999999, 1000000000000000000], [1000000000000000000, 999999999999999999]], [[1000000000000000000, 999999999999999999], [1000000000000000000, 999999999999999999]], [[1000000000000000000, 999999999999999999], [999999999999999999, 999999999999999999]], [[987654321098, 2000000000000], [900000000000, 3000000000000]], [[123456789012, 987654321098, 123456789012], [123456789012, 987654321098, 123456789012]], [[999999999999, 555555555555], [999999999999, 555555555555]], [[1000000000000, 2000000000000], [1000000000000, 2000000000000]], [[987654321098, 999999999999], [900000000000, 3000000000000]], [[999999999999999999, 999999999999999999], [999999999999999999, 999999999999999999]], [[999999999999999999, 1000000000000000000], [999999999999999999, 999999999999999999]], [[900000000000, 3000000000000, 3000000000000], [900000000000, 3000000000000, 3000000000000]], [[999999999999999999, 999999999999999999], [1000000000000000000, 999999999999999999]], [[999999999999, 555555555555], [1000000000000, 555555555555]], [[900000000000, 3000000000000], [900000000000, 3000000000000]], [[555555555555, 999999999999999999], [999999999999999999, 999999999999999999]], [[987654321098, 999999999999], [987654321098, 999999999999]], [[123456789012, 555555555555, 123456789012], [123456789012, 987654321098, 123456789012]], [[555555555555, 123456789012, 987654321098], [123456789012, 987654321098, 987654321098]], [[555555555555, 123456789012, 987654321098], [3000000000000, 987654321098, 987654321098]], [[999999999999999999, 1000000000000, 999999999999999999], [999999999999999998, 999999999999999999, 999999999999999999]], [[999999999999999999, 1000000000000000000], [999999999999999999, 999999999999]], [[123456789012, 987654321098, 123456789011], [123456789012, 987654321098, 123456789012]], [[123456789012, 987654321098, 123456789012, 123456789012], [123456789012, 987654321098, 123456789012, 123456789012]], [[999999999999999999, 999999999999999999], [1000000000000, 999999999999999999]], [[1000000000000, 900000000001, 3000000000000, 3000000000000], [900000000000, 900000000001, 3000000000000, 3000000000000]], [[555555555555, 999999999999, 987654321098], [3000000000000, 987654321098, 987654321098]], [[1000000000000000000, 999999999999999999], [1000000000000000000, 1000000000000000000]], [[555555555555, 999999999999999999], [555555555555, 999999999999999999]], [[987654321098], [987654321098]], [[1000000000000, 2000000000000, 2000000000000], [1000000000000, 2000000000000, 2000000000000]], [[999999999999, 555555555554], [999999999999, 555555555555]], [[555555555554, 3000000000000, 987654321098, 987654321098, 987654321098], [555555555554, 3000000000000, 987654321098, 987654321098, 987654321098]], [[555555555554, 3000000000000, 987654321098, 987654321098, 987654321097], [555555555554, 3000000000000, 987654321098, 987654321098, 987654321098]], [[999999999999], [555555555555]], [[555555555555, 123456789012, 987654321098], [555555555555, 123456789012, 987654321098]], [[555555555554, 3000000000000, 1000000000000, 987654321098, 987654321098], [555555555554, 3000000000000, 987654321098, 987654321098, 987654321098]], [[987654321098], [900000000000]], [[987654321098, 987654321098], [987654321098, 987654321098]], [[900000000000, 3000000000000], [987654321098, 999999999999]], [[999999999999, 123456789011], [1000000000000, 555555555555]], [[123456789012, 999999999999999999, 999999999999], [123456789012, 999999999999999999, 999999999999]], [[3000000000000, 987654321098, 987654321098], [3000000000000, 987654321098, 987654321098]], [[123456789012, 987654321098, 123456789012, 987654321098], [123456789012, 987654321098, 123456789012, 987654321098]], [[900000000000, 2999999999999], [900000000000, 2999999999999]], [[1000000000000, 555555555555], [1000000000000, 999999999999999999]], [[999999999999, 123456789011], [999999999999, 123456789011]], [[999999999999999999, 1000000000000000000], [999999999999999999, 1000000000000000000]], [[1000000000000000000, 999999999999999999, 1000000000000000000], [999999999999999999, 999999999999999999, 999999999999999999]], [[987654321098, 2000000000000], [899999999999, 3000000000000]], [[555555555555], [555555555555]], [[987654321098, 987654321097, 2000000000000], [987654321098, 987654321097, 2000000000000]], [[999999999999], [999999999999]], [[1000000000000, 555555555555], [1000000000000, 555555555555]], [[999999999999, 555555555555], [999999999999, 123456789011]], [[1000000000000000000, 900000000001, 1000000000000000000], [1000000000000000000, 900000000001, 1000000000000000000]], [[1000000000000, 900000000001, 3000000000000, 3000000000000], [900000000000, 900000000001, 899999999999, 3000000000000]], [[1000000000000, 999999999999999999, 1000000000000], [1000000000000000000, 999999999999999999, 999999999999999999]], [[999999999998, 555555555555], [987654321099, 987654321098]], [[123456789012, 999999999999999999, 123456789011, 999999999999], [123456789012, 999999999999999999, 123456789011, 999999999999]], [[999999999999999998, 999999999999], [987654321098, 999999999999]], [[999999999999999999, 1000000000000, 999999999999999999], [999999999999999999, 1000000000000, 999999999999999999]], [[555555555554, 3000000000000, 1000000000000, 123456789012, 987654321098], [555555555554, 3000000000000, 987654321098, 987654321098, 987654321098]], [[1000000000000000001, 999999999999999999, 1000000000000000000], [1000000000000000001, 999999999999999999, 1000000000000000000]], [[555555555555, 999999999998, 987654321098], [3000000000000, 987654321098, 900000000001]], [[555555555555, 1000000000000], [555555555555, 1000000000000]], [[1000000000000, 999999999999, 123456789011, 123456789011], [999999999999, 123456789011, 123456789011, 999999999999]], [[3000000000000, 987654321098, 900000000001], [3000000000000, 987654321098, 900000000001]], [[555555555554, 3000000000000, 987654321098, 987654321098, 987654321097, 3000000000000], [555555555554, 3000000000000, 987654321098, 987654321098, 987654321097, 555555555554]], [[1000000000000, 555555555555], [987654321099, 555555555555]], [[987654321098, 987654321097, 999999999998], [987654321098, 987654321097, 999999999998]], [[1000000000000000000, 999999999999999999, 999999999999999999], [1000000000000, 999999999999999999, 1000000000000]], [[999999999999, 555555555555], [1000000000001, 555555555555]], [[987654321099, 999999999998, 555555555555], [987654321099, 999999999998, 555555555555]], [[1000000000000000000, 999999999999999999, 1000000000000000000], [987654321098, 999999999999999999, 999999999999999999]], [[999999999999999999, 555555555554, 1000000000000000000, 1000000000000000000], [999999999999999999, 555555555554, 1000000000000000000, 1000000000000000000]], [[3000000000000, 987654321098, 900000000001], [3000000000000, 987654321098, 900000000000]], [[1000000000000], [1000000000000]], [[1000000000000000000, 999999999999999999, 999999999999999999], [1000000000000000000, 999999999999999999, 999999999999999999]], [[1000000000000], [999999999999]], [[987654321099, 999999999998, 999999999999, 555555555555], [987654321099, 999999999998, 999999999999, 555555555555]], [[999999999999, 999999999999], [999999999999, 999999999999]], [[999999999999999999, 123456789011], [999999999999999999, 1000000000000000000]], [[123456789012, 987654321098, 1000000000000, 987654321098], [123456789012, 987654321098, 123456789012, 987654321098]], [[555555555555, 123456789012, 987654321098], [3000000000000, 987654321099, 987654321098]], [[987654321099, 987654321098], [999999999998, 555555555555]], [[2999999999999, 987654321098, 987654321098, 987654321099, 987654321098], [3000000000000, 987654321098, 987654321098, 987654321099, 987654321098]], [[1000000000001, 999999999999], [987654321098, 999999999999]], [[123456789012, 1000000000000, 555555555555], [123456789012, 1000000000000, 555555555555]], [[123456789012, 987654321097, 123456789012], [123456789012, 987654321098, 123456789012]], [[987654321098, 2000000000000], [987654321099, 3000000000000]], [[], []], [[999999999999, 987654321098, 123456789011], [999999999999, 987654321098, 123456789011]], [[987654321099, 2000000000000], [899999999999, 900000000000]], [[3000000000000, 987654321098, 900000000001, 900000000001], [3000000000000, 987654321098, 900000000001, 3000000000000]], [[987654321098, 2000000000001], [987654321099, 3000000000000]], [[999999999999, 123456789011, 123456789011, 999999999999, 123456789011], [999999999998, 123456789011, 123456789011, 999999999999, 899999999999]], [[123456789012, 987654321098, 987654321097, 987654321098], [123456789012, 987654321098, 123456789012, 987654321098]], [[2999999999999, 987654321098, 123456789012, 987654321098], [2999999999999, 987654321098, 123456789012, 987654321098]], [[999999999999999999, 123456789012, 1000000000000], [123456789012, 1000000000000, 555555555555]], [[987654321098, 2000000000000], [987654321098, 2000000000000]], [[1000000000000000000, 999999999999999999, 1000000000000000000, 1000000000000000000], [1000000000000000000, 999999999999999999, 1000000000000000000, 1000000000000000000]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n"}
{"task_id": "Mbpp/274", "prompt": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n", "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": "\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return 1 << (n - 1)\n", "base_input": [[4], [6], [2]], "atol": 0, "plus_input": [[10], [20], [100], [8], [9], [11], [19], [101], [true], [7], [12], [68], [6], [67], [18], [5], [13], [102], [17], [82], [15], [4], [66], [103], [64], [70], [14], [3], [81], [65], [45], [71], [83], [104], [84], [63], [24], [72], [69], [73], [74], [47], [2], [23], [85], [44], [62], [48], [46], [80], [16], [105], [49], [50], [51], [22], [21], [43], [99], [25], [1], [28], [86], [75], [26], [29], [106], [94], [93], [79], [27], [92], [98], [107], [52], [61], [108], [109], [53], [95], [76], [60], [42], [78], [41], [87], [55], [91], [54], [96], [97], [89], [110], [90], [37], [36], [88], [77], [38], [39], [40], [30], [111]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n"}
{"task_id": "Mbpp/276", "prompt": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n", "entry_point": "volume_cylinder", "canonical_solution": "\nimport math\ndef volume_cylinder(r,h):\n  return math.pi * r * r * h\n", "base_input": [[10, 5], [4, 5], [4, 10]], "atol": 0.0001, "plus_input": [[20000000000.0, 3000000000000.0], [1.5, 2.7], [0.5, 10], [2.5, 0.5], [10000000000.0, 10000000000.0], [10000000000.0, 1.5], [14344998825.535194, 3000000000000.0], [0.5, 11], [0.5, 10000000000.0], [2.4743942770744276, 2.5], [2.951124891044273, 9], [0.7038501915882589, 10000000000.0], [0.9535585442662897, 11], [2.5, 2.5], [7542657684.960076, 14344998825.535194], [10000000000.386435, 1.5], [20000000000.0, 14344998825.535194], [3.1091490314061776, 2.5], [2.6427048640031465, 2.5], [0.9535585442662897, 3000000000000.0], [3000000000000.0, 3000000000000.0], [13417080781.919376, 20000000000.0], [0.691722647407507, 10000000000.0], [7542657684.960076, 7542657684.960076], [3000000000000.0, 7542657684.960076], [2.7, 2.6427048640031465], [19738657082.252766, 19738657082.252766], [13417080781.919376, 2.5], [1.5, 3.652964263337969], [20000000000.0, 18703171896.314854], [10000000000.386435, 2.6427048640031465], [10000000000.386435, 2.739615213922965], [2.951124891044273, 2.6427048640031465], [2.5, 0.9535585442662897], [2.6427048640031465, 2.613041636837666], [2944603288658.516, 7542657684.960076], [2.739615213922965, 1.5723401496183493], [20612740066.61665, 14344998825.535194], [20000000000.0, 20612740066.61665], [2.5, 1.5], [0.7038501915882589, 1.5], [7542657684.867313, 14344998825.535194], [1.9485740766634871, 2.5], [19118435482.814182, 3000000000000.0], [2.489694572891035, 2.5], [0.691722647407507, 13128233796.528885], [22629745317.76949, 20612740066.61665], [18703171896.314854, 20612740066.61665], [3010419136198.206, 3010419136198.206], [0.7038501915882589, 27168943845.409115], [2.2886628071096675, 2.5], [2.7157286645427967, 2.7], [0.9535585442662897, 2469047370429.149], [10000000000.386435, 0.8251120526170418], [13417080781.919376, 3.348201509354621], [10000000000.386435, 2944603288658.516], [1.5689287033306316, 0.9535585442662897], [2419698042708.4434, 3000000000000.0], [2.489694572891035, 2419698042708.4434], [2.7, 2.2052029157901467], [2419698042708.4434, 0.9535585442662897], [2.5758215253518504, 9], [1.9485740766634871, 1.9485740766634871], [14344998825.535194, 1.5], [2.739615213922965, 1.9485740766634871], [0.7038501915882589, 1.84469436595183], [2.489694572891035, 2.613041636837666], [2.951124891044273, 3000000000000.0], [7542657684.867313, 1.84469436595183], [0.9535585442662897, 2.4743942770744276], [3000000000000.0, 1.9485740766634871], [1.244756247304522, 13128233796.528885], [13689072131.010698, 3.348201509354621], [0.7038501915882589, 1.7307900121725113], [1.244756247304522, 3000000000000.0], [2.5824340399075245, 1.491306814979678], [1.5689287033306316, 14344998825.535194], [2.739615213922965, 2.739615213922965], [9972462676.389458, 7542657684.867313], [2419698042708.9595, 2419698042708.9595], [18703171896.314854, 0.5], [2.951124891044273, 1577068954281.4302], [7542657684.867313, 2.4743942770744276], [2.8588618513071227, 0.5], [2.613041636837666, 2.613041636837666], [2.489694572891035, 3.1346090181102264], [2999999999999.98, 2999999999999.98], [2.6427048640031465, 0.8333954194136204], [7542657683.877375, 0.8533387999456739], [2.7157286645427967, 2.7157286645427967], [13689072131.010698, 1.491306814979678], [20000000000.0, 20000000000.0], [2.035858005142287, 2.035858005142287], [18703171896.314854, 0.8251120526170418], [20612740066.61665, 3.1226607822987056], [1862053351689.5183, 3010419136198.206], [0.691722647407507, 18703171896.314854], [33156202533.735584, 20612740066.61665], [1.9157519089663244, 3000000000000.0], [19999999999.45963, 20000000000.0], [10000000000.823483, 0.5], [16354297614.100697, 3.348201509354621], [33156202533.735584, 33156202533.735584], [2.5758215253518504, 7542657683.877375], [2.5824340399075245, 6218023557.093668]], "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)\n"}
{"task_id": "Mbpp/277", "prompt": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n", "entry_point": "dict_filter", "canonical_solution": "\ndef dict_filter(dict1, n):\n    return {key : value for (key, value) in dict1.items() if value >=n}\n", "base_input": [[{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 170], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 180], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 190]], "atol": 0, "plus_input": [[{}, 0], [{}, -5], [{}, -10], [{}, 10], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10}, 10], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 200], [{}, 8], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grorangeape": -10}, 10], [{}, -1], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180}, 10], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 201], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180, "Pierre": 12}, 10], [{"-1": 12, "201": -11, "-58": -5, "10": -94}, 165], [{"Cantrell": 10, "Gentry": -31, "apple": 44, "Nw": -33, "IhVdpFDGMV": 200, "abM": 20, "JDnQ": -11}, -5], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180}, -11], [{"-1": 12, "201": -11, "-58": -5}, 165], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Pierre Cox": 190}, 200], [{"-1": 12, "201": -11, "-58": -5}, 164], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grorangeape": -10}, -10], [{"-1": 12, "-58": -5, "10": -94}, 165], [{}, 180], [{"-72": -33}, 0], [{"-1": 12, "201": -11, "-58": -5}, -33], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, 166], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Pierre Cox": 190}, 199], [{"75.87572329200214": false, "79.71274224615752": false}, 8], [{"-1": 12, "10": -94}, 165], [{"175": false, "-57": true, "-32": true, "5": false}, 8], [{"-1": 12, "-58": 199, "10": -94}, 190], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Pierre Cox": 190}, 165], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, -1], [{"Alden Cantrell": false, "Vega": false, "Cierra Vega": true, "x": true, "abM": true}, 11], [{"-1": 12, "201": -11, "-58": -31}, 8], [{"-1": 12, "201": -11, "-58": -5, "10": -94}, true], [{"15": false}, 8], [{"-72": -34}, 20], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180}, -12], [{"Alden Cantrell": false, "Vega": false, "Cierra Vega": true, "x": true, "abM": true}, 201], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, 167], [{"Alden Cantrell": false, "Vega": false, "Cierra Vega": true, "x": true, "abM": true}, -11], [{"Cierra Vega": 176, "Alden Cantrell": 180, "Pierre Cox": 190}, 165], [{}, 9], [{"-1": 12, "-58": -5, "10": -94}, -58], [{"-1": 12, "201": -11, "-58": -5, "10": -94, "-57": -93, "0": -1}, true], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, 0], [{"apple": 5, "banana": 12, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180, "Pierre": 12, "kikwi": 6}, 10], [{"-58": -5}, 165], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Pierre Cox": 190, "Alden Cantrel": -57}, 200], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "wamtermelon": 11}, 10], [{"-1": 12, "-58": 199, "10": -94, "166": -93}, 190], [{"banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "wamtermelon": 176, "ore": 11}, 10], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "Cantrel": true}, 10], [{"Alden Cantrell": 180, "Pierre Cox": 190}, 199], [{"-1": 12, "201": -11, "-58": -5}, 8], [{"Alden Cantrell": 180, "Pierre Cox": 190}, 165], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, 20], [{"75.87572329200214": false, "79.71274224615752": false}, 9], [{"-1": 12, "201": -11, "-58": -31, "200": 12}, 9], [{"-1": 12, "-58": 199, "10": -94, "166": -93}, 189], [{"Alden Cantrell": false, "Vega": false, "Cierra Vega": true, "abM": true}, -11], [{"15": false}, 15], [{"-1": 12, "-58": -5, "10": -94}, 44], [{"-1": 12, "10": -94, "0": -93}, 167], [{"banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180}, -12], [{"-1": 12, "-58": -5, "10": -94, "0": -92, "-2": -32}, 166], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "Cantrel": true}, 167], [{"Pierre Cox": 190}, 198], [{"banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "wamtermelon": 176, "ore": 11, "kiwigrape": 20}, 10], [{"-1": 12, "10": -94}, 164], [{"-1": 12, "201": -11, "-58": -5, "10": -94, "-57": -93, "0": -1}, false], [{"apple": 5, "banana": 12, "orange": 8, "grape": 166, "watermelon": 20, "kiwi": 10, "grorangeape": -10}, 10], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, 199], [{}, 165], [{"175": false, "-57": true, "-32": true, "5": false}, -94], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, -93], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "wamtermelon": 11}, 167], [{"banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180}, 9], [{"Cantrell": 10, "Gentry": -31, "apple": 44, "Nw": -33, "IhVdpFDGMV": 200, "abM": 20, "JDnQ": -93}, -5], [{"75.87572329200214": true, "79.71274224615752": true}, 180], [{"-58": 199, "10": -94}, 190], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "wamtermelon": 11, "appKierrae": 5}, 167], [{"-1": 12, "10": -94, "0": -93}, -93], [{"Pierre Cox": 190}, 166], [{"-1": 12, "-58": -5, "10": -94, "190": -93}, 165], [{"-1": 12, "10": -94, "0": -93, "176": -34}, -93], [{"Alden Cantrell": false, "Cierra Vega": true, "x": true, "abM": true}, 44], [{"-1": 12, "10": -94, "-2": -32}, 166], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, 11], [{"-72": -34}, -33], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180, "Pierre": 12, "oraCantrelnge": 44}, 10], [{"-1": 12, "-58": -5, "10": -94, "-57": -93, "0": -1}, true], [{"-1": 12, "201": -11, "-58": -5}, 5], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, -94], [{"-1": 12, "-58": -5, "10": -94, "0": -93}, -95], [{"-72": -33}, 1], [{}, 19], [{"75.87572329200214": false, "79.71274224615752": false, "95.84649191478275": false}, 9], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "grrape": 180}, 175], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Pierre Cox": 190, "Alden Cantrel": -57, "Alden CantreAldenl": -12}, 200], [{"-1": 12, "10": -94}, 180], [{"-58": 199, "10": -94, "166": -93, "176": 200}, 190], [{"-72": -34, "-73": 165}, 20], [{"75.87572329200214": true, "79.71274224615752": true}, 5], [{"-1": 12, "-58": 199, "10": -94, "-73": -94}, 190], [{"-1": 12, "-58": 199, "10": -94, "166": -93}, 191], [{"apple": 5, "banana": 12, "orange": 8, "grape": 15, "watermelon": 20, "kiwi": 10, "wamtermelon": 11, "appKierrae": 5}, 166]], "contract": "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n"}
{"task_id": "Mbpp/278", "prompt": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n", "entry_point": "count_first_elements", "canonical_solution": "\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return count\n", "base_input": [[[1, 5, 7, [4, 6], 10]], [[2, 9, [5, 7], 11]], [[11, 15, 5, 8, [2, 3], 8]]], "atol": 0, "plus_input": [[[1, 2, 3, [4, 5], 6, 7]], [[1, 2, [3, 4], [5, [6, 7]], 8, [[9, 10], 11]]], [[1, [2, [3, [4, [5, [6, 7]]]]], 8, [9, 10]]], [[[[1, 2], [3, 4], [5, 6]], 7, [[8, 9], [10, [11, [12, [13, 14]]]]]]], [[1, 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]]]], [[[[[[1, 2], 3], 4], [5, 6]], 7]], [[[[[[[1, 2], [3, 4]], 5], [6, 7]], 8], [9, 10]]], [[[[[[[[[[1, 2], 3], 4], [5, 6]], 7], 8], 9], 10], [11, 12], 13]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14], 15]], [[1, 2, 3, 4, 5, 6]], [[[1, 2], [[3, 4], [5, [6, [7, [8, 9]]]]]]], [[[[[1, 2], 3], [4, 5]], [[[6, 7], 8], [9, [10, [11, [12, [13, [14, [15, [16, 17]]]]]]]]]]], [[[1, [2, [3, [4, 5]]]], [6, [7, [8, [9, 10]]]], [11, [12, [13, 14]]], [[[15, 16], [17, 18]], [19, 20]]]], [[1, 2, 3, [[[4]]], 5]], [[1, [[2]], [[3], [4, [5]]], 6]], [[[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]], [[[[1], [[2]]], [[[3]]]]], [[[1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]], [[11, 12, 13], [14, 15, 16, [17]]], [18, [19], [[20], [21, 22, 23]]], [24, [25]]]], [[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]], [[[[[[[[]]]]]]]], [["a", ["b", ["c", ["d", ["e", ["f", ["g", ["h", ["i", ["j", ["k", ["l", ["m", ["n", ["o", ["p", ["q", ["r", ["s", ["t", ["u", ["v", ["w", ["x", ["y", ["z"]]]]]]]]]]]]]]]]]]]]]]]]]]], [[[[1, 2], [3, 4], [5, 6]], 7, [[8, 9], [10, [11, [12, [13, 14]]]]], [[1, 2], [3, 4], [5, 6]]]], [[2, 1, 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]], [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]]]], [[[[[[1, 2], 3], 4], [5, 6]], 7, [[[[1, 2], 3], 4], [5, 6]]]], [[1, [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10], [13, 2, [3, [4, [5, [6, 7]]]]]]], [[1, [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10], [13, 2, [3, [4, [5, [6, 7]]]]], [13, 2, [3, [4, [5, [6, 7]]]]]]], [[[1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]], [[11, 12, 13], [14, 15, 16, [17]]], [18, [19], [[20], [21, 22, 23]]], [24, [25]], [[11, 12, 13], [14, 15, 16, [17]]]]], [[[[16, 1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]], [[[1, [2, [3, [4, 5]]]], [6, [7, [8, [9, 10]]]], [[[15, 16], [17, 18]], [19, 20]]]], [[15]], [[[[1, 2], [3, 4], [5, 6]], 7, [[3, 4], [5, 6]], [[10, [11, [12, [13, 14]]]]]]], [[[[[[1, 2], 3], 4], [5, 6]], 7, [[[[1, 2], 3], 4], [5, 6]], [[[[1, 2], 3], 4], [5, 6]]]], [[7, [[[[1, 2], 3], 4], [5, 6]], [[[[1, 2], 3], 4], [5, 6]]]], [[7, 8, [[[[1, 2], 3], 4], [5, 6]], [[[[1, 2], 3], 4], [5, 6]]]], [[[[16, 1], [2]], [[6]], [[7], [8]]]], [[[[11, 12, 13], [14, 15, 16, [17]]], [18, [19], [[20], [21, 22, 23]]], [24, [25]], [[11, 12, 13], [14, 15, 16, [17]]]]], [[[[[[1, 2], 3], 4], [5, 6, 5]], 7]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14], 15, [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14]]], [["a", [["c", ["d", ["e", ["f", ["g", ["h", ["i", ["j", ["k", ["l", ["m", ["n", ["o", ["p", ["q", ["r", ["s", ["t", ["u", ["v", ["w", ["x", ["y", ["z"]]]]]]]]]]]]]]]]]]]]]]]]]]], [[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [1]]], [[1, [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10], [13, 2, [3, [4, [5, [6, 7]]]]], [13, 2, [3, [4, [5, [6, 7]]]]], [2, [3, [4, [5, [6, 7]]]]]]], [[[[1, 2], [3, 4], [5, 6]], 6]], [[1, [2, [3, [4, [5, [6, 7]]]]], 8, [9, 10], 8]], [[2, [[[[1, 2], 3], 4], [5, 6]], 7, [[[[1, 2], 3], 4], [5, 6]]]], [[[]]], [[[[[[1, 2], 3], 4], [5, 6, 5]], 7, [[[[1, 2], 3], 4], [5, 6, 5]]]], [[15, 15]], [[[1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]], [[11, 12, 13], [14, 15, 16, [17]]], [18, [19], [[20], [21, 22, 23]]], [18, [19]], [24, [25]], [[11, 12, 13], [14, 15, 16, [17]]]]], [[1, 12, [3, 4], [5, [6, 7]], [[9, 10], 11]]], [[1, [2, [3, [4, [5, [6, 7]]]], 2], 8, [9, 10], 8]], [[7, 8, [[[[1, 2], 3], 4], [5, 6]], [[[[1, 2], 3], 4], [5, 6]], [[[[1, 2], 3], 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], 7, [[1, 2], [3, 4], [5, 6, 6]], [[8, 9], [10, [11, [12, [13, 14]]]]], [[8, 9], [10, [11, [12, [13, 14]]]]]]], [[7, [[[[1, 2], 3], 4], [5, 6]], 2, [[[[1, 2], 3], 4], [5, 6]]]], [[[1, [2, [3, [4, 5]]]], [6, [7, [8, [9, 10]]]]]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14], [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14], 15, [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14]]], [[[[16, 1], [2]], [[16, 1, 1], [2]], [[6]], [[7], [8]]]], [[[1], [2], [4], [5], [6], [7], [8], [9], [10], [1]]], [[[], []]], [[[[1], [[2]]]]], [[[[1, 2], [3, 4], [5, 6]], 7, [[3, 4], [5, 6]], 24, [[10, [11, [12, [13, 14]]]]]]], [[1, 1, 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]]]], [[1, 1, 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]], 3]], [[[[1], []], [[5], [6]], [[7], [8]]]], [[[[1, 2], [3, 4], [5, 6]], 6, [[3, 4], [5, 6]], [[10, [11, [12, [13, 14]]]]]]], [["a", "aa", [["c", ["d", ["e", ["f", ["g", ["h", ["i", ["j", ["k", ["l", ["m", ["n", ["o", ["p", ["q", ["r", ["s", ["t", ["u", ["v", ["w", ["x", ["y", ["z"]]]]]]]]]]]]]]]]]]]]]]]]]]], [[[[[[1, 2], 3], 4], [5, 6]], 25, 7, 7]], [[7, [[8, 9], [10, [11, [12, [13, 14]]]]], [[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6]]]], [[[[[[1, 2], 3], 4], [5, 6, 5]], 6]], [[15, 15, 15]], [[[[[[1, 2], 3], 4], [5, 6, 5]], 7, [[[[1, 2], 3]], [[[1, 2], 3], 4], [5, 6, 5]]]], [[[[1, 2], [3, 4], [5, 6]], 7, [[3, 4], [5, 6]], 24, [[10, [11, [12, [13, 14]]]]], [], [[1, 2], [3, 4], [5, 6]]]], [[[[1], [], []], [[1], []], [[[3]]]]], [[[[1], []], [[7], [8]]]], [[[[[[1, 2], 3], 4]], [[[[1, 2], 3], 4], [5, 6]], 6, [[[[1, 2], 3], 4], [5, 6]]]], [[1, [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10], [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10]]], [[[[[[1, 2], 3], 4], [5, 6], [[[1, 2], 3], 4]]]], [[7, [[8, 9], [10, [11, [12, [13, 14]]]]], [[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [4, 6], [5, 6]], [[1, 2], [3, 4], [5, 6]]]], [[1, [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10], [13, 2, [3, [4, [5, [6, 7]]]]], [2, [3, [4, [5, [6, 7]]]]]]], [[1, [2, [3, [4, [5, [6, 7]]]]], 8, [10, 9, 10], 8]], [[1, 1, 1, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]], 3]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14], [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14], 3, 15, [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14], 15]], [[1, 2, 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]]]], [[[[[[[[[[1, 2], 3], 4], [5, 6]], 7], 8], 9], 10], [12, 12], 13]], [[1, 1, 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]], 2, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]]]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14], 15, [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14]]], [[8, [[[[1, 2], 3], 4], [5, 6]], [[[[1, 2], 3], 4], [5, 6]]]], [[1, [13, 2, [3, [4, [5, [6, 7]]]], [3, [4, [5, [6, 7]]]]], [13, 2, [3, [4, [5, [6, 7]]]]], [9, 10], [13, 2, [3, [4, [5, [6, 7]]]]], [2, [3, [4, [5, [6, 7]]]]]]], [[[[[[[[], []]]]], [[[[[]]]]]]]], [[[[[[[[]]]], [[[[]]]]]], [[[[[[]]]]]]]], [[[[1], []]]], [[8, 1, [2, [3, [4, [5, [6, 7]]]], 2], 8, [9, 10], 8, 1]], [[[1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]], [[11, 12, 13], [14, 15, 16, [17]]], [18, [19], [[20], [21, 22, 23]]], [24, [25], [25]], [24, [25]]]], [[[[11, 12, 13], [14, 15, 16, [17]]], [18, [19], [[20], [21, 22, 23]]], [24, [26, 25]], [[11, 12, 13], [14, 15, 16, [17]]]]], [[[[[[1, 2], 3], 4], [5, 7, 5]], 6]], [[15, 15, 15, 15]], [[15, 15, 15, 18]], [[7, 8, [[[[1, 2], 3], 4], [5, 6]], [[5, 9], [[[1, 2], 3], 4], [5, 6]]]], [[[[1], []], [[5], [6]], [[7], [8]], [[7]]]], [[7, [[[[1, 2], 3], 4], [5, 6]]]], [[[[[[[[]]]], [[[[]]]]]], [[[[[[]]]], [[[[]]]]]]]], [[[[1], []], [[1], [[2]]]]], [[[[16, 1]], [[16, 1, 1], [2]], [[6]], [[7], [8]]]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14], [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13]], 3, 15, [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14], 15]], [[[1, [4, 5], [6, [7, 8, [9, 10]]]], [1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]], [[11, 12, 13], [14, 15, 16, [17]]], [18, [19]], [24, [25]], [[11, 12, 13], [14, 15, 16, [17]]]]], [[[[1, 2], [3, 4], [5, 6]], 6, 19, [[3, 4], [5, 6]], [[10, [11, [12, [13, 14]]]]]]], [[7, [[[[1, 2], 3], 4], [5, 6]], 2, [[[[1, 2], 3], 4], [5, 6]], 7]], [[[[[[[[]]]], [[[[]]]]]], []]], [[1, 2, 3, [[[4]]]]], [[1, 2, [3, 4], [5, [6, 7]], [[9, 10], 11]]], [[[[1, 2], [3, 4], [5, 6], [1, 2]], 7, [[8, 9], [10, [11, [12, [13, 14]]]]]]], [[[[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, [[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13]], [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14], 15, [[[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14]]], [[[[1], [1, 1], [[2]]], [[[3]]]]], [[[1, [2, [3, [4, 5]], [3, [4, 5]]]], [6, [7, [8, [9, 10]]]]]], [[2, 13, 3, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]]]], [[true, true, false, false]], [[8, [[[[1, 2], 3], 4], [5, 6]], 7, [[[[1, 2], 3], 4], [5, 6]]]], [[[], [-55.31819741812587, -80.16469052312337, 40.47580807039117, -33.01552653406965, 21.97711941774041, 63.723553557234595]]], [[[[[[], [[[]]]]]], [[[[[[]]]]]]]], [[1, 2, [3, 3, 4], [5, [6, 7]], [[9, 10], 11]]], [[7, [[[[1, 2], 3], 4], [5, 6]], 7]], [[[[1], [], []], [[7], [8]]]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n"}
{"task_id": "Mbpp/279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n", "entry_point": "is_num_decagonal", "canonical_solution": "\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \n", "base_input": [[3], [7], [10]], "atol": 0, "plus_input": [[1000000], [987654], [123456789], [987654321], [1], [3141592653589793238462643383279], [987654321012345678901234567890], [1000000000000000000000000000000], [123456789876543212345678987654], [9999999999999999999999999999999], [10000000000000000000000000000000], [3141592653589793238462643383280], [1000001], [2], [999999999999999999999999999999], [3141592653589793238462643383281], [1000000000000000000000000000001], [36], [999999999999999999999999999997], [987654321012345678901234567891], [123456789876543212345678987653], [3], [987654322], [true], [35], [9999999999999999999999999999998], [123456790], [987655], [123456791], [73], [999999999999999999999999999996], [987654321012345678901234567892], [10000000000000000000000000000001], [4], [999999999999999999999999999995], [999999999999999999999999999998], [987654323], [37], [123456792], [987654324], [1000000000000000000000000000002], [3141592653589793238462643383278], [3141592653589793238462643383277], [38], [9999999999999999999999999999997], [987654325], [123456789876543212345678987656], [89], [1000000000000000000000000000003], [72], [123456789876543212345678987657], [123456789876543212345678987655], [9999999999999999999999999999996], [9999999999999999999999999999995], [123456789876543212345678987658], [3141592653589793238462643383283], [999999999999999999999999999994], [3141592653589793238462643383284], [123456788], [88], [12], [987654321012345678901234567893], [90], [123456789876543212345678987652], [3141592653589793238462643383282], [999999999999999999999999999993], [1000000000000000000000000000004], [999999999999999999999999999992], [999999999999999999999999999991], [987653], [1000002], [987652], [987654321012345678901234567894], [45], [123456789876543212345678987651], [123456793], [91], [3141592653589793238462643383276], [56], [1000003], [123456789876543212345678987650], [987654321012345678901234567896], [987654321012345678901234567889], [13], [987654321012345678901234567897], [3141592653589793238462643383275], [14], [1000004], [5], [987654327], [57], [987654326], [987654320], [987654321012345678901234567895], [71], [33], [10000000000000000000000000000002], [987654321012345678901234567898], [1000000000000000000000000000005], [3141592653589793238462643383285], [58], [999999], [987654328], [3141592653589793238462643383274], [34], [15], [46], [987656], [987654329], [47], [32]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n"}
{"task_id": "Mbpp/280", "prompt": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "entry_point": "sequential_search", "canonical_solution": "\ndef sequential_search(dlist, item):\n    return item in dlist, (dlist.index(item) if item in dlist else -1)\n", "base_input": [[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[12, 32, 45, 62, 35, 47, 44, 61], 61], [[9, 10, 17, 19, 22, 39, 48, 56], 48]], "atol": 0, "plus_input": [[[], 10], [[], 5], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8], 5], [[-3, -2, -1, 0, 1, 2], -2], [[1000000000, 2000000000, 3000000000, 4000000000], 2000000000], [[9, 10, 17, 19, 22, 39, 48, 56], 50], [[], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8], 3000000000], [[], []], [[1000000000, 2000000000, 3000000000, 999999999, 4000000000], [1000000000, 2000000000, 3000000000, 999999999, 4000000000]], [[4000000000, 2000000000, 999999999, 4000000000], [4000000000, 2000000000, 999999999, 4000000000]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8], 1], [[-3, -2, -1, 0, 1, 2, -2], [-3, -2, -1, 0, 1, 2, -2]], [[9, 10, 3, 19, 22, 39, 48, 56], 50], [[9, 10, 17, 19, 22, 39, 48, 56], 2], [[1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000], [1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000]], [[5, -2, -1, 0, 1, 2], -2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1], 5], [[9, 10, 17, 19, 22, 39, 48, 56, 9], [9, 10, 17, 19, 22, 39, 48, 56, 9]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 5], 5], [["VgBMzYA", "vPdnkp", "YfFpcqtFRz", "VUS", "RfrFzbvRve", "lWGk", "fCyMNDqiso", "vSEYYDj"], [2000000000, "RB"]], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 8], 6], [[4000000000, 2000000000, 8, 4000000000], [4000000000, 2000000000, 8, 4000000000]], [[1, 2, 3, 4, 5, 5, 2, 6, 7, 8], 5], [[9, 10, 3, 19, 22, 39, 48, 56], 48], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 3000000000, 8], [1, 2, 3, 4, 5, 5, 5, 6, 7, 3000000000, 8]], [[-3, -2, -1, 0, 1, 2], -1], [[1, 2, 3, 4, 5, 5, 6, 7, 3000000000, 8, 3000000000], [1, 2, 3, 4, 5, 5, 6, 7, 3000000000, 8, 3000000000]], [[9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9], [9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9]], [[], 4], [[9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 9, 19], [9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 9, 19]], [[9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9, 56], [9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9, 56]], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 8], 5], [[9, 10, 17, 19, 22, 39, 56], 2], [[9, 10, 3, 19, 22, 39, 48, 56], 47], [[2000000000, 8, 4000000000, 4000000000], [2000000000, 8, 4000000000, 4000000000]], [[8, 2000000000, 999999999, 4000000000, 2000000000, 4000000000], [8, 2000000000, 999999999, 4000000000, 2000000000, 4000000000]], [[6, 1, 2, 3, 4, 5, 6, 8, 9, 10, 1, 6], [6, 1, 2, 3, 4, 5, 6, 8, 9, 10, 1, 6]], [[8, 2000000000, 4000000000, 2000000000, 4000000000], [8, 2000000000, 4000000000, 2000000000, 4000000000]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6], [[1, 2, 3, 4, 5, -1, 5, 6, 7, 3000000000, 8, 7], [1, 2, 3, 4, 5, -1, 5, 6, 7, 3000000000, 8, 7]], [[], 7], [[-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2]], [[false, true, true, false], 2], [[2000000000, 1000000000, 8, 4000000000, 4000000000], [2000000000, 1000000000, 8, 4000000000, 4000000000]], [[-3, -2, -1, 0, 1, 2, -1], [-3, -2, -1, 0, 1, 2, -1]], [[2000000000, 39, 1000000000, 8, 4000000000, 4000000000], [2000000000, 39, 1000000000, 8, 4000000000, 4000000000]], [[4000000000, 2000000000, 8, 4000000000, 4000000000], [4000000000, 2000000000, 8, 4000000000, 4000000000]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7]], [[1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000], [1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000]], [[9, 10, 3, 19, 22, 39, 48, 56], [9, 10, 3, 19, 22, 39, 48, 56]], [[8, 10, 3, 19, 22, 39, 48, 56], [8, 10, 3, 19, 22, 39, 48, 56]], [[1000000000, 8, 3999999999, -1, 4000000000, 1000000000], [1000000000, 8, 3999999999, -1, 4000000000, 1000000000]], [[9, 10, 17, 19, 47, 22, 1000000000, 48, 9, 56], [9, 10, 17, 19, 47, 22, 1000000000, 48, 9, 56]], [[9, 10, 17, 22, 39, 48, 56], 22], [[10, 3, 19, 22, 39, 48, 56], [10, 3, 19, 22, 39, 48, 56]], [[3999999999, 48, 2000000000, 999999999, 4000000000], [3999999999, 48, 2000000000, 999999999, 4000000000]], [[1000000000, 8, 3999999999, -1, 4000000000], [1000000000, 8, 3999999999, -1, 4000000000]], [[1000000000, -3, -2, -1, 0, 1, 2, -2, 0], [1000000000, -3, -2, -1, 0, 1, 2, -2, 0]], [[1, 2, 3, 4, 5, 7, 9, 9, 10], [1, 2, 3, 4, 5, 7, 9, 9, 10]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 5], 4], [[false, true], [false, true]], [[9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 19], [9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 19]], [[9, 10, 17, 19, 22, 38, 48, 56], 50], [[1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000, 4000000000], [1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000, 4000000000]], [[9, 10, 17, 22, 39, 48, 56, 22, 48], 21], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8], 4], [[4000000000, 2000000000, 7, 8, 4000000000], [4000000000, 2000000000, 7, 8, 4000000000]], [[10, 3, 19, 22, 39, 48, 56, 3, 22], [10, 3, 19, 22, 39, 48, 56, 3, 22]], [[5, -2, -1, 0, 1, 2, -2], [5, -2, -1, 0, 1, 2, -2]], [[21, 2000000000, 8, 4000000000, 4000000000], [21, 2000000000, 8, 4000000000, 4000000000]], [[1000000000, 8, 3999999999, -1, 4000000000, 3999999998, 1000000000, 8], [1000000000, 8, 3999999999, -1, 4000000000, 3999999998, 1000000000, 8]], [[8, 10, 3, 19, 22, 39, 56], [8, 10, 3, 19, 22, 39, 56]], [[], 999999999], [[true, true, false, false, false], 21], [[9, 10, 3, 19, 22, 39, 48, 56, 48], 6], [[1000000000, 999999999, 1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000], [1000000000, 999999999, 1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000]], [[1, 2, 1, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 1, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7]], [[1, 2, 4, 4, 5, 5, 5, 6, 7, 8, 8], 3000000000], [[10, 3, 19, 39, 56, 3], [10, 3, 19, 39, 56, 3]], [[8, 10, 3, 19, 22, 39, 21, 57], [8, 10, 3, 19, 22, 39, 21, 57]], [[9, 10, 3, 19, 22, 39, 48, 56, 48, 39], [9, 10, 3, 19, 22, 39, 48, 56, 48, 39]], [[9, 10, 17, 19, 22, 39, 1000000000, 56, 9], [9, 10, 17, 19, 22, 39, 1000000000, 56, 9]], [[9, 10, 17, 19, 22, 39, 56, 17], 2], [[1000000000, 2, 3000000001, 2000000000, 3000000000, 999999999, 4000000000], [1000000000, 2, 3000000001, 2000000000, 3000000000, 999999999, 4000000000]], [[-3, -2, -1, 0, 1, 21, 2, -2], [-3, -2, -1, 0, 1, 21, 2, -2]], [[1, 3, 4, 5, 7, 9, 9, 10], [1, 3, 4, 5, 7, 9, 9, 10]], [[8, 3999999999, 3, 2, 19, 22, 39, 21, 57], [8, 3999999999, 3, 2, 19, 22, 39, 21, 57]], [[-2, -1, 0, 1, 3], [-2, -1, 0, 1, 3]], [[10, 17, 19, 47, 22, 1000000000, 48, 9, 56], [10, 17, 19, 47, 22, 1000000000, 48, 9, 56]], [[2000000001, 8, 2000000000, 4000000000, 2000000000, 4000000000], [2000000001, 8, 2000000000, 4000000000, 2000000000, 4000000000]], [[false, false], []], [[true, false, false, false], 21], [[3000000000, 7], [false]], [[9, 10, 17, 22, 39, 48, 56], [9, 10, 17, 22, 39, 48, 56]], [[10, 3, 19, 22, 23, 39, 48, 56, 22, 10], [10, 3, 19, 22, 23, 39, 48, 56, 22, 10]], [[-20, 57, 3999999998, -83, 21, -24, 8, 1000000000, -99], [-20, 57, 3999999998, -83, 21, -24, 8, 1000000000, -99]], [[8, 10, 2, 3, 19, 22, 22, 21, 57, 57], [8, 10, 2, 3, 19, 22, 22, 21, 57, 57]], [[10, 17, 19, 47, 22, 1000000000, 48, 9, 56, 19], [10, 17, 19, 47, 22, 1000000000, 48, 9, 56, 19]], [[1, 2, 3, 4, -83, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 3, 4, -83, 5, 5, 5, 6, 7, 8, 8, 7]], [[1, 2, 3, 4, -83, -83, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 3, 4, -83, -83, 5, 5, 5, 6, 7, 8, 8, 7]], [[9, 10, 2, 19, 22, 39, 48, 19, 9], [9, 10, 2, 19, 22, 39, 48, 19, 9]], [[3000000000], [3000000000]], [[8, 10, 3, 19, 23, 39, 56], [8, 10, 3, 19, 23, 39, 56]], [[3999999999, 8, 4000000000, 4000000000], [3999999999, 8, 4000000000, 4000000000]], [[38, 10, 17, 19, 22, 39, 47, 1000000000, 48, 56, 9], [38, 10, 17, 19, 22, 39, 47, 1000000000, 48, 56, 9]], [[8, 3, 19, 23, 39, 56], [8, 3, 19, 23, 39, 56]]], "contract": "\n    assert isinstance(dlist, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n"}
{"task_id": "Mbpp/281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n", "entry_point": "all_unique", "canonical_solution": "\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n", "base_input": [[[1, 2, 3]], [[1, 2, 1, 2]], [[1, 2, 3, 4, 5]]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 1]], [[1, "a", 2.5, "b", 1, 2.5, "c"]], [[]], [[1]], [[1, "a", 2.5, "b", 2.5, "c"]], [[1, "a", 2.5, "b", "b", 2.5, "c", "c"]], [["", 1, "a", 2.5, "b", 1, 2.5, "c"]], [[1, "a", 2.5, "b", 2.5, "c", 2.5]], [[1, "a", 2.5, "b", 1, 2.5, "c", "b"]], [[1, "a", 2.5, 2.4132043402592354, 2.5, "c"]], [[1, "a", 2.5, "", "b", 1, 2.5, "c", "b"]], [[1, "a", "b", 1, 2.5, "c"]], [[1, "a", 2.5, "b", 2.5, "c", 2.5, "b"]], [[2]], [[1, 2, 3, 4, 1, 4]], [[1, "a", 2.5, "b", 1, 2.5, "c", "b", 2.5]], [[2, 2]], [[1, "c", "b", 1, 2.5, "c"]], [[1, "a", 2.5, 2.5, "c"]], [[1, 1]], [[1, "a", 2.5, "b", 2.5, "c", "c"]], [[1, "a", "b", 2.5, "c", "cc"]], [[1, "a", 2.5, "b", "b", 2.5, "ac", "c", "c"]], [[1, "a", 2.5, "b", "b", "ac", "c", "c"]], [[1, "a", 2.5, "", "b", 1, 2.5, "b"]], [[1, 2, 3, 4, 1, 1]], [[2, "a", 2.5, "", "b", 1, 2.5, "b"]], [["", 1, "a", 2.5, "b", 1, 2.5, "c", ""]], [[1, 2]], [[1, 2, 5, 3, 4, 1, 4, 5, 2]], [[1, "c", "cb", 1, 2.4132043402592354, "c"]], [[1, "a", 2.5, "b", 1, 2.5, "c", "b", "a"]], [[1, 2, 3, 2, 1, 4, 2]], [["", 1, "a", 2.5, "cb", 1, 2.5, "c", ""]], [[1, "a", 2.5, "", "b", 1, 2.5, 2.5, "b", 2.5]], [[1, "a", 2.4132043402592354, 2.5, "c"]], [[3, 5, 3, 4, 1, 4, 5, 2]], [[1, 2, 3, 3, 2, 2, 4, 2]], [[-97.72133553330038, -22.07383795649666, 2.5, -29.118774451154366, -56.59753538486449, 12.066693167589861, 44.74013652952752, 2.5, -21.841980273620436, 2.4132043402592354]], [[1, "a", 2.5, "b", "b", "c", "c"]], [[2, 2, 2]], [[1, 2, 3, 3, 2, 2, 4, 2, 2]], [[1, "a", 2.0407928337162407, "b", 2.5, "c"]], [[3]], [[5, 4, 5, 5]], [[1, "a", 2.5, 1, 2.5, "c", "b", 1]], [[1, "a", 2.5, "b", 2.5, "c", "b", 2.5, "b"]], [[1, "a", "cc", "b", "ac", "c", "c"]], [["a", 2.5, "b", 1, "bb", 2.5, "c", ""]], [[1, "a", 2.0407928337162407, "b", "c"]], [[1, "a", 2.5, 2.311342558914553, "c", 2.5]], [[-13, 1]], [[1, "a", 2.5, "b", 2.5, "c", "c", "c", 1]], [[2, 3]], [[1, 2, 2, 2]], [[1, "a", 2.5, "b", "b", "c", "c", "a"]], [[1, "c", "b", 1, 2.5, "c", "b"]], [[1, "a", 2.5, "b", "b", "b", 2.5, "ac", "c", "c"]], [[1, "cc", "cb", 1, 2.5, "c"]], [[2, "a", "c", 2.5, "", "b", 1, 2.5, "b"]], [[1, "c", "cb", 2.4132043402592354, "c"]], [[1, 2, 3, 3, 2, 2, 2, 4, 2, 2]], [[-14, 1]], [[1, "a", 2.5, 2.5, "c", 2.5]], [[1, "a", "b", 1, 2.5]], [[4, 4]], [[2, 2, -14, 2]], [[1, 2, 5, 3, 4, 1, 4, 5, 3, 2]], [[1, 2, 3, 3, 2, 2, 3, 2, 4, 5, 2, 2]], [["a", 2.5, "b", 2.5, "cc", "c"]], [[1, "a", 2.5, "", "b", 1, 2.5, 2.5, "b", 2.5, ""]], [[1, "a", 2.5, "b", 1, 2.5, 1]], [[1, "a", 2.5, "b", "c", "bc", 2.5, "b"]], [[-13, -37, -14, -37]], [[1, "bb", "a", 2.5, "b", 2.9537947452443776, "c", 2.5]], [[1, "a", 2.4132043402592354, 2.5, 3, "c"]], [[1, 2, 3, 3, 2, -14, 3, 2, 4, 5, 2, 2]], [[2, 5, 3]], [["a", "b", 1, 2.5, "c"]], [[1, "a", 2.5, "", "b", 1, 3.2945116598503565, "c", "b"]], [[1, "a", 2.5, "", "b", 1, 2.5, 2.311342558914553, "b", 2.5]], [[1, 2, 5, 3, 4, 1, 4, 3, 2]], [[-97.72133553330038, -22.07383795649666, 2.5, -29.78635935943484, -56.59753538486449, 12.066693167589861, -56.59753538486449, 2.5, -21.841980273620436, 2.4132043402592354]], [["a", "b", 1, 2.5, "c", "b"]], [[1, "a", 2.5, "cb", "b", "b", 2.5, "c", "c"]], [[-21.841980273620436, 1, "a", 2.5, 2.5, "c", 2.5]], [[1, "a", 2.5, 2.589643424113979, 2.5, "c"]], [[1, "a", 2.5, "", "ac", 1, 2.5, 2.311342558914553, "b", 2.5]], [[1, 2, 2]], [["", 1, "a", 2.5, "cb", 1, 2.5, "c", -14, ""]], [[2, 3, 4, 1, 4]], [[1, "a", 2.5, 5, "", "b", 1, 2.5, 2.5, "b", 2.5, ""]], [[1, "a", 2.5, "cc", "b", "b", 2.5, "c", "c"]], [[1, "a", 2.5, "", "b", 1, 2.5, "b", 2.5]], [[1, -37, -14, -37]], [[1, "aa", "a", 2.5, "b", 1, 2.5, "c", "b"]], [[1, "bbb", "a", 2.5, "b", 3.3482302076342627, 1, 2.5, "c", "b", "a", 3]], [[1, 2.5, "b", "b", "c", "c", "a"]], [["", 1, "a", 2.5, "b", 1, "a", 2.5, "c"]], [[1, "a", 2.5, "cb", "b", "b", 2.5, "c", "c", "b"]], [["cc", "", 1, "a", 2.5, "cb", 1, 2.5, 1, "c", ""]], [[1, "ac", "bbb", 2.5, "", "b", 1, -22.07383795649666, "c", "b"]], [[1, 2, 3, 4, 1, 4, 5, 3, 2]]], "contract": "\n    assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n"}
{"task_id": "Mbpp/282", "prompt": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "entry_point": "sub_list", "canonical_solution": "\ndef sub_list(nums1,nums2):\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n", "base_input": [[[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]], [[90, 120], [50, 70]]], "atol": 0, "plus_input": [[[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30, 40, 50], [5, 10, 15, 20, 25]], [[-1, -2, -3], [1, 2, 3]], [[2.5, 3.5, 4.5], [1.5, 2.5, 3.5]], [[50, 2, 3], [50, 2, 3]], [[10, 20, 30, 40, -1, 1, 50], [10, 20, 30, 40, -1, 1, 50]], [[10, 20, 30, 40, -1, 1], [10, 20, 30, 40, -1, 1]], [[2.5, 3.5, 4.5], [2.5, 3.5, 4.5]], [[50, 1, 3], [50, 1, 3]], [[2.5, 4.228187684597152, 4.5], [2.5, 4.228187684597152, 4.5]], [[2.5, 3.5], [2.5, 3.5]], [[30, 10, 20, 50, 30, 40, 50], [30, 10, 20, 50, 30, 40, 50]], [[50, 30, 2, 3], [50, 30, 2, 3]], [[1, 2, 3, 4], [5, 6, 7, 25]], [[2.5, 2.7219722320551716, 2.5], [2.5, 2.7219722320551716, 2.5]], [[30, 10, 20, 30, 40, 50], [30, 10, 20, 30, 40, 50]], [[2.5, 3.5, 4.5, 2.5], [2.5, 3.5, 4.5, 2.5]], [[10, 20, 30, 40, 31, -1, 1], [10, 20, 30, 40, 31, -1, 1]], [[10, 20, 30, 40, 31, 0, 1, 30], [10, 20, 30, 40, 31, 0, 1, 30]], [[50, 1, 3, 1, 0, 1], [50, 1, 3, 1, 0, 1]], [[5, 6, 7, 25], [5, 6, 7, 25]], [[1.2555626492437502, 2.7219722320551716, 2.5], [1.2555626492437502, 2.7219722320551716, 2.5]], [[10, 20, 30, 40, 0, 1, 30, 30], [10, 20, 30, 40, 0, 1, 30, 30]], [[30, 10, 20, 50, 30, 40], [30, 10, 20, 50, 30, 40]], [[2.5, 3.5, 2.5], [2.5, 3.5, 2.5]], [[1.5, 2.5, 4.228187684597152], [1.5, 2.5, 4.228187684597152]], [[2.5, 3.277085080344455, 2.5], [2.5, 3.277085080344455, 2.5]], [[50, 3], [50, 3]], [[30, 10, 20, 50, 30, 39, 50], [30, 10, 20, 50, 30, 39, 50]], [[10, 20, 30, 40, 31, -1, 3, 1, 10], [10, 20, 30, 40, 31, -1, 3, 1, 10]], [[1.5, 3.5, 2.5, 4.228187684597152], [1.5, 3.5, 2.5, 4.228187684597152]], [[10, 7, 30, 40, 31, -1, 3, 1, 10], [10, 7, 30, 40, 31, -1, 3, 1, 10]], [[10, 20, 30, 40, 31, 0, 1, 31, 30, 31], [10, 20, 30, 40, 31, 0, 1, 31, 30, 31]], [[10, 20, 30, 40, 31, -1, 50, 3, 1, 10], [10, 20, 30, 40, 31, -1, 50, 3, 1, 10]], [[4.228187684597152, 4.5], [4.228187684597152, 4.5]], [[30, 10, 30, 29, 20, 30], [30, 10, 30, 29, 20, 30]], [[50, 2, 50, 2], [50, 2, 50, 2]], [[4.5, 2.5, 4.228187684597152, 3.277085080344455, 3.277085080344455], [4.5, 2.5, 4.228187684597152, 3.277085080344455, 3.277085080344455]], [[30, 10, 20, 30, 6, 40, 50], [30, 10, 20, 30, 6, 40, 50]], [[10, 30, 40, 31, -1, 1], [10, 30, 40, 31, -1, 1]], [[10, 20, 30, 1, 0, 1, 30, 30], [10, 20, 30, 1, 0, 1, 30, 30]], [[2.5, 4.228187684597152], [2.5, 4.228187684597152]], [[10, 7, 30, 40, 31, 8, -1, 3, 1, 10], [10, 7, 30, 40, 31, 8, -1, 3, 1, 10]], [[15, 30, 10, 0, 30, 40, 4], [15, 30, 10, 0, 30, 40, 4]], [[3.5], [3.5]], [[2.5, 3.5, 2.5, 3.5], [2.5, 3.5, 2.5, 3.5]], [[10, 20, 30, 40, 31, 0, 1, 31, 30], [10, 20, 30, 40, 31, 0, 1, 31, 30]], [[10, 20, 30, 40, 31, -1, 1, 40], [10, 20, 30, 40, 31, -1, 1, 40]], [[31, 1, 3, 1, 0, 1], [31, 1, 3, 1, 0, 1]], [[10, 7, 30, 40, 31, 7, -1, 1, 10], [10, 7, 30, 40, 31, 7, -1, 1, 10]], [[10, 7, 30, 40, 2, 31, 7, -1, 1, 10], [10, 7, 30, 40, 2, 31, 7, -1, 1, 10]], [[10, 20, 30, 40, 31, -1, 1, 40, 40], [10, 20, 30, 40, 31, -1, 1, 40, 40]], [[15, 30, 0, 30, 40, 4], [15, 30, 0, 30, 40, 4]], [[15, 30, 10, 0, 30, 30, 40, 4], [15, 30, 10, 0, 30, 30, 40, 4]], [[29, 10, 20, 30, 6, 40, 50, 20], [29, 10, 20, 30, 6, 40, 50, 20]], [[3.4835765355343726, 3.5], [3.4835765355343726, 3.5]], [[51, 50], [51, 50]], [[31, 1, 3, 1, 0, 3], [31, 1, 3, 1, 0, 3]], [[4.692264375890533], [4.692264375890533]], [[1, 3, 1, 0, 1], [1, 3, 1, 0, 1]], [[30, 10, 30, 40, 50], [30, 10, 30, 40, 50]], [[3.275166414796655, 4.692264375890533], [3.275166414796655, 4.692264375890533]], [[1.5, 3.275166414796655, 4.692264375890533], [1.5, 3.275166414796655, 4.692264375890533]], [[3.275166414796655, 3.4835765355343726, 3.5, 3.5], [3.275166414796655, 3.4835765355343726, 3.5, 3.5]], [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]], [[2.5, 3.5, 2.4419505347242247], [2.5, 3.5, 2.4419505347242247]], [[3.480698843323787, 3.5, 4.5, 2.5], [3.480698843323787, 3.5, 4.5, 2.5]], [[3.8409023192569816, 3.275166414796655, 4.228187684597152, 4.5], [3.8409023192569816, 3.275166414796655, 4.228187684597152, 4.5]], [[10, 20, 30, 30, 40, -1, 1], [10, 20, 30, 30, 40, -1, 1]], [[10, 7, 30, 40, 31, 7, 1, 10], [10, 7, 30, 40, 31, 7, 1, 10]], [[30, 5, 20, 30, 40, 50], [30, 5, 20, 30, 40, 50]], [[4, 50, 30, 3, 3, 50], [4, 50, 30, 3, 3, 50]], [[4, 50, 30, 3, 3, 50, 50], [4, 50, 30, 3, 3, 50, 50]], [[30, 10, 20, 50, 30, 39, 49], [30, 10, 20, 50, 30, 39, 49]], [[6, 7, 25], [6, 7, 25]], [[15, 30, 3, 10, 0, 30, 40, 4], [15, 30, 3, 10, 0, 30, 40, 4]], [[30, 10, 30, 29, -1, 30], [30, 10, 30, 29, -1, 30]], [[10, 20, 30, 40, 2, 31, 7, -1, 1, 10, 30], [10, 20, 30, 40, 2, 31, 7, -1, 1, 10, 30]], [[1.2555626492437502, 1.2555626492437502, 2.7219722320551716, 2.5], [1.2555626492437502, 1.2555626492437502, 2.7219722320551716, 2.5]], [[30, 49, 10, 20, 30, 6, 40, 50, 20], [30, 49, 10, 20, 30, 6, 40, 50, 20]], [[-1, 31, 1, 3, 1, 3], [-1, 31, 1, 3, 1, 3]], [[50, 50, 3, 50], [50, 50, 3, 50]], [[50, 1, 8, 3, 1], [50, 1, 8, 3, 1]], [[3.4835765355343726], [3.4835765355343726]], [[20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30], [20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30]], [[31, 1, 3, 2, 1, 0, 40, 0], [31, 1, 3, 2, 1, 0, 40, 0]], [[3.4835765355343726, 3.5, 3.5], [3.4835765355343726, 3.5, 3.5]], [[10, 20, 30, 40, 31, -1, 50, 3, 10, 50], [10, 20, 30, 40, 31, -1, 50, 3, 10, 50]], [[15, 30, 0, 30, 40, 4, 4], [15, 30, 0, 30, 40, 4, 4]], [[30, 20, 50, 30, 40, 50, 20], [30, 20, 50, 30, 40, 50, 20]], [[10, 30, 40, 1, 31, -1, 1], [10, 30, 40, 1, 31, -1, 1]], [[2.2350376696437304, 4.692264375890533], [2.2350376696437304, 4.692264375890533]], [[50, 30, 10, 20, 30, 40, 50], [50, 30, 10, 20, 30, 40, 50]], [[2.2350376696437304, 4.692264375890533, 2.2350376696437304], [2.2350376696437304, 4.692264375890533, 2.2350376696437304]], [[10, 20, 30, 1, 0, 1, 15, 30, 10], [10, 20, 30, 1, 0, 1, 15, 30, 10]], [[1.5, 3.5, 2.5, 1.5, 4.228187684597152], [1.5, 3.5, 2.5, 1.5, 4.228187684597152]], [[50, 1, 3, 1, 0, 1, 1], [50, 1, 3, 1, 0, 1, 1]], [[4, 2, 50, 30, 3, 50, 50], [4, 2, 50, 30, 3, 50, 50]], [[1.5, 4.228187684597152], [1.5, 4.228187684597152]], [[20, 30, 1, 0, 1, 30, 30], [20, 30, 1, 0, 1, 30, 30]], [[10, 20, 30, 40, 31, -1, 3, 1, 10, 40], [10, 20, 30, 40, 31, -1, 3, 1, 10, 40]], [[10, 20, 30, 40, 21, 0, 1, 30, 30, 30], [10, 20, 30, 40, 21, 0, 1, 30, 30, 30]], [[20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30, 20, 25, 25], [20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30, 20, 25, 25]], [[4.5, 1.5, 2.5, 4.228187684597152], [4.5, 1.5, 2.5, 4.228187684597152]]], "contract": "\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]\n"}
{"task_id": "Mbpp/283", "prompt": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n", "entry_point": "validate", "canonical_solution": "\ndef validate(n): \n    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)\n", "base_input": [[1234], [51241], [321]], "atol": 0, "plus_input": [[9], [9876543210], [112233445566], [111111], [112233445565], [111110], [112233445567], [10], [9876543211], [111112], [111109], [112233445568], [8], [9876543209], [11], [111113], [9876543208], [111108], [7], [6], [9876543206], [111114], [9876543207], [12], [111107], [5], [4], [3], [2], [112233445564], [9876543212], [1], [9876543213], [9876543205], [74], [9876543214], [0], [75], [111115], [76], [9876543204], [112233445569], [111106], [112233445570], [77], [111105], [72], [13], [9876543215], [112233445563], [112233445571], [73], [78], [112233445562], [9876543217], [79], [71], [111104], [111103], [70], [14], [9876543203], [69], [29], [30], [111102], [28], [68], [65], [111101], [52], [112233445572], [9876543216], [27], [15], [26], [91], [16], [31], [112233445573], [67], [32], [80], [17], [25], [111100], [53], [112233445574], [111099], [112233445561], [33], [92], [81], [9876543219], [112233445575], [112233445560], [66], [9876543218], [64], [54], [51], [111117], [63], [9876543202]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n"}
{"task_id": "Mbpp/284", "prompt": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n", "entry_point": "check_element", "canonical_solution": "\ndef check_element(list1, element):\n  return all(v == element for v in list1)\n", "base_input": [[["green", "orange", "black", "white"], "blue"], [[1, 2, 3, 4], 7], [["green", "green", "green", "green"], "green"]], "atol": 0, "plus_input": [[[], "red"], [["a", "a", "a", "a", "a"], "a"], [[], "green"], [[], []], [[], "a"], [["a", "a", "a", "a", "a"], "reda"], [[], "reda"], [["a", "", "a", "a", "a"], "a"], [[], "gren"], [["a", "", "a", "a", "a"], "ared"], [["a", "", "a", "green", "a", "a"], "ared"], [[], "ared"], [["a", "", "a", "redaa", "green", "a", "a"], "red"], [["a", "", "a", "a", "a", "a"], "ared"], [["a", "", "a", "a", "a"], "aredd"], [["a", "", "a", "a", "a"], "gren"], [[], ["IMSzNXr"]], [[], [false, true, true, false, true, false, true, true, false]], [[], ["red", "HwtScMmS", "jjtLKAcXm"]], [["a", "", "a", "redaa", "green", "a", "a"], "aa"], [["a", "a", "areda", "a", "a", "a"], "a"], [["a", "a", "a", "a", "a"], "gren"], [["a", "a", "a", "a", "a", "a", "a"], "gren"], [["", "a"], "red"], [["a", "a", "a", "a", "a"], "HwtScMmS"], [[], "gaan"], [["a", "a", ""], "gren"], [["a", "", "a", "a", "a"], "reda"], [["a", "a", ""], "gregren"], [["a", "aa", "a", "a", "a"], "reda"], [[], ["red", "HwtScMmS", "jjtLKaredaAcXm"]], [["a", "a", "a", "a", "a", "a"], "a"], [["a", "a", "areda", "a", "a", "a"], "gregren"], [["red", "", "CeR"], "reda"], [["a", "", "a", "green", "a", "a"], "areed"], [["a", "a", "a", "jjtLKAcXm", "a", "a", "a"], "gren"], [["", "a", "a", "a", "a"], "gaan"], [[], ""], [[], [[56.04013492061608, 22.809175570261317, -19.209978650818854], -9.19614909867073, ["CeR", "aa", "reda", "cX", "sqkDTbEWNY", "gaan", "aa", "reda"], "reda", -9.19614909867073]], [["red", "", "CeR"], "rda"], [["a", "", "a", "redaa", "green", "a", "a"], "rd"], [["red", "gregren", "", "CeR"], "rda"], [[], [-8.3015872751577, -1.6872782556751815, -37.057532027723326, 56.04013492061608, 22.809175570261317]], [[], "gregren"], [[], [-8.3015872751577, -1.6872782556751815, -37.057532027723326, 56.04013492061608, 22.809175570261317, -37.057532027723326]], [[], [-8.3015872751577, -1.6872782556751815, -37.057532027723326, 56.04013492061608, 22.809175570261317, 22.809175570261317]], [["red", "IMSzNXr", "gregren", "CeRHwtScMmS"], "red"], [["aredaa", "", "a", "a", "a"], "green"], [["red", "gregren", "CeRHwtScMmS"], "red"], [["a", "a", "a", "a", "a", "a", "a"], "sqkDTbEWNY"], [["a", "", "a", "redaa", "a", "a"], "red"], [["Zwm", "iAz", "IEnmyrIGhY", "EKrcuFaZ"], "green"], [["a", "", "a", "redaa", "areedgreen", "a", "a"], "aa"], [["a", "a", "redaaa", "a", "a"], "HwtScMmS"], [["a", "", "a", "a", "a", "a"], "ard"], [["red", "gregren", "CEKrcuFaZwtScMmS"], "red"], [["a", "a", "a", "a"], "a"], [[], ["rd", "mlOBNlC", "", "Zwm", "gregren", "Zwm"]], [["a", "a", "a", "iAz", "a", "a", "aa", "a"], "sqkDTbEWNY"], [[], [-8.3015872751577, -1.6872782556751815, -37.057532027723326, 56.04013492061608, 22.809175570261317, -8.3015872751577]], [["a", "a", "redaaa", "a", "a"], "areed"], [["Zwm", "IEnmyrIGhY", "EKrcuFaZ"], "green"], [["a", "a", "a", "a"], "jjtLKaredaAcXm"], [["a", "", "a", "a", "a", "a", ""], "ard"], [[], [-19.209978650818854, -37.057532027723326, 87.86645974977819, 32.00129666267674, -1.606104157903161, -82.74767724499756, -93.4885457411899, -19.209978650818854, 56.04013492061608]], [["a", "a", "areda", "a", "a", "a"], "rdegren"], [["a", "a", "HwtScMmS"], "gregren"], [["a", "a", "areda", "a", "a"], "gregren"], [["a", "", "a", "redaa", "green", "a", "a", "a"], "rd"], [[], ["IMSzNXr", "IMSzNXr"]], [["areed", "", "a", "redaa", "a"], "jjtLKaredaAcXma"], [["aredaa", "", "CeR", "CeR"], "rda"], [[], [-14, 78, false, true, false, -17, false, -99, true, -79]], [[], [[56.04013492061608, 22.809175570261317, -19.209978650818854, -19.209978650818854], [56.04013492061608, 22.809175570261317, -19.209978650818854, -19.209978650818854], -9.19614909867073, "reda", -9.19614909867073]], [["red", "", "CeR"], "red"], [["", "jjtLKAcXm", "aa"], "red"], [["red", "", "CeR", ""], "red"], [["a", "", "a", "redaa", "a", "a"], "IMSzNXr"], [["a", "", "aa", "a", "a", "a"], "ard"], [["Z", "red", "Utyz", "cAvkmuMOrX", "TaK"], "green"], [["cX", "", "a"], "mlOBNlC"], [["a", "", "a", "redaa", "green", "a", "a", "a", "a"], "rd"], [[], "ggreen"], [["a", "a", "a"], "jjtLKaredaAcXm"], [["red", "IMSzNXr", "gregren", "CeRHwtScMmS"], "dred"], [["Zwm", "iAz", "IEnmyrIGhY", "EKrcuFaZ"], "gereen"], [["a", "a", "a", "a"], "jjtLKaredaAcXmIMSzNXr"], [["a", "a", "a", "a", "a", "a", "a"], "areda"], [[], "redea"], [[], ["rXziNV", "gySc", "gyScc"]], [["a", "a", "a", "a", "a"], "jjtLKaredaAcXmIMSzNXr"], [["red", "gregren", "CEKrcuFaZwtScMmS"], "redggreena"], [["red", "IMSzNXr", "gregren", "CeRHwtScMmS"], "aa"], [["areed", "", "a", "redaa", "a", "a"], "jjtLKaredaAcXma"], [["a", "", "a", "redaa", "green", "a", "a"], "iAz"], [["red", "IMSzNXr", "gereen", "CeRHwtScMmS"], "red"], [["a", "", "aa", "Z", "a", "a"], "cX"], [["a", "ajjtLKaredaAcXma", "", "a", "a", "a"], "gren"], [["IMSzNXr", "gregren", "CeRHwtScMmS"], "dred"], [["a", "", "a", "a", "a"], "IEnmyrIGhY"], [["a", "", "a", "a", "a"], "areed"], [["a", "a", "areda", "a", "a"], "grnegren"], [["a", "a", "a", "redaaa", "a", "a"], "areed"]], "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n"}
{"task_id": "Mbpp/285", "prompt": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n", "entry_point": "text_match_two_three", "canonical_solution": "\nimport re\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n", "base_input": [["ac"], ["dc"], ["abbbba"]], "atol": 0, "plus_input": [[""], ["icxh"], ["icicxhxh"], ["icixcxhxh"], ["icicxhxicixcxhxhh"], ["iicixcxhxh"], ["icicxhxicixxhxhh"], ["icixcxhicicxhxicixxhxhhxh"], ["icxiicixcxhxhh"], ["KDZlWIDTdR"], ["icicixcxhicicxhxicxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhh"], ["icicxh"], ["icich"], ["icixcxhicicxhxicicicxhxicixxhxhhixxhxhhxh"], ["icicxhicxchxicixcxhxhh"], ["iicxhxicicicxhxicixxhxhhixxhxhhxh"], ["hicxiicixcxhxhh"], ["hicxiicixcxxhxhh"], ["icixcxhicicxhiicixcxhxhxicixxhxhhxh"], ["icixxhxh"], ["icixcxhxicixcxhxhh"], ["icicixcxhicicxhxicxiicixcxhxhhicixxhxhhxhicxhxicixcxhxh"], ["icixcicixcxhxicixcxhxhhxhxh"], ["icicixcxhicicxhxiicixcxhicicxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhh"], ["icicxhxicihh"], ["hiicxiicixcxhxhh"], ["icxiichh"], ["icixcxhicicxhxicixxxhxhhxh"], ["hiicxiiciixcxhxhh"], ["icxiicixhh"], ["icixcxhxchicxh"], ["iicxhxicicicxhxhicixxhxhhixxhxhhxh"], ["KDZDlWIDTdR"], ["icixh"], ["icicxhx"], ["icicichxhxh"], ["hiicxiicixcxhchh"], ["icicxhicicixcxhicicxhxiicixcxhicicxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhhxicihh"], ["iccicxhicixcxhxh"], ["icicxhxichiicxiicixcxhxhhixxhxhh"], ["KDZDlWIDTdicixhR"], ["iicKDZDlWIDTdicixhRxhxicicicxhxhicixxhxhhixxhxhhxh"], ["iicKDZDlWIDTdicixhRhxicicicxhxhicixxhxhhixxhxhhxh"], ["KiDZDlWIDTdicixhR"], ["iciicicxhxhxcxhicicxhxicixxxhxhhxh"], ["icixcxhKDZlWIDTdRicicxhxicicicxhxihiicxiiciixcxhxhhxhhixxhxhhxh"], ["KDZlWicicxhxichiicxiicixcxhxhhixxhxhhdR"], ["KDZlWIDDTdR"], ["hiicxiichiixcxhxhh"], ["hicxxiicixcxhxicixcxhxhhicixcxxhxhh"], ["iicicicxhxicixxhxhhxhxicicixcxhxicixxhxhhixxhxhhxh"], ["KKiDZDlWIDTdicixhRDZlWIDTdR"], ["iccicxhicixcxh"], ["iicixxhxhxhxiciicKDZDlWIDTdicixhRhxicicicxhxhicixxhxhhixxhxhhxhicicxhxcicixxhxhhixxhxhhxh"], ["icxiiciicxiicixcxhxhhxhh"], ["KicicixcxhicicxhxiicixcxhicicxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhhDZDlWIDTdicixhR"], ["KDZZlWIDDTdR"], ["icxiicixh"], ["icicixcxhicicxhxiicixcxhicicicixcxhKDZlWIDTdRicicxhxicicicxhxihiicxiiciixcxhxhhxhhixxhxhhxhxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhh"], ["icxiiicixh"], ["vbCTq"], ["icichxhxh"], ["icicxhxichiicxiicixcxhxhhixxhxiicxhxicicicxhxhiciixxhxhhixxihxhhxhhh"], ["hicxiicixcxixhxhh"], ["hhiicxiicixcxhchh"], ["cicicxhx"], ["icicicxiiciicxiicixcxhxhhxhhxhxicihh"], ["icicxhxicicixcxhxchicicixcxhicicxhxicxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhhicxhixxhhxhh"], ["cicicxhxcicxhxicixxxhxhhxh"], ["iicxh"], ["icixcxhicicKDZlWIDTdRxhiicxiicixcxhxhhhiicixcxhxhxicixxhxhhxh"], ["hicxicicixcxhicicxhxiicixcxhicicxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhhiicihxhh"], ["cch"], ["icixcxxhicicKDZlWIDTdRxhiicxiicixiccicxhicixcxhxhcxhxhhhiicixcxhxhxicixxhxhhxh"], ["iivbCTqcxhxicicicxhxicixxhxhhixxhxiicKDZDlWIDTdicixhRhxicicicxhxhicixxhxhhixxhxhhxhhhxh"], ["iiccxh"], ["icicxhxicihicxicicixcxhicicxhxiicixcxhicicxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhhiicihxhhxhh"], ["icxicixhh"], ["KKDiDZDlWIDTdicixhRDZlWIDTdR"], ["icicxhxicicixcxhxchicicixcxhicicxhxicxiicixcxhxhhicixxhxhhxhichxhh"], ["icihicxxiicixcxhxicixcxhxhhicixcxxhxhhxicihh"], ["icicxicicxhxicihicxicicixcxhicicxhxiicixcxhicicxhxicixxhxhhxhcxiicixcxhxhhicixxhxhhxhicxhxicixcxhxhhiicihxhhxhhhh"], ["icicxhiicxchxich"], ["xxhxhhixxhxiicKDZDlWIDTdicixhRhxicicicxhxhicixxhxhhixxhxhhxhhhxh"], ["icicxhxichiicxiicixcxhxhhixhxhxiicxhxicicicxhxhiciixxhxhhixxihxhhxhhh"], ["icicicxhxichiicxiicixcxhxhhixxhxiicxhxicicicxhxhiciixxhxhhixxihxhhxhhhicxhxh"], ["icicichxhx"], ["KDZlWIDTdRicixcxxicicKDZlWIDTdRxhiicxiicixiccicxhicixcxhxhcxhxhhhiicixcxhxhxicixxhxhhxh"], ["icxhKDZlWIDTdR"], ["KDZlWIDTdRicixcxxicicKDZlWIDTdRxhiicxiicixxiccicxhicixcxhxhcxhxhhhiicixcxhxhxicixxhxhhxh"], ["icicxhxih"], ["ixh"], ["icxiicKDZDlWIDTdicixhRhxicicicxhxhicixxhxhhxixxhxhhxhiiicixh"], ["icicihchxhxh"], ["icicxhiicicicxhxicixxhxhhxhxicicixcxhxicixxhxhhixxhxhhxhxicicixcxhxchicicixcxhicicxhxicxiicixcxhxhhicixxhxhhxhicxhxicixxcxhxhhicxhixxhhxhh"], ["TIUmFRsecT"], ["ixxh"], ["icicxhxicicixcxhxchicicixcxhicicxhxicxiicixcxhxhhicixixhxhhxhichxhh"], ["KDZlWicicxhxixiicixcxhxhhixxhxhhdR"], ["KKDiDZDlWiciicicxhxhxcxhicicxhxicicixcxhxicixcxhxhhixxxhxhhxhIDTdicixhRDZlWIDTdR"], ["hiicxiiKKDiDZDlWIDTdicixhRDZlWIDTdRcixcxhxhh"]], "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)\n"}
{"task_id": "Mbpp/286", "prompt": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "entry_point": "max_sub_array_sum_repeated", "canonical_solution": "\ndef max_sub_array_sum_repeated(a, n, k): \n\tmodifed = a * k\n\tpre = 0\t# dp[i-1]\n\tres = modifed[0]\n\tfor n in modifed:\n\t\tpre = max(pre + n, n)\n\t\tres = max(pre, res)\n\treturn res\n", "base_input": [[[10, 20, -30, -1], 4, 3], [[-1, 10, 20], 3, 2], [[-1, -2, -3], 3, 3]], "atol": 0, "plus_input": [[[5, -2, 10, 4, -7, 3], 6, 5], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 2], [[5, -2, 11, 4, -7, 3], 6, 5], [[5, -2, 10, 5, -7, 3], 6, 6], [[5, -2, 10, 5, -7, 3], 6, 1], [[5, -2, 10, 5, -7, 3, 10], 7, 6], [[5, -2, 10, 5, -7, 3, 10], 7, 10], [[5, -2, 10, 5, -7, 3, 10], 7, 5], [[5, -2, 10, 5, -7, 3, 10], 7, 9], [[5, -2, 11, 4, -7, 3], 6, 4], [[5, -2, 10, 4, -7, 3], 6, 4], [[5, -2, 10, -7, 3, 5], 6, 1], [[5, -2, 10, 5, -7, 4, 10], 7, 6], [[5, -2, 10, -7, 3, 5], 6, 3], [[5, -2, 10, 5, -7, 4, 10], 7, 7], [[1, 2, 3, -4, -5, 6, 7, -8, 10, 10], 10, 2], [[9, -2, 10, 5, -7, 3, 10], 7, 5], [[5, -2, 10, 4, -7, 3], 6, 6], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 1], [[5, -2, 10, 5, -7, 3, 10], 7, 7], [[5, -2, 10, 5, -7, 3, 10], 7, 4], [[-7, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 1], [[5, -2, 10, 4, -7, 3, 10], 7, 5], [[-7, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 11], [[-7, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 10], [[6, -2, 9, -7, 3, 5], 6, 3], [[5, -2, 10, 4, -7, 3, 10], 7, 6], [[6, -2, 9, -7, 3, 5], 6, 6], [[5, -2, 10, 5, -7, 3], 6, 9], [[5, -2, 10, 5, -7, 3, 10], 7, 1], [[5, -2, 10, 5, -4, 3, 10], 7, 7], [[6, -2, 9, -7, 3, 5], 6, 2], [[-2, -3, 9, -7, 3, 5], 6, 3], [[6, -2, 10, 4, -7, 3, 10], 7, 6], [[1, 2, 11, -4, -5, 6, 7, -8, 9, 10], 10, 1], [[5, -2, 5, -7, 4, 10], 6, 6], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 10], [[1, 2, 3, -4, -5, 6, 7, -8, 10, 10], 10, 3], [[-7, 2, 3, -4, 1, 6, 7, -8, 9, 10], 10, 11], [[4, -2, 10, -7, 3, 5], 6, 3], [[5, -2, 10, -7, 3, 5], 6, 6], [[5, -1, 10, 4, -7, 3], 6, 4], [[5, -2, 10, 5, -7, 3, 10], 7, 11], [[1, 2, 3, -4, -5, 6, 7, -8, 10, 10], 10, 4], [[9, -2, 10, 5, -7, 3, 10], 7, 6], [[5, -1, 10, 3, -7, 3], 6, 4], [[6, -2, 10, 4, -8, 3, 10], 7, 6], [[5, -2, 10, 4, -7, 3], 6, 11], [[5, -2, 10, 5, -7, 3], 6, 2], [[5, -2, 10, 5, -8, 3], 6, 9], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10, 7], 11, 1], [[6, -2, 10, 4, -8, 3, 10, 10], 8, 6], [[1, 11, 2, 3, -4, -5, 7, -8, 10, 10], 10, 10], [[5, -2, 10, 4, -7, 3, 10], 7, 4], [[5, -2, 10, 5, -7, 3], 6, 10], [[5, -2, 10, 4, -7, 3, -2], 7, 3], [[1, 11, 2, 3, -4, -5, 7, -8, 10, 10], 10, 5], [[-7, 2, 3, -4, -5, 6, 6, -8, 9, 10], 10, 1], [[5, -2, 10, 5, -7, 3, 9], 7, 5], [[5, -2, 10, -7, 3, 5], 6, 7], [[5, -2, 10, 4, -7, 3, 10], 7, 7], [[-7, 2, 3, -4, -5, 6, 6, -8, 9, 10, 6], 11, 1], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 4], [[9, -2, 10, 5, -7, 3, 10], 7, 7], [[-7, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 8], [[9, -2, 10, 4, -7, 3, 10], 7, 5], [[6, -2, 10, 4, -7, 3, 10], 7, 5], [[5, -1, 10, 3, -7, 3], 6, 3], [[1, 2, 11, -4, -5, 6, 7, -8, 9, 10], 10, 10], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 9], [[9, -2, 10, 4, -7, 3, 10], 7, 4], [[5, -2, 10, -7, 3, 5], 6, 5], [[5, -2, 10, 4, -7, 3], 6, 7], [[5, -2, 10, 4, 4, 3], 6, 11], [[-2, -3, 9, -7, -1, 5], 6, 3], [[5, -2, -2, 5, -7, 3, 10], 7, 11], [[5, -2, 10, 4, -7, 3, 8], 7, 7], [[6, -2, 10, 5, -4, 3, 10], 7, 7], [[6, -2, 10, 4, -7, 3, 10], 7, 4], [[1, 2, 3, -4, -5, 6, 7, -8, 10, 10], 10, 10], [[9, -2, 10, 4, -7, 3], 6, 7], [[5, -2, 10, 3, 3, 5], 6, 6], [[-2, 10, 5, -8, 3], 5, 9], [[5, -2, 10, 5, -7, 3], 6, 5], [[6, -1, 9, -7, 3, 5], 6, 3], [[5, -2, -2, 5, -7, 3, 10], 7, 12], [[1, 2, 3, -4, -5, 6, 7, -8, 9, 10], 10, 11], [[5, -2, 5, -7, 4, 10], 6, 7], [[5, -2, 10, 4, -6, 3], 6, 2], [[6, -2, 10, 4, -7, 3, 10], 7, 7], [[-2, -3, 9, -1, -1, 5], 6, 3], [[-2, -3, 9, -7, -1, 5], 6, 4], [[5, -2, 11, 4, -7, 3], 6, 3], [[1, 2, 3, -3, -5, 6, 7, -8, 10, 10], 10, 10], [[7, -2, 10, 4, -7, 3, 10], 7, 6], [[5, -2, 10, 5, -7, 3], 6, 11], [[9, -2, 10, 5, -7, 3, 10], 7, 2], [[5, -2, 10, 5, -7, 3], 6, 7], [[5, -2, 10, 5, -7, 3, 10], 7, 12], [[6, -3, 10, 5, -4, 3, 10], 7, 7], [[6, -1, 9, -4, 3, 5], 6, 3], [[-7, 2, 3, -4, -5, 6, -7, -8, 9, 10], 10, 8]], "contract": "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int) and n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int) and k >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n"}
{"task_id": "Mbpp/287", "prompt": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "entry_point": "square_Sum", "canonical_solution": "\ndef square_Sum(n):  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n", "base_input": [[2], [3], [4]], "atol": 0, "plus_input": [[100], [0], [1], [1000000], [10], [10000], [90], [89], [1000002], [91], [1000001], [false], [true], [1000003], [2], [3], [92], [9], [17], [10001], [101], [4], [93], [99], [8], [999999], [87], [102], [9999], [94], [103], [86], [98], [105], [88], [49], [85], [50], [1000004], [9998], [104], [1000005], [51], [10002], [5], [7], [106], [52], [84], [35], [97], [11], [72], [999998], [16], [12], [1000006], [96], [48], [47], [6], [13], [999997], [95], [36], [999996], [14], [15], [1000007], [9997], [37], [1000008], [18], [999995], [81], [46], [38], [19], [82], [107], [83], [39], [45], [53], [999994], [44], [54], [55], [108], [10003], [25], [10004], [71], [999993], [28], [73], [20], [40], [26], [27], [1000009], [56], [43], [10005], [9996], [109]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n"}
{"task_id": "Mbpp/290", "prompt": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "entry_point": "max_length", "canonical_solution": "\ndef max_length(list1):\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n", "base_input": [[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1], [5, 7], [10, 12, 14, 15]]], [[[5], [15, 20, 25]]]], "atol": 0, "plus_input": [[[[1, 3, 5, 7, 9, 11], [2, 4, 6], [10, 12, 14, 16, 18, 20], [13, 15, 17, 19, 21]]], [[[], [1, 2, 3], [4, 5]]], [[[[1], [2]], [[3], [4], [5]], [[6], [7], [8], [9]], [[10], [11], [12], [13], [14]]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]], [[[1, 2, 3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13, 14, 15], [16]]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11], [12, 13, 14, 15, 16, 17, 18], [19, 20], [21]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21]]], [[[]]], [[[[[[1, 2, 3]]]]]], [[[1, 2, 3], [8, 8, 9], [4, 5, 6, 7], [8, 8, 9], [11, 12, 13, 14, 15], [16], [8, 8, 9], [1, 2, 3]]], [[[1, 2, 3], [8, 9, 10], [11, 12, 13, 14, 15], [16]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21], [9, 10, 11, 12]]], [[[1, 3, 5, 7, 9, 11], [10, 12, 14, 16, 18, 20], [13, 15, 17, 19, 21], [10, 12, 14, 16, 18, 20]]], [[[1, 2, 3], [8, 9, 5], [11, 12, 13, 14, 15], [16], [11, 12, 13, 14, 15]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12]]], [[[1, 2], [4, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [11, 9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [21], [11, 9, 10, 11, 12]]], [[[1, 2, 3], [8, 9], [4, 5, 6, 7], [8, 9], [11, 12, 13, 14, 15], [16], [8, 9], [1, 2, 3]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21], [9, 10, 11, 12], [9, 10, 11, 12], [4, 5]]], [[[1, 2, 3], [1, 2, 3], [4, 5], [6, 7, 8], [11, 9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [21], [11, 9, 10, 11, 12], [1, 2, 3]]], [[[1, 2, 3], [8, 9, 5], [11, 12, 13, 14, 15], [16], [11, 12, 13, 14, 15], [1, 2, 3]]], [[[], [2, 3], [4, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [1, 21], [4, 5]]], [[[6, 7, 15, 8], [1, 2, 3], [4, 5], [6, 7, 15, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21]]], [[[1, 2, 3], [8, 9], [4, 5, 6, 7], [8, 9], [11, 12, 13, 14, 15], [16], [8, 9], [8, 9]]], [[[], []]], [[[1, 2], [4, 5], [4, 5]]], [[[1, 2, 3], [4, 5], [9, 10, 11, 10, 12], [6, 7, 8], [9, 10, 11, 10, 12], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 10, 12]]], [[[1, 2, 3], [4, 5], [9, 7, 8], [9, 10, 11, 12], [9, 7, 8], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 2, 3], [3, 4, 5], [9, 10, 11, 12], [3, 4, 5], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[], [4, 5]]], [[["jb", "Tc", "FvKBQv", "D", "ZCJwzk", "", "PvJQ", "HPu", "SquxtF"], [], [4, 5]]], [[[1, 2, 3], [3, 4, 5], [13, 14, 15, 16, 17, 16, 19, 20], [9, 10, 11, 12], [3, 4, 5], [13, 14, 15, 16, 17, 16, 19, 20], [21], [9, 10, 11, 12], [13, 14, 15, 16, 17, 16, 19, 20], [13, 14, 15, 16, 17, 16, 19, 20]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 7, 20], [13, 14, 15, 16, 17, 18, 7, 20], [21]]], [[[4, 5], [6, 7, 8], [11, 9, 10, 11, 12], [13, 7, 14, 15, 16, 17, 19, 20], [13, 7, 14, 15, 16, 17, 19, 20], [21], [11, 9, 10, 11, 12]]], [[[1, 2, 3], [4, 5], [10], [6, 7, 8, 9]]], [[[1, 12, 3], [4, 5], [10], [1, 12, 3], [6, 7, 8, 9]]], [[[false, false, false], [2, 3]]], [[[1, 2, 3], [4, 5], [10], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[1, 3, 5, 7, 9, 11], [8, 4, 6, 2], [8, 4, 6, 2], [9, 12, 14, 16, 18, 20], [13, 15, 17, 19, 21]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [10], [1, 2, 3]]], [[[13, 4, 5], [], [13, 4, 5]]], [[[false, false, false]]], [[[1, 2, 3], [9, 10, 11, 10, 12], [6, 7, 8], [9, 10, 11, 10, 12], [13, 14, 15, 16, 17, 19, 20], [21]]], [[[1, 2, 3], [4, 5, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [1, 21], [4, 5, 5], [13, 14, 15, 16, 17, 18, 19, 20]]], [[[1, 2, 3], [4, 5], [13, 14, 16, 17, 18, 19, 20], [6, 7, 8], [9, 10, 11, 12], [13, 14, 16, 17, 18, 19, 20], [21], [9, 10, 11, 12]]], [[[1, 2, 3], [4, 5], [10], [6, 7, 7, 8, 9], [4, 5]]], [[[1, 2, 3], [8, 9, 5], [11, 12, 13, 14, 15], [16], [1, 2, 3]]], [[[6, 7, 15, 8], [1, 2, 3], [4, 5], [6, 7, 15, 8], [13, 14, 15, 16, 17, 18, 19, 20], [21]]], [[[6, 7, 15, 8], [1, 2, 3], [1, 2, 3], [4, 5], [6, 7, 15, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21], [21]]], [[[1, 2, 3], [10, 10, 11, 10, 12], [6, 7, 8], [13, 14, 15, 16, 17, 19, 20], [21], [10, 10, 11, 10, 12], [10, 10, 11, 10, 12]]], [[[1, 2, 3, 2], [1, 2, 3, 2], [4, 5], [10], [6, 7, 7, 8, 9], [4, 5], [4, 5]]], [[[1, 3, 2, 3], [4, 5], [9, 10, 11, 11], [6, 7, 8], [9, 10, 11, 11], [13, 14, 15, 16, 17, 18, 19, 20], [1, 3, 2, 3], [21], [9, 10, 11, 11]]], [[["F", "PvJQ", "CbYVLljg"], [4, 5]]], [[[2, 3], [6, 7, 8], [11, 9, 10, 11, 12], [21], [2, 3], [11, 9, 10, 11, 12]]], [[[], [2, 19], [4, 5]]], [[[1, 2, 3], [3, 4, 5], [9, 10, 11, 12], [3, 4, 5], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 2, 3], [4, 5, 6, 7], [8, 9, 10], [], [11, 12, 13, 14, 15], [], [1, 2, 3]]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9], [12, 13, 14, 15, 16, 17, 18], [19, 20], [21]]], [[[1, 2, 3], [4, 5], [9, 10, 11, 10, 12], [6, 7, 8], [9, 10, 11, 10, 12], [13, 14, 15, 16, 17, 19, 21, 20], [21, 21], [9, 10, 11, 10, 12]]], [[[1, 2, 3], [3, 4, 5], [9, 10, 11, 12], [3, 4, 5], [13, 14, 15, 16, 17, 19, 20], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 8, 2, 3], [4, 5, 6, 7], [8, 9, 10], [], [11, 12, 13, 14, 15], [], [1, 8, 2, 3]]], [[[[1], [2]], [[3], [4], [5]], [[6], [7], [8], [9]]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[1, 2, 3], [3, 4, 5], [21], [9, 10, 11, 12], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 12, 3], [4, 5], [10], [1, 12, 3], [6, 7, 8, 9], [1, 12, 3]]], [[[1, 2, 3], [4, 5], [9, 10, 11, 10, 12], [6, 7, 8], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 10, 12]]], [[[1, 2, 3], [8, 9, 5], [11, 12, 13, 14, 15], [16], [1, 2, 3], [8, 9, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [11, 9, 10, 11, 12], [13, 8, 14, 15, 16, 17, 19, 20], [21], [11, 9, 10, 11, 12]]], [[[13, 14, 15, 16, 17, 18, 19, 20, 13], [1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 13], [21]]], [[[1, 2], [1, 2], [4, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [1, 21], [4, 5], [13, 14, 15, 16, 17, 18, 19, 20]]], [[[false, true, false, false], [false, true, false, false], [false, true, false, false]]], [[[4, 5], [10], [1, 12, 3], [6, 7, 8, 9], [1, 12, 3]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 2, 15, 16, 17, 18, 7, 20], [21]]], [[[1, 2, 3], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12]]], [[[1, 2, 3], [8, 9, 5], [11, 12, 13, 14, 15], [1, 2, 3]]], [[[1, 2, 3], [8, 9, 5], [11, 12, 13, 14, 15], [16, 16], [16, 16], [11, 12, 13, 14, 15], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 4], [4, 5, 4], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [1, 21], [4, 5, 4], [13, 14, 15, 16, 17, 18, 19, 20], [13, 14, 15, 16, 17, 18, 19, 20], [4, 5, 4]]], [[[], [1, 19], [4, 5]]], [[[5, 6, 7, 15, 8], [1, 2, 3], [4, 5], [5, 6, 7, 15, 8], [5, 6, 7, 15, 8], [13, 14, 15, 16, 17, 18, 19, 20], [21]]], [[[true, false, false], [true, false, false], [true, false, false]]], [[[6, 7, 15, 8], [1, 2, 3], [1, 2, 3], [4, 5], [6, 7, 15, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21], [21], [6, 7, 15, 8]]], [[[1, 2, 3], [8, 8, 9], [4, 5, 6, 7], [8, 8, 9], [13, 11, 12, 13, 14, 15], [8, 8, 9], [1, 2, 3]]], [[[6, 7, 8, 8], [13, 14, 15, 16, 17, 19, 20, 19], [1, 2, 3], [4, 5], [9, 10, 11, 10, 12], [6, 7, 8, 8], [9, 10, 11, 10, 12], [13, 14, 15, 16, 17, 19, 20, 19], [21, 21], [21, 21], [9, 10, 11, 10, 12]]], [[[], [false, false, true], []]], [[["F", "CbYVLljg", "PvJQ", "CbYVLljg"], ["F", "CbYVLljg", "PvJQ", "CbYVLljg"]]], [[[1, 2, 3], [11, 12, 13, 14, 15, 13], [16], [8, 9, 5, 8], [11, 12, 13, 14, 15, 13]]], [[[1, 2, 3], [7, 4, 5], [13, 14, 16, 17, 18, 19, 20], [6, 7, 8], [13, 14, 16, 17, 18, 19, 20], [21], [9, 10, 11, 12], [9, 10, 11, 12]]], [[[1, 2, 3], [3, 4, 5], [9, 10, 11, 12, 9], [3, 4, 5], [13, 14, 15, 16, 17, 19, 20], [9, 10, 11, 12, 9], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 3, 2, 3], [4, 5], [10, 9, 10, 11, 11], [6, 7, 8], [10, 9, 10, 11, 11], [10, 9, 10, 11, 11], [13, 14, 15, 16, 17, 18, 19, 20], [1, 3, 2, 3], [21], [10, 9, 10, 11, 11]]], [[[6, 7, 15, 8], [1, 2, 3], [4, 5], [6, 7, 15, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21], [21]]], [[[1, 2, 3], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20], [21], [1, 2, 3]]], [[[11, 12, 13, 14, 15, 13], [16], [8, 9, 5, 8], [11, 12, 13, 14, 15, 13]]], [[[2, 3], [6, 7, 8], [11, 9, 10, 11, 12], [21], [6, 7, 8], [2, 3], [11, 9, 10, 11, 12]]], [[[1, 3, 2, 3], [4, 5], [10, 9, 10, 11, 11], [6, 7, 8], [10, 9, 10, 11, 11], [10, 9, 10, 11, 11], [13, 14, 15, 16, 17, 18, 19, 20, 14], [1, 3, 2, 3], [10, 9, 10, 11, 11]]], [[[1, 13], [8, 9, 5], [1, 13], [1, 13], [11, 12, 13, 14, 15], [16], [1, 13], [16]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 7, 20], [13, 14, 15, 16, 17, 18, 7, 20], [21], [13, 14, 15, 16, 17, 18, 7, 20]]], [[[1], [4, 5, 5], [4, 5, 5]]], [[[1], [4, 5, 5, 5]]], [[[1, 2, 3], [3, 4, 5], [9, 10, 12, 9], [3, 4, 5], [13, 14, 15, 16, 17, 19, 20], [9, 10, 12, 9], [9, 10, 12, 9], [13, 14, 15, 16, 17, 19, 20], [13, 14, 15, 16, 17, 19, 20]]], [[[1, 3, 2, 3], [4, 5], [10, 9, 10, 11, 11], [6, 7, 8, 8], [10, 9, 10, 11, 11], [10, 9, 10, 11, 11], [13, 14, 15, 16, 17, 18, 19, 20], [1, 3, 2, 3], [21], [10, 9, 10, 11, 11]]], [[[1, 13], [8, 9, 5], [1, 13], [1, 13], [11, 12, 13, 14, 15], [16], [1, 13], [16], [11, 12, 13, 14, 15]]], [[[5, 5, 5, 5], [1], [5, 5, 5, 5]]], [[[1, 2, 3], [19, 9, 10, 9], [19, 9, 10, 9], [11, 12, 13, 14, 15, 12], [4, 5, 6, 7], [19, 9, 10, 9], [], [11, 12, 13, 14, 15, 12], []]], [[[1, 2, 3], [4, 5, 5], [6, 7, 8], [9, 10, 11, 12], [4, 5, 5], [13, 14, 15, 16, 17, 19, 20], [21], [9, 10, 11, 12]]], [[[4, 5], [10], [1, 12, 7], [6, 7, 8, 9], [1, 12, 7]]], [[[14, 3, 5, 7, 9, 11], [14, 3, 5, 7, 9, 11], [8, 4, 6, 2], [9, 12, 14, 16, 18, 20]]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n"}
{"task_id": "Mbpp/292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n", "entry_point": "find", "canonical_solution": "\ndef find(n,m):  \n    return n // m \n", "base_input": [[10, 3], [4, 2], [20, 5]], "atol": 0, "plus_input": [[0, 5], [0, 1], [-1, 1], [1, 1], [0, 2], [5, 1], [6, 1], [-1, -1], [0, -1], [2, 1], [5, 5], [2, 2], [6, 6], [2, 5], [1, 6], [2, 4], [1, -1], [6, 5], [6, 2], [7, 7], [-1, 2], [5, 6], [-2, 2], [7, 4], [1, 2], [1, 7], [0, 4], [4, -1], [2, -2], [7, 6], [0, -2], [7, -1], [-2, 3], [3, 3], [5, -1], [-2, 6], [-2, -2], [7, 5], [6, -2], [-2, -1], [6, 4], [6, -1], [3, 5], [0, 7], [4, 5], [5, -2], [0, 6], [1, 4], [3, -1], [2, 3], [4, 4], [2, 6], [7, 1], [6, 7], [3, 4], [3, -2], [1, 5], [-1, 3], [3, 1], [-2, 1], [-2, 7], [2, -1], [5, 4], [0, 3], [-3, 1], [41, 41], [-2, 4], [4, 2], [5, 7], [5, 3], [-2, -3], [-1, 7], [-3, -3], [8, 4], [-3, -2], [4, 41], [-4, -2], [-4, 3], [4, -2], [8, -2], [-1, 6], [41, -1], [40, 41], [5, 41], [-4, 4], [-4, -4], [40, 5], [0, 8], [1, -2], [1, 41], [-3, 6], [8, 2], [8, 8], [-3, 7], [39, 8], [2, 8], [4, 6], [39, 3], [-3, -4], [41, 4], [41, -3]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert m != 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4\n"}
{"task_id": "Mbpp/293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n", "entry_point": "otherside_rightangle", "canonical_solution": "\nimport math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w * w + h * h)\n", "base_input": [[7, 8], [3, 4], [7, 15]], "atol": 0.0001, "plus_input": [[2.5, 3.5], [1.2, 5.8], [6.25, 8.75], [2.152482257674037, 2.152482257674037], [6.25, 3.5], [2.152482257674037, 8.75], [2.700297324225485, 2.152482257674037], [3.5, 3.5], [1.3854432804588013, 3.5], [6.25, 2.5], [3.459608286705722, 3.5], [2.700297324225485, 1.3854432804588013], [2.700297324225485, 2.5], [1.3854432804588013, 8.75], [5.8, 3.5], [1.2, 1.2], [2.308614082678652, 3.5], [2.700297324225485, 2.700297324225485], [4.332995054280495, 1.3854432804588013], [1.3854432804588013, 1.2], [3.128098969138767, 6.25], [2.152482257674037, 3.128098969138767], [1.3854432804588013, 1.3854432804588013], [6.25, 6.25], [3.095980066414836, 2.700297324225485], [2.700297324225485, 3.5], [1.3854432804588013, 3.128098969138767], [5.8, 3.3484482761805356], [2.7086159184536536, 3.5], [2.308614082678652, 6.25], [2.152482257674037, 3.095980066414836], [3.128098969138767, 1.3854432804588013], [3.095980066414836, 3.095980066414836], [2.152482257674037, 3.5], [2.3253354449208996, 2.3253354449208996], [2.5, 3.7294875574760864], [5.8, 8.75], [4.934318039286869, 7.10665346391923], [1.2, 7.10665346391923], [3.7830167078632826, 4.934318039286869], [1.3854432804588013, 2.152482257674037], [5.8, 6.62665120928707], [3.128098969138767, 5.657955029609455], [2.121917472041424, 3.095980066414836], [1.3896678124587478, 1.3854432804588013], [5.8, 5.8], [1.3854432804588013, 0.9247368967322904], [4.332995054280495, 4.332995054280495], [5.8, 3.095980066414836], [7.10665346391923, 6.25], [2.152482257674037, 3.7294875574760864], [0.9247368967322904, 6.25], [1.3854432804588013, 0.9324068563687935], [0.9247368967322904, 1.3854432804588013], [2.700297324225485, 8.75], [3.128098969138767, 3.128098969138767], [1.3854432804588013, 3.7294875574760864], [5.609674187963928, 6.120577768854655], [3.7294875574760864, 2.152482257674037], [2.152482257674037, 4.200733677232915], [1.3896678124587478, 3.5], [2.700297324225485, 6.485822554946278], [7.10665346391923, 1.3854432804588013], [3.037033380664223, 2.5], [2.3253354449208996, 6.25], [9.7314836661486, 8.75], [2.308614082678652, 1.771736989507307], [3.5, 3.320009576711617], [3.095980066414836, 1.3854432804588013], [1.142869766833729, 1.2], [5.8, 4.691960825352264], [2.839781839152035, 2.839781839152035], [8.75, 3.7294875574760864], [3.0905937192183774, 3.5], [2.776233325766796, 3.095980066414836], [0.9247368967322904, 2.152482257674037], [1.4225634330794525, 3.7883490886429945], [2.3253354449208996, 6.350592155455148], [5.8, 1.4225634330794525], [3.5231122565219826, 5.8], [1.6386030770450668, 3.128098969138767], [2.152482257674037, 3.2955503797743395], [3.5, 5.8], [2.096685320976868, 1.2], [5.657955029609455, 4.691960825352264], [8.75, 4.934318039286869], [2.776233325766796, 3.128098969138767], [4.79546607177157, 4.480199970153443], [6.350592155455148, 4.337165328379914], [4.79546607177157, 3.320009576711617], [5.8, 8.659511063997245], [4.480199970153443, 3.095980066414836], [2.558784255229485, 3.5], [3.700904830850258, 2.5], [3.7883490886429945, 6.485822554946278], [6.2784961324556425, 6.25], [4.332995054280495, 1.2726616367292138], [6.485822554946278, 6.485822554946278], [5.8, 4.934318039286869], [8.378901997060781, 8.404736942628722], [1.2726616367292138, 3.5], [6.350592155455148, 1.2726616367292138], [5.609674187963928, 1.3854432804588013]], "contract": "\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(otherside_rightangle(7,8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3,4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7,15), 16.55294535724685, rel_tol=0.001)\n"}
{"task_id": "Mbpp/294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "entry_point": "max_val", "canonical_solution": "\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n", "base_input": [[["Python", 3, 2, 4, 5, "version"]], [["Python", 15, 20, 25]], [["Python", 30, 20, 40, 50, "version"]]], "atol": 0, "plus_input": [[[1, "2", true, 3.14, ["a", "b"], [5, 6, 7], {"8": "eight", "9": "nine"}, "Python", 10, 11, 12]], [["Python", 3.14, 5, "version", 10, 7.5, 2, "3.14"]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]], [[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[25, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}]], [[1, 2, 3, ["Python", 4, 5, [6, 7, [8, 9, [10]]]], "version", 11, 12, 13]], [[7, 9]], [[3, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]], [[1, 3, 30, 3]], [[3, 1, 2, 10, [3, 4, [5, 6, [7, 8, [9, 10]]]]]], [[3, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]], 3, 2]], [[1, 3, 30]], [[3, 1, [3, 4], 2, [3, 4], 5, 3, 2]], [[1, [3, 4, [5, 6, [7, 8, [9, 10]]]], 1]], [[1, 13, [3, 4, [5, 6, [7, 8, [9, 10]]]], 1]], [[1, 3]], [[1, 3, 2, 30, 3]], [[1, 2, 11, 1]], [[1]], [[25, {"y": [26, 27], "yy": [26, 27]}, {"y": [26, 27], "yy": [26, 27]}]], [[9, 7, 8, 9]], [[13, 7, 8, 9]], [[25, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}, 25, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}]], [[0]], [[26, 9]], [[4, 5, 6, 6]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]], 2]], [[1, 2, 3, ["Python", 4, 5, [6, 7, [8, 9, [10]]]], "version", 11, 12, "version"]], [[4, 7, 8, 9]], [[25, {"y": [26], "yy": [26]}, {"y": [26], "yy": [26]}]], [[4, 7, 8, 8, 8]], [[1, 13, [3, 4, [5, 6, [7, 8, [9, 10]]]], 12, 1]], [[1, 12, [3, 4, [5, 6, [7, 8, [9, 10]]]], 12, 1]], [[1, 1, [3, 4, [5, 6, [7, 8, [9, 10]]]], 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]], [[25, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}, 25]], [[25, {"y": [26, 27], "yy": [26, 27]}, {"y": [26, 27], "yy": [26, 27]}, {"y": [26, 27], "yy": [26, 27]}, 25]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]], 2, 2, 2]], [[9, 7, 8, 9, 8]], [[0, 0]], [[1, 2]], [[9]], [[1, [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]], [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]], 1]], [[0, 1, 13, [3, 4, [5, 6, [7, 8, [9, 10]]]], 1]], [[29]], [[13, 3, 30]], [[13]], [[4, 4, 7, 8, 9, 8]], [[0, 1]], [[1, 3, 30, 3, 1]], [[[3, 4, [5, 6, [7, 8, [9, 10]]]], 1]], [[3, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]], 3, 2, 3]], [[13, 3, 30, 30]], [[1, 2, 3, ["Python", 4, 5, [6, 7, [8, 9, [10]]]], "version", "z", 11, "", 12, "y"]], [[1, "2", 2, 3, ["Python", 5, [6, 7, [8, 9, [10]]]], "version", "z", 11, "", 12, "y"]], [[1, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]], [[0, 1, 0]], [[8, 13, 7, 8, 9]], [[26, 9, 26]], [[1, 1]], [[1, 3, 2, 30]], [[3, 1, 2, 10, [3, 4, [5, 6, [7, 8, [9, 10]]]], 1]], [[26, 28, 26]], [[13, 3, 3, 30]], [[1, [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]], [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]], 1, [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]]]], [[3, 30, 31, 30]], [[1, [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]], 1, [3, 4, [5, 6, [7, 8, [9, 10]]], [5, 6, [7, 8, [9, 10]]]]]], [[12, [3, 4, [5, 6, [7, 8, [9, 10]]]], 12, 1]], [[25, {"y": [27], "yy": [27], "Pythonyy": [27]}, {"y": [27], "yy": [27], "Pythonyy": [27]}]], [[3, 26, 2, 12, 2]], [[3, 1, 2, [27, 4, [5, 6, [7, 8, [9, 10]]]], 3]], [[25, 24, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}, 25, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}]], [[25, {"y": [26]}, {"y": [26]}]], [[2]], [[29, 9, 9, 9]], [[6, 7, 8, 9, 8]], [["Python", 3.14, 5, "version", 10, 7.5, "3.14"]], [[3, 30, 31, 4]], [[4, 5, 6, 9]], [[7]], [[0, 2, 1, 0]], [[[3, 4, 5, [5, 6, [7, 8, [9, 10]]]], 1]], [[1, 13, [3, 4, [5, 6, [7, 8, [9, 10]]]], 1, 1]], [[3, 1, [3, 4], 2, [3, 4], 5, 10, 2, 3]], [[25, {"y": [26]}, {"y": [26]}, 25]], [[8, 9]], [["Python", 7.5, 5, "version", 10, 7.5, 2, "3.14", "version"]], [[1, [3, 4, [5, 6, [7, 8, [9, 10]]]], 12, 1]], [[25, {"y": [26, 27, 28], "z": {"a": 29, "b": 30}}, 25, 25]], [[4, 4, 7, 6, 9, 8]], [[26, 28, 27]], [[8, 13, 12, 7, 8, 9]], [[0, 1, [3, 4, [5, 6, [7, 8, [9, 10]]]], 1, 1]], [[6, 7, 5, 8, 9, 8, 6]], [[25, {"y": [26, 27, 27, 28], "z": {"a": 29, "b": 30}}, 25, 25]], [[25, {"y": [26, 27, 28, 28], "z": {"a": 29, "b": 30}}]], [["3.14", false, 7.5]], [[9, 8, 8, 9, 8]], [[4, 4]], [[25, 25, 25]], [[3, 1, 2, 9, [3, 4, [5, 6, [7, 8, [9, 10]]]]]], [[3, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]], 3, 2, 3, 2]], [[1, 10, 9, 9, 9, 9]], [[3, 6, 30, 31, 30, 30]], [["Python", 3.14, 5, 6, "version", 10, 7.5, "3.14", 10]], [[1, 1, [3, 4, [5, 6, [7, 8, [9, 10]]], 4], 2, [3, 4, [5, 6, [7, 8, [9, 10]]], 4], 1]], [[3, 30, 0, 31]]], "contract": "\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n"}
{"task_id": "Mbpp/295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n", "entry_point": "sum_div", "canonical_solution": "\ndef sum_div(number):\n    res = 0\n    i = 1\n    while i * i <= number:\n        if number % i == 0:\n            res += i\n            if i * i != number:\n                res += number / i\n        i += 1\n    return res\n", "base_input": [[8], [12], [7]], "atol": 0, "plus_input": [[47], [1000000], [999999], [1000001], [999998], [48], [999997], [true], [1000002], [1000003], [45], [44], [46], [999996], [999995], [999994], [999993], [43], [42], [89], [49], [23], [22], [88], [41], [86], [90], [999992], [91], [87], [40], [85], [50], [1000004], [69], [999991], [84], [18], [24], [70], [51], [21], [71], [82], [52], [83], [999989], [1000005], [999990], [25], [72], [81], [1000006], [999988], [19], [53], [80], [26], [1000007], [17], [20], [68], [16], [1000008], [79], [93], [54], [78], [27], [28], [55], [67], [63], [77], [76], [56], [999987], [75], [94], [57], [1000009], [92], [6], [29], [74], [999986], [95], [1], [5], [999985], [64], [58], [39], [15], [2], [3], [73], [999984], [65], [4], [59], [62]], "contract": "\n    assert isinstance(number, int) and number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1\n"}
{"task_id": "Mbpp/296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n", "entry_point": "get_Inv_Count", "canonical_solution": "\ndef get_Inv_Count(arr): \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n", "base_input": [[[1, 20, 6, 4, 5]], [[1, 2, 1]], [[1, 2, 5, 6, 1]]], "atol": 0, "plus_input": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]], [[1000, 999, 998, 997, 996, 995, 994, 993, 992, 991]], [[12, 93, 45, 7, 23, 56, 78, 15, 99]], [[5, 23, 17, 8, 14, 36, 42, 29, 11, 55]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73]], [[33, 77, 63, 91, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 96]], [[73, 33, 77, 63, 1000, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73]], [[10, 9, 96, 8, 7, 6, 5, 4, 3, 2, 1, 3]], [[10, 9, 96, 8, 7, 6, 5, 4, 3, 2, 1, 996, 1]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 73]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 19, 96]], [[5, 6, 23, 17, 8, 14, 36, 42, 29, 11, 55]], [[33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 19, 96]], [[1000, 999, 998, 74, 997, 996, 995, 994, 993, 992, 991]], [[10, 9, 96, 8, 6, 5, 4, 3, 2, 1, 996, 1, 2]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 4]], [[10, 9, 1, 96, 8, 7, 6, 5, 4, 3, 2, 2, 996, 1]], [[1001, 999, 998, 74, 997, 996, 995, 994, 993, 992, 991]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 96]], [[10, 9, 96, 8, 7, 6, 3, 5, 4, 3, 2, 1, 996, 1]], [[1000, 999, 998, 74, 997, 996, 995, 994, 993, 992, 991, 992]], [[10, 9, 96, 8, 7, 6, 50, 3, 2, 1, 996, 1]], [[33, 77, 63, 8, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[10, 9, 96, 8, 7, 6, 5, 15, 3, 2, 1, 995, 1, 96]], [[33, 77, 63, 91, 28, 4, 50, 74, 2, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 96, 91]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73, 77]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 19, 73, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 96, 33]], [[10, 9, 96, 8, 7, 6, 5, 15, 3, 10, 1, 995, 1, 96]], [[5, 17, 6, 23, 17, 8, 14, 36, 42, 29, 11, 55]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 96, 63]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 19, 4, 50]], [[50, 73, 33, 77, 63, 1000, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73]], [[10, 9, 96, 8, 995, 6, 5, 4, 3, 1000, 1, 996, 1, 2, 4]], [[10, 9, 1, 96, 8, 8, 6, 5, 4, 3, 2, 2, 996, 1]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 73]], [[73, 33, 77, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 48, 100, 96]], [[73, 33, 77, 63, 28, 4, 10, 90, 73, 2, 48, 100, 73]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 28]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 96, 14, 63]], [[10, 9, 7, 6, 5, 4, 3, 2, 1]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 72, 73, 2, 48, 19, 96, 73]], [[10, 9, 8, 7, 6, 5, 4, 3, 9, 0, 2, 1]], [[12, 93, 45, 7, 23, 56, 78, 15, 79, 99]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 19, 96]], [[80, 77, 63, 91, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 40, 77, 91, 28, 4, 10, 50, 73, 3, 48, 19, 50]], [[1001, 999, 998, 74, 997, 995, 993, 992, 991, 991]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 73, 96]], [[73, 33, 77, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 994, 48, 100, 96, 95]], [[73, 77, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 48, 100, 96]], [[10, 9, 96, 8, 6, 3, 5, 4, 3, 2, 1, 996, 1, 5]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 73, 48]], [[33, 77, 63, 91, 4, 10, 50, 73, 2, 19, 96]], [[33, 77, 63, 91, 4, 10, 50, 73, 2, 19, 96, 91]], [[33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 19, 96, 90]], [[5, 23, 17, 8, 14, 36, 42, 29, 29, 48, 55]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 991, 73]], [[10, 9, 1, 96, 8, 7, 8, 6, 5, 4, 3, 2, 2, 996, 1, 6]], [[33, 77, 63, 91, 4, 10, 50, 74, 2, 48, 73, 48]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 63]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2]], [[33, 77, 63, 8, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 77, 63, 8, 64, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 997, 10, 95, 90, 73, 2, 48, 100, 96]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 19, 4, 50, 28]], [[33, 77, 63, 8, 7, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 96]], [[80, 77, 63, 91, 28, 2, 4, 10, 50, 73, 2, 48, 19, 12, 96, 77]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 73, 96, 48]], [[48, 33, 77, 63, 8, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96, 96]], [[33, 77, 63, 8, 64, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96, 33]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 48, 73, 96]], [[10, 9, 96, 8, 7, 6, 5, 15, 3, 1, 995, 1, 96]], [[1000, 999, 998, 74, 996, 996, 995, 994, 993, 992, 991]], [[5, 23, 17, 8, 14, 36, 42, 11, 55]], [[33, 77, 63, 91, 28, 4, 10, 50, 47, 3, 48, 19, 4]], [[10, 9, 96, 8, 6, 4, 3, 2, 1, 996, 79, 1, 2]], [[4, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 28, 19]], [[73, 33, 77, 63, 3, 91, 28, 4, 10, 90, 73, 2, 48, 100, 73]], [[33, 77, 63, 8, 64, 28, 2, 47, 4, 10, 51, 73, 2, 48, 19, 96, 33]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 96, 14, 63, 50, 73]], [[12, 93, 45, 7, 23, 56, 78, 15, 79, 99, 56]], [[33, 77, 63, 91, 28, 4, 10, 3, 50, 47, 3, 48, 19, 4]], [[1000, 10, 999, 998, 74, 997, 996, 995, 994, 992, 991, 992]], [[10, 9, 96, 8, 7, 6, 50, 3, 2, 8, 1, 996, 1, 1]], [[10, 9, 96, 8, 6, 3, 5, 4, 3, 2, 1, 996, 1, 5, 8]], [[33, 77, 63, 28, 4, 10, 50, 73, 3, 19, 4, 50]], [[10, 9, 96, 8, 7, 6, 50, 3, 2, 1, 996, 1, 7]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 50]], [[33, 77, 63, 91, 28, 2, 4, 10, 14, 50, 73, 2, 48, 19, 96]], [[10, 9, 96, 8, 7, 6, 5, 3, 2, 1, 995, 1, 96]], [[33, 77, 63, 993, 4, 10, 50, 73, 2, 19, 96, 91]], [[73, 77, 101, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 48, 100, 96]], [[33, 77, 63, 29, 4, 10, 50, 73, 3, 19, 4, 50, 50]], [[991, 1000, 999, 998, 74, 996, 996, 995, 994, 993, 992, 991]], [[100, 90, 80, 70, 60, 15, 50, 40, 30, 20, 20, 10]], [[33, 77, 63, 8, 28, 2, 47, 4, 10, 49, 73, 2, 48, 19, 96]], [[33, 77, 63, 1, 4, 10, 50, 73, 2, 19, 96, 91]], [[33, 76, 63, 91, 28, 4, 50, 74, 2, 19, 96]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n"}
{"task_id": "Mbpp/297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "entry_point": "flatten_list", "canonical_solution": "\ndef flatten_list(list1):\n\tresult = []\n\tfor item in list1:\n\t\tif isinstance(item, list):\n\t\t\tresult.extend(flatten_list(item))\n\t\telse:\n\t\t\tresult.append(item)\n\treturn result\n", "base_input": [[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]], [[[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], "atol": 0, "plus_input": [[[]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], [[[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]]]], [[[[[1]]], [[[2]]], [[[3]]]]], [[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]]], [[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]], [[[[[[1]]]]]], [[[[[[[[1]]]]]]]], [[[[[[[[[1]]]]]]]]], [[[[[1, 2], [3, 4]], [[5, 6]]]]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[7, 8], [9, 10]]]], [[[1, 2, [3, [4, 5]], 6], [7, [8, [9, [10, [11]]]]], [12, [13]]]], [[[], [[]], [[[]]], [[[[]]]]]], [[[[[1, 2, [3]]], [[4, 5], [6, 7, 8]]], [[9], [10, [11, 12]], 13]]], [[[[[[[[[[[[[[[[[[1]]]]]]]]]]]]]]]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [9, 10, 11], [[12], [13, 14, 15]]]], [[[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]], [[[9], [10]], [[11], [12]]]]], [[[[[1], [2]], [[3], [4]]], [[[5], [6]]], [[[9], [10]], [[11], [12]]]]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[[1, 2], [3, 4]], [[5, 6]]]]], [[[[4, 5], [4, 5]], [[1, 2, 3]], [[4, 5], [4, 5]]]], [[[], [[]], [[[]]], [[[[]]]], []]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[9, 10]]]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[[1, 2], [3, 4]], [[5, 6]]], [[[1, 2], [3, 4]], [[5, 6]]]]], [[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[4, 5, 6]]]], [[[[[3, 4]], [[3, 4]], [[5, 6]]], [[[3, 4]], [[3, 4]], [[5, 6]]]]], [[[[4, 5], [4, 5]], [[1, 2, 3, 2], [1, 2, 3, 2]], [[4, 5], [4, 5]]]], [[[], [[[1], [2]], [[3], [4]]], [[[9], [10]], [[11], [12]]], []]], [[[], [[[1], [2]], [[3], [4]], [[3], [4]]], [[[9], [10]], [[11], [12]]], [[[1], [2]], [[3], [4]], [[3], [4]]], [], []]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[[1, 2], [3, 4]], [[5, 6]]], [[[1, 2], [3, 4]], [[5, 6]]], [[[1, 2], [3, 4]], [[5, 6]]]]], [[[[1, 2, 3]], [[4, 5, 6]], [], [[4, 5, 6]]]], [[[], [[]], [[[[]]]]]], [[[[1, 2, 3]], [[4, 5, 6, 4]], [[4, 5, 6, 4]], [[7, 8, 9]], [[4, 5, 6, 4]]]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[11, 10], [11, 10]], [[11, 10], [11, 10]]]], [[[[1], [2], [3], [2]], [[1], [2], [3], [2]], [[4], [5], [6]], [[7], [8], [9]], [[1], [2], [3], [2]]]], [[[], [[[]]]]], [[[[1, 2, 3], [1, 2, 3]], [[4, 5, 6]], [[1, 2, 3], [1, 2, 3]], [[7, 8, 9]], [[4, 5, 6]], [[4, 5, 6]]]], [[[], [[]], [[[]]], [[[[]]]], [], [[]]]], [[[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]]], [[[true, true, true, true, false, true, true, true, false], [], [[[1], [2]], [[3], [4]]], [[[9], [10]], [[11], [12]]], []]], [[[1, 2, [3, [4, 5]], 6], [7, [8, [9, [10, [11]]]]], [12, [13]], [7, [8, [9, [10, [11]]]]]]], [[[[1], [2], [3], [2]], [[1], [2], [3], [2]], [[4], [5], [6]], [[7], [8], [9]], [[1], [2], [3], [2]], [[1], [2], [3], [2]]]], [[[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]], [[[9], [10]], [[11], [12]], [[9], [10]]], [[[5], [6]], [[7], [8]]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [9, 10, 11, 11], [[12], [13, 14, 15]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [9, 10, 11]]], [[[[[1, 2, 2], [1, 2, 2], [3, 4]], [[1, 2, 2], [1, 2, 2], [3, 4]], [[5, 6]]]]], [[[[2], [3], [2]], [[2], [3], [2]], [[4], [5], [6]], [[7], [8], [9]], [[2], [3], [2]], [[2], [3], [2]]]], [[[[5, 6], [7, 8]]]], [[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]], [[[[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[4, 5, 6]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[7, 8, 9]], [[4, 5, 6]], [[4, 5, 6]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [9, 10, 11], [9, 10, 11]]], [[[[[5, 5], [5, 5], [6]], [[7], [8]]], [[[1], [2]], [[3], [4]]], [[[5, 5], [5, 5], [6]], [[7], [8]]]]], [[[[[1, 2, [3]]], [[4, 5], [6, 7, 8]]], [[9], [10, [11, 12]], 13], [[9], [10, [11, 12]], 13]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [9, 10, 11, 11], [[12], [13, 14, 15]], [[1, 2], [3, 4]]]], [[[[[5, 6]]], [[[5, 6]]], [[[5, 6]]], [[[5, 6]]]]], [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]], [[7, 8, 9]], [[4, 5, 6]], [[4, 5, 6]]]], [[[[[[], []]]]]], [[[[[1, 2], [3, 4]], [[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[1, 2], [3, 4]], [[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[1, 2], [3, 4]], [[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[1, 2], [3, 4]], [[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[1, 2], [3, 4]], [[5, 6], [5, 6]], [[5, 6], [5, 6]]]]], [[[[1, 2, 3]], [[4, 5, 6]], [], [[4, 5, 6]], [[4, 5, 6]], [[4, 5, 6]]]], [[[[[14, 5, 6], [14, 5, 6]]], [[[14, 5, 6], [14, 5, 6]]], [[[14, 5, 6], [14, 5, 6]]]]], [[[[1, 2], [3, 4]], [[5], [7, 8]], [9, 10, 11], [9, 10, 11]]], [[[[1, 2, 3]], [[4, 5, 6]], [], []]], [[[[[1, 2, [3]]], [[4, 5], [6, 7, 8]], [[4, 5], [6, 7, 8]]], [[[1, 2, [3]]], [[4, 5], [6, 7, 8]], [[4, 5], [6, 7, 8]]]]], [[[[], [2], [3, 3], [2]], [[], [2], [3, 3], [2]], [[], [2], [3, 3], [2]], [[4], [7], [5], [7]], [[7], [8], [9]], [[4], [7], [5], [7]], [[], [2], [3, 3], [2]]]], [[[[[1], [2]], [[3], [4]]]]], [[[[1, 2], [3, 4]], [[5], [7, 8], [5]], [9, 10, 11], [9, 10, 11]]], [[[[[[[[[[[[[[[[[[1]]]]]]]]]]]]]]]], [[[[[[[[[[[[[[[[1]]]]]]]]]]]]]]]]]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[9, 10], [9, 10]]]], [[[[4, 5], [4, 5]], [[1, 2, 3]], [[4, 5], [4, 5]], [[1, 2, 3]]]], [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]], [[4, 5, 6, 5], [4, 5, 6, 5]], [[7, 8, 9], [7, 8, 9]], [[4, 5, 6, 5], [4, 5, 6, 5]], [[7, 8, 9], [7, 8, 9]]]], [[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[1, 2, 3]]]], [[[[[5, 6], [5, 6]]], [[[5, 6], [5, 6]]], [[[5, 6], [5, 6]]], [[[5, 6], [5, 6]]]]], [[[], [[]], [[[[]]]], [[[[]]]], [[]]]], [[[[4, 5], [4, 5]], [[1, 2, 3]], [[4, 5], [4, 5]], [[4, 5], [4, 5]]]], [[[[[1], [2]], [[3], [4]]], [[[9], [10]], [[11], [12]], [[9], [10]]], [[[5], [6]], [[7], [8]]]]], [[[[], [[5, 6], [5, 6]]], [[], [[5, 6], [5, 6]]], [[], [[5, 6], [5, 6]]], [[], [[5, 6], [5, 6]]], [[], [[5, 6], [5, 6]]]]], [[[[8, 7], [8], [8], [9], [8, 7]], [[1], [14], [3]], [[4], [5], [6]], [[1], [14], [3]], [[8, 7], [8], [8], [9], [8, 7]], [[8, 7], [8], [8], [9], [8, 7]]]], [[[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]], [[[[[1, 2]], [[5, 6]], [[5, 6]]], [[[1, 2]], [[5, 6]], [[5, 6]]], [[[1, 2]], [[5, 6]], [[5, 6]]]]], [[[[4, 5], [4, 5]], [[1, 2, 3, 2], [1, 2, 3, 2]], [[4, 5], [4, 5]], [[4, 5], [4, 5]]]], [[[[[1, 2]], [[5, 6]]], [[[1, 2]], [[5, 6]]], [[[1, 2]], [[5, 6]]], [[[1, 2]], [[5, 6]]]]], [[[[[5, 6]]], [[[5, 6]]]]], [[[[10, [11, 12]], 13], [[10, [11, 12]], 13]]], [[[[], [2], [3, 3], [2]], [[], [2], [3, 3], [2]], [[], [2], [3, 3], [2]], [[4], [7], [5], [7]], [[7], [8], [9]], [[4], [7], [5], [7]], [[], [2], [3, 3], [2]], [[], [2], [3, 3], [2]]]], [[[7, [8, [9, [10, [11]]]]], [12, [13]]]], [[[[[1, 2], [3, 4]], [[5, 6]]], [[9, 10]], [[9, 10]], [[[1, 2], [3, 4]], [[5, 6]]]]], [[[[[1, 3], [1, 3], [1, 3], [1, 3], [3, 4]], [[1, 3], [1, 3], [1, 3], [1, 3], [3, 4]], [[5, 6]]], [[[1, 3], [1, 3], [1, 3], [1, 3], [3, 4]], [[1, 3], [1, 3], [1, 3], [1, 3], [3, 4]], [[5, 6]]]]], [[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[4, 5, 6]], [[7, 8, 9]]]], [[[[[4, 5], [6, 7, 8]], [[4, 5], [6, 7, 8]]], [[[4, 5], [6, 7, 8]], [[4, 5], [6, 7, 8]]]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[1, 2], [3, 4]]]], [[[[1, 2], [3, 4]], [[1, 2], [3, 4]]]], [[[], []]], [[[], [], []]], [[[[10, [11, 12]], 13, 13], [[10, [11, 12]], 13, 13], [[10, [11, 12]], 13, 13]]], [[[[1], [2], [2], [2]], [[1], [2], [2], [2]], [[1], [2], [2], [2]], [[4], [5], [9]], [[], [], [8], [9]], [[1], [2], [2], [2]]]], [[[[[1, 2]], [[5, 6]], [[5, 6]]], [[[1, 2]], [[5, 6]], [[5, 6]]], [[[1, 2]], [[5, 6]], [[5, 6]]], [[[1, 2]], [[5, 6]], [[5, 6]]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[[1]]], [], [[[3]]]]], [[[], [[[1], [2]], [[3], [4]], [[3], [4]]], [[[9], [10]], [[11], [12]]], [[[1], [2]], [[3], [4]], [[3], [4]]], [], [], []]], [[[[[1, 2, [3]]], [[4, 5], [6, 7, 8]]], [[9], [10, 9, [11, 12]], [10, 9, [11, 12]], 13]]], [[[[[5, 5], [5, 5], [6]], [[7], [8]]], [[[1], [2]], [[3], [4], [3]]], [[[5, 5], [5, 5], [6]], [[7], [8]]]]], [[[[[5], [6]], [[7], [8]]], [[[9], [10]], [[11], [12]], [[9], [10]]], [[[5], [6]], [[7], [8]]]]], [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]], [[7, 8, 9]], [[4, 5, 6]]]], [[[[[1, 2]], [[5], [5]], [[5], [5]], [[5], [5]]], [[[1, 2]], [[5], [5]], [[5], [5]], [[5], [5]]], [[[1, 2]], [[5], [5]], [[5], [5]], [[5], [5]]]]], [[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]], [[9, 10], [11, 12]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]], [[9, 10], [11, 12]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]], [[9, 10], [11, 12]]]]], [[[], [[[]]], [[[[]]]], []]], [[[[[[1]]], [[[1]]], [[[1]]]]]], [[[[1, 2], [3, 4]]]], [[[[[5, 6]], [[5, 6]]], [[[5, 6]], [[5, 6]]], [[[5, 6]], [[5, 6]]]]], [[[[1, 2, 3]], [[1, 2, 3]], [[4, 5, 6, 5], [4, 5, 6, 5]], [[7, 8, 9], [7, 8, 9]], [[4, 5, 6, 5], [4, 5, 6, 5]], [[7, 8, 9], [7, 8, 9]], [[4, 5, 6, 5], [4, 5, 6, 5]]]], [[[[[1, 2]], [[5], [5], [5]], [[5], [5], [5]], [[5], [5], [5]]], [[[1, 2]], [[5], [5], [5]], [[5], [5], [5]], [[5], [5], [5]]], [[[1, 2]], [[5], [5], [5]], [[5], [5], [5]], [[5], [5], [5]]]]], [[[[[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[5, 6], [5, 6]], [[5, 6], [5, 6]]], [[[5, 6], [5, 6]], [[5, 6], [5, 6]]]]], [[[], [], [], [], []]], [[[7, [8, [9, [10, [11]]]]], [12, [13], 12], [7, [8, [9, [10, [11]]]]]]], [[[], [true, true, true, false, true, false, false], [[[1], [2]], [[3], [4]]], [[[9], [10]], [[11], [12]]], [], []]], [[[[[[16], []]], [[[16], []]]], [[]], [[[[16], []]], [[[16], []]]]]], [[[[1, 2], [4], [4]], [[5, 6], [7, 8]], [9, 10, 11, 11], [[12], [13, 14, 15]], [[1, 2], [4], [4]]]], [[[32.000177071487, -20.1420432762838, 51.011371806120025, 12.815941093030148, -46.39862557040257, 58.61255553102427, -68.35789173671046, 21.518392584019793, -11.565287834743444, -45.434215124419964], [true, true, true, false, true, false, false], [[[3], [3, 4], [3, 4]], [[1], [2]], [[3], [3, 4], [3, 4]]], [[[3], [3, 4], [3, 4]], [[1], [2]], [[3], [3, 4], [3, 4]]], [[[9], [10]], [[11], [12]]], [], []]]], "contract": "\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n"}
{"task_id": "Mbpp/299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n", "entry_point": "max_aggregate", "canonical_solution": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "base_input": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]], [[["Juan Whelan", 50], ["Sabah Colley", 48], ["Peter Nichols", 37], ["Juan Whelan", 22], ["Sabah Colley", 14]]], [[["Juan Whelan", 10], ["Sabah Colley", 20], ["Peter Nichols", 30], ["Juan Whelan", 40], ["Sabah Colley", 50]]]], "atol": 0, "plus_input": [[[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40]]], [[["Alice", -50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40]]], [[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 80], ["Bob", 70], ["Charlie", 70]]], [[["Alice", 50], ["Bob", 60], ["Charlie", 70], ["David", 80], ["Alice", 90], ["Bob", 100], ["Charlie", 110], ["David", 120], ["Alice", 130], ["Bob", 140], ["Charlie", 150], ["David", 160]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40]]], [[["Alice", -50], ["Alice", -50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bob", 50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40], ["Bob", -90]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bob", 50], ["Charlie", 70], ["Charlie", 70]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40], ["Bob", 50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bobb", 50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Bob", 50]]], [[["Alice", -50], ["AlDavidice", -50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bobb", 50], ["Charlie", 40]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40], ["Alice", 80], ["Charlie", 40]]], [[["AlDavidice", -50], ["Alice", -50], ["Alice", -50]]], [[["Bob", 110], ["Alice", 80], ["Bob", -90]]], [[["Alice", 80], ["Bob", -90], ["Bob", -89], ["Charlie", 70], ["Alice", -60], ["Bob", 50]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], [41, 40], ["Charlie", 40], ["Bob", 50]]], [[["Alice", -50], ["AlDavidice", -50], ["Alice", -50]]], [[["Bob", -90], ["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 70]]], [[["Alice", -50], ["Alice", -50], ["Alice", -50]]], [[["AlDavidice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50]]], [[["Alice", 80], ["Bob", 90], ["Alice", 80], ["Bob", 70], ["Charlie", 70], ["Bob", 70]]], [[["Alice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50]]], [[["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bo", -90], ["Bobb", 50], ["Charlie", 40]]], [[["AlDavidice", -50]]], [[["Alice", 80], ["Bob", 41], ["Charlie", 70], ["Alice", -60]]], [[["AlDavidice", 70]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40], ["Bob", 50], ["Charlie", 70]]], [[["AlDavidice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50]]], [[["Alice", 80], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40], ["Bob", -90]]], [[["Alice", 80], ["Charlie", 70], ["Alice", -60], ["Bobb", 50]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Bob", 50], ["Charlie", 70]]], [[["Alice", 80], ["Bob", 40], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40]]], [[["Alice", 80], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Bobb", 50], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bobb", 50]]], [[["Alice", 50], ["Bob", 60], ["Charlie", 70], ["David", 80], ["Alice", 90], ["Bob", 100], ["Charlie", 110], ["David", 120], ["Bob", 140], ["Charlie", 150], ["David", 160], ["David", 80]]], [[["Alice", 80], ["Bob", 90], ["Alice", 80], ["Bob", 70], ["Charlie", 70], ["Bob", 70], ["Bob", 70]]], [[["Bob", 90], ["Charlie", 70], ["Alice", 80], ["Bob", 70], ["Charlie", 70]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 100], ["Alice", 60], ["Bob", 50], ["Charlie", 40], ["Bob", 50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bo", -90], ["Bobb", 50], ["Charlie", 40]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40], ["Bob", 50], ["Alice", 60]]], [[["Alice", 80], ["Charlie", 70], ["Bob", 50], ["Charlie", 70], ["Charlie", 70]]], [[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 80], ["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Alice", -60], ["Bob", 50], ["Charlie", 70]]], [[["BoBob", 110], ["Alice", 80], ["Bob", -90], ["Bob", -90]]], [[["Alice", -51], ["Alice", -50]]], [[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 80], ["Bob", 70]]], [[["Alice", 80], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40], ["Bob", -90], ["Bob", 50]]], [[["Alice", -50], ["AlDavidice", -49], ["Alice", -50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Alice", 80]]], [[["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bobb", 50], ["Charlie", 40]]], [[["Chare", 70], ["Alice", 80], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40], ["Bob", -90]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Bob", -90]]], [[["BoBob", 110], ["Alice", 80], ["Bob", -90], ["Bob", -90], ["Alice", 80], ["Alice", 80]]], [[["Alice", 50], ["Bob", 60], ["Charlie", 70], ["David", 80], ["Alice", 90], ["Bob", 100], ["Charlie", 110], ["David", 120], ["Bob", 140], ["Charlie", 150], ["David", 160], ["David", 80], ["Bob", 60]]], [[["Ali", 80], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40], ["Bob", 50], ["Alice", 60]]], [[["Alice", 80], ["Bob", 41], ["Charlie", 70], ["Alice", -60], ["Alice", -60]]], [[["Alice", 80], ["Bob", 90], ["Alice", 81], ["Charlie", 70], ["Alice", 80], ["Bob", 70]]], [[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 100], ["Alice", 80], ["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Alice", -60]]], [[["Bob", 41], ["Charlie", 70], ["Alice", -60]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bob", 50], ["Charlie", 70]]], [[["AlDavidice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50], ["Alice", -50]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40], ["Bob", 50], ["Charlie", 70], ["Charlie", 70]]], [[["Alice", 80], ["Charlie", 70], ["Bob", 50], ["Charlie", 40]]], [[["Alice", -50], ["AlDavidice", -49], ["Alice", -50], ["Alice", -50]]], [[["Alice", 80], ["Charlie", 69], ["Bob", -90], ["Charlie", 70], ["Charlie", 70], ["Charlie", 70]]], [[["Alice", 50], ["Bob", 60], ["Charlie", 70], ["David", 80], ["Alice", 90], ["Bob", 100], ["Charlie", 110], ["Bob", 140], ["Charlie", 150], ["David", 160], ["David", 80]]], [[["Alice", -50], ["AlDavidice", -49], ["Alice", -50], ["Alice", -50], ["AlDavidice", -49], ["Alice", -50]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["BoDavid", 50]]], [[["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 70]]], [[["Charli", 70]]], [[["Alice", 80], ["Bob", 40], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bob", 40]]], [[["Alice", 80], ["Bob", 40], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bob", -90]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bobb", 50], ["Bob", -90], ["Bob", -90]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["BoDavid", 50], ["Bob", 50], ["Bob", -90]]], [[["Alice", 80], ["Charlie", 70], ["Bob", 50], ["Charlie", 70], ["BoDavid", 70]]], [[["Alice", 80], ["Charlie", 70], ["Bob", 50], ["Charlie", 70], ["Charlie", 70], ["Charlie", 70]]], [[["Alice", 80], ["Alice", 81], ["Charlie", 70], ["Alice", 80], ["Bob", 70], ["Alice", 80], ["Alice", 80], ["Alice", 80]]], [[["Alice", 80], ["Bob", -90], ["Alice", -60], ["Bob", 50], ["Charlie", 70], ["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Charlie", 40], ["Bob", -90], ["Alice", 80]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bob", 50], ["Bob", 50]]], [[["Bob", 110], ["Alice", 80], ["Bob", -90], ["Bob", -90], ["Bob", 110]]], [[["Ali", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], [41, 40], ["Charlie", 40], ["Bob", 50], ["Bob", 50]]], [[["Alice", 80], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Bob", -90], ["Bob", 50]]], [[["Bob", -90], ["Charlie", 70], ["Bo", -90], ["Bobb", 50], ["Charlie", 40]]], [[["Alice", 50], ["Bob", 60], ["David", 80], ["Alice", 90], ["Bob", 100], ["Charlie", 110], ["Bob", 140], ["Charlie", 150], ["David", 160], ["David", 80]]], [[["Alice", 80], ["Bob", -90], ["Alice", -60], ["Bob", 50], ["BoDavid", 50], ["Bob", 50], ["Bob", -90]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Bobb", 50], ["Bob", -90], ["BoBob", -90]]], [[["Alice", 80], ["Bob", 90], ["Alice", 80], ["Bob", 70], ["Charlie", 70], ["Bob", 70], ["Bob", 70], ["Bob", 70]]], [[["Alice", 80], ["Bob", -90], ["Bob", -89], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["Alice", 80]]], [[["Alice", 80], ["Bob", 40], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Charlie", 40], ["Bob", 40], ["Charlie", 40]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bobb", 50], ["Alice", 80], ["Charlie", 70]]], [[["AlDavidice", 70], ["AlDavidice", 70]]], [[["Charlie", 70], ["Alice", -60]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Charlie", 70]]], [[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50], ["BoDavid", 50], ["Charlie", 70]]]], "contract": "\n    assert isinstance(stdata, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n"}
{"task_id": "Mbpp/300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n", "entry_point": "count_binary_seq", "canonical_solution": "\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n", "base_input": [[1], [2], [3]], "atol": 0.0001, "plus_input": [[4], [5], [6], [10], [15], [20], [50], [100], [75], [200], [150], [1000], [1000000], [151], [1000001], [101], [102], [true], [51], [14], [9], [1001], [49], [13], [999], [21], [199], [22], [201], [999999], [24], [53], [1002], [999998], [52], [74], [16], [202], [17], [1000002], [18], [1000003], [203], [103], [998], [25], [23], [1004], [999997], [8], [19], [68], [198], [67], [197], [48], [204], [152], [1003], [11], [997], [12], [206], [73], [72], [196], [999996], [195], [205], [1005], [194], [54], [148], [996], [55], [1000004], [56], [66], [26], [76], [999995], [1000005], [3], [149], [96], [71], [7], [207], [2], [95], [64], [57], [58], [995], [63], [208], [97], [69], [153], [104], [94], [154], [90], [77], [994], [91], [79], [27], [1000006], [70], [98], [41], [88]], "contract": "\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\n"}
{"task_id": "Mbpp/301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n", "entry_point": "dict_depth", "canonical_solution": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    return dict_depth_aux(d)\n", "base_input": [[{"a": 1, "b": {"c": {"d": {}}}}], [{"a": 1, "b": {"c": "python"}}], [{"1": "Sun", "2": {"3": {"4": "Mon"}}}]], "atol": 0, "plus_input": [[{}], [{"a": 1, "b": {"c": {"d": {"e": {"f": {}}}}}}], [{"1": null, "2": {"3": [1, 2, 3, "four", {"five": []}]}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {}}}}}}}}}}}}}], [{"": {"a": {"": {"b": {"": {"c": {"": {"d": {"": {"e": {"": {"f": {}}}}}}}}}}}}}], [{"": {"": {"": {"": {"": {"": {}}}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}}}}}}}}}}}}}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}, "r": {}}}}}}}}}}}}}}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {"r": {"s": {"t": {"u": {"v": {"w": {"x": {"y": {"z": {}}}}}}}}}}}}}}}}}}}}}}}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {}}}}}}}}}}}], [{"a": {"b": {"c": {"d": {}, "d3": {}}, "m": {"d": {}, "d3": {}}}}, "c": {"b": {"c": {"d": {}, "d3": {}}, "m": {"d": {}, "d3": {}}}}}], [{"": {}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"1": null, "2": {}}], [{"": {}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "q": true}, "u": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "q": true}}], [{"3": -88.90022456328843}], [{"2": {"3": [1, 2, 3, "four", {"five": []}]}}], [{"a": {"b": {}}, "i": {"b": {}}}], [{"a": {"b": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}, "": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}, "o": {"b": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}, "": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}, "aa": {"b": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}}], [{"82": "o", "-18": true, "-22": 45.37187603198615, "-46": true, "-99": 3, "17": false, "false": [-88.90022456328843, -70, [52, 75, 3, -51, 39], ["mGHCFegugU", "i", "Z", "", "RxUtGLDmo", "w", "LVJrehuQ"], "uqxkBtwt", "S", 3, false, -70.23435848197705, "cEaESfr"], "26": true, "-2": "z"}], [{"a": {"b": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}, "aa": {"b": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}}], [{"2": {}, "LVJrehuQ": {}, "LVJruQ": {"RxUtGLDmo": -46, "m": true, "wHPvByBcU": false, "LVJrehuQ": -46}}], [{"1": null}], [{"a": {"b": {"c": {}, "": {}}}}], [{"a": {"b": {"c": {}}, "h": {"c": {}}}, "ZUQmkBNwzz": {"b": {"c": {}}, "h": {"c": {}}}}], [{"3": -70.23435848197705}], [{"a": 1, "b": {"c": {"d": {"e": {"f": {"p": "b", "w": "b", "iMRXRnfM": "k", "sg": "OuwuzF"}}, "ee": {"f": {"p": "b", "w": "b", "iMRXRnfM": "k", "sg": "OuwuzF"}}}}}, "": -2}], [{"a": {"b": {"c": {}, "cs": {}}, "dd": {"c": {}, "cs": {}}}, "au": {"b": {"c": {}, "cs": {}}, "dd": {"c": {}, "cs": {}}}}], [{"a": 1}], [{"a": {"36": "j", "-2": "dd", "93": "i", "-68": "yd", "18": "XSSaro", "-70": "NCpW", "-18": "x", "75": "u"}, "e": {}}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"a": {"b": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}, "cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}}], [{"-62": true, "-46": false, "74": false, "75": true, "100": false, "-13": true, "26": true}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -99}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}, "aa": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -99}}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -99}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": false, "evQaJAaWcU": false, "p": true}, "aa": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -99}}], [{"3": 24.166749833936606}], [{"a": {"b": {"c": {"d": {"e": {}, "le": {}}}, "uqxkBtwt": {"d": {"e": {}, "le": {}}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "cdd": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "aa": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "cdd": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "aa": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}}}, "aa": {"b": {"c": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "cdd": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "aa": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "cdd": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "aa": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}}}}], [{"a": 1, "b": {}, "": -2}], [{"3": -88.90022456328843, "4": -88.90022456328843}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -100}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}, "aa": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -100}, "11": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null, "ECQzmakwak": -100}}], [{"a": {}, "c": {}}], [{"3": 92.26486308699438}], [{"3": -88.90022456328843, "4": -88.90022456328843, "2": 24.166749833936606}], [{"1": null, "o": null}], [{"2": {}, "LVJrehuQ": {}, "LVJruQ": {"RxUtGLDmo": -46, "m": true, "wHPvByBcU": false, "LVJrehuQ": -2}, "NCpW2": {"93": -70, "-70": -92, "15": -18, "78": -51, "-2": 33, "-98": -22, "-23": 39}, "2OuwuzF": {}}], [{"1": null, "FsoqoTrjT": null}], [{"a": {"": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}, "o": {"": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}}], [{"": {}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "q": true, "qq": true}, "u": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "q": true, "qq": true}}], [{"a": {"b": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "f": {"c": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}}], [{"a": {"b": {"c": {}, "": {}, "o": {"-2": true, "26": true, "17": false, "89": false, "-22": true, "-100": false}}}}], [{"a": {}, "aa": {"ee": true, "five": false, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": false, "m": true}}], [{"": {"MaWZPPcIVh": -92, "PWBlhF": "t", "GADGYZmW": true, "r": "teGvmFFhe", "evQaJAaWcU": {"-29.136311531658492": 92.26486308699438, "45.37187603198615": -70.23435848197705, "-88.90022456328843": 18.966329435711216, "-33.14814838909747": -58.73842997764558, "97.69596012638712": -88.90022456328843, "-97.39212624553504": -70.23435848197705, "61.20380484012347": 12.24607262876009, "90.82998766371674": 26.50019718421221, "-61.34942971430996": 45.37187603198615}, "n": 27.20385311688422, "Gxjm": 13.499259968290332, "a": -55}}], [{"ZUQmkBNwzz": {"b": {"c": {}}, "h": {"c": {}}}}], [{"t": "wHPvByBcU", "x": "yzi", "1": "u", "f": "o", "OuwuzF": "NTBPIysgcS", "hsC": "wHPvByBcU", "V": "sFeS", "p": "Z"}], [{"a": {"b": {"c": {"d": {}, "d3": {}}, "m": {"d": {}, "d3": {}}}}}], [{"-98": false, "46": true}], [{"-26.64371771418527": 48, "-29.136311531658492": 0, "-67.26146304390653": 71.79844144188411, "58.93287348010048": true, "72.156388836985": "w", "96.35296737206255": 39, "55.26081571721758": {}, "-79.12770306492645": {"LlHr": 77.18525698520119, "shcCoNDDzD": -80.08923214462673, "HoEZJQ": -41.186840717965346, "xFuROv": 18.966329435711216, "zEifumioM": -36.85543662414095}, "-61.34942971430996": -63.35326012846152}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null}, "1": {"FsoqoTrjT": false, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}, "dd": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}}, "cc": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}, "dd": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}}}}}], [{"2": {"3": [1, 2, 4, "four", {"five": []}, 1], "yd": [1, 2, 4, "four", {"five": []}, 1]}, "cEaESfr2": {"3": [1, 2, 4, "four", {"five": []}, 1], "yd": [1, 2, 4, "four", {"five": []}, 1]}, "o": {"3": [1, 2, 4, "four", {"five": []}, 1], "yd": [1, 2, 4, "four", {"five": []}, 1]}}], [{"1": null, "2": {"3": [1, 2, 3, "four", {"five": []}]}, "2Gxjm": null}], [{"1": {"FsoqoTrjT": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"a": 93, "b": {"c": {"d": {"e": {"f": {"p": "b", "w": "b", "iMRXRnfM": "k", "sg": "OuwuzF"}}, "ee": {"f": {"p": "b", "w": "b", "iMRXRnfM": "k", "sg": "OuwuzF"}}}}}, "": -2}], [{"3": 24.166749833936606, "2": 45.37187603198615}], [{"": {}}], [{"a": {"b": {"c": {"d": {"x": {"f": {}, "": {}}}, "": {"x": {"f": {}, "": {}}}}}, "": {"c": {"d": {"x": {"f": {}, "": {}}}, "": {"x": {"f": {}, "": {}}}}}, "f": {"c": {"d": {"x": {"f": {}, "": {}}}, "": {"x": {"f": {}, "": {}}}}}}}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 77.18525698520119, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null}, "1": {"FsoqoTrjT": false, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"aa": {"IUS": "", "gw": "sFeS", "uCeJjphfT": "Ffv", "LlHr": "oo"}}], [{"a": {}, "aa": {"ee": true, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": false, "m": true}}], [{"3": 96.35296737206255}], [{"a": {"b": {}}, "2": {"b": {}}}], [{"-33.14814838909747": 66, "-70.23435848197705": 45.37187603198615, "-69.83830272071347": false, "-63.35326012846152": 96.35296737206255, "-30.789809846268625": true, "60.2350410779849": 3}], [{"-26.64371771418527": 82, "-15.356570747169435": -51}], [{"2": {}, "LVJrehuQ": {}, "LVJruQ": {"RxUtGLDmo": -46, "m": true, "wHPvByBcU": false, "LVJrehuQ": -46}, "LVaaJruQ": {"nI": 45.37187603198615, "yjBHm": 35.039272319200876, "evQaJAaWcU": 72.156388836985, "WAL": -56.35142984993762, "IUS": 13.499259968290332, "2Gxjm": 55.26081571721758, "kk": -26.64371771418527, "Daw": -79.1897928198815, "KUckX": -54.81691015497256, "qq": -82.63703945326824}}], [{"3": 61.742241169514294, "4": -88.90022456328843, "18": -88.3903393724117}], [{"a": {"b": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}, "o": {"b": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}, "": {"b": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}}], [{"24.166749833936606": true, "72.14403982173002": [75], "80.75219850537499": 18.966329435711216, "50.150582640055006": true}], [{"a": 1, "": -2, "aa": {}}], [{"-33.14814838909747": 66, "-70.23435848197705": 45.37187603198615, "-69.83830272071347": false, "-63.35326012846152": 12.24607262876009, "-30.789809846268625": false, "60.2350410779849": 3}], [{"1": null, "11": null}], [{"a": {"b": {"cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "UPZAia": {"cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}, "aa": {"b": {"cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}, "UPZAia": {"cdd": {"d": {"e": {"f": {}, "": {}}, "x": {"f": {}, "": {}}}}}}}], [{"": {"MaWZPPcIVh": -92, "PWBlhF": "t", "GADGYZmW": true, "r": "teGvmFFhe", "evQaJAaWcU": {"-29.136311531658492": 92.26486308699438, "45.37187603198615": -70.23435848197705, "-88.90022456328843": 18.966329435711216, "-33.14814838909747": -58.73842997764558, "97.69596012638712": -88.90022456328843, "-97.39212624553504": -70.23435848197705, "61.20380484012347": 12.24607262876009, "90.82998766371674": 26.50019718421221, "-61.34942971430996": 45.37187603198615}, "n": 27.20385311688422, "Gxjm": 13.499259968290332, "a": -55}, "n": {"MaWZPPcIVh": -92, "PWBlhF": "t", "GADGYZmW": true, "r": "teGvmFFhe", "evQaJAaWcU": {"-29.136311531658492": 92.26486308699438, "45.37187603198615": -70.23435848197705, "-88.90022456328843": 18.966329435711216, "-33.14814838909747": -58.73842997764558, "97.69596012638712": -88.90022456328843, "-97.39212624553504": -70.23435848197705, "61.20380484012347": 12.24607262876009, "90.82998766371674": 26.50019718421221, "-61.34942971430996": 45.37187603198615}, "n": 27.20385311688422, "Gxjm": 13.499259968290332, "a": -55}, "sg": {"MaWZPPcIVh": -92, "PWBlhF": "t", "GADGYZmW": true, "r": "teGvmFFhe", "evQaJAaWcU": {"-29.136311531658492": 92.26486308699438, "45.37187603198615": -70.23435848197705, "-88.90022456328843": 18.966329435711216, "-33.14814838909747": -58.73842997764558, "97.69596012638712": -88.90022456328843, "-97.39212624553504": -70.23435848197705, "61.20380484012347": 12.24607262876009, "90.82998766371674": 26.50019718421221, "-61.34942971430996": 45.37187603198615}, "n": 27.20385311688422, "Gxjm": 13.499259968290332, "a": -55}}], [{"a": {"b": {"c": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "m": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "WAL": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}}, "n": {"c": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "m": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "WAL": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}}}, "c": {"b": {"c": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "m": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "WAL": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}}, "n": {"c": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "m": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "WAL": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}}}, "": {"b": {"c": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "m": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "WAL": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}}, "n": {"c": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "m": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}, "WAL": {"d": {}, "d3": {}, "u": {"-82.63703945326824": [-70, -79, -2, 82, -84, -68, 82, 1, -2, -100], "-56.35142984993762": false, "-98.20021290933627": false, "92.26486308699438": -56.35142984993762, "45.37187603198615": true, "60.896699001770344": true, "80.75219850537499": "MaWZPPcIVh"}}}}}], [{"": {}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "evQaJAaWcU": false, "p": true, "q": true}, "u": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "evQaJAaWcU": false, "p": true, "q": true}}], [{"a": {"b": {}, "": {}, "f": {}}, "m": {"b": {}, "": {}, "f": {}}}], [{"3": 93.13323111669843}], [{"-33.14814838909747": 66, "-70.23435848197705": 45.37187603198615, "-69.83830272071347": false, "-63.35326012846152": 96.35296737206255, "-30.789809846268625": true, "60.2350410779849": 3, "61.20380484012347": 92.26486308699438, "-82.63703945326824": true, "61.0177080055808": false}], [{"a": {"b": {"c": {"d": {"e": {"": {}}, "x": {"": {}}, "xa": {"": {}}}}, "cdd": {"d": {"e": {"": {}}, "x": {"": {}}, "xa": {"": {}}}}, "cddd": {"d": {"e": {"": {}}, "x": {"": {}}, "xa": {"": {}}}}}}, "aa": {"b": {"c": {"d": {"e": {"": {}}, "x": {"": {}}, "xa": {"": {}}}}, "cdd": {"d": {"e": {"": {}}, "x": {"": {}}, "xa": {"": {}}}}, "cddd": {"d": {"e": {"": {}}, "x": {"": {}}, "xa": {"": {}}}}}}}], [{"aa": {"b": {"c": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "cdd": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "aa": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}}, "": {"c": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "cdd": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}, "aa": {"d": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}, "sg": {"e": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}, "x": {"f": {}, "": {}, "fe": {"u": [-44.82072926054459, 45.37187603198615, 92.26486308699438, 24.166749833936606, 45.37187603198615], "s": 45.37187603198615}}}}}}}], [{"a": {"b": {"cdd": {"d": {"e": {"f": {}}, "x": {"f": {}}}}, "yd": {"d": {"e": {"f": {}}, "x": {"f": {}}}}}}}], [{"1": null, "2": {"3": [1, 2, 3, "four", {"five": []}]}, "": null}], [{"3": 61.20380484012347}], [{"": {}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": false, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"a": {}, "c": {"-50.943776461233355": 48, "61.0177080055808": -76, "80.75219850537499": -62, "-63.35326012846152": -22, "27.20385311688422": 85, "-99.88375297482878": 88, "-82.04041002717564": -69}}], [{"a": {"b": {}}}], [{"1": {"FsoqoTrjT": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "Ffv": true}, "": {"FsoqoTrjT": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "Ffv": true}}], [{"a": {"75.59202711644474": -69}, "aa": {"ee": true, "five": false, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": true, "m": true}}], [{"93": "diiC", "-42": "w", "1": "aa", "39": "QbqXHcf", "-50": "aZzNDc", "-51": "o", "-22": "WAL"}], [{"3": 92.26486308699438, "4": -88.90022456328843, "18": -88.3903393724117}], [{"a": {"75.59202711644474": -69, "24.166749833936606": -68}, "aa": {"ee": true, "five": false, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": true, "m": true, "fIbbSDrRzz": true}, "MaWZPPcIVh": {"75.59202711644474": -69, "24.166749833936606": -68}, "MaWZPPVcIVh": {"ee": true, "five": false, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": true, "m": true, "fIbbSDrRzz": true}}], [{"": {"k": "u", "l": -70.23435848197705, "g": -44.82072926054459, "S": -70.23435848197705, "five": 24.166749833936606, "four": false, "yjBHm": "mNS", "Mhw": null, "z": -70, "ECQzmakak": null}, "1": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": false, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true}}], [{"2": {"3": [1, 2, 4, 75, "four", {"five": []}, 1], "yd": [1, 2, 4, 75, "four", {"five": []}, 1], "yyd": [1, 2, 4, 75, "four", {"five": []}, 1]}, "cEaESfr2": {"3": [1, 2, 4, 75, "four", {"five": []}, 1], "yd": [1, 2, 4, 75, "four", {"five": []}, 1], "yyd": [1, 2, 4, 75, "four", {"five": []}, 1]}, "o": {"3": [1, 2, 4, 75, "four", {"five": []}, 1], "yd": [1, 2, 4, 75, "four", {"five": []}, 1], "yyd": [1, 2, 4, 75, "four", {"five": []}, 1]}, "fe": {"3": [1, 2, 4, 75, "four", {"five": []}, 1], "yd": [1, 2, 4, 75, "four", {"five": []}, 1], "yyd": [1, 2, 4, 75, "four", {"five": []}, 1]}}], [{"": {"77.18525698520119": -16.627709740778116, "-94.37956712000164": 60.896699001770344, "61.20380484012347": 19.58275457236023, "-58.73842997764558": 13.499259968290332, "-42.73652263635028": -46.05028728582261, "-64.44589526160877": -70.23435848197705, "-67.26146304390653": 77.18525698520119}, "u": {"FsoqoTrjT": false, "a": true, "w": false, "d3": true, "qxPg": false, "": true, "ZUQmkBNwzz": true, "evQaJAaWcU": false, "p": true, "q": true}}], [{"a": {"b": {"c": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}, "five": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}, "cc": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}}}, "": {"b": {"c": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}, "five": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}, "cc": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}}}, "oevQaJAaWcU": {"b": {"c": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}, "five": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}, "cc": {"d": {"-26": -31.59796704738038, "-2": 75.59202711644474, "-68": -44.82072926054459}, "dd": {}}}}}], [{"o": {"b": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}, "": {"c": {"d": {}, "dd": {}}, "five": {"d": {}, "dd": {}}}}}], [{"a": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}, "dd": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}}}, "": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}, "dd": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}}}}, "aa": {"b": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}, "dd": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}}}, "": {"c": {"d": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}, "dd": {"e": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}, "ee": {"f": {"g": {"h": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}, "OuwuzF": {"i": {"j": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}, "d": {"k": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}, "kk": {"l": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}, "lUPZAia": {"m": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}, "NTBPIysgcS": {"n": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}, "nle": {"o": {"p": {"q": {}}, "pp": {"q": {}}}, "oo": {"p": {"q": {}}, "pp": {"q": {}}}}}}}}}}}}}}}}}}], [{"a": {"": -84, "mifi": true}, "mNSa": {"": -84, "mifi": true}}], [{"3": -89.63645103037447}], [{"a": {"ee": true, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": false}, "aa": {"ee": true, "HoEZJQ": false, "LVJrehuQ": false, "UPZAia": false, "fIbbSDrRz": false}}]], "contract": "\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n"}
{"task_id": "Mbpp/305", "prompt": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n", "entry_point": "start_withp", "canonical_solution": "\nimport re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "base_input": [[["Python PHP", "Java JavaScript", "c c++"]], [["Python Programming", "Java Programming"]], [["Pqrst Pqr", "qrstuv"]]], "atol": 0, "plus_input": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]], [[]], [["apple", "banana", "carrot", "dog", "elephant"]], [["python Programming", "Java Programming", "perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]], [["Python PHP", "Java JavaScript", "C C++", "Perl Python", "Ruby R"]], [["Python", "Programming", "Java", "Programming", "Perl", "Programming", "Ruby", "Programming", "PHP", "Programming", "C", "Programming"]], [["Apple", "Banana", "Carrot", "Dog", "Elephant"]], [["Python", "Programming", "Java", "Programming", "PBananaerl", "Programming", "Ruby", "Programming", "PHP", "Programming", "C", "Programming"]], [["python Programming", "Elephant", "Java Programming", "perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]], [["Python PHP", "Java JavaScript", "C C++", "Perl Python", "Ruby R", "Java JavaScript"]], [["python Programming", "Elephant", "Java Programming", "perl Programming", "PHP Programming", "C Programming", "Elephant"]], [["python Programming", "Elephant", "python", "perl Programming", "PHP Programming", "C Programming", "Elephant"]], [["Apple", "Banana", "Carrort", "Carrot", "Dog", "Elephant"]], [["Apple", "Banana", "Carrort", "Dog", "Elephant"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "PHP Programming", "C Programming", "carrot", "Elephant"]], [["Apple", "Banana", "Python Programming", "Carrot", "Dog", "Elephant"]], [["Apple", "Banana", "Crrort", "Dog", "Elephant"]], [["python Programming", "Java Programming", "perl Programming", "PHP Programming", "C Programming", "python Programming"]], [["python Programming", "Elephant", "Java Programming", "perl Progrgamming", "Ruby Programming", "PHP Programming", "C Programming"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "PHP Programming", "carrot", "Elephant"]], [["python Programming", "Elephant", "python", "Python", "perl Programming", "PHP Programming", "C Programming", "Elephant"]], [["Elephant", "Java Programming", "perl Progrgamming", "Ruby Programming", "PHP Programming", "C Programming"]], [["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "PHP Programming"]], [["python Programming", "Java Programming", "perl Programming", "Ruby Programming", "PHP Promgramming", "C Programming"]], [["Python", "Programming", "Java", "Programming", "PBananaerl", "C Programming", "Programming", "Ruby", "Programming", "PHP", "Programming", "", "Programming", "C"]], [["Apple", "Banana", "Banan", "Crrort", "Dog", "Elephant"]], [["python Programming", "Elephant", "perl Programming", "Java Programming", "perl Progrgamming", "Ruby Programming", "PHP Programming", "C Programming"]], [["Banana", "Apple", "Banan", "Crrort", "Dog", "Elephant"]], [["Java Programming", "perl Programming", "PHP Programming", "C Programming", "python Programming"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "PHP Programming", "C Programming", "Elephant"]], [["python Programming", "Elephant", "Python", "perl Programming", "PHP Programming", "C Programming", "Elephant"]], [["apple", "banana", "carrot", "apBananple", "dog", "elephant", "banana"]], [["python Programming", "Elephant", "Java Programming", "pperlerl Progrgamming", "Ruby Programming", "PHP Programming"]], [["Apple", "Banana", "Perl Python", "Crrort", "Dog", "Elephant"]], [["Carrort", "Dog", "Elephant", "Carrort"]], [["Apple", "Banana", "Perl Python", "Dog", "Elephant"]], [["Python", "Programming", "Java", "Programming", "PBananaerl", "C Programming", "Programming", "Ruby", "Programming", "PHP", "Programming", "", "Programming", "C", "Programming"]], [["apple", "banana", "carrot", "dog", "etlephant"]], [["Apple", "Banana", "Carrot", "Dg", "Elephant"]], [["Apple", "Banana", "Crrort", "Dog", "Appe", "Banana"]], [["apple", "banana", "carrot", "Java", "dog", "elephant", "banana"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "perl ProgrammC Programminging", "PHP Programming", "Elephant"]], [["python Programming", "Elephant", "python", "Python", "perl Programming", "PHP Programming", "C ramming", "Elephant", "python Programming"]], [["Apple", "Banana", "Carrort", "Dog", "Elephant", "apBananple"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "PHP Progiramming", "C Programming", "Elephant"]], [["python Programming", "Java Programming", "Crrort", "Ruby Programming", "ProgrammC", "PHP Promgramming", "C Programming"]], [["Apple", "Bannana", "Banana", "Perl Python", "Dog", "Elephant"]], [["perl Programmming", "python Programming", "Java Programming", "perl Programming", "perl ProgrammC Programminging", "PHP Programming", "Elephant"]], [["Python", "Programming", "Java", "Programming", "PBananaerl", "Programming", "Programming", "PHP", "Programming", "C", "Programming"]], [["python Programming", "etlephant", "Java Programming", "perl Programming", "perl Programming", "PHP Programming", "C Programming", "Elephant"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "perl ProgrammC Programminging", "Ruby", "Elephant"]], [["Apple", "Banana", "Carrot", "Programmming", "Dog", "Progiramming", "Elephant"]], [["Java Programming", "perl Programming", "Ruby Programming", "PHP Programming", "Ruby ProgrammingJava", "C Programming"]], [["Elephant", "Java Programming", "perl Progrgamming", "Ruby Programming", "R", "C Programming"]], [["Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "PHP Programming"]], [["python Programming", "Elephant", "Java Programming", "perl Programming", "PHP Programming", "Elephant"]], [["apple", "carrot", "apBananple", "Javadog", "elephant", "banana"]], [["apple", "banana", "carrot", "Bannana", "dog", "etlephant"]], [["Apple", "Banana", "Crrort", "Dog", "Elephant", "Banana"]], [["Dogg", "Carrort", "Dog", "Elephant"]], [["perl Programmming", "python Programming", "Java Programming", "perl Programming", "perl ProgrammC Programminging", "PHP Programming", "Elephant", "perl Programming"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "PHP Programming", "Elephant"]], [["Apple", "Banana", "Carrot", "Dg", "Perl Python"]], [["Apple", "Banana", "Dog", "Elephant"]], [["Elephant", "Promgramming", "perl Progrgamming", "Ruby Programming", "R", "C Programming"]], [["Apple", "Banana", "Carrot", "Dg", "Detlephantg", "Elephant"]], [["Elephant", "Promgramming", "perl Progrgamming", "Ruby Programming", "R"]], [["Python", "Programming", "Java", "Programming", "PBananaerl", "C Programming", "Programming", "Ruby", "Programming", "PHP", "ProPgramming", "", "Programming", "C", "Programming"]], [["python Programming", "Elephant", "Java Programming", "perl Programming", "Ruby Programming", "PHP Programming", "C Programming", "perl Programming", "Elephant"]], [["Elephant", "Java Programming", "perl Progrgamming", "perl Programming", "R", "C Programming"]], [["Apple", "Dog", "Elephant"]], [["Perl Programming", "Ruby Programming", "PHP Programming", "Ruby ProgrammiRuby Rng", "PHP Programming", "PHP Programming"]], [["Apple", "Banana", "Python Programming", "Carrot", "ProgrammiRubyDog", "Elephant"]], [["apple", "carrot", "apBananple", "Javadog", "elephant", "banana", "banana"]], [["banana", "carrot", "Bannana", "dog", "etlephan"]], [["Programming", "Java", "Programming", "PBananaerl", "C Programming", "Programming", "Ruby", "Programming", "PHP", "ProPgramming", "", "Programming", "C", "Programming"]], [["Elephant", "PromgrammingJava Programming", "perl Progrgamming", "Ruby Programming", "R", "C Programming", "perl Progrgamming"]], [["Carrort", "Dog", "Elephant", "oDog", "Carrort"]], [["Apple", "Banana", "Carrort", "Dog", "ElephantCarrort", "apBananple", "Banana"]], [["python Programming", "Java Programming", "perl Programming", "perl Programming", "perl ProgrammC Programminging", "Ruby", "Elephant", "perl ProgrammC Programminging"]], [["python Programming", "Elephant", "Java Programming", "perl Programming", "PHP Programming", "C Programming"]], [["Apple", "Bannana", "Banana", "Perl Python", "Elephpant", "Elephant"]], [["python Programming", "Java Programming", "perl Programming", "PHP Programming", "C Progmramming", "python Programming"]], [["Elephant", "Promgramming", "perl", "perl Progrgamming", "Apple", "Ruby Programming", "prl", "C Programming"]], [["python Programming", "Java Programming", "perl Programming", "perl ProgrammC Programminging", "Ruby", "Elephant", "perl ProgrammC Programminging", "perl Programming", "perl ProgrammC Programminging"]], [["Python PHP", "Java JavaScript", "Perl Python", "Ruby R"]], [["Dogg", "Dog", "Elephant"]], [["Java Programming", "perl Programming", "perl", "PHP Programming", "C Programming", "python Programming"]], [["Carrort", "Dog", "Elephant", "og", "Carrort"]], [["python Programming", "Elephant", "Java Programming", "perl Programming", "Ruby Programming", "PHP Programming", "C Programming", "Java Programming"]], [["python Programming", "pperlerl Progrgamming", "Ruby Programming", "PHP Programming"]], [["Java Programming", "Perl Programming", "Ruby Programming", "C Programming", "PHP Programming"]], [["python Programming", "Java Programming", "Crrort", "Ruby Programming", "Pramming", "ProgrammC", "PHP Promgramming", "C Programming", "PHP Promgramming"]], [["Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming"]], [["Promgramming", "Python Programming", "perl Progrgamming", "Ruby Programming", "R"]], [["Apple", "Banana", "Python Programming", "ProgrammiRuby", "Dog", "Elephant"]], [["python Programming", "PHP ProCrrortgramming", "Elephant", "python", "Python", "perl Programming", "PHP Programming", "C ramming", "Elephant", "python Programming"]], [["python Programming", "Java Programming", "perl Programming", "PHP PrPHP ProCrrortgrammingogramming", "C Programming", "python Programming"]], [["", "python Programming", "Java Programming", "Crrort", "Ruby Programming", "ProgrammC", "PHP Promgramming", "C Programming"]], [["Java Programming", "Perl Programming", "PHnP Programming", "Ruby Programming", "PHP Programming", "PHP Programming"]], [["python Programming", "Java Programming", "perl Programming", "Ruby Programming", "PHP Promgramming", "C Programming", "C Programming", "Java Programming"]], [["python Programming", "Java Programming", "perl Programming", "PHP Programming", "carrot", "Elephant"]], [["carrot", "apBananple", "Javadog", "elephant", "Python", "banana", "banana"]], [["apple", "banana", "carrot", "dRog", "apBananple", "dog", "elephant", "banana"]], [["PHP PrPBananaerling", "Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "PHP Programming"]], [["Elephant", "PromgramminC Progmrammingg", "perl Progrgamming", "Ruby Programming", "R"]], [["python Programming", "Elephant", "Java Programming", "pperlerl Progrgammicarrotng", "Ruby Programming", "PHP Programming"]]], "contract": "\n    assert isinstance(words, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n"}
{"task_id": "Mbpp/306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "entry_point": "max_sum_increasing_subseq", "canonical_solution": "\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\n", "base_input": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[1, 101, 2, 3, 100, 4, 5], 7, 2, 5], [[11, 15, 19, 21, 26, 28, 31], 7, 2, 4]], "atol": 0, "plus_input": [[[5, 2, 4, 1, 3, 6], 6, 1, 3], [[5, 2, 4, 1, 3, 6], 6, 2, 3], [[5, 2, 4, 1, 3, 6], 6, 1, 2], [[5, 2, 4, 1, 3, 6], 6, 1, 5], [[5, 2, 4, 1, 3, 6], 6, 0, 3], [[5, 2, 5, 1, 3, 6], 6, 1, 3], [[5, 2, 5, 1, 3, 6], 6, 2, 3], [[5, 2, 4, 1, 3, 6], 6, 2, 4], [[4, 2, 4, 1, 3, 6], 6, 1, 2], [[3, 2, 4, 1, 3, 6], 6, 2, 3], [[5, 2, 4, 1, 3, 5], 6, 1, 2], [[5, 2, 4, 1, 3, 5], 6, 1, 4], [[5, 2, 4, 1, 3, 5], 6, 1, 5], [[5, 2, 4, 1, 3, 3], 6, 0, 3], [[5, 2, 4, 1, 3, 6], 6, 1, 4], [[5, 2, 4, 1, 3, 1], 6, 0, 3], [[5, 2, 4, 1, 3, 5], 6, 1, 3], [[5, 2, 5, 1, 3, 6], 6, 0, 3], [[4, 2, 4, 1, 3, 6], 6, 0, 2], [[5, 2, 5, 1, 3, 6], 6, 2, 4], [[5, 2, 4, 1, 1, 6], 6, 1, 2], [[5, 2, 5, 1, 3, 6], 6, 2, 5], [[5, 2, 5, 1, 3, 6], 6, 1, 5], [[5, 2, 4, 1, 3, 5], 6, 2, 3], [[5, 2, 5, 1, 3, 6], 6, 1, 4], [[5, 2, 4, 1, 3, 5], 6, 2, 4], [[5, 2, 4, 0, 1, 3, 6], 7, 1, 2], [[5, 2, 5, 1, 3, 6], 6, 0, 1], [[5, 3, 5, 1, 3, 6], 6, 1, 4], [[5, 2, 4, 2, 3, 5], 6, 1, 4], [[5, 2, 5, 1, 2, 6], 6, 0, 1], [[5, 3, 5, 1, 3, 6], 6, 2, 5], [[5, 3, 5, 1, 3, 6], 6, 1, 5], [[4, 3, 5, 1, 3, 6], 6, 1, 5], [[5, 2, 5, 1, 3, 6], 6, 3, 5], [[5, 2, 5, 1, 3, 6], 6, 1, 2], [[5, 3, 5, 1, 3, 6], 6, 2, 4], [[5, 2, 5, 1, 3, 6], 6, 0, 5], [[5, 2, 4, 1, 1, 6], 6, 1, 3], [[5, 2, 4, 1, 3, 5], 6, 2, 5], [[5, 2, 2, 1, 3, 6], 6, 1, 4], [[5, 2, 5, 1, 3, 6], 6, 0, 4], [[4, 3, 5, 1, 3, 6], 6, 1, 3], [[5, 2, 2, 1, 3, 6], 6, 0, 4], [[5, 2, 4, 2, 3, 5], 6, 1, 3], [[4, 2, 5, 1, 3, 6], 6, 1, 3], [[4, 2, 4, 0, 1, 3, 6], 7, 1, 2], [[5, 2, 4, 1, 3, 7], 6, 0, 3], [[5, 2, 4, 1, 3, 1], 6, 0, 4], [[5, 2, 2, 1, 3, 6], 6, 0, 5], [[5, 2, 4, 2, 3, 5], 6, 1, 5], [[5, 3, 5, 1, 3, 6], 6, 3, 4], [[5, 3, 5, 1, 3, 6], 6, 1, 2], [[5, 2, 4, 1, 3, 3], 6, 0, 4], [[5, 2, 5, 1, 3, 2], 6, 0, 4], [[5, 2, 5, 1, 3, 6, 5], 7, 2, 4], [[5, 2, 4, 0, 1, 3, 6], 7, 0, 2], [[5, 2, 4, 1, 3, 1], 6, 1, 3], [[5, 2, 4, 0, 3, 6], 6, 2, 4], [[5, 2, 5, 1, 3, 6], 6, 3, 4], [[5, 2, 5, 1, 3, 2], 6, 1, 4], [[2, 5, 2, 1, 3, 6], 6, 0, 4], [[5, 2, 4, 1, 3, 1], 6, 0, 2], [[5, 3, 5, 1, 3, 6], 6, 0, 4], [[4, 3, 5, 1, 2, 6], 6, 1, 3], [[5, 2, 4, 1, 2, 6], 6, 1, 2], [[4, 2, 5, 1, 3, 6], 6, 0, 3], [[5, 2, 4, 0, 1, 3, 6], 7, 0, 3], [[5, 2, 4, 1, 3, 3], 6, 0, 5], [[5, 2, 4, 1, 2, 6], 6, 1, 5], [[5, 3, 5, 1, 3, 3], 6, 1, 4], [[5, 2, 4, 1, 3, 6], 6, 2, 5], [[5, 2, 4, 1, 3, 3], 6, 0, 2], [[5, 3, 5, 1, 3, 6], 6, 0, 5], [[5, 3, 5, 1, 3, 3], 6, 2, 4], [[5, 4, 1, 3, 3, 3], 6, 0, 4], [[4, 3, 5, 1, 3, 6], 6, 1, 4], [[5, 3, 5, 0, 3, 6], 6, 0, 4], [[5, 2, 4, 1, 3, 1], 6, 0, 1], [[5, 2, 5, 0, 3, 6], 6, 0, 1], [[5, 3, 5, 1, 3, 6], 6, 3, 5], [[4, 3, 5, 1, 2, 6], 6, 1, 2], [[5, 2, 4, 1, 3, 1], 6, 0, 5], [[5, 3, 5, 2, 3, 6], 6, 2, 5], [[5, 3, 5, 1, 2, 6], 6, 3, 4], [[0, 5, 4, 1, 3, 3], 6, 0, 5], [[4, 3, 4, 1, 2, 6], 6, 1, 3], [[5, 2, 4, 3, 6, 3], 6, 1, 5], [[4, 3, 5, 1, 3, 6], 6, 3, 4], [[5, 2, 1, 3, 1], 5, 0, 2], [[5, 2, 5, 1, 3, 2], 6, 0, 3], [[5, 2, 4, 1, 3, 6], 6, 0, 2], [[5, 7, 4, 1, 3, 3], 6, 0, 5], [[5, 2, 5, 1, 3, 6, 5], 7, 1, 2], [[4, 3, 5, 0, 3, 6], 6, 0, 4], [[4, 3, 5, 1, 3, 6], 6, 3, 5], [[5, 3, 5, 1, 2, 6], 6, 3, 5], [[5, 2, 5, 1, 3, 6, 5], 7, 2, 6], [[5, 2, 4, 1, 3, 5], 6, 3, 5], [[5, 2, 4, 1, 3, 1], 6, 2, 3], [[5, 2, 4, 2, 7, 5], 6, 1, 4]], "contract": "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(index, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 <= index < n, \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert index < k < n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n"}
{"task_id": "Mbpp/308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n", "entry_point": "large_product", "canonical_solution": "\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "base_input": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4], [[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5]], "atol": 0, "plus_input": [[[], [], 0], [[], [true, false, true, false, true, false, false, false, true], 0], [[], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true], [[-14, 95, true, true, 0, true, -93, 28, -100, -58], [], 0], [[-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, true, false, true, false, false, false, true], true], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 76.32506038662768, 61.017129591114184], 0], [[-14, 95, true, true, -93, true, -93, 28, -100, -58], [-14, 95, true, true, -93, true, -93, 28, -100, -58], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 90.10526865181693, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 90.10526865181693, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true], [[-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, false, true, false, false, false, true], true], [[-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, true, false, true, false, false, true], true], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184], 0], [[-14, 95, true, true, -93, -93, 28, -100, -58, -93], [-14, 95, true, true, -93, -93, 28, -100, -58, -93], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134], 0], [[], [true, true, false, true, false], 0], [[], [76.32506038662768, 90.10526865181693, -57.970016908086876, -42.35439740861899, 19.303378474526568, -94.00983646210564, -48.238387543008486, 12.442439811606093, -47.39685760879253, -1.0757677982592924], 0], [[-14, 95, -14, true, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, true, -93, -93, 28, -100, -58, -93], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134], [61.017129591114184, 19.303378474526568, 49.402419273875154, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 76.32506038662768], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 76.32506038662768], true], [[19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true], [[true, false, true, true, false, true, false, false, false], [true, false, true, true, false, true, false, false, false], true], [[true, false, true, true, false, true, true, false, false, false], [true, false, true, true, false, true, true, false, false, false], true], [[-77.26276055424799, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154, 55.36349167122134], [true, false, false, true, false, false, false, true], true], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], false], [[66.35944684304215, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, -7.635770536067829, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [66.35944684304215, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, -7.635770536067829, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true], [[true, false, true, true, false, true, false, false, false, false], [true, false, true, true, false, true, false, false, false, false], true], [[-14, 95, -14, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -93, -93, 28, -100, -58, -93], 0], [[true, false, true, true, true, false, false, false], [true, false, true, true, true, false, false, false], true], [[95, -14, true, true, -93, -93, 28, -100, -58, -93], [95, -14, true, true, -93, -93, 28, -100, -58, -93], 0], [[95, -14, true, -93, -93, 28, -100, -58, -93], [95, -14, true, -93, -93, 28, -100, -58, -93], 0], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184], 0], [[true, true, true, false, true, false, false, false, false], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768], 0], [[-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, true, false, true, false, false, true], false], [[19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], false], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, -22.555835342170255], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, -22.555835342170255], 0], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, 76.32506038662768], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, 76.32506038662768], 0], [[], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 112.20920115187234], 0], [[-14, 95, true, true, 0, true, -93, 28, -100, -58, true], [], 0], [[19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, -61.03464372753109], [19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, -61.03464372753109], false], [[-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, true, false, true, false, false], false], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, 49.402419273875154], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, 49.402419273875154], 0], [[-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, 61.017129591114184, -22.555835342170255], [61.017129591114184, 19.303378474526568, 49.402419273875154, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, 61.017129591114184, -22.555835342170255], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -57.970016908086876, -61.03464372753109, 76.32506038662768, 61.017129591114184, 6.408487552626596], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -57.970016908086876, -61.03464372753109, 76.32506038662768, 61.017129591114184, 6.408487552626596], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, -6.658136072450631], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, -6.658136072450631], 0], [[true, false, true, false, true, false, false, false], [-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], false], [[95, -14, true, true, true, -93, -93, 28, -100, -58, -93], [95, -14, true, true, true, -93, -93, 28, -100, -58, -93], 0], [[], [true, false, true, true, false, false, false, true], 0], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 61.017129591114184, 19.303378474526568], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 61.017129591114184, 19.303378474526568], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 76.32506038662768, 61.017129591114184, 49.639540048004385], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 76.32506038662768, 61.017129591114184, 49.639540048004385], 0], [[19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, -61.03464372753109], [19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, -61.03464372753109], true], [[49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184, 61.017129591114184], [49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184, 61.017129591114184], false], [[19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184], [19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184], true], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 55.36349167122134, 6.408487552626596, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, 61.017129591114184, -22.555835342170255], [61.017129591114184, 19.303378474526568, 49.402419273875154, 55.36349167122134, 6.408487552626596, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, 61.017129591114184, -22.555835342170255], 0], [[-77.26276055424799, -28.78853026959814, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, false, true, false, false, false, true], true], [[-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], 1], [[19.769719048548342, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, -22.555835342170255], [19.769719048548342, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, -22.555835342170255], 0], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 13.178142147598503, 61.017129591114184, 19.303378474526568], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 13.178142147598503, 61.017129591114184, 19.303378474526568], 0], [[-52], [], 0], [[49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184, 61.017129591114184], [49.402419273875154, -6.658136072450631, 6.408487552626596, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184, 61.017129591114184], false], [[true, true, true, false, true, false, false, false, false], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768], true], [[-77.26276055424799, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154], [true, false, false, true, false, false, false, true], true], [[-14, 95, -14, true, true, -93, -93, 28, -100, -58, -93, -100], [-14, 95, -14, true, true, -93, -93, 28, -100, -58, -93, -100], 0], [[-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154, -77.26276055424799], [-77.26276055424799, -31.02386956030803, 49.402419273875154, -88.93962961569308, 49.402419273875154, 19.303378474526568, 66.35944684304215, 55.36349167122134, 49.402419273875154, -77.26276055424799], true], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 5.990816988397153, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 5.990816988397153, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 49.59138385789621, 61.017129591114184, 49.639540048004385], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 49.59138385789621, 61.017129591114184, 49.639540048004385], 0], [[], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 19.005641938020904, -61.03464372753109, 76.32506038662768], 0], [[66.35944684304215, 19.303378474526568, 49.402419273875154, -12.40334912999206, 49.402419273875154, -6.658136072450631, 55.36349167122134, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [66.35944684304215, 19.303378474526568, 49.402419273875154, -12.40334912999206, 49.402419273875154, -6.658136072450631, 55.36349167122134, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true], [[-14, 95, -14, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, -100, true, -93, -93, 28, -100, -58, -93], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -57.970016908086876, -61.03464372753109, 76.32506038662768, 61.017129591114184, 6.408487552626596, 6.408487552626596], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -57.970016908086876, -61.03464372753109, 76.32506038662768, 61.017129591114184, 6.408487552626596, 6.408487552626596], 0], [[95, -14, true, true, 28, -93, -93, 28, -100, -58, -93], [95, -14, true, true, 28, -93, -93, 28, -100, -58, -93], 0], [[77, -52, 0], [], 0], [[95, -14, true, true, -93, -93, -100, -58, -93], [95, -14, true, true, -93, -93, -100, -58, -93], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 49.59138385789621, 61.017129591114184, 49.639540048004385], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 49.59138385789621, 61.017129591114184, 49.639540048004385], 1], [[61.017129591114184, 19.303378474526568, 55.10255163553033, 49.59138385789621, -6.658136072450631, 112.20920115187234, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 55.10255163553033, 49.59138385789621, -6.658136072450631, 112.20920115187234, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], 0], [[-14, 95, true, true, 0, true, -93, 28, -100, -58, true, 28], [28], 0], [[-14, 95, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, true, -100, true, -93, -93, 28, -100, -58, -93], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.10255163553033, 55.36349167122134, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, -6.658136072450631, 55.10255163553033, 55.36349167122134, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 5.982090879934751, 13.178142147598503, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 5.982090879934751, 13.178142147598503, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134], 0], [[], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 76.32506038662768], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -47.39685760879253, 5.990816988397153, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -47.39685760879253, 5.990816988397153, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, -22.555835342170255], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 55.36349167122134, -22.555835342170255], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 60.216017329793466, 49.59138385789621, 55.36349167122134, 6.408487552626596, -22.555835342170255, 49.639540048004385, -61.03464372753109, 76.32506038662768, 61.017129591114184], 0], [[true, false, true, true, true, false, true, false, false, false], [true, false, true, true, true, false, true, false, false, false], true], [[95, -14, true, true, -93, -93, -100, -58, -93], [95, -14, true, true, -93, -93, -100, -58, -93], true], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 90.10526865181693, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 49.402419273875154], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 90.10526865181693, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 49.402419273875154], true], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, 76.32506038662768, -22.555835342170255], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 76.32506038662768, 61.017129591114184, 76.32506038662768, -22.555835342170255], 0], [[-14, 95, true, true, 0, true, -93, 28, -100, -58, true], [90.10526865181693, -96.924424458794], 1], [[95, -14, true, true, -93, -93, 28, -100, -58, -93], [95, -14, true, true, -93, -93, 28, -100, -58, -93], 1], [[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 5.990816988397153, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 5.990816988397153, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true], [[], [76.32506038662768, 90.10526865181693, -57.970016908086876, -42.35439740861899, 19.303378474526568, -94.00983646210564, -48.238387543008486, 12.442439811606093, -47.39685760879253, -1.0757677982592924, -47.39685760879253], 0], [[19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 76.32506038662768, 61.017129591114184, 76.32506038662768, -22.555835342170255], [19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, 76.32506038662768, 61.017129591114184, 76.32506038662768, -22.555835342170255], 0], [[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 77.44468935934007, 6.408487552626596, 90.10526865181693, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 49.402419273875154], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 77.44468935934007, 6.408487552626596, 90.10526865181693, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184, 49.402419273875154], true], [[true, false, true, true, true, false, false], [true, false, true, true, true, false, false], true], [[-14, 95, true, true, 0, true, -93, 28, -100, -58, true], [-58, -93], 0], [[5.990816988397153, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 13.178142147598503, 61.017129591114184, 19.303378474526568], [5.990816988397153, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, 13.178142147598503, 61.017129591114184, 19.303378474526568], 0], [[61.017129591114184, 19.303378474526568, 60.216017329793466, -6.658136072450631, 55.36349167122134, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 60.216017329793466, -6.658136072450631, 55.36349167122134, -61.03464372753109, -22.555835342170255, 49.639540048004385, 76.32506038662768, 61.017129591114184], 0], [[55.10255163553033, -31.02386956030803, -55.93250431657819, 13.178142147598503, 60.216017329793466, -5.248447786683158, -94.00983646210564, -29.39237722608084, 77.44468935934007], [], 0]], "contract": "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n"}
{"task_id": "Mbpp/309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "entry_point": "maximum", "canonical_solution": "\ndef maximum(a,b):   \n    return max(a, b)\n", "base_input": [[5, 10], [-1, -2], [9, 7]], "atol": 0, "plus_input": [[3.14, 10.65], [-2.1, 0.9], [4.7, -3.8], [0, 10], [-10, 0], [0, 0], [-10000000000000000000000000, 1e-26], [-9876543210987654321098765, -1234567890123456789012345], [3.141592653589793, 3.141592653589793], [1.1808193778623197, 0.9], [0, 9], [3.141592653589793, 10.65], [0, -10], [-10000000000000000000000000, -1234567890123456789012345], [10.65, 10.65], [2.9618248823452746, 3.141592653589793], [1.2157775014136278, 0.6793588880224353], [-9999999999999999999999998, 0.9], [9, -1], [-10000000000000000000000000, 11], [0.9, 0.9], [11, 0.9], [3.141592653589793, 0.9], [-9876543210987654321098765, -9876543210987654321098765], [10, -10], [2.0531824740205407, 3.141592653589793], [9, 10], [0.6793588880224353, 2.0531824740205407], [-1234567890123456789012344, -1234567890123456789012345], [-10000000000000000000000000, -10000000000000000000000000], [3.141592653589793, 1.2157775014136278], [-1234567890123456789012345, -1234567890123456789012345], [11, -1234567890123456789012344], [1.5845776850148763, 0.9], [-9876543210987654321098765, 10], [-1, -10000000000000000000000000], [2.3167165662630365, 1.5845776850148763], [11, 12], [-9999999999999999999999997, 0.9], [3.7369883507451815, 3.141592653589793], [1.7912598325814533, 2.0531824740205407], [10, -1], [-1234567890123456789012345, -10000000000000000000000000], [3.141592653589793, 10.723965513304417], [10, -1234567890123456789012345], [1.2157775014136278, 1e-26], [10, 10], [-10000000000000000000000001, 1e-26], [3.489417024918704, 0.9], [-9999999999999999999999999, 0.9], [11.354840748288053, 2.484392829474946], [9, 9], [-10, -1234567890123456789012344], [1.5845776850148763, 1.5845776850148763], [-1234567890123456789012345, -9876543210987654321098765], [1.437569968606471, 0.9], [10, 9], [-1234567890123456789012344, -1234567890123456789012344], [11.354840748288053, 1e-26], [11, 13], [3.7369883507451815, 3.7484448127691747], [-10, -10], [1.437569968606471, 1.8110406201833071], [2.3167165662630365, 2.484392829474946], [1.2157775014136278, -2.1], [-0.030376207066556082, 7.499539649487587], [-2.1, 1.2157775014136278], [2, 1], [-1234567890123456789012345, -1], [1, -10000000000000000000000000], [3.141592653589793, 10.640794492137154], [-9999999999999999999999999, -10000000000000000000000000], [1, -9999999999999999999999997], [-2.1, -1.7697103312809708], [1, 1], [-9999999999999999999999999, -1234567890123456789012345], [-9999999999999999999999997, -9999999999999999999999997], [1.1808193778623197, 1.8110406201833071], [-9999999999999999999999999, 12], [3.141592653589793, 1.1808193778623197], [-1234567890123456789012346, -1234567890123456789012345], [0.8312079285541487, 1.2157775014136278], [3.141592653589793, 2.2911536081938935], [2.9618248823452746, 7.499539649487587], [1.7661199773658156, 2.2911536081938935], [2.9618248823452746, 3.7484448127691747], [-10, -9], [7.3022277742249955, 7.499539649487587], [1.898572449510145, 2.36750373246299], [3.141592653589793, 1.898572449510145], [2.9618248823452746, 2.9632529449641662], [-10, -1234567890123456789012345], [10, 2.9632529449641662], [11.042105761712191, 11.52667925889018], [12, -1234567890123456789012345], [2.36750373246299, 0.6793588880224353], [1, 10], [0, 13], [11, 11], [3.7369883507451815, 2.9632529449641662], [0.8312079285541487, 0.8312079285541487], [-9876543210987654321098766, -10000000000000000000000001], [4.0762338243861995, 3.141592653589793], [1.898572449510145, 1.898572449510145], [9, -11], [13, 12], [3.653195415338968, 3.141592653589793], [-1234567890123456789012345, 11], [-11, 0]], "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9\n"}
{"task_id": "Mbpp/310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "entry_point": "string_to_tuple", "canonical_solution": "\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n", "base_input": [["python 3.0"], ["item1"], ["15.10"]], "atol": 0, "plus_input": [[""], ["hello   world"], ["\u00e7\u00e8\u00ea\u00eb"], ["   Hello World!   "], ["   "], ["1234567890"], ["abcdefghijklmnopqrstuvwxyz"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["MixedCase123"], ["        "], ["\n\t"], ["   15.10   "], ["item1, item2, item3"], ["item2,"], ["abcdefghijklmnopqrstkuvwxpyz"], ["whelloorld"], ["whellooWorld!d"], ["whelloorled"], ["Hello"], ["   Hello World!      "], ["   Hello World!      \n\t"], ["item3"], ["hello   worlld"], ["h\u00e7\u00e8\u00ea\u00ebello   worlld"], ["item3 "], ["abcd   Hello World!      efghijklmnopqrstuvwxyz"], ["hello   item3 world"], [" 10   "], ["ite"], ["hello   item3 15.10ld"], ["hello    wMixedCase123orld"], ["item1e,"], [" 1item3 0   "], ["\u00e7\u00ea\u00eb"], [" 100   "], ["hello 5  item3 15.10ld"], ["abcdefghhijklmnopqrstkuvwxpyz"], ["iteworlldm3"], ["05"], ["tite"], [" 100  efghijklmnopqrstuvwxyz"], ["055"], ["itemi3"], ["hello   wo 1item3 0   ld"], ["itemabcdefghwhelloorldhijklmnopqrstkuvwxpyz3 "], ["5ite"], ["    "], ["world"], ["   515.10   "], ["1 100   "], ["itemi33"], ["100"], ["\u00e7\u00e8whelloorld\u00ea\u00eb"], ["\u00e7\u00e8whelloorlld\u00ea\u00eb"], ["worlld"], ["\u00e7\u00ebitemi33"], ["1234wMixedCase123orld567890"], ["it33"], ["h\u00e7\u00e8\u00ea\u00ebello   whelloorldworlld"], ["abcdefghijitem1, item2, item3klmnopqrstuvwxyz"], ["abcd worlld  Hello World!      efghijklmnopqrstuvwxyz"], ["whelllooWorld!d"], ["item1, item2, iteem3"], ["hello   item3 15 .10ld"], ["10"], ["worworlldlld"], ["itemabcdefghwhelloorldhijklmnopqrstkuvwxpyz3"], ["ABCDEFGHIJKLMNOPQRSTUVWXY"], ["abcdefghijitem1, item2, iitem1,klmnopqrstuvwxyz"], ["   He  itemabcdefghwhelloorldhijklmnopqrstkuvwxpyz3 "], ["\n\n\t"], ["0whelloorled"], [" 1 0   "], ["hello   item3 15 .10l"], ["\u00e7\u00ea\u00ea\u00eb"], ["Mixe2dCase123"], ["whelllooWorldo!d"], ["   Hello World! tem3      \n\t"], ["hello   item3  15 .10ld"], ["ite10"], ["hello1234wMixedCase123orld567890   item3 15 .10l"], ["ABCDEFMNOPQRSTUVWXYZ"], ["h\u00e7\u00e8\u00ea\u00ebtiteello   whelloorldworlld"], ["whe    lloorlld"], ["tem3"], ["worl"], ["055item1,"], ["1"], ["12364567890"], ["hello1234wMixedCase123orld567890"], ["h\u00e7\u00e8\u00ea\u00ebello    Hello World! tem3      \n\t  worllld"], ["hello   item3 wor ld"], ["h4ello1234wMixedCase123orld567890   item3 15 .10l"], ["MixedCi"], ["15.10"], ["15..10"], ["12364567890ite"], ["hello   item3t wor ld"], ["item3i3"], ["abcdefghijitem1, item2, iitelmnopqrstuvwxyz"], ["hello   item3 15 .1iitelmnopqrstuvwxyz0l"], [".10hello   worldld"], ["h4ello1234wMixedCase123orld567890   itemtite.10l"], ["worldld"], ["abefghijklmnopqrstuvwxyz"], ["abcdefzghijklmnopqrstkuvwxpyz"], ["QkkSNfeX"], ["h\u00e7\u00e8\u00ea\u00ebtiteello"], ["hello    wMixeodCase123orld"], ["imtemi3"], [" 110   "], [".10ldMisxe2dCase123"], [" 10   1234567890"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n"}
{"task_id": "Mbpp/311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "entry_point": "set_left_most_unset_bit", "canonical_solution": "\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n", "base_input": [[10], [12], [15]], "atol": 0, "plus_input": [[125], [255], [1000], [98765], [1], [3], [5], [7], [9], [0], [8], [true], [124], [1001], [98764], [10], [92], [2], [false], [254], [127], [128], [6], [123], [98766], [4], [122], [1002], [126], [1003], [129], [130], [1004], [67], [253], [68], [69], [70], [98767], [98768], [121], [11], [31], [1005], [120], [91], [252], [131], [132], [66], [12], [119], [999], [28], [98769], [251], [89], [256], [29], [98770], [30], [32], [117], [257], [118], [33], [46], [90], [47], [250], [87], [94], [133], [116], [49], [27], [50], [93], [35], [34], [258], [71], [72], [1006], [86], [115], [36], [21], [51], [48], [114], [73], [259], [98763], [98771], [95], [113], [52], [26], [53], [260], [261], [25], [249], [13], [24], [262], [88], [23]], "contract": "\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n"}
{"task_id": "Mbpp/312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n", "entry_point": "volume_cone", "canonical_solution": "\nimport math\ndef volume_cone(r,h):\n  return (1.0 / 3) * math.pi * r * r * h\n", "base_input": [[5, 12], [10, 15], [19, 17]], "atol": 0.0001, "plus_input": [[3.5, 8.2], [2.2, 4.7], [6.9, 2.3], [1000, 2000], [1.234, 5.678], [10.567, 7.89], [456.789, 123.456], [987.654, 321.098], [10.567, 10.567], [987.654, 3.5], [10.567, 1.234], [456.3381444428326, 123.456], [456.789, 3.5], [1.234, 1.234], [321.098, 168.94178585748298], [10.062162623290103, 10.062162623290103], [456.789, 5.678], [456.789, 388.7528921290703], [456.789, 4.222046540766119], [987.654, 3.3318554794950845], [11.081962312637511, 11.081962312637511], [1.234, 1.8683657303042116], [1.7994502519997089, 1.6146639261873168], [418.9192385760365, 5.678], [418.9192385760365, 2.3], [456.789, 4.928071889937876], [3.212703762340813, 2.3], [7.6622497831772085, 7.89], [2.378587054952834, 4.7], [10.062162623290103, 456.3381444428326], [987.654, 6.9], [1.7994502519997089, 4.928071889937876], [987.654, 2.705632224815191], [1.88487391345283, 3.5], [4.973822145742326, 5.678], [1.234, 2.2], [1.234, 8.2], [1.88487391345283, 7.89], [418.9192385760365, 2.1821425592540242], [7.6622497831772085, 123.456], [3.5, 5.307457074898993], [3.212703762340813, 3.212703762340813], [7.89, 10.999978928538894], [123.456, 122.94268835587204], [1.234, 1.0143813429712258], [4.462763515521088, 4.928071889937876], [4.886498233097042, 4.886498233097042], [5.678, 5.678], [8.164810097091653, 7.6622497831772085], [14.696773684181256, 4.7], [2.4747825820340905, 2.3], [10.567, 7.194070932537068], [7.89, 4.886498233097042], [7.6622497831772085, 183.12244565865572], [122.8191510847481, 117.12499057645937], [5.722833818810574, 2.1821425592540242], [7.89, 4.195516279600971], [4.462763515521088, 1.7994502519997089], [4.195516279600971, 168.94178585748298], [456.3381444428326, 388.7528921290703], [4.584255552437924, 2.3], [1.7803467811689282, 1.6146639261873168], [10.567, 321.098], [3.930531091978424, 4.7], [3.930531091978424, 1.0143813429712258], [3.5, 3.5], [1.0725091193999579, 1.0143813429712258], [1.88487391345283, 3.3318554794950845], [4.462763515521088, 1.3297034614252445], [0.5561103655828992, 1.0143813429712258], [10.999978928538894, 4.195516279600971], [4.615962386993007, 2.1821425592540242], [11.980439670399893, 7.787216662850671], [1.474604255550374, 5.184525170511173], [6.695658956768952, 6.695658956768952], [1.3834538242508858, 1.88487391345283], [17.146104995225684, 456.3381444428326], [4.886498233097042, 1.8683657303042116], [1.88487391345283, 4.615962386993007], [12.052676270488469, 14.696773684181256], [17.146104995225684, 7.89], [123.456, 122.84983443418058], [388.7528921290703, 1.234], [0.5561103655828992, 122.86850838444352], [456.789, 1.6616184514399182], [418.9192385760365, 8.2], [1.0725091193999579, 16.746701140899006], [true, true], [2.8997575884253255, 987.654], [6.695658956768952, 1.8683657303042116], [2.4484913418894525, 3.5], [456.789, 3.1688227707140735], [456.789, 2.4747825820340905], [7.6622497831772085, 4.973822145742326], [456.3381444428326, 456.3381444428326], [4.973822145742326, 388.7528921290703], [5.722833818810574, 12.052676270488469], [987.654, 2.099492328965713], [7.89, 4.928071889937876], [2.4747825820340905, 122.84983443418058], [10.567, 456.8519227964984], [1.88487391345283, 2.2], [4.886498233097042, 3.212703762340813], [3.776854528744753, 4.321001736599134], [1.544964412295513, 2.2], [456.3381444428326, 1.0143813429712258], [418.9192385760365, 418.9192385760365], [6.695658956768952, 4.886498233097042]], "contract": "\n  assert isinstance(r, (int, float)) and r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)\n"}
{"task_id": "Mbpp/388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "entry_point": "highest_Power_of_2", "canonical_solution": "\ndef highest_Power_of_2(n): \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n", "base_input": [[10], [19], [32]], "atol": 0, "plus_input": [[1], [1000000], [987654321], [987654320], [999999], [987654319], [2], [987654322], [999998], [1000001], [987654323], [4], [3], [1000002], [1000003], [987654324], [true], [987654318], [1000005], [1000004], [40], [987654325], [999997], [39], [10], [1000006], [1000007], [999996], [999995], [42], [1000008], [987654326], [987654317], [987654327], [987654316], [38], [9], [11], [8], [12], [999994], [70], [7], [37], [5], [69], [36], [1000009], [987654315], [999993], [35], [34], [13], [41], [6], [43], [1000010], [33], [987654328], [44], [987654329], [32], [45], [14], [71], [999992], [1000011], [1000012], [987654314], [1000013], [68], [72], [1000014], [77], [78], [67], [66], [73], [47], [48], [987654312], [91], [79], [15], [65], [987654330], [987654331], [987654332], [987654311], [49], [46], [987654313], [1000015], [64], [16], [90], [31], [80], [74], [987654333], [999991], [50], [63]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n"}
{"task_id": "Mbpp/389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n", "entry_point": "find_lucas", "canonical_solution": "\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n", "base_input": [[9], [4], [3]], "atol": 0, "plus_input": [[15], [20], [25], [30], [0], [1], [2], [10], [true], [false], [19], [11], [24], [26], [16], [31], [18], [9], [32], [3], [33], [29], [27], [28], [8], [17], [4], [7], [21], [12], [23], [22], [14], [13], [6], [5]], "contract": "\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n"}
{"task_id": "Mbpp/390", "prompt": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n", "entry_point": "add_string", "canonical_solution": "\ndef add_string(list_, string):\n    return [string.format(i) for i in  list_]\n", "base_input": [[[1, 2, 3, 4], "temp{0}"], [["a", "b", "c", "d"], "python{0}"], [[5, 6, 7, 8], "string{0}"]], "atol": 0, "plus_input": [[[], "format{0}"], [[1, "two", 3, "four"], "item_{0}"], [[9], "element{0}"], [[], ""], [["apple", 2, [3, "orange", [4, "banana"], 5], "mango"], "fruit_{0}"], [[2, [3, "orange", [4, "banana"], 5], "mango"], "fruit_{0}"], [[[3, "orange", [4, "banana"], 5], "mango"], "fruitorange_{0}"], [[3, 1, 3], "format{0}"], [[[3, [4, "element{0}"], "orange", [4, "element{0}"], 5], [3, [4, "element{0}"], "orange", [4, "element{0}"], 5], "mango"], "fruitorange_{0}"], [[2, [3, "orange", [4, "banana"], 5], "mango"], "fruitorange_{0}"], [[3, 1, 3, 1], "format{0}"], [["mafourngo", 2, [3, "orange", [4, "banana"], 5], "mango"], "fruit_{0}"], [[[3, "orange", [4, "banana"], 5], "mango"], "fruittorange_{0}"], [[3, 1, 2, 3, 1], "format{0}"], [["mafourngo", 2, [3, "orange", [4, "banana"], 5], "mango"], "fruittorange_{0}"], [[3, 1, 2, 1, 3, 1], "format{0}"], [[[3, [4, "element{0}"], "orange", [4, "element{0}"], 5], [3, [4, "element{0}"], "orange", [4, "element{0}"], 5], "mango", [3, [4, "element{0}"], "orange", [4, "element{0}"], 5]], "format{0}"], [[2, "mo", [3, "orange", [4, "banana"], 5], "mango"], ""], [[2, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango"], "fruit_{0}"], [[2, "mo", [3, "orange", [4, "banana"], 5], "mango"], "two"], [[3, 1, 3], "fruit_{0}"], [[2, "fruitorange_{0}", [3, "orange", [4, "banana"], 5], "mango"], "orange"], [[3, 1, 3], "fruit_element{0}{0}"], [[], "element{0}"], [[9], "elformat{0}ement{0}"], [[3, 1, 2, 3, 1], "item_{0}"], [[3, 1, 2, 3, 1], "fformat{0}"], [[3, 1], "fruit_element{0}{0}"], [["mafourngo", 2, [3, "orange", [4, "banana"], 5], "manelement{0}go"], "fruit_{0}"], [[2, "fruitorange_{0}", [3, "orange", [4, "banana"], 5], "mango"], "orangge"], [["mafourngo", "magngo", 2, [3, "orange", [4, "banana"], 5], "mango"], "fruit_{0}"], [[2, [3, "orange", [4, "banana"], 5], "mafourngo"], "fruit_{0}"], [[3, 1, 3], "formappleat{0}"], [[3, 1, 2, 3, 1], "fruit_{0}"], [[[3, "orange", [4, "banana"], 5], "mango", "mango"], "fruitorange_{0}"], [[1, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango"], "fruit_{0}"], [[2, [3, "orange", [4, "banana"], 5], "mango"], "fruitornge_{0}"], [[3, 1, 3, 3], "format{0}"], [[3, 1, 3, 3], "formamagngot{0}"], [[1, 3], "fruit_element{0}{0}"], [[3, 2, 3, 1], "four"], [["mafourngo", 2, [3, "orange", [4, "banana"], 5], "mango", "mafourngo"], "fruit_{0}"], [[2, "fruitorange_{0}", [3, "orange", [4, "banana"], 5], "mango"], "orangelformat{0}ement{0}ge"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016, 8.963897856760099], "element{0}"], [[3, 1, 2, 3, 5, 2], "forangeormat{0}"], [[2, "fruitorange_{0}", [3, "orange", [4, "banana"], 5], 9, "mango", "fruitorange_{0}"], "orangelformat{0}ement{0}ge"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016], "element{0}"], [[3, 0, 2, 2, 3, 1], "manfruitorange_{0}o"], [[2, "fruitorange_{0}", [3, "orange", [4, "banana"], 5], 9, "mango", "fruitorange_{0}", 9], "orangelformat{0}ement{0}ge"], [[2, [3, "orange", [4, "banana"], 5], 0, "mango"], "fruitorange_{0}"], [[3, 1, 3, 1, 3], "format{0}"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016, 8.963897856760099, -1.103432736060796], "element{0}"], [[2, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango"], "fruiut_{0}"], [["fruitorange_{0}", [3, "orange", [4, "banana"], 5], "mango"], "orange"], [["fruitorange_{0}", [3, "orange", [4, "banana"], 5, "orange"], "mango"], "orange"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016], "eletwoment{0}"], [[2, "fruitorange_{0}", [3, "orange", [4, "banana"], 5], "mango"], "fruittorange_{0}"], [["mafourngo", 2, [3, "orange", [4, "banana"], 5], "manelement{0}go", 2], "fruit_{0}"], [[3, 1, 3, 3, 3, 3], "formamagngot{0}"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016, 8.963897856760099, -1.103432736060796, -20.472707728369016], "element{0}"], [[3, 1, 3, 3], "formaelformat{0}ement{0}t{0}"], [[65.38356734647485, {"5": -38.15549188624485, "0": 77.08571014199265, "72": 26.909869216336247, "-79": -59.110541980068355, "19": -38.15549188624485, "94": -5.540379742792084, "4": -9.108805577472495, "2": 53.05257624758963}, [0, 4], "orange", false, {"-20.472707728369016": 1, "-18.449283331918025": 10}, [-31, 90, 93.5906374974764, null, true, 5, ["fruitornge_{0}"], false, true], ["mafourngo", "xd", "AOqy", "magngo", "", "elformat{0}ement{0}", "UYjd", "mafourngo", "fruit_element{0}{0}"], "ocuNQbFmSX"], "fruiut_{0}"], [["mafourngo", 2, [3, "orange", [4, "banana"], 5], "mango"], "two"], [[3, 72, 3, 1], "format{0}"], [[2, [3, "orange", [4, "banana"], 5], "mango", 2], "fruitorange_{0}"], [[3, 1, 3, 3], "two"], [["mafourngo", "magngo", 2, [3, "orange", [4, "banana"], 5], "fruiut_{0}", "mango"], "fruit_{0}"], [["mango"], "fruittorange_{0}"], [["mafourngo", 2, "mafourgo", [3, "orange", [4, "banana"], 5], "manelement{0}go"], "apple"], [["mao", "fruitornge_{0}", "mango"], "fruittorange_{0}"], [[-54.79207046236099, -59.110541980068355, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016], "eletwometnt{0}"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016, 8.963897856760099, -1.103432736060796, -20.472707728369016, 8.963897856760099], "formappleat{0}"], [[2, "man", "mango", [3, "orange", [4, "banana"], 5, [4, "banana"]], "mango"], "fruittorange_{0}"], [[[3, "orange", [4, "banana"], 5], "mango"], "fruittorangmantgoe_{0}"], [[[3, "orange", [4, "banana"], 5], "mango", "mango"], "fruitorangmanfruitorange_{0}oe_{0}"], [[[3, "orange", [4, "banana"], 5, 5], 2, [3, "orange", [4, "banana"], 5, 5], "mango"], "fruit_{0}"], [[2, [3, "orange", [4, "banana"], 5], "mafourngo"], "formaelformat{0}ement{0}t{0}"], [[[3, [4, "element{0}"], "orange", [4, "element{0}"], 5], "mango"], "fruitorange_{0}"], [[3, 1, 3, 3], "tmanfruitorange_{0}oo"], [[3, 0, 2, 2, 2, 3, 1], "manfruitorange_{0}o"], [["formamagngot{0}", 2, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango", [3, "orange", [4, "banana"], 5]], "fruiut_{0}"], [[3, 2, 0, 2, 2, 3, 1, 2, 1, 2], "manfruitorange_{0}o"], [[2, 0, 2, 2, 3, 1, 2, 1, 2, 2], "manfruitorange_{0}o"], [[3, 0, 1, 3, 3], "formaelformat{0}ement{0}t{0}"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016, 8.963897856760099, -1.103432736060796, -20.472707728369016], "elelment{0}"], [[3, 1, 1, 1, 3, 1], "tformat{0}"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.472707728369016, 8.963897856760099], "elemelnt{0}"], [["formamagngot{0}", 2, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango", [3, "orange", [4, "banana"], 5]], "formappleat{0}"], [[2, "mo", [3, "orange", [4, "banana"], 5], "mango"], "wtwo"], [[3, 1, 3, 3], "formaelformat{0}emment{0}t{0}"], [[65.38356734647485, {"5": -38.15549188624485, "0": 77.08571014199265, "72": 26.909869216336247, "-79": -59.110541980068355, "19": -38.15549188624485, "94": -5.540379742792084, "4": -9.108805577472495, "2": 53.05257624758963}, [0, 4], "orange", false, {"-20.472707728369016": 1, "-18.449283331918025": 10}, [-31, 90, 93.5906374974764, null, true, 5, ["fruitornge_{0}"], false, true], ["mafourngo", "xd", "AOqy", "magngo", "", "elformat{0}ement{0}", "UYjd", "mafourngo", "fruit_element{0}{0}"], "ocuNQbFmSX"], "apple"], [[2, [3, "orange", [4, "banana"], 5], "mango"], ""], [["mafourngo", 2, "mafourgo", [3, "orange", [4, "banana"], 5], "manelement{0}go"], "appltmanfruitorange_{0}ooe"], [[[3, "", [4, "banana"], 5], "formamagngot{0}", 2, "manfruitorange_{0}o", [3, "", [4, "banana"], 5], "mango", [3, "", [4, "banana"], 5]], "formapplet{0}"], [[30.380744152211463, -1.103432736060796], "four"], [[-54.79207046236099, -1.103432736060796, -5.540379742792084, 30.380744152211463, -38.15549188624485, -20.177981698336826, 8.963897856760099], "eletwoment{0}"], [[2, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango", "manfruitorange_{0}o"], "fruiut_{0}"], [[1, "manfruitorange_{0}o", [3, "orange", [4, "banana"], 5], "mango"], "tmanfruitorange_{0}oo"], [[], "orangelformat{0}ement{0}ge"], [["mafourngo", 2, [3, "orange", "fruit_element{0}{0}", [4, "banana"], 5], "mango"], "two"], [["mafourngo", "magngo", 2, [3, "orange", [4, "banana"], 5], "fruiut_{0}", "mango", "mafourngo"], "fruit_{0}"], [[2, "mafourgo", [3, "orange", [4, "banana"], 5], "manelement{0}go", "manelement{0}go"], "appltmanfruitorange_{0}ooe"], [[2, [3, "orange", [4, "banana"], 5], "mafourngo"], "fruit_elelment{0}{0}"], [[3, 2, 0, 2, 2, 3, 1, 2, 1, 2], "formapplet{0}"], [["mafournfruitorange_{0}go", 2, [3, "orange", [4, "banana"], 5], "mango", "mafourngo"], "fruiut_{0}"]], "contract": "\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n"}
{"task_id": "Mbpp/391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n", "entry_point": "convert_list_dictionary", "canonical_solution": "\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n", "base_input": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [85, 98, 89, 92]], [["abc", "def", "ghi", "jkl"], ["python", "program", "language", "programs"], [100, 200, 300, 400]], [["A1", "A2", "A3", "A4"], ["java", "C", "C++", "DBMS"], [10, 20, 30, 40]]], "atol": 0, "plus_input": [[["abc", "def", "ghi", "jkl"], ["python", "program", "language", "programs"], [{"1": "a", "2": "b"}, {"3": "c"}, 4, ["x", "y", "z"]]], [["A1", "A2", "A3", "A4"], [10, 20, 30, 40], [["a", "b"], ["c", "d", "e"], [1, 2, 3, 4], {"x": 1, "y": 2}]], [["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [[], [], []], [[], [], ["qePIokPMx", -88.68963858646266, false, 92.17031809189785, 20]], [[], [false, true, false, true, true, false, false], []], [["python", "program", "lMarshanguage", "programs"], ["python", "program", "lMarshanguage", "programs"], ["python", "program", "lMarshanguage", "programs"]], [[], [92.17031809189785], []], [[10, 20, 30, 40, 20], [10, 20, 30, 40, 20], [["a", "b"], [1, 2, 3, 4], {"x": 1, "y": 2}]], [[false, true, false, true, true, false, false], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266], [false, true, false, true, true, false, false]], [[false, true, false, true, true, true], [false, true, false, true, true, true], [false, true, false, true, true, true]], [[92.17031809189785], ["Adina", "Boyle"], []], [[81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266], [true, false, true, false, false], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266]], [[true, true, false, false, true], [], []], [["python", "lMarshanguage", "programs"], ["python", "lMarshanguage", "programs"], ["python", "lMarshanguage", "programs"]], [[20, 4, -85, -8, 20, 5, 73, 13, 2], [], [20, 4, -85, -8, 20, 5, 73, 13, 2]], [["S001", "S002", "S003", "S00", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [[], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20]], [["qePIokPMx", -88.68963858646266, 92.17031809189785, 20], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20], []], [[false, true, false, true, false], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20]], [[], [92.17031809189785, 92.17031809189785], [true, true, false, false, false]], [[], [], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20]], [[10, 20, 30, 40, 20], [10, 20, 30, 40, 20], [["a", "b"], [1, 3, 3, 4], [1, 3, 3, 4], {"x": 1, "y": 2}]], [["qePIokPMx", 92.17031809189785, 20], ["qePIokPMx", 92.17031809189785, 20], ["qePIokPMx", 92.17031809189785, 20]], [["S001", "S002", "S003", "S00", "S004", "S003"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [[92.17031809189785], [], [92.17031809189785]], [["d", "A3", "RaU", "Park", "A3", "ffyPs", "Duncan", "Leyton"], [false, true, false, true, true, false, false], []], [["A1", "A2", "A3", "A4"], [10, 20, 30, 40], [["a", "b"], ["c", "d", "e"], {"x": 1, "y": 2}]], [[81.68418398262912, -91.09614035628569, 57.03263542097301, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266], [81.68418398262912, -91.09614035628569, 57.03263542097301, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266], [81.68418398262912, -91.09614035628569, 57.03263542097301, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266]], [[false, true, false, true, true, false, true], [81.68418398262912, -29.92530843974366, 91.9700693495451, 3.8439202491777706, -2.811244688688049, -91.09614035628569, 92.17031809189785, 37.75918765306639, 37.75918765306639, -44.15533537486549], []], [["S001", "S002", "S003", "S00", "S004"], ["x", "Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [["python", "programs"], ["python", "programs"], ["python", "programs"]], [["abc", "def", "ghi", "jkl"], ["python", "program", "lganguage", "language", "programs"], [{"1": "a", "2": "b"}, {"3": "c"}, 4, ["x", "y", "z"]]], [["qePIokPMx", 92.17031809189785, 20, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785]], [[false, true, false, true, true, true, false], [false, true, false, true, true, true, false], [false, true, false, true, true, true, false]], [["qePIokPMx", 20, 92.17031809189785], ["qePIokPMx", 20, 92.17031809189785], ["qePIokPMx", 20, 92.17031809189785]], [[false, true, false, true, true, true, true], [false, true, false, true, true, true, true], [false, true, false, true, true, true, true]], [["Duncan Boyle", -88.68963858646266, 92.17031809189785, 20], ["Duncan Boyle", -88.68963858646266, 92.17031809189785, 20], ["Duncan Boyle", -88.68963858646266, 92.17031809189785, 20]], [["S001", "S002", "S003", "S00", "S004"], ["x", "Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["x", "Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"]], [["def", "Duncan Boyle", "ghi", "jkl"], ["def", "Duncan Boyle", "ghi", "jkl"], ["python", "Saim Richards", "lganguage", "language", "programs"]], [["Duncan Boyle", -88.68963858646266, -91.09614035628569, 19], ["Duncan Boyle", -88.68963858646266, -91.09614035628569, 19], ["Duncan Boyle", -88.68963858646266, -91.09614035628569, 19]], [[false, true, false, true, true, false, true], [81.68418398262912, 3.8439202491777706, -29.92530843974366, 91.9700693495451, 3.8439202491777706, -2.811244688688049, -91.09614035628569, 92.17031809189785, 37.75918765306639, 37.75918765306639, -44.15533537486549], []], [[92.39137694572081, 92.17031809189785], [], [92.39137694572081, 92.17031809189785]], [["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, "qePIokPMx", "qePIokPMx"], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, "qePIokPMx", "qePIokPMx"], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, "qePIokPMx", "qePIokPMx"]], [["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}, [1, 2, 3]]], [["x", "Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Leyton Marsh", "x"], ["x", "Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Leyton Marsh", "x"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [["S001", "S00Leyton2", "S003", "S00", "S004"], ["S001", "S00Leyton2", "S003", "S00", "S004"], ["x", "def", "Leyton Marsh", "Duncan Boyle", "Saim Richards"]], [["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}, {"a": "x", "b": "y", "c": "z"}]], [["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, 92.17031809189785]], [["qePIokPMx", 92.17031809189785, 20], ["qePIokPMx", 92.17031809189785, 20], []], [["Leyton Marsh", "def", "Duncan Boyle", "Saim Richards"], ["Leyton Marsh", "def", "Duncan Boyle", "Saim Richards"], ["S001", "S00Leyton2", "S003", "S00", "S004"]], [[81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, 57.03263542097301, -2.5121677165315077, -88.68963858646266], [true, false, true, false, false], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, 37.75918765306639, 57.03263542097301, 57.03263542097301, -2.5121677165315077, -88.68963858646266]], [[92.17031809189785], ["Adina", "Boyle"], [-17, 3, 10]], [[], [92.17031809189785, 92.17031809189785], [true, true, false, false, false, false]], [[true, false, true, false, true, true, false, true], [-105.42260580914375, 81.68418398262912, 3.8439202491777706, -29.92530843974366, 91.9700693495451, 3.8439202491777706, -2.811244688688049, -91.09614035628569, 92.17031809189785, 37.75918765306639, 37.75918765306639, -44.15533537486549], []], [["Adina Park", "Leyton Marsh", "Duncan Boyle"], ["Adina Park", "Leyton Marsh", "Duncan Boyle"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [["qePIokPMx", 92.17031809189785, 1, 92.17031809189785, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 1, 92.17031809189785, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 1, 92.17031809189785, 92.17031809189785]], [["qePIokPMx", 56.8935355233056, 92.17031809189785, 20, 92.17031809189785, 92.17031809189785, 92.17031809189785], ["qePIokPMx", 56.8935355233056, 92.17031809189785, 20, 92.17031809189785, 92.17031809189785, 92.17031809189785], ["qePIokPMx", 56.8935355233056, 92.17031809189785, 20, 92.17031809189785, 92.17031809189785, 92.17031809189785]], [["Duncan Boyle", 92.17031809189785, 2], ["Duncan Boyle", 92.17031809189785, 2], ["Duncan Boyle", 92.17031809189785, 2]], [[], [false, true, false, true, true, false, true, false], []], [["Adina Park", "ghi", "a", "S004", "oVDxoixzW", "IjKiPHTZYR"], [74.62440942155206, -24.89013707770465, 10, 13, -105.42260580914375, "program"], []], [["S001", "S002", "S003", "S004"], ["Adina Park", "qePIokPMx", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]], [[-99.76860339291179, 39.84690584810048, 62.189883068165244, 48.27284080844191, -76.69894057820215, -0.5834249281476502, 12.15338911271509, 8.777721336176342, -78.25134314005295, 92.39137694572081, 12.15338911271509], [], []], [["qePIokPMx", 92.17031809189785, 20, 20], ["qePIokPMx", 92.17031809189785, 20, 20], ["qePIokPMx", 92.17031809189785, 20, 20]], [["def", "Duncan Boyle", "ghi", "jkl"], ["def", "Duncan Boyle", "ghi", "jkl"], ["def", "Duncan Boyle", "ghi", "jkl"]], [[-91.09614035628569, 92.17031809189785], [-91.09614035628569, 92.17031809189785], []], [[], [92.17031809189785], [92.17031809189785]], [["Duncan Boyle", 2], ["Duncan Boyle", 2], ["Duncan Boyle", 2]], [[-88.68963858646266, 92.17031809189785, 20, 20], [-88.68963858646266, 92.17031809189785, 20, 20], [-88.68963858646266, 92.17031809189785, 20, 20]], [[81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, -29.92530843974366, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266, -88.68963858646266], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, -29.92530843974366, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266, -88.68963858646266], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, -29.92530843974366, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266, -88.68963858646266]], [["python", "programs", "python"], ["python", "programs", "python"], ["python", "programs", "python"]], [[], [92.17031809189785, 92.17031809189785], [92.17031809189785, 92.17031809189785]], [[], [-13.280024492899287, -2.811244688688049, 92.39137694572081, 75.06000739007223, -2.811244688688049, 62.189883068165244, -2.811244688688049, -67.07829122649602, 37.75918765306639, -0.5834249281476502], ["qePIokPMx", -88.68963858646266, false, 92.17031809189785, 20]], [["S001", "S002", "S003", "S004"], ["Adina Park", "qePIokPMx", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Duncan Boyle"], ["Adina Park", "qePIokPMx", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Duncan Boyle"]], [[81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, -29.92530843974366, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266, -88.68963858646266, -88.68963858646266, -29.92530843974366], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, -29.92530843974366, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266, -88.68963858646266, -88.68963858646266, -29.92530843974366], [81.68418398262912, -91.09614035628569, -99.76860339291179, -88.68963858646266, -88.68963858646266, -29.92530843974366, 37.75918765306639, 57.03263542097301, -2.5121677165315077, -88.68963858646266, -88.68963858646266, -88.68963858646266, -29.92530843974366]], [["qePIokPMx", -88.68963858646266, "S00Leyton2", 92.17031809189785, 20], [], ["qePIokPMx", -88.68963858646266, "S00Leyton2", 92.17031809189785, 20]], [["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, 92.17031809189785, "qePIokPMx"], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, 92.17031809189785, "qePIokPMx"], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785, 92.17031809189785, "qePIokPMx"]], [["S001", "S002", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}, [1, 2, 3]]], [["S001", "S002", "S004"], ["S002", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["S002", "Leyton Marsh", "Duncan Boyle", "Saim Richards"]], [["A1", "A2", "A3", "A4"], [10, 20, 30, 40], [["a", "b"], ["c", "d", "e"], {"y": 2}]], [[10, 20, 30, 40, 20], [10, 20, 30, 40, 20], [10, 20, 30, 40, 20]], [["S002", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["S002", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["S002", "Leyton Marsh", "Duncan Boyle", "Saim Richards"]], [["programs", "python"], ["programs", "python"], ["programs", "python"]], [["qePIokPMx", -88.68963858646266, "c", "S00Leyton2", 92.17031809189785, 20], [], ["qePIokPMx", -88.68963858646266, "c", "S00Leyton2", 92.17031809189785, 20]], [[-99.76860339291179, 39.84690584810048, 62.189883068165244, 48.27284080844191, -76.69894057820215, -0.5834249281476502, 12.15338911271509, 8.777721336176342, -78.25134314005295, 92.39137694572081, 12.15338911271509], [], ["IjKiPHTZYR", "", "BMI", "bBRSnEOt"]], [["S002", "A4", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["S002", "A4", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], ["S002", "A4", "Leyton Marsh", "Duncan Boyle", "Saim Richards"]], [["qePIokPMx", 20, 119.11950781083245, 92.17031809189785, 20], ["qePIokPMx", 20, 119.11950781083245, 92.17031809189785, 20], ["qePIokPMx", 20, 119.11950781083245, 92.17031809189785, 20]], [["BMI", "Adina Park", "qePIokPMx", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Duncan Boyle", "qePIokPMx"], ["BMI", "Adina Park", "qePIokPMx", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Duncan Boyle", "qePIokPMx"], ["BMI", "Adina Park", "qePIokPMx", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "Duncan Boyle", "qePIokPMx"]], [["qePIokPMx", 20], ["qePIokPMx", 20], ["qePIokPMx", 20]], [[11, 20, 30, 13, 20, 13], [11, 20, 30, 13, 20, 13], [11, 20, 30, 13, 20, 13]], [["def", "Duncan Boyle", "ghi", "jkl"], ["def", "Duncan Boyle", "ghi", "jkl"], ["python", "Saim Richards", "lganguage", "programs"]], [[false, false, true, true, true, false, false], [false, false, true, true, true, false, false], [false, false, true, true, true, false, false]], [["qePIokPMx", 92.17031809189785, 20, 92.17031809189785], ["qePIokPMx", 92.17031809189785, 20, 92.17031809189785], []], [["qePIokPMx", -88.68963858646266, 92.17031809189785, 20, 20], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20, 20], ["qePIokPMx", -88.68963858646266, 92.17031809189785, 20, 20]], [[], [-13.280024492899287, 92.39137694572081, 75.06000739007223, -2.811244688688049, 62.189883068165244, -2.811244688688049, 37.75918765306639, -0.5834249281476502], [-13.280024492899287, 92.39137694572081, 75.06000739007223, -2.811244688688049, 62.189883068165244, -2.811244688688049, 37.75918765306639, -0.5834249281476502]], [[-76.69894057820215, 12.15338911271509, 81.68418398262912, -44.15533537486549, -29.92530843974366, -29.92530843974366, -99.76860339291179, -105.42260580914375, -99.2192956011222, 8.777721336176342], [], ["qePIokPMx", -88.68963858646266, false, 92.17031809189785, 20, false]], [[92.17031809189785], ["Adina"], [-17, 3, 10]], [[20, 4, -85, -8, 20, 5, 73, 13, 2, 5], [true, true, false, false, true, true, true, true, false, false], [20, 4, -85, -8, 20, 5, 73, 13, 2, 5]], [[92.17031809189785], ["Adina", "Boyle"], [-62, 73]], [["Adina"], [4, -17, 40, 3, 10], [92.17031809189785]], [[false, true, false, true, true, false, true], [81.68418398262912, -29.92530843974366, 91.9700693495451, 3.8439202491777706, -2.811244688688049, -91.09614035628569, 92.17031809189785, 37.75918765306639, 37.75918765306639, -44.15533537486549], [81.68418398262912, -29.92530843974366, 91.9700693495451, 3.8439202491777706, -2.811244688688049, -91.09614035628569, 92.17031809189785, 37.75918765306639, 37.75918765306639, -44.15533537486549]], [[-76.69894057820215, 12.15338911271509, 81.68418398262912, -44.15533537486549, -29.92530843974366, -29.92530843974366, -99.76860339291179, -105.42260580914375, -99.2192956011222, 10.903113434010868], [-88, "qiMdF"], [-76.69894057820215, 12.15338911271509, 81.68418398262912, -44.15533537486549, -29.92530843974366, -29.92530843974366, -99.76860339291179, -105.42260580914375, -99.2192956011222, 10.903113434010868]], [["x", "def", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "x"], ["S001", "S00Leyton2", "S003", "S002", "S004"], ["x", "def", "Leyton Marsh", "Duncan Boyle", "Saim Richards", "x"]], [[10, 30, 13, 20, 13], [10, 30, 13, 20, 13], [10, 30, 13, 20, 13]]], "contract": "\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n"}
{"task_id": "Mbpp/392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "entry_point": "get_max_sum", "canonical_solution": "\ndef get_max_sum (n):\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n", "base_input": [[60], [10], [2]], "atol": 0, "plus_input": [[100], [1000], [10000], [100000], [500], [1000000], [99], [498], [499], [101], [false], [9999], [1001], [501], [true], [1002], [10001], [502], [999], [100001], [999999], [100002], [497], [9998], [1000001], [100003], [1003], [496], [1000002], [100004], [1004], [999998], [999997], [99999], [99998], [102], [1000003], [1005], [10002], [100005], [998], [999996], [503], [68], [10003], [103], [495], [69], [67], [1006], [100006], [98], [997], [104], [504], [996], [505], [1000004], [999995], [494], [1000005], [70], [1007], [1008], [493], [96], [97], [995], [1000006], [1000007], [99997], [38], [994], [506], [10004], [10005], [2], [99996], [999994], [37], [95], [492], [993], [3], [4], [10006], [490], [66], [5], [73], [18], [100007], [39], [6], [507], [1009], [1010], [488], [491], [489], [19], [65], [27], [17], [487], [999993]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n"}
{"task_id": "Mbpp/394", "prompt": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "entry_point": "check_distinct", "canonical_solution": "\ndef check_distinct(test_tup):\n  return len(test_tup) == len(set(test_tup))\n", "base_input": [[[1, 4, 5, 6, 1, 4]], [[1, 4, 5, 6]], [[2, 3, 4, 5, 6]]], "atol": 0, "plus_input": [[[]], [[1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3.14, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3.14, 4, 5, 6, 7, 8, 9, 10]], [[1, "a", true, 3.14]], [[7, 8, 37, 3, -71, -36]], [[7, 9, 37, 3, -71, -36]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 1, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 3, 1]], [[0, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6]], [[61, 1, 34, -53, -71, false]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 8, 7, 6, 5, 4, 3, 2, 1, 6]], [[10, 9, 8, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 2]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 2, 1, 6]], [[1, 2, 3.14, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3.14, 4, 5, 6, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 6]], [[10, 9, 8, 7, 6, 5, 6, 3, 2, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 3, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 8, 7, 6, 5, 4, 3, 2, 1, 6, 3]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 8, 7, 6, 5, 4, 3, 2, 0, 1, 6, 3]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 3, 1, 6]], [[0, 1, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[0, 1, 0]], [[1, 0]], [[10, 9, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6]], [[6, 8, 8, 37, 3, -71, -36]], [[1, 2, 3.14, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3.14, 4, 5, 6, 9, 10]], [[6, 0, 1, 1]], [[1, 0, 1, 1]], [[7, 8, 3, -71, -36]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 6]], [[6, 0, 1, 1, 1]], [[10, 9, 8, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 3]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 3, 1, 9]], [[6, 0, 1, 1, 1, 1]], [[1, 2, 0, 1, 1]], [[10, 1]], [[10, 9, 9, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6]], [[5, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 6, 10, 9, 8, 7, 6, 5, 4, 3, 3, 1, 7]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 61, 10, 9, 8, 7, 6, 5, 4, 2, 1, 6, 6]], [[10, 7, 7, 1]], [[1, 0, 1, 1, 1]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n"}
{"task_id": "Mbpp/395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "entry_point": "first_non_repeating_character", "canonical_solution": "\ndef first_non_repeating_character(str1):\n  for ch in str1:\n    if str1.count(ch) == 1:\n      return ch\n  return None\n", "base_input": [["abcabc"], ["abc"], ["ababc"]], "atol": 0, "plus_input": [["aaaaaaa"], ["aaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaa"], ["aaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaa"], ["aaaaaaaaaaaaaaa"], ["aaaaaaaaaaaa"], ["aaaaaaaaa"], ["aaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwgGwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaa"], ["GEwgGwwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaawgGwwH"], ["aaaa"], ["aaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaa"], ["GEwaaaaaaaaaaaaaaaaaaaaagGwwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaagGwwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaawgGwwHaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaawH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGaaaaaaaaGwwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["gvPARWvgU"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaawH"], ["aaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaGaaaaaaaaaaaaaaaaaaaaawgGwwHaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaawgGwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaGEwgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGaaaaaaaaGwwwHaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwgGwaaaaaaawgGwwHwwH"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["t"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGaaaaaaaaaaaaaaaaaaaaawgGwwHaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["GEwgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGaaaaaaaaGwwwH"], ["aaaaaawaaaaaaaaaaaaaaaaaaaaaaaagGwwH"], ["aaaGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaawgGwwHaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]], "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(str1) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n"}
{"task_id": "Mbpp/396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n", "entry_point": "check_char", "canonical_solution": "\nimport re  \ndef check_char(string): \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\treturn re.search(regex, string) is not None\n", "base_input": [["abba"], ["a"], ["abcd"]], "atol": 0, "plus_input": [[""], ["A"], ["aa"], ["AA"], ["aaA"], ["1234"], ["abcdxyz"], ["AbBa"], ["aaBbAA"], ["abcdefghijklmnopqrstuvwxyz"], ["abcabcabcabcabcabcabcabcabca"], ["abaBa"], ["12321"], ["XyZyx"], ["!!$!!!$!!!!!!!!$!!!"], ["\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude00"], ["\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87"], ["1234aa"], ["XyZyyx"], ["12321a"], ["1AbBa12321a"], ["XyZyyxaaA"], ["AXyZyyx"], ["\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00"], ["X"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87xyz"], ["XZyyx"], ["YFqvS"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyz"], ["132321a"], ["aaBbaaBbAAAA"], ["abacd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyz"], ["oWMWLta"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87xyza"], ["abaBaa"], ["XyZyyxaaAAXyZyyx"], ["YFqvSaaBbaaBbAAAA"], ["12341aa"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf87\ud83c\udf88\ud83c\udf87xyzabcdxyza"], ["AbbBa"], ["YFqvqS"], ["a123a4aa"], ["12321X"], ["aaBbaaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAA"], ["XX"], ["\ud83d\ude00\ud83d\ude00\ud83d\ude03\ud83d\ude04abcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyz\ud83d\ude00"], ["YFqvSaaBbaaBbAAAAAbBa"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87\ud83c\udf88xyz"], ["\ud83c\udf88\ud83c\udf88\ud83c\udf88"], ["aaBaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAA"], ["1232YFqvSaaBbaaBbAAAA1a"], ["\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00XyZyx"], ["YFFqvSaaBbaaBbAAAA"], ["XZxyyx"], ["123a4aa"], ["z"], ["abcdefghijklmno\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00pqrstuvwxyz"], ["YFqvSaqaBbaaBbAAAAAbBa"], ["YFFqvSaaBbaaaaBbaaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAABbAAAA"], ["F1234et"], ["aaA\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00"], ["!!$!!!$!!!!!!!!$!!"], ["XyZyyxaaAAXyZyyyx"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyz!!$!!!$!!!!!!!!$!!"], ["\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00ZXyZyx"], ["abcd\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude00\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87xyza"], ["YFF\ud83c\udf88\ud83c\udf88\ud83c\udf88qvSaaBbaaBbAAAA"], ["aa123a4aa"], ["BAbBa"], ["abcd\ud83c\udf88aaBaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAA\ud83c\udf88\ud83c\udf88\ud83c\udf87xyza"], ["\ud83d\ude00abcdabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00XyZyx"], ["aaBaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aabcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87\ud83c\udf88xyza\ud83c\udf87xyzAA"], ["123321X"], ["abaBBaa"], ["12X"], ["AXyZyyxaaAAXyZyyyx"], ["XZyyyx"], ["AAX"], ["abaBBaaYFAXyZyyxaaAAXyZyyyx"], ["aaBbAAaaBbaaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAA"], ["yyxx"], ["aaBbaaA"], ["XyZyyxaaAAXyZyyyyx"], ["\ud83d\ude00\ud83d\ude00\ud83d\ude03\ud83d\ude04abcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyz\ud83d\ude00XX"], ["12321X12321"], ["12321aa"], ["aaB1234aabAA"], ["abaBBaAXyZyyxaaAAXyZyyyxaYFAXyZyyxaaAAXyZyyyx"], ["1XXyZyyx12X"], ["!!!$!!!$!!!!!!!!$!!!"], ["1XXyZy123a4aaX"], ["aaaA"], ["!!$!!!$!!!!!!!!!$!!!"], ["AXyyx"], ["\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude04\ud83d\ude00XyZx"], ["112321aa"], ["aaBbaa!!!$!!!$!!!!!!!!$!!!AA"], ["F"], ["Dd"], ["AAAX"], ["XyZyyxayaAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87\ud83c\udf88xyzXyZyyyyx"], ["aaABbAA"], ["a\ud83c\udf87bcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyz"], ["YFF\ud83c\udf88\ud83c\udf88\ud83c\udf88qvSaaBbaaBbAAAAaa"], ["1232YFqvSaaBba1XXyZyyx12XaBbAAAA1a"], ["aa\ud83c\udf87bcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyza"], ["abaBaaBbAAaaBbaaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAABaa"], ["AbABa"], ["12234"], ["aaBbaa"], ["12abcd\ud83c\udf88\ud83c\udf88\ud83c\udf88\ud83c\udf87\ud83c\udf88xyz32YFqvSaaBbaaBbAAAA1a"], ["\ud83d\ude00abcdabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzxyzz\ud83d\ude03\ud83d\ude04\ud83d\ude00XyZyx"], ["abcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAbABaF"], ["\ud83d\ude00abcdxyz\ud83d\ude03\ud83d\ude03\ud83d\ude04\ud83d\ude00XyZyx"], ["aaBbAAaaBbaaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aaFxyzAA"], ["\ud83c\udf88\ud83c\udf88\ud83c\udf87"], ["aaABaBbAAabcd\ud83c\udf88\ud83c\udf88\ud83c\udf881234aa\ud83c\udf87xyzAA"]], "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_char(\"abba\") == True\nassert check_char(\"a\") == True\nassert check_char(\"abcd\") == False\n"}
{"task_id": "Mbpp/397", "prompt": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n", "entry_point": "median_numbers", "canonical_solution": "\ndef median_numbers(a,b,c):\n    return sorted([a,b,c])[1]\n", "base_input": [[25, 55, 65], [20, 10, 30], [15, 45, 75]], "atol": 0, "plus_input": [[5, 5, 5], [-10, -20, -30], [-5, -10, -15], [-10, 20, 30], [-15, 0, 15], [-50, -20, 100], [-20, -19, 100], [5, 4, 4], [5, 0, 5], [-18, 99, 100], [-15, -15, 15], [-5, 99, 100], [-15, -14, 15], [-16, -18, 100], [-10, -30, -30], [18, -10, 57], [30, -30, -29], [4, 99, 100], [-11, 18, -10], [-20, 57, -16], [5, -9, 57], [-50, 100, -20], [4, -19, 4], [-16, -19, 100], [-31, 57, -20], [57, -18, 57], [-18, 99, 99], [-50, 15, -20], [4, 98, -5], [-20, -21, -30], [30, 31, -20], [-29, -50, 100], [-19, 4, 4], [-29, -30, -50], [20, 0, 15], [-19, -21, -30], [5, -15, 5], [-18, 99, 20], [-17, -18, -18], [5, 31, 4], [31, -29, -29], [3, 4, 3], [4, 100, 98], [4, 3, 4], [15, -30, -20], [-10, -10, -10], [5, -18, 4], [-30, 5, 5], [-20, -19, -19], [-10, -50, 15], [-31, 99, -5], [0, 20, 30], [-15, 98, -14], [5, 5, 57], [4, 57, -20], [3, 4, 4], [100, 99, 30], [-16, -18, 101], [5, -11, 57], [5, 5, 4], [3, 3, 3], [-15, -31, 15], [-5, -10, 5], [99, 30, 31], [57, -19, 4], [-20, -21, -31], [3, 3, 4], [20, 30, 30], [-20, -31, -31], [-20, -22, -31], [-29, -30, -30], [98, -18, -13], [100, -15, 98], [-66, 55, -22], [100, 99, 100], [101, -20, -50], [3, 101, 3], [57, 0, 15], [5, 4, 5], [-66, -20, 55], [-13, -11, 55], [100, 98, 100], [-21, -30, -30], [-29, -20, -31], [-17, 30, 30], [3, 101, -13], [4, 4, 4], [99, -9, -6], [-50, 15, -21], [100, -31, 100], [5, 57, -20], [-22, -18, -18], [-10, 5, -9], [-19, -20, 55], [4, 5, 4], [6, -11, 57], [57, 0, 14], [30, 14, 14], [0, 15, 20], [101, 18, -9], [16, -50, 15], [-18, -10, 100], [0, 3, -13], [4, 3, 3], [30, 31, -15], [6, 15, 57]], "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0\n"}
{"task_id": "Mbpp/398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n", "entry_point": "sum_of_digits", "canonical_solution": "\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "base_input": [[[10, 2, 56]], [[[10, 20, 4, 5, "b", 70, "a"]]], [[10, 20, -4, 5, -70]]], "atol": 0, "plus_input": [[[]], [[7]], [[-10, 15, 0, -5, 2]], [[0]], [[10, -5, "abc", 0, 3.14]], [[7, 10, 7]], [[15]], [[-10, 15, 0, 15, -5, 2, 15, 2]], [[-10, 15, -10, 0, 15, -5, 2, 15, 2]], [[-10, 0, -5, 2]], [[15, -10, 0, 1, 15, -5, 2, 15, 2]], [["TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "abc", "abc", "gTxGtFZLn", "abc"]], [[0, 15, 0, -5]], [[-10, 15, 0, 15, -5, 2]], [[-5, 7, 10, 7]], [[-10, 15, 0, 10, 2]], [[-10, 15, 0, 10, 2, 0]], [[-10, 15, 0, 15, 15, -5, 2]], [["TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "abc", "abc", "gTxGtLn", "abc"]], [[1, 0, 15, 0, -5]], [[-10, 0, 15, -5, 2]], [[15, 0, 2, 0]], [[-10, 15, 0, 1, 2, 0, 0]], [["TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc"]], [[-10, 0, 10, 15, -5, 2]], [[-10, 10, 7]], [["TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc"]], [[-10, -11, 15, -10, 0, 15, -5, 2, 15, 2]], [[2, -11, 15, -10, 0, 15, -5, 2, 15, 2]], [[-10, 15, 15, 0, -5, 2]], [["TTzXjVXDQt", "ITwgTxGtLnVYEcw", "ucH", "abc", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc"]], [[-10, -11, 15, -10, 0, 15, -5, 2, 15, 2, 2]], [[-10, 0, 10, 15, -5, 2, 15]], [[10, -5, "abc", 0, 15, 3.14]], [[15, 0, 10, 2, 0]], [[-11, 15, 0, -5, 2]], [[-10, 0, 1, 2, 0, 0]], [["TTzXjVXDQt", "ITwgTxGtLnVYEcw", "ucH", "abc", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc", "abc"]], [[-10, 15, 15, 15, -5, 2]], [[-10, 1, 2, 0, 0, 0]], [[11, -5, 7, 10, 7, 10]], [[-10, 15, 0, 15, -5, 2, 15, 2, -10]], [[-10, 0, 1, 15, -5, 2, 15, 2, 1, 2]], [[-10, 0, 15, 15, -5, 2]], [[-10, 15, 0, 15, -5, 15, 2]], [[-10, 0, 15, 15, -5, 2, 0]], [[0, 1, 0, 0]], [[7, 10, 7, 7]], [[-5, 1, 7, 10, 7]], [[-9, -10, 15, -10, 0, 15, -5, 2, 15, 2]], [[-10, 15, 0, 15, -5, 2, 15, 2, -9, -10, -10]], [["TTzXjVXDQt", "TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc"]], [[-10, 15, 1, 2, 0, 0]], [[2, 7, 10, -11, 7]], [[7, 10, 7, 15, 7]], [[0, 1, 0, 0, 0, 0]], [["TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "ITwgTxGtLnVYEcw", "abc", "gTxGtFZLn", "abc"]], [[-10, 15, 15, -5, 2, 15, 2, -9, -10, -10]], [[-5, 7, 10, 7, 10]], [[-10, -11, 15, -10, 0, -5, 2, 15, 2]], [[-10, 0, 1, 15, -11, 15, 2, 1, 2]], [[3.14, -17.036961582608342, 3.14, 3.14, 3.14]], [[0, -10, 0, 10, -5, 2]], [["TTzXjVXDQ", "ITwgTxGtLnVYEcw", "ucH", "abc", "abc", "ITwVYEcw", "abc", "GgTxGtFZLn", "abc"]], [["TTzXjVXDQt", "TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc", "abc"]], [[2, -11, 7, 15, -10, 0, 15, -5, 2, -11, 15, 2]], [[-9, -10, -4, 15, -10, 0, 15, -5, 2, 15, 7, 2]], [["TTzXjVXDQt", "TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "abc", "ITwVYEcw", "abc", "gTxGtFZLn"]], [[15, 0, 10, 2, -5, 0]], [[-10, 15, -10, 0, 15, -5, 2, 15, 2, -9, -10, -10]], [[-10, 15, 15, 0, 2]], [[7, 10, 8]], [[-10, 1, -5, -10]], [[-10, -11, 15, -10, -5, 2, 15, 2]], [["TTzXjVXDQt", "ucH", "abc", "ITwVYEcw", "TTzXjVXDQt", "abcTTzXjVXDQt", "gTxGtFZLn", "abc"]], [["TTzXjVXDQt", "ITwVYEcw", "ucH", "abc", "ITwgTxGtLnVYEcw", "abc", "gTxGtFZLn", "abc", "ucH"]], [[-10, 15, 15, 15, -5, 2, 2]], [[2, -10, 15, 0, 0, 10, 2]], [[14, -10, 15, 0, 2]], [[-10, 1, 2, 0, 0, 0, -10]], [[-10, 15, 14, 15, -5, 2]], [[-11, 0, 2]], [[-4, 7, 7]], [[15, 0, 1, 2, 0]], [["TTzXjVXDQt", "ucH", "abc", "abc", "ITwVYEcw", "abc", "gTxGtFZLn", "abc", "abc", "abc"]], [[-10, 0, 1, 15, -5, 2, 15, 2, 0, 1, 2]], [["TTzXjVXDQt", "gTxGtFZLn", "abc", "ITwgTxGtLnVYEcw", "abc", "gTxGtFZLn", "abc", "ucH", "gTxGtFZLn"]], [[1, 0, -5, 2]], [[15, 15]], [[11, -5, 10, 7, 10]], [[-10, -11, 15, -9, -5, 2, 15, 2]], [[-10, 0, 15, -5, 2, 15]], [[15, 0, 2, 0, 0, 0]], [[-4, 10, 7, 7]], [[14, -10, 15, 0, -6, 2]], [[-1, 7, 10, 7]], [[-9, -10, 15, -10, 0, 15, -5, 2, 15, 2, 15, -10]], [[11, 7, 10, -5, 7, 10]], [[-9, -10, -4, 15, -10, 0, -4, -5, 2, 15, 7, 2]], [[-10, 1, 0, 0, 0, -10, 1]], [[0, -6, 0]], [[-10, 0, 1, 2, 15, -5, 2, 15, 2, 1, 2]], [[7, 10, 7, 7, 7]], [[0, 11, 0, -5]], [[11, 10, 7, 10]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\n"}
{"task_id": "Mbpp/400", "prompt": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n", "entry_point": "extract_freq", "canonical_solution": "\ndef extract_freq(test_list):\n  return len(set(tuple(l) for l in test_list))\n", "base_input": [[[[3, 4], [1, 2], [4, 3], [5, 6]]], [[[4, 15], [2, 3], [5, 4], [6, 7]]], [[[5, 16], [2, 3], [6, 5], [6, 9]]]], "atol": 0, "plus_input": [[[[3, 4], [4, 3], [2, 1], [1, 2]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[9, 10], [11, 12], [13, 14], [15, 16]]], [[[17, 18], [19, 20], [21, 22], [23, 24]]], [[[1, 2], [1, 2], [1, 2], [1, 2]]], [[]], [[[4, 15], [2, 3], [5, 4], [6, 7], [4, 15], [2, 3]]], [[[1, 2], [3, 4], [1, 2], [4, 3], [5, 6], [7, 8], [5, 6, 7]]], [[[1, 2], [3, 4], [1, 2], [5, 6], [3, 4]]], [[[1, 2, 3], [3, 2, 1], [4, 5, 6], [6, 5, 4], [7, 8, 9]]], [[[1], [2], [3], [4], [5]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[9, 10], [13, 14], [15, 16]]], [[[1, 2], [3], [5, 6], [7, 8]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [1, 2]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [10, 10], [11, 12], [13, 14], [15, 16], [6], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [5, 5, 6], [17, 18], [19, 20]]], [[[1, 3], [3, 4], [1, 2], [4, 3], [5, 6], [7, 8], [5, 6, 7]]], [[[3, 1, 4], [1, 2], [3, 4], [1, 2], [4, 3], [5, 6], [7, 8], [5, 6, 7]]], [[[1, 1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [9], [17, 18], [19, 20]]], [[[1, 2, 3], [4], [4, 5], [6, 7, 8], [9, 10]]], [[[3, 1, 4], [1, 2], [3, 4], [1, 2], [4, 3], [5, 6], [7, 8], [5, 6, 7], [3, 1, 4], [3, 4]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [10, 10], [11, 12], [13, 14], [15, 16], [6], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12, 11], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[3, 4], [4, 3], [1, 2]]], [[[1, 2], [3, 4], [24, 5, 6], [7, 8]]], [[[1, 2], [1, 2, 1], [3, 4], [1, 2], [5, 6], [3, 4], [1, 2]]], [[[3, 1, 4], [1, 2], [3, 4], [1, 2], [4, 3], [5, 6], [7, 8], [5, 6, 7], [3, 1, 4], [3, 4], [1, 2]]], [[[3, 4], [5, 6], [7, 8]]], [[[1], [2], [3], [4]]], [[[1, 19, 2], [1, 2], [3, 4], [1, 2], [5, 6], [3, 4]]], [[[9, 10], [11], [13, 14], [15, 16], [11]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [10, 10], [18, 17, 18], [11, 12], [13, 14], [15, 16], [6], [17, 18], [19, 20], [11, 12]]], [[[1, 2, 3], [3, 2, 1], [4, 5, 6], [7, 8, 9]]], [[[6, 7, 8, 7], [1, 2, 3], [4, 5], [6, 7, 8], [9, 10]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [3, 4, 5]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [13, 14], [15, 16], [17, 18], [17, 18], [19, 20], [9, 10]]], [[[1, 1, 2], [3, 4], [5, 6], [7, 9, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [21, 19, 20]]], [[[9, 10], [13, 13, 14], [13, 14], [15, 16]]], [[[6, 7, 8, 7], [1, 2, 3], [4, 4, 5], [6, 7, 8], [9, 10]]], [[[9, 10], [13, 14], [15, 16], [11]]], [[[3, 1, 4], [1, 2], [3, 4], [3], [1, 2], [4, 3], [5, 6], [7, 8], [5, 6, 7]]], [[[1], [2], [3, 3], [3], [4], [5]]], [[[1, 2], [3, 4, 5], [2], [6, 7, 8, 9], [1, 2]]], [[[9, 10], [9, 4, 10], [13, 14], [15, 16]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [9], [17, 18], [19, 20], [1, 2]]], [[[2, 3], [1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]], [[[1], [2], [3], [4], [4]]], [[[1], [2], [3], [4, 4]]], [[[1, 2], [3, 4, 18, 5], [2], [6, 7, 8, 9]]], [[[1, 2, 3], [4], [4, 5], [6, 8, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [6], [13, 14], [15, 16], [17, 18], [17, 18], [19, 20], [9, 10]]], [[[1, 2], [5, 6], [7, 8]]], [[[1], [2], [1]]], [[[1], [3], [4, 4], [3], [3]]], [[[1, 2, 3], [3, 2, 1], [4, 5, 6, 4], [4, 5, 6], [7, 8, 9]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [9], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [10, 10], [18, 17, 18], [11, 12], [13, 14], [15, 16], [6], [17, 18], [19, 20], [11, 12], [3, 4]]], [[[17, 18], [23], [17, 18, 18], [21, 22], [23, 24]]], [[[1, 2], [3, 4, 5], [2], [6, 7, 15, 8, 9], [1, 2]]], [[[9, 10], [9, 8, 10], [13, 14, 14], [11, 12], [13, 14], [15, 16], [9, 10]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [13, 14], [15, 16], [9], [17, 18], [19, 20]]], [[[4], [4, 5], [6, 8, 8], [9, 10]]], [[[1, 2], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [9], [19, 20], [1, 2]]], [[[3, 4, 5], [6, 7, 8, 9]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12, 11], [15, 16], [17, 18], [19, 20]]], [[[1, 2, 3], [4], [4, 4, 5], [4, 5], [6, 8, 8], [9, 10], [9, 10]]], [[[9, 10], [11, 11], [13, 14], [15, 16], [11]]], [[[1, 19, 2], [1, 2], [3, 4], [1, 2], [5, 6], [3, 3, 4]]], [[[1, 2], [3, 18, 4, 18, 5, 4], [2], [17, 1, 2], [6, 7, 8, 9]]], [[[1, 2], [3, 4], [5, 6], [8], [9, 10], [13, 14], [15, 16], [17, 18], [17, 18], [19, 20], [9, 10]]], [[[1, 2], [5, 6], [7, 8], [9, 10], [13, 14], [15, 16], [9], [19, 20], [1, 2]]], [[[3, 2, 1], [4, 5, 6], [1, 2, 1, 3], [7, 8, 9]]], [[[1], [2], [3]]], [[[3, 4], [4, 3, 4], [4, 3], [1, 2]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [10, 10], [18, 17, 18], [11, 12], [13, 14], [18, 20], [15, 16], [6], [17, 18], [19, 20], [11, 12]]], [[[3, 4], [4, 3], [2, 1], [1, 2], [2, 1]]], [[[1, 2], [1, 2], [1, 2]]], [[[1], [20, 13, 3], [3], [4, 4]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [13], [15, 16], [17, 18], [17, 18], [19, 20], [9, 10]]], [[[7, 8]]], [[[3, 4, 4], [4, 3, 4], [4, 3], [1, 2]]], [[[3, 4], [5, 6], [7, 8], [9, 10], [13, 14], [15, 16], [17, 18], [17, 18], [19, 20], [9, 10, 10]]], [[[1, 2, 3], [9, 10, 10], [4], [4, 5], [6, 7, 8], [9, 10]]], [[[1, 19, 2, 1], [1, 2], [3, 4], [1, 2], [5, 6], [3, 3, 4]]], [[[1, 2], [1, 2], [1, 2], [1, 2, 2]]], [[[2], [3]]], [[[15, 16], [9, 10], [14], [15, 16], [11]]], [[[20, 13, 3], [11], [4, 4, 11, 4]]], [[[3, 4], [1, 2, 1], [4, 3], [2, 1], [3], [1, 2], [2, 1], [1, 2]]], [[[9, 10], [13, 14], [13, 15, 14], [15, 16], [13, 15, 14]]], [[[1, 2], [3, 4], [5, 6], [8], [9, 10], [13, 14], [15, 16], [17, 18], [17, 18], [19, 20], [9, 10], [13, 14]]], [[[1, 2], [3, 4, 5], [2], [6, 7, 15, 8, 9], [1, 2], [6, 7, 15, 8, 9]]], [[[1, 2, 3], [4], [4, 5], [6, 7, 8], [10]]], [[[1], [2], [3], [4, 4], [1]]], [[[1, 2], [14, 3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [5, 5, 6], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [11, 10, 12], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 7, 8], [10, 10], [11, 12], [13, 14], [15, 16], [6], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [16, 7, 8], [9, 10], [13, 14], [15, 16], [17, 18], [17, 18], [19, 20], [18], [9, 10]]], [[[3, 4], [4, 3], [2, 1], [1, 2], [2, 1], [2, 1]]], [[[3, 2, 1], [6, 5, 4], [7, 8, 9]]], [[[2], [3, 3], [3]]], [[[17, 1, 2], [1, 2], [1, 2, 2, 2], [1, 2, 2]]], [[[13], [17, 18], [23], [17, 18, 18, 17], [21, 22], [23, 24]]], [[[1, 2, 3], [3, 2, 1], [6, 5, 4], [7, 8, 9]]], [[[13, 1, 2], [1, 2], [3, 4], [24, 5, 6], [7, 8]]], [[[1, 2], [5, 6], [5], [7, 8]]], [[[false, false, false, true, true, true, true, false], [1], [2], [3], [4]]], [[[1], [], [2], [3], [4, 4], [1]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [10, 10], [18, 17, 18], [11, 12], [13, 14], [18, 20], [15, 16], [6], [17, 18], [19, 20], [11, 12], [11, 12]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 4\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n"}
{"task_id": "Mbpp/404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n", "entry_point": "minimum", "canonical_solution": "\ndef minimum(a,b):   \n    return min(a,b)\n", "base_input": [[1, 2], [-5, -4], [0, 0]], "atol": 0, "plus_input": [[1000, 999], [-1000, -999], [0.5, 0.4], [-0.5, -0.4], [1.23456789, 1.23456788], [-1.23456789, -1.23456788], [3, -5], [-10, 8], [-7, -3], [-Infinity, Infinity], [0, 1], [0, -1], [0.12345678901234568, 0.9876543210987654], [10000000000000000000000, -9999999999999999999999], [-9999999999999999999999, -10000000000000000000000], [1e-30, 2e-30], [-1e-30, 1e-30], [1e+22, -1e+22], [-1e+22, -1e+22], [1e+100, 1e+101], [9999999999999999999999999, 1e+100], [9999999999999999999999999, -1e+100], [-1e+100, 9999999999999999999999999], [-Infinity, 1e-30], [0.12345678901234568, 0.6227470969848448], [-9999999999999999999999, -1], [-5, 1e+100], [10000000000000000000000, 3], [0.12345678901234568, 0.12345678901234568], [-1, -2], [1.23456788, 0.9876543210987654], [1.23456789, 1.23456789], [0.3393732857470154, 0.4], [0.9876543210987654, 0.9876543210987654], [-0.5, -1.23456789], [0.5, 1.23456788], [1.23456788, 1.23456788], [3, -9999999999999999999999], [-Infinity, 0.9876543210987654], [1000, 1000], [1e-30, -1.23456788], [0.9876543210987654, 1.23456789], [-1e+100, -1e+100], [-Infinity, -Infinity], [9999999999999999999999, -9999999999999999999999], [-0.07506072001847719, 1e-30], [1.23456788, 1.23456789], [1e-30, -0.7328249760252548], [2e-30, -Infinity], [1e-30, 1.23456788], [-Infinity, -0.5], [3, 10000000000000000000000], [1e+100, 0.4], [0, -9999999999999999999999], [-3, -1], [-0.5, 0.4], [-1e-30, 0.4], [1e-30, -1e+100], [1e-30, -6.511591469260396e+99], [2e-30, 2e-30], [-Infinity, 0.6227470969848448], [-1e+22, 0.4], [0.6227470969848448, -0.29444729972854533], [-9999999999999999999999, -9999999999999999999999], [0.46026738039655424, 1.23456788], [-1e+100, Infinity], [-999, -9999999999999999999999], [-1e+22, 0.6227470969848448], [1.23456788, 1.3699399338796618], [Infinity, 0.6227470969848448], [1.23456789, 1.4183245112641576], [2e-30, -1e+100], [-3, 1], [-0.5, -0.5], [3, 10000000000000000000001], [-1.23456789, -0.8219041516621808], [-5, -5], [1e+22, -Infinity], [-5, -3], [-3, -3], [-9999999999999999999999, 9999999999999999999999999], [0.4, 0.5], [9999999999999999999999999, 9999999999999999999999998], [0.4, 0.4], [9999999999999999999999999, 10000000000000000000000], [-0.07506072001847719, 0.6227470969848448], [10000000000000000000001, 3], [-0.4565540470320447, -0.9016404675969094], [-0.7328249760252548, 1.3699399338796618], [0.46582533596598436, 0.33863302089208697], [1e+100, 1e+100], [0.5170315488171091, 1.23456788], [Infinity, Infinity], [1e-30, -Infinity], [-3, -4], [0.9844734927681069, 0.9844734927681069], [1e+100, 9.775453772147561e+99], [-3, -5], [-7, 999], [-1e-30, -0.30387334753977924], [-0.4340218895905736, -0.5], [1.0499093088834509e-30, 1.0499093088834509e-30], [-0.30387334753977924, 9999999999999999999999999], [-0.07506072001847719, -0.056386079676076895], [999, -10000000000000000000000], [10000000000000000000000, -999], [0.5502904923114273, 0.9876543210987654], [1.3699399338796618, -0.8219041516621808], [-0.7328249760252548, 0.4], [-1e-30, 1e+101], [0.4, 1e-30], [9999999999999999999999999, -1], [-999, -999], [-0.4399369615846679, 9999999999999999999999999], [-0.47412425472639685, -0.07506072001847719], [9999999999999999999999999, -1.23456789], [-9999999999999999999999, 3], [-1, 9999999999999999999999], [0.46582533596598436, -1.2456261076289474], [1.137575447277081e+100, 1e+101], [-0.2805435883831953, -0.3079438825335931], [-6.7523459788417035e-31, 7.414663687211649e-31], [-0.10974338446002693, 1e-30]], "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0\n"}
{"task_id": "Mbpp/405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "entry_point": "check_tuplex", "canonical_solution": "\ndef check_tuplex(tuplex, element): \n  return element in tuplex\n", "base_input": [[["w", 3, "r", "e", "s", "o", "u", "r", "c", "e"], "r"], [["w", 3, "r", "e", "s", "o", "u", "r", "c", "e"], "5"], [["w", 3, "r", "e", "s", "o", "u", "r", "c", "e"], 3]], "atol": 0, "plus_input": [[[], 5], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], ["a", "b", "c"]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], {"name": "John", "age": 25}], [[["a", "b", "c"], ["name", "age", 25], true, 42.5], "d"], [[], "element"], [[["a", ["b", "c"], "d"], ["e", ["f", "g"], "h"]], ["f", "g"]], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25}, true, 42.5], {"name": "John", "age": 25}], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5], {"name": "John", "age": 25}], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5], {"name": "John"}], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, true, 42.5, {"age": 25}], {"name": "John", "age": 25, "b": "Jnameohn"}], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], {"name": "John", "age": 25, "nanme": "Jnohn"}], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25}, true], {"name": "John", "age": 25}], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.5], [["abc", 123, [1, 2, 3]], true, 42.5]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], ["a", "b", "c", "a"]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], {"name": "John"}], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25, "nname": 25}, true, 42.5], {"name": "John", "age": 25}], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25, "nname": 25}, true, true, 42.5], {"name": "John", "age": 25}], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5, 42.5], [["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5]], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5, {"age": 25}, {"age": 25}], {"name": "John", "age": 25, "b": "Jnameohn"}], [[], [-63, 81, true]], [[true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25, "nname": 25}, true, false, 42.5], [["abc", 123, [1, 2, 3]], {"name": "John", "age": 25, "nname": 25}, true, false, 42.5]], [[false, 38, 96, -63], [-63, 81, true, true]], [[42.5, ["abc", 123, [1, 2, 3]], {"name": "John", "age": 25, "nname": 25}, true, 42.5], {"name": "John", "age": 25, "a": "hJohn"}], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, 42.5]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], ["a", "aabc", "b", "c"]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.5]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]]], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.5]], [[false, true, false, false, true, true, false], "element"], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.964943519254135]], [[["abc", 123, [1, 2, 3]], {"age": 25}, true], {}], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], ["aabc", "b", "c"]], [[42.964943519254135, 42.5, 53.132901816322374, 42.5], [42.964943519254135, 42.5, 53.132901816322374, 42.5]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], false, ["acbc", [1, 2, 3]], 42.964943519254135]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, ["a", "b", "c"]], [false, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5, true], [["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5, 42.5]], [[false, ["a", "b", "c"], {"name": "John", "age": 25}, false, true, 42.5], [false, ["a", "b", "c"], {"name": "John", "age": 25}, false, true, 42.5]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], {"name": "John", "age": 25, "agae": "Jonamehn"}], [[], [-63, 81, true, true]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 43.45102708398019, true]], [[true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 43.45102708398019, true, 43.45102708398019]], [[false, ["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], false, 42.964943519254135]], [[["abc", 123, [1, 2, 3]], true, 43.45102708398019, true], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135]], [[51.13966106560641, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], {"name": "John", "age": 25}], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 43.45102708398019, false, true]], [[true, 42.5], [["abc", 123, [1, 2, 3]], true, 42.5]], [[true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, true], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, true]], [[["abc", 123, [1, 2, 3]], false, true, 42.5], [["abc", 123, [1, 2, 3]], false, true, 42.5]], [[["abc", 123, [1, 2, 3]], {"age": 26}, true, ["abc", 123, [1, 2, 3]]], {}], [[false, 96, -63], [-63, 81, true, true]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], [123, [1, 2, 3]], 42.964943519254135], [true, 42.5]], [[51.13966106560641, 2, -50.96670632000566, 15, 42.5, 99.96452985516729, true, 2], 5], [[["abc", 123, 123, [1, 2, 3]], true, 43.45102708398019, true], [["abc", 123, [1, 2, 3]], true, 43.45102708398019, true]], [[{"age": 25}, 61.19815696347994, true, 42.5, 42.5], [["abc", 123, [1, 2, 3]], {"age": 25}, 61.19815696347994, true, 42.5, 42.5]], [[false, 38, 96, -63], [81, true, true]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], true], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 43.45102708398019, true]], [[["abc", 123, [1, 2, 3]], false, true, 43.45102708398019, true], [["abc", 123, [1, 2, 3]], true, 43.45102708398019, true]], [[false, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [false, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["abc", 123, [1, 2, 3]], true, [[1, 2, 3]], ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135, 42.964943519254135]], [[["a", "b", "c", "a"], {"name": "John", "age": 25}, true, 42.5], [["a", "b", "c", "a"], {"name": "John", "age": 25}, true, 42.5]], [[true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, true], [true, ["a", "b", "c"], false, {"name": "John", "age": 25}, true, 42.5, true]], [[["abc", 123, [1, 2, 3]], false, true, 43.45102708398019, true], [["abc", 123, [1, 2, 3]], 43.45102708398019, true]], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25}, true, false, 53.132901816322374], [["abc", 123, [1, 2, 3]], {"name": "John", "age": 25}, true, false, 42.5, ["abc", 123, [1, 2, 3]]]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["abc", "ab", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], false, 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], false, 42.964943519254135]], [[false, ["a", "b", "c"], {"name": "John", "age": 81}, false, {"name": "John", "age": 81}, true, 42.5], [false, ["a", "b", "c"], {"name": "John", "age": 81}, false, true, 42.5, false]], [[false, 38, 96, -63], [false, 38, 96, false]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3], "abc"]], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]]]], [[false, ["a", "b", "c"], {"name": "John"}, false, {"name": "John"}, true, {"name": "John"}, 42.5, {"name": "John"}], [false, ["a", "b", "c"], {"name": "John"}, false, {"name": "John"}, true, 42.5, {"name": "John"}]], [[false, ["a", "b", "c"], false, {"name": "John", "age": 81}, false, true, false, false, 42.5, false], [false, ["a", "b", "c"], false, {"name": "John", "age": 81}, false, true, false, 42.5, false]], [[true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, true]], [[false, true, false, false, true, true, true, false], [false, true, false, false, true, true, false]], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, true, 42.5, {"age": 25}, true], {"name": "John", "age": 25, "b": "Jnameohn"}], [[true, [[1, 2, 3]], ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, [[1, 2, 3]], 42.964943519254135]], [[["abc", 123, [1, 2, 3]], true, true, 42.5], [["abc", 123, [1, 2, 3]], false, true, 42.5]], [[["abc", 123, [1, 2, 3]], true, ["abc", 123, [1, 2, 3], "abc"], 42.5], [["abc", 123, [1, 2, 3]], true, 42.5]], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5], [["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5]], [[false, false, 38, 96, false], [false, 38, 96, false]], [[false, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, true]], [[["abc", 123, [1, 2, 3]], {"name": "John", "age": 25}, true, 42.5], {}], [[["abc", 123, [1, 2, 3]], false, true, 43.45102708398019, true], [["abc", 123, [1, 2, 3]], ["abc", [1, 2, 3]], true, true, 43.45102708398019, true]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", [1, 2, 3], "abc"], ["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 43.45102708398019, true]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, ["a", "b", "c"], true], [false, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5]], [[["abc", 123, [1, 2, 3]], false, true, 42.5], [["abc", 123, [1, 2, 3]], false, true, 42.5, false]], [[51.13966106560641, 2, -50.96670632000566, 15, 42.5, 99.96452985516729, true, 2], [51.13966106560641, 2, -50.96670632000566, 15, 42.5, 99.96452985516729, true, 2, -50.96670632000566]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], true], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], true]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, ["a", "b", "c"]], [["a", "b", "c"], {"name": "John", "age": 25}, true, ["a", "b", "c"]]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], ["b", "c", "a"]], [[["abc", 123, [1, 2, 3]], true, 42.5, 42.5], [["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5, 42.5]], [[["abc", 123, [1, 2, 3]], ["abc", [1, 2, 3], "abc"]], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], ["abc", 123, [1, 2, 3]]]], [[-63, 81, true, true], [-63, 81, true, true]], [[["a", "b", "c"], {"name": "John", "age": 25}, true, 53.132901816322374], ["a", "aabc", "b", "b"]], [[false, ["abc", 123, [1, 2, 3]], true, true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], false, 42.964943519254135]], [[["abc", 123, [1, 2, 3]], ["abc", [1, 2, 3], "abc"], ["abc", 123, [1, 2, 3]]], [["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], ["abc", 123, [1, 2, 3]]]], [[["a", ["b", "c", "c"], "d"], ["e", ["f", "g"], "h"]], ["f", "g"]], [[38, 96, -63], [false, 38, 96, false]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], [123, [1, 2, 3]], true], [[123, -63, [1, 2, 3]], ["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], true]], [[["abc", 123, [1, 2, 3]], {"age": 25}, true, 42.5, {"age": 25}, true, {"age": 25}], {"name": "e", "age": 25, "b": "Jnameohn"}], [[["a", "b", "c", "a"], ["", "b", "c", "a"], {"name": "John", "age": 25}, true, 42.5], [["a", "b", "c", "a"], {"name": "John", "age": 25}, true, 42.5]], [[["a", "aabcb", "c", "aabcb"], ["a", "b", "c"], ["a", "aabcb", "c"], {"name": "John", "age": 25}, true, ["a", "b", "c"]], [["a", "b", "c"], {"name": "John", "age": 25}, true, ["a", "b", "c"]]], [[false, false, 38, 96, false], [false, false, false, 38, 96, false]], [[["abc", 123, [1, 2, 3]], true, ["abc", [1, 2, 3]], 42.964943519254135], [["abc", 123, [1, 2, 3]], true, ["abcc", [1, 2, 3]], 42.964943519254135]], [[false, ["a", "b", "c"], {"name": "John", "age": 25}, false, 42.5], [true, ["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5, true]], [[51.13966106560641, 2, -50.96670632000566, 15, 42.5, 99.96452985516729, true, 2, 51.13966106560641], 5]], "contract": "\n  assert isinstance(tuplex, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n"}
{"task_id": "Mbpp/406", "prompt": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n", "entry_point": "find_Parity", "canonical_solution": "\ndef find_Parity(x): \n    return x % 2 != 0\n", "base_input": [[12], [7], [10]], "atol": 0, "plus_input": [[0], [-10], [2], [9], [9876543210], [100000000000000000000000000000000000000000], [99999999999999999999999999999999999999999999999999999999999998], [100000000000000000000000000000000000000001], [-9], [3], [true], [-42], [10], [false], [99999999999999999999999999999999999999999999999999999999999997], [99999999999999999999999999999999999999999], [-8], [1], [99999999999999999999999999999999999999999999999999999999999996], [-1], [100000000000000000000000000000000000000002], [-48], [-2], [9876543211], [-11], [99999999999999999999999999999999999999999999999999999999999995], [100000000000000000000000000000000000000003], [11], [99999999999999999999999999999999999999999999999999999999999994], [13], [9876543212], [12], [4], [-47], [8], [-7], [-41], [-61], [14], [-3], [-49], [100000000000000000000000000000000000000004], [-43], [99999999999999999999999999999999999999998], [15], [40], [-44], [99999999999999999999999999999999999999999999999999999999999999], [9876543213], [7], [-60], [62], [100000000000000000000000000000000000000000000000000000000000000], [5], [17], [41], [63], [99999999999999999999999999999999999999997], [16], [42], [-59], [-46], [-45], [64], [-4], [-62], [6], [-58], [100000000000000000000000000000000000000005], [9876543214], [-12], [-63], [-40], [-50], [18], [-5], [-92], [-6], [-98], [-34], [-35], [61], [-14], [100000000000000000000000000000000000000006], [9876543215], [-38], [19], [-97], [-91], [100000000000000000000000000000000000000000000000000000000000001], [-93], [-15], [-64], [-36], [99999999999999999999999999999999999999996], [-33], [43], [20], [-95], [-30], [-37], [-13], [100000000000000000000000000000000000000007], [-16], [-99], [-32], [9876543216]], "contract": "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n"}
{"task_id": "Mbpp/407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n", "entry_point": "rearrange_bigger", "canonical_solution": "\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return int(\"\".join(digits))\n    return None\n", "base_input": [[12], [10], [102]], "atol": 0, "plus_input": [[987654321], [111111], [987543210], [987543209], [111112], [111110], [987654320], [987654322], [987654323], [111113], [987654319], [111114], [111115], [111116], [111109], [987654324], [987654318], [987654317], [111117], [47], [45], [987654325], [987654316], [60], [48], [987543208], [987543207], [26], [49], [46], [61], [111107], [89], [5], [4], [987543206], [44], [88], [6], [50], [43], [111108], [27], [87], [86], [28], [69], [111106], [987654327], [68], [30], [7], [111105], [62], [63], [59], [111104], [987654314], [987654315], [3], [987654328], [85], [90], [987654329], [29], [111118], [57], [58], [70], [2], [56], [31], [71], [987543211], [42], [1], [72], [22], [51], [987543205], [41], [67], [66], [987654330], [25], [24], [55], [54], [32], [8], [65], [987543204], [987654326], [987654312], [64], [84], [987543212], [21], [0], [83], [9], [33], [23]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==None\nassert rearrange_bigger(102)==120\n"}
{"task_id": "Mbpp/409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n", "entry_point": "min_product_tuple", "canonical_solution": "\ndef min_product_tuple(list1):\n    return min(x * y for x, y in list1)\n", "base_input": [[[[2, 7], [2, 6], [1, 8], [4, 9]]], [[[10, 20], [15, 2], [5, 10]]], [[[11, 44], [10, 15], [20, 5], [12, 9]]]], "atol": 0, "plus_input": [[[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000]]], [[[0, 0], [0, 0], [0, 0]]], [[[1, 1], [1, 1], [1, 1]]], [[[-1, -1], [-2, -2], [-3, -3]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[7, 2], [12, 9], [-5, 6], [8, -3], [0, 0]]], [[[10, 20], [30, 40], [50, 60], [70, 80], [90, 100], [110, 120], [130, 140], [150, 160], [170, 180], [190, 200]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1900, 2000]]], [[[1000, 2000], [3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000], [11000, 12000], [13000, 14000], [15000, 16000], [17000, 18000], [19000, 20000]]], [[[1000000000, 2000000000], [5000000000, 3000000000], [4000000000, 6000000000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000]]], [[[100000, 200000], [300000, 400000], [900000, 1000000]]], [[[7, 2], [12, 9], [-5, 6], [8, -3], [0, 0], [-5, 6]]], [[[5000000000, 3000000000], [4000000000, 6000000000], [1000000000, 2000000000]]], [[[7, 2], [12, 9], [-5, 6], [0, 0], [8, -3]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [100000, 200000]]], [[[5000000000, 3000000000], [1000000000, 2000000000], [5000000000, 3000000000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [700000, 800000]]], [[[-1, -1], [50, -3], [-2, -2], [-3, -3]]], [[[1, 1], [1, 1], [1, 1], [1, 1]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1900, 2000], [1100, 1200]]], [[[5000000000, 3000000000], [5000000001, 3000000000], [1000000000, 2000000000], [5000000000, 3000000000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [700000, 800000], [900000, 1000000]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [170, 180], [190, 200]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200]]], [[[10, 20], [50, 60], [90, 100], [110, 120], [150, 160], [170, 180], [190, 200], [150, 160]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200]]], [[[5000000000, 3000000000], [1000000000, 2000000000], [5000000000, 3000000000], [5000000000, 3000000000]]], [[[100000, 200000], [500000, 600000], [700000, 800000], [900000, 1000000], [100000, 200000]]], [[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000], [1000000, 2000000]]], [[[100000, 200000], [300000, 400000], [900000, 1000000], [900001, 1000000]]], [[[4000000000, 6000000000], [1000000000, 2000000000], [1000000000, 2000000000]]], [[[100000, 200000], [300000, 400000], [900000, 1000000], [300000, 400000]]], [[[-1, -1], [50, 3000], [50, -3], [-2, -2], [-3, -3]]], [[[3000000000, 3000000], [1000000, 2000000], [5000000, 3000000], [1000000, 2000000]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [171, 180], [190, 200]]], [[[5000000, 100000], [300000, 400000], [900000, 1000000]]], [[[-1, -1], [-2, -2], [-3, -3], [-1, -1]]], [[[300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [171, 180], [190, 200], [50, 60], [110, 120]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200], [300, 400]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [10, 60], [110, 120], [150, 160], [171, 180], [190, 200], [50, 60], [110, 120]]], [[[5000000, 100000], [300000, 400000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [700000, 800000], [300000, 400000]]], [[[-1, -1], [50, -3], [-2, -2], [-3, -3], [-2, -2]]], [[[3000000000, 3000000], [5000000, 3000000], [2000, 2000000]]], [[[3000000000, 3000000], [1000000, 2000000], [5000000, 3000000], [1000000, 2000000], [1000000, 2000000]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [171, 180], [190, 200], [70, 80]]], [[[1000, 2000], [3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000], [11000, 12000], [13000, 14000], [15000, 16000], [17000, 18000], [19000, 20000], [7000, 8000]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200], [1500, 1600]]], [[[1, 1], [1, 1]]], [[[100000, 4000000000], [100000, 200000], [300000, 400000], [900000, 1000000], [900001, 1000000]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [170, 180], [190, 200], [110, 120]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [100000, 200000], [500000, 600000], [100000, 200000]]], [[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000], [1000000, 2000000], [4000000, 6000000]]], [[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000], [1000000, 2000000], [4000000, 6000000], [4000000, 6000000]]], [[[1, 2], [3, 4], [5, 6]]], [[[1800, 3000000000], [5000000000, 3000000000], [5000000001, 3000000000], [1000000000, 2000000000], [5000000000, 3000000000]]], [[[1, 1]]], [[[3000000000, 3000000], [1000000, 2000000], [5000000, 3000000]]], [[[10, 20], [49, 60], [90, 100], [110, 120], [150, 160], [170, 180], [190, 200], [150, 160], [170, 180]]], [[[5000000000, 3000000000], [5000000001, 3000000000], [1000000000, 2000000000], [5000000000, 3000000000], [5000000000, 3000000000]]], [[[100, 200], [500, 600], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1900, 2000], [1100, 1200]]], [[[1000000, 2000000], [5000000, 3000000], [1000000, 2000000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [300000, 400000], [900000, 1000000], [900000, 1000000]]], [[[100000, 200000], [300000, 400000], [900000, 1000000], [18000, 200000]]], [[[1, 1], [1, 1], [1, 1], [1, 2], [1, 1]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200], [1500, 1600], [1100, 1200]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [171, 180], [50, 60], [110, 120]]], [[[-2, -2], [-3, -3], [-1, -1]]], [[[10, 20], [50, 60], [90, 100], [110, 120], [150, 160], [170, 180], [190, 5], [150, 160]]], [[[-1, -1], [50, -3], [-2, -2], [-3, -3], [-2, -2], [-2, -2]]], [[[100000, 200000], [300000, 8], [900000, 1000000], [18000, 200000]]], [[[7, 2], [-5, 6], [8, -3], [0, 0]]], [[[7, 2], [12, 9], [-5, 6], [8, -3], [0, 0], [8, -3]]], [[[100000, 200000], [500000, 600000], [700000, 800000], [900000, 1000000], [100000, 200000], [100000, 200000]]], [[[101, 200], [300, 400], [500, 600], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200]]], [[[5000000, 100000], [300000, 400000], [5000000, 100000]]], [[[100, 200], [300, 400], [700, 800], [900, 1000], [1100, 1200], [1500, 1600], [1700, 1800], [1900, 2000]]], [[[100000, 200000], [300000, 8], [900000, 1000000], [18000, 200000], [300000, 8]]], [[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000], [4000000, 6000000], [1000000, 2000000]]], [[[180, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [171, 180], [190, 200], [50, 60], [110, 120]]], [[[100000, 200000], [700000, 800000], [900000, 1000000], [100000, 200000], [100000, 200000]]], [[[1000000, 2000000], [5000000, 3000000]]], [[[101, 200], [300, 400], [500, 600], [1500, 1599], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200]]], [[[49, 60], [90, 100], [110, 120], [150, 160], [170, 180], [190, 200], [150, 160], [170, 180]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1900, 2000], [1700, 1800], [1500, 1600]]], [[[1000, 2000], [3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000], [11000, 12000], [13000, 14000], [15000, 16000], [19000, 20000]]], [[[5000000001, 3000000000], [1000000000, 2000000000], [5000000000, 3000000000], [5000000001, 3000000000]]], [[[-1, -1], [50, -3], [-2, -2], [-3, -3], [-2, -2], [-2, -2], [-3, -3]]], [[[300000, 400000], [900000, 1000000], [300000, 399999], [300000, 400000]]], [[[5000000, 100000], [300000, 400000], [5000000, 100000], [5000000, 100000]]], [[[100000, 4000000000], [300000, 400000], [900000, 1000000], [900001, 1000000]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1699, 1800], [1100, 1200], [700, 800]]], [[[1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]], [[[50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [171, 180], [50, 60], [110, 120], [171, 180]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [300000, 400000], [900000, 1000000], [900000, 1000000], [900000, 1000000]]], [[[101, 200], [500, 600], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200], [1500, 1600]]], [[[101, 200], [500, 600], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200]]], [[[101, 200], [300, 401], [700, 800], [1100, 1200], [1300, 1400], [1500, 1600], [1699, 1800], [1100, 1200], [700, 800]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [300000, 400000], [900000, 1000000], [900000, 1000000], [900000, 1000000], [900000, 1000000]]], [[[100000, 200000], [300000, 400000], [900000, 1000000], [18000, 200000], [100000, 200000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [700000, 800000], [900000, 1000000], [100000, 200000], [900000, 1000000], [100000, 200000]]], [[[100000, 200000], [300000, 400000], [500000, 600000], [700000, 800000], [900000, 1000000], [700000, 800000], [300000, 400000], [700000, 800000]]], [[[-2, -2], [-3, -3]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1500, 1600], [1700, 1800], [1100, 1200], [1500, 1600], [1700, 1800]]], [[[101, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [1100, 1200], [1300, 1400], [1700, 1800], [1100, 1200]]], [[[7, 2], [8, -3], [-5, 6], [8, -3], [0, 0]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [170, 180], [190, 200], [10, 20]]], [[[10, 20], [50, 60], [70, 80], [90, 100], [110, 120], [150, 160], [170, 180], [110, 120], [110, 120]]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n"}
{"task_id": "Mbpp/410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n", "entry_point": "min_val", "canonical_solution": "\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n", "base_input": [[["Python", 3, 2, 4, 5, "version"]], [["Python", 15, 20, 25]], [["Python", 30, 20, 40, 50, "version"]]], "atol": 0, "plus_input": [[["Python", 10, 5, 2.5, 2.5, "version"]], [["Python", "version", "is", "3.8.5", 1, 2, 3, 4, 5]], [["Python", [10, 5, 2.5, 2.5], 15, [20, 25]]], [["Python", [10, 5, 2.5, 2.5], "version", 15, [20, 25]]], [["Python", 10, 3, 2.5, 2.5, "version"]], [["Python", 5, "version", "is", "3.8.5", 1, 2, 3, 4, 5]], [["Python", 4, 10, 3, 2.5, 2.5, "version"]], [["Python", 10, 5, 2.5, 2.5, "version", "Python"]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [20, 25], "PythonPython"]], [["n", "version", [10, 5, 2.5, 2.5], "version", 15, [20, 25]]], [["PythonPython", [10, 5, 2.5, 2.5], 25, "PythonPython"]], [["Python", [10, 5, 2.5, 2.5], "version", 15, [20, 25], [10, 5, 2.5, 2.5]]], [["PythonPython", [10, 5, 2.5, 2.5], 25, "PythonPython", "PythonPython"]], [["Python", 5, "version", "is", "3.8.5", 1, 2, 3, 4, 5, 3]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [20, 25], "PythhonPython", "PythonPython", 25]], [["PythonPython", [10, 5, 2.5, 2.5], 25, 3, [20, 25], "PythhonPython", "PythonPython", 25]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [20, 25], "PythhonPython", "PythonPython", 25, "PythhonPython", 25]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [20, 25], "PythhonPython", "PythonPython", 25, "PythhonPython", 25, "PythonPython"]], [["Python", [10, 5, 2.5, 2.5], "version", 15, [20, 25], "Python"]], [["PythonPython", [10, 5, 2.5, 2.5, 2.5], 25, [20, 25], "PythhonPython", [10, 5, 2.5, 2.5, 2.5], "PythonPython", 25, "PythhonPython", 25, "PythonPython"]], [["Python", 10, 5, 2.5, 2.5, "version", 10]], [[[10, 5, 2.5, 2.5, 2.5, 2.5], [10, 5, 2.5, 2.5, 2.5, 2.5], "Python", [10, 5, 2.5, 2.5, 2.5, 2.5], 15, [20, 25], [10, 5, 2.5, 2.5, 2.5, 2.5]]], [["Python", "version", "is", "3.8.5", 1, 2, "PythhonPython", 3, 4, 5]], [["n", "version", [10, 5, 2.5, 2.5], 15, [20, 25]]], [["Python", "Py", [10, 5, 2.5, 2.5], 15, [20, 25]]], [[[10, 5, 2.5, 2.5], 25, "PythonPython", "PythonPython"]], [[[10, 5, 2.5, 2.5, 5], [10, 5, 2.5, 2.5, 5], 25, "version"]], [["PythonPython", [10, 5, 2.5], 25, [20, 25], "PythonPython"]], [["Python", "Py", 15, [20, 25]]], [["PythonPython", "PythonPytthon", [10, 5, 2.5, 2.5], "Py", 3, [20, 25], "Pythh3.8.5onPython", "PythonPython", 25, "PythhonPython", 25]], [["Python", "versioen", "is", "3.8.5", 1, 2, "Python", "PythhonPython", 3, 4, 5]], [["Python", [10, 5, 2.5, 2.5], "version", "veirsion", 15, [20, 25], "Python"]], [["Python", [10, 5, 2.5, 2.5], "version", 15, [5, 20, 25], 15, 15]], [["PythonPython", 25, [20, 25], "PythhonPython", "PythonPython", 25, 25]], [["n", [10, 5, 2.5], "version", [10, 5, 2.5], "version", 15, [20, 25]]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [20, 25], "PythhonPython", "tPythonPython", 25]], [["Python", "version", "is", "3.8.5", 1, 2, "PythhonPython", 3, 4, 5, "3.8.5"]], [["PythonPython", [10, 5, 2.5, 2.5], 25, 3, [20, 25], "PythhonPython", "PythonPython", 25, [10, 5, 2.5, 2.5]]], [["Python", [10, 5, 2.5, 2.5], [19, 25], 15, [19, 25], "Python", "Python"]], [["PythonPython", 25, [20, 25], "PythhonPython", 24, 25, 25]], [[20, "Python", 5, "version", "is", "3.8.5", 1, 2, 3, 4, 5, 3, 5]], [["Python", "version", "is", "3.8.5", 1, 2, 4, 5]], [["Python", "version", "is", "3.8.5", 1, 4, 2, "PythhonPython", 3, 4, 5, "Python"]], [["n", [10, 5, 2.5], "version", "version", 25, [20, 25], [10, 5, 2.5]]], [["PythonPython", 25, [20, 25], "PythhonPython", "PythonPython", 25]], [["Python", "version", "is", "3.8.5", 1, 4, 2, "PythhonPython", 3, 4, 5, "Python", 2]], [[25, "PythonPython", [10, 5, 2.5, 2.5], 25, 3, [20, 25], "PythhonPython", "PythonPython", 25]], [["n", [10, 5, 2.5], "version", "version", 25, [20, 25], "PythonPytthon", [10, 5, 2.5]]], [["Python", 4, "version", "is", "3.8.5", 1, 2, 3, 4, 5, 3]], [["Python", [10, 5, 2.5, 2.5, 2.5], 3, [20, 25]]], [[[1, 20, 25], "PythonPython", [10, 5, 2.5], 25, [1, 20, 25], "PythonPython"]], [["Python", 5, "version", "is", "3.8.5", 1, 2, 3, 4, 5, 3, 5, 5]], [["Python", "version", 5, "is", "3.8.5", 4, 3, 2, "PythhonPython", 3, 4, 5, "Python", 2, 4]], [[25, "PythonPython", "PythonPython"]], [["Python", [10, 5, 2.5, 2.5], [19, 25], 15, [19, 25], "Python", "Python", [19, 25]]], [["Python", [10, 5, 2.5, 2.5], [25], 15, [25], "Python", "Python"]], [["Python", "Py", 15, 16, [20, 25]]], [["n", [10, 5, 2.5], "version", "version", 25, [20, 25], [10, 5, 2.5], 25]], [["version", [10, 5, 2.5, 2.5], "version", 14, [20, 25, 25]]], [["Python", "Py", [10, 5, 2.5, 2.5], 15, [20, 25], 15]], [["Python", "PyPythonPytthon", 15, [20, 25]]], [["PythonPython", [10, 5, 2.5, 2.5], 25, 3, [20, 25], "PythhonPython", "Pythhon", "PythonPython"]], [["n", [10, 5, 2.5], "version", "version", 25, [20, 25], "PythonPytthon", [10, 5, 2.5], [10, 5, 2.5]]], [["Python", 5, 5, 2.5, 2.5, "version", "Python"]], [["Python", "version", "is", "3.8.5", 2, "version", "PythhonPython", 3, 4, 5]], [["PythonPython", [10, 5, 2.5, 2.5], 25, 3, [20, 25], "PythhonPython", "PythonPython", 25, 24, [10, 5, 2.5, 2.5]]], [[5, "version", "is", "3.8.5", 1, 2, 3, 4, 5, 3, 5, 5, 1]], [["Python", [10, 5, 2.5, 2.5, 2.5], 3, [20, 25], [20, 25], "Python"]], [["Python", 10, 5, 2.5, 2.5, "version", "Python", 2.5, 2.5]], [["Python", "tPython", 10, 5, 2.5, 2.5, "version", "Python", 2.5]], [["PythonPython", "PythonPytthon", [2.5, 10, 5, 2.5, 2.5], "Py", 3, [2.5, 10, 5, 2.5, 2.5], [20, 25], "Pythh3.8.5onPython", "PythonPython", 25, "PythhonPython", 25]], [["nn", [10, 5, 2.5], "version", "version", 25, [20, 25], [10, 5, 2.5], 25, 25]], [["versioen", [10, 5, 2.5, 2.5], "n", 15, [20, 25], [10, 5, 2.5, 2.5]]], [["PythonPyothon", "PythonPPythonPytthonython", [9, 5, 2.5, 2.5], 25, "PythonPython"]], [[[19, 25], 15, [19, 25], "Python", "Python", [19, 25], [19, 25]]], [["Python", 4, "version", "is", 1, 2, 3, 4, 5, 3, 5]], [["PythonPythoveirsionn", "PythonPython", [10, 5, 2.5, 2.5, 2.5], 25, [20, 25], "PythhonPython", [10, 5, 2.5, 2.5, 2.5], "PythonPython", 25, "PythhonPython", 25, "PythonPython"]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [10, 5, 2.5, 2.5], [20, 25], "PythhonPython", "PythonPython", 25, "PythhonPython", 25, "PythonPython"]], [["Python", "versioen", "is", "3.8.5", "vertPythonPythonioen", 1, 2, "Python", "PythhonPythhonPythonPython", 3, 4, 5, "3.8.5"]], [["Python", 5, "version", "is", "3.8.5", 1, 2, 3, 1, 4, 5, 3, 5, 5, 1]], [["version", "versinon", [10, 5, 2.5, 2.5], "version", 14, [20, 25, 25]]], [["Python", 5, "version", "is", "3.8.5", 1, 2, 3, 4, 3, 5, 5]], [["Python", [10, 5, 2.5, 2.5], [25], 15, [25], "Python"]], [["Python", 5, "version", "is", "3.8.5", 2, 1, 2, 3, 4, 5]], [["n", [10, 5, 2.5], "version", "version", 25, [20, 25], "tPythonPython", 26, [10, 5, 2.5]]], [["versioen", [2.5, 10, 5, 2.5, 2.5], "n", [2.5, 10, 5, 2.5, 2.5], 15, [20, 25], [2.5, 10, 5, 2.5, 2.5]]], [["Python", "version", 5, "is", "3.8.5", 4, 3, 2, "PythhonPython", 3, 4, 5, "Python", 2, 3]], [[25, "PythonPython", "PythonPython", 25]], [["vversion", "Python", "version", "is", "3.8.5", 1, 4, 9, "PythhonPython", 3, 4, 5, "Python"]], [["PythonPPythonPytthonython", 25, [20, 25], "PythonPython"]], [["Python", [25], 15, [25], "Python", [10, 5, 2.5, 2.5], "Python", 15]], [["PythonPython", [10, 5, 2.5, 2.5], 25, [20, 25, 25], "PythhonPython", [20, 25, 25], "PythonPython", 25]], [["Python", 4, "version", "3.vversion8.5", "3.8.5", 1, 4, 2, "PythhonPython", 3, 5, "Python", 2]], [["PythonPython", 24, [10, 5, 2.5, 2.5], 25, "PythonPython"]], [[16, "Python", [10, 5, 2.5, 2.5], "vsion", 15, [5, 20, 25], 15, 15]], [["Python", "version", 5, "is", "3.8.5", 1, 2, "PythhonPython", 3, 4, 5, "3.8.5"]], [[[20, 25, 25], "Python", "Py", [10, 5, 2.5, 2.5], 15, [20, 25, 25], [20, 25, 25]]], [[[10, 5, 2.5, 2.5], 25, [20, 25], "PythonPython", 25, "PythhonPython", 25]], [["Python", [9, 20, 25], "Py", [10, 5, 2.5, 2.5], 15, [9, 20, 25], 15]], [["nn", [10, 5, 2.5], "version", "verission", 25, [20, 25], [10, 5, 2.5], 25, 25]], [["Python", 5, "version", "is", "3.8.5", 1, 2, 3, 4, 3, 5, 5, "3.8.5"]], [["verission", "Python", "version", "is", "3.8.5", 1, 2, 3, 4, 5]], [["version", [10, 9, 5, 2.5, 2.5], "version", 14, [20, 25, 25]]], [["Python", "Py", 15, 16, [21, 20, 25]]]], "contract": "\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n"}
{"task_id": "Mbpp/412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "entry_point": "remove_odd", "canonical_solution": "\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n", "base_input": [[[1, 2, 3]], [[2, 4, 6]], [[10, 20, 3]]], "atol": 0, "plus_input": [[[]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10, 12, 14]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-3, -5, -7, -9, -11]], [[-2, -4, -6, -8, -10]], [[3, 6, 9, 12, 15, 18, 21]], [[1, 4, 7, 10, 13, 16, 19]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000]], [[-2, -4, -6, -8, -10, -2]], [[5, 3, 5, 7, 9]], [[-3, -7, -9, -11]], [[3, 7, 9]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000, 1000000]], [[false, false, false, false, false, true, true, false, true]], [[1, 4, 7, 10, 13, 16, 19, 19]], [[3, -8, 7, 9]], [[1, 3, 7, 9]], [[false, false, false, false, false, true, true, false, true, false, true, true, false]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, -125000, 0]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000]], [[-3, -4, -7, -9, -11]], [[-7, -9, -11, -3]], [[-2, -4, -6, -8, -10, -4]], [[-3, -5, -7, -11]], [[-1000000, -500000, -250000, -125000, 19, 0, 125000, 250000, 500000, 1000000]], [[1, 4, 7, 13, 16, 19, 19]], [[-1000000, -500000, -250000, -125000, 19, 0, 125000, 250000, 500000, 1000000, -250000]], [[3, 7, 9, 3]], [[3, 5, 7, 9, 3]], [[-3, -7, -9, -11, -9]], [[-3, -4, -8, -7, -9, -11]], [[-1000000, -500000, -250000, -125000, 19, 0, 125000, 250000, 10, 500000, 1000000]], [[-3, -5, -7, -8, -9, -11, -8]], [[1, 2, 3, 4, 6, 7, 8, 9, 10]], [[3, 9, 4, 15, 18, 21]], [[-4, -8, -7, -9, -11]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000]], [[-1000000, -500000, -250000, -125000, -1, 0, 125000, 250000, 10, 500000, 1000000]], [[3, 6, 9, 12, 15, 21]], [[1, 3, 4, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 15, 6, 7, 8, 9, 10]], [[-3, -4, -7, -9, -6, -11]], [[-1000000, -500000, -250000, -125000, 19, 125000, 250000, 500000, 500001, 18, 1000000, -250000]], [[1, 3, 10, 7, 9]], [[2, 9, 12, 15, 18, 21]], [[-3, -4, -8, -7, -9, -11, -9]], [[-5, -7, -8, -9, -11, -8, -5]], [[-2, -4, -8, -10, -4]], [[-1000000, 16, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, 0, -500000]], [[9, 12, 15, 18, 21]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]], [[1, 3, 4, 6, -500000, 8, 9, 10, 4]], [[-3, -4, -9, -6, -11]], [[-4, -6, -8, -10, -4]], [[-3, -4, -9, 19, -6, -7, -11]], [[3, 4, 6, 7, 8, 9]], [[-3, 18, -9, -11, -9]], [[-7, -9, -11]], [[3, 6, 9, 12, 15, 21, 12]], [[-1000000, -500000, -250000, -125000, -1, 1, 125000, 250000, 10, -1000000, 1000000]], [[-7, -9, -11, -3, -7, -7]], [[-1000000, -500000, -1, -125000, 0, 125000, 250000, 500000, 1000000, -125000]], [[1, 2, 3, 4, 6, 8, 9, 10]], [[1, 4, 7, 13, 16, 19, 19, 1, 1]], [[9, 4, 15, 18, 21]], [[5, 3, 5, 9]], [[-1000000, -500000, -250000, -125000, -1, 0, 125000, 250000, 10, 499999, 1000000]], [[-3, -7, -9, -11, -7]], [[1, 1, 3, 5, 7, 9]], [[false, false, false, false, false, true, true, false, true, true, true, false]], [[-500000, -250000, -125000, 19, 0, 250000, 500000, 1000000, -250000]], [[-999999, -500000, -250000, -125000, -1, 1, 125000, 250000, 10, 1000000]], [[17, 3, 6, 9, 12, 15, 18, 21]], [[1, 3, 10, -1000000, 2, 9, 10]], [[-3, -7, -9, -11, -11, -9]], [[17, 3, 6, 10, 12, 15, 18, 21, 18]], [[3, 6, 9, 12, 15, 21, 12, 6]], [[-4, -8, -7, -9, -11, -7]], [[500000, 5, 3, 5, 9, 5]], [[1, 4, 10, 13, 16]], [[3, 4, 8, 9]], [[-1000000, -500000, -11, -250000, -125000, -7, 19, 0, 125000, 250000, 18, 10, 500000, -11]], [[1, 2, 3, 4, 5, 6, 7, 500001, 9, 10]], [[false, true, false, false, false, true, true, false, true, false, true, true, false]], [[1, 3, 10, -1000000, 2, 9, 10, 3]], [[500000, 5, 3, 5, 9, 5, 3]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000, 249999]], [[3, -8, 9]], [[-7, -9, -11, -3, -7, -7, -11]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000, 250000]], [[1, 1, 3, 5, 9]], [[-3, -4, -9, 19, -6, -7, -8, -11, -11]], [[-3, -5, -7, -2, -11]], [[3, -8, 7, 2, 9, 9]], [[9, 4, 18, 21, 18]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, 0, -500000]], [[-3, -4, -2, -7, -9, -11]], [[-2, -4, -3, 12, -8, -10]], [[false, false, false, false, false, true, true, false, true, true, false]], [[3, 6, 9, 12, 15, 21, 11, 6]], [[-2, -4, -6, -8, 7, -10]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 11, 250000, 250000, 500000]], [[1, 1, 4, 5, 9]], [[-3, -5, -7, -11, -11]], [[-5, -7, -11, -7]], [[false, false, false, false, true, true, false, true]], [[-999999, -500000, -250000, -125000, -1, 1, 125000, 250000, 10, 1000000, -999999]], [[-3, -4, -7, -9, -11, -9]]], "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n"}
{"task_id": "Mbpp/413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n", "entry_point": "extract_nth_element", "canonical_solution": "\ndef extract_nth_element(list1, n):\n    return [x[n] for x in list1]\n", "base_input": [[[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 0], [[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 2], [[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 1]], "atol": 0, "plus_input": [[[], 0], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 1], [[], 1], [[["John Doe", 78, 90, 82]], 0], [[["A", 1], ["B", 1], ["C", 1]], 1], [[], 84], [[], 85], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1], [1, "C", 1]], 1], [[["A", 1], ["C", 1]], 1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1], [1, "C", 1]], 0], [[["A", 1], ["B", 1], ["C", 1], ["C", 1]], 0], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1]], 0], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1]], 1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1]], 1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1]], -1], [[["A", 1], ["B", 1], [2, "A", 1], ["C", 1], ["C", 1], ["A", 1]], 0], [[["A", 1], ["B", 1], ["C", 1], ["C", 1]], -1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1], [1, "C", 1]], -1], [[["B", 1], ["C", 1], ["C", 1]], 0], [[["EEmily BrownownA", 1], [1, "C", 1], ["B", 1], ["C", 1], [1, "C", 1]], 1], [[["A", 1], ["C", 1], ["C", 1]], 1], [[["B", 1], ["C", 1], ["Mark Johnson", 1], ["C", 1]], 0], [[["A", 1], ["B", 1], ["C", "C", 1], ["C", 1], ["C", 1]], 1], [[["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["B", 1], ["C"], ["Mark Johnson", 1], ["C", 1]], 0], [[["AA", "A", 1], ["B", 1], ["C", 1]], 1], [[["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Jane Smith", 0, 87, 84], ["Emily Brown", 88, 91, 89]], 0], [[["A", 1], ["B", 1], ["C"], ["C", 1], ["C", 1]], 0], [[["C", 1]], 1], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["John Doe", 78, 90, 82]], -1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1]], -2], [[], 83], [[["A", 1], ["C", 1, 1], ["C", 1]], 1], [[["C", 92], ["A", 1], ["B", 1], ["C", 1], ["C", 1], ["A", 1]], -1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["A", 1]], -1], [[["A", 1], ["B", 1], ["C", "CC", 1]], 1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1]], 0], [[["John Doe", 78, 90, 82], ["John Doe", 78, 90, 82], ["John Doe", 78, 90, 82]], 0], [[["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Jane Smith", 0, 87, 84], ["Emily Brown", 88, 91, 89], [79, "Emily Brown", 88, 91, 89], ["Jane Smith", 92, 87, 84]], 0], [[["A", 1], ["C", 1, 1], ["C", 1]], 0], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], ["C", 1], [1, "C", 1]], -1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], ["C", 1], [1, "C", 1], ["C"]], -1], [[["A", 1], ["C", 1], ["BrownA", 1]], 1], [[["A", 1], ["B", 1], ["C", "CC", 1], ["A", 1]], 1], [[["A", 1], ["C", 1], ["BrownA", 1]], -1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["A", 1], [1]], -1], [[["Emily BrownA", 1], ["Emilyy BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1]], 0], [[], 89], [[["Emily BrownA", 1], ["Emilyy BrownA", 1], [1, "C", 1], ["B", 1]], 1], [[["A", 1], ["C", 1, 1], ["C", 1]], -1], [[["A", 1], ["", 1], ["B", 1], ["C", 1], ["C", 1]], 0], [[["John Doe", 78, 90, 82, "John Doe"], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["A", 1], ["C", 1], ["BrownA", 1]], 0], [[["A", 1], ["B", 1], ["C", "CC", 1], ["B", 1]], 1], [[["A", 1], ["A", 92], ["B", 1], ["C", 1], ["A", 1]], 1], [[["Emily BrownA", 1], ["Emilyy BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1], ["Emilyy BrownA", 1]], 0], [[["A", "", 1], ["B", 1], ["C", 1], ["C", 1]], 1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], ["C", 1], [1, "C", 0, 1], ["C"]], -1], [[["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Jane Smith", 0, 87, 84], ["Jane Smith", 1, 87, 84], ["Emily Brown", 88, 91, 89]], 0], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89], ["John Doe", 78, 90, 82]], 0], [[["A", 1], ["C", 1], ["BrownA", 1], ["BrownA", 1]], -1], [[["Emily BrownA", 1], ["Emilyy BrownA", 1], [1, "C", 1], ["B", 2], ["C", 1]], 0], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["Jane Smith"], ["C", 1], [1, "C", 0, 1], ["C"]], -1], [[["A", 1], ["C", 1], ["BrownA", 1]], -2], [[["BrownownAA", 1], ["C", 1], ["BrownA", 1], ["BrownA", 1]], -1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], ["C", 1], [1, "C", 1]], 0], [[["AA", "A", 1], ["C", 1]], 1], [[["A", 1], ["C", 1, 1], ["C", 1], ["C", 1]], 1], [[["B", 1], ["C", 1], ["Mark Johnson", 1], ["C", 1], ["C", 1]], -1], [[["Emily BrownA", 1], ["Emilyy BrownA", 1], [1, "C", 1], ["B", 2]], -1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1], ["C", 1]], -1], [[["A", 1], ["", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1]], 0], [[["A", 1], ["", 1], ["B", 1], ["C", 1], ["C", 1], [1], ["C", 1]], -1], [[["B", 1, "B"], ["B", 1], ["C", 1], ["Mark Johnson", 1], ["C", 1], ["C", 1]], -1], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1], ["C", 1]], 1], [[["BrownownAA", 1], ["EEmily BrownownA", "BrownA", 1], ["C", 1], ["BrownA", 1], ["BrownA", 1]], -2], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], [90, "Mark Johnson", 79, 85, 91], ["Mark Johnson", 79, 85, 91, 85], ["Emily Brown", 88, 91, 89], ["Mark Johnson", "Mark Jokhnson", 79, 85, 91, 85], ["John Doe", 78, 90, 82]], 0], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1], [1, "C", 1, 1]], -1], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 91, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["A", 1], ["B", 1], ["C", "C", 1], ["C", 1], ["C", 1]], 0], [[["A", 1], ["AA", "A", 1], ["C", 1]], 1], [[["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Jane Smith", 0, 87, 84], ["Emily Brown", 88, 91, 89], [79, "Emily Brown", 88, 91, 89], ["Jane Smith", 92, 87, 84]], -2], [[["BA", "A", 1], ["A", 1], ["B", "A", 1], ["C", 1], ["BrownA", 1], ["B", "A", 1]], 1], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 85, 91], ["Emily Brown", 88, 91, 89], ["Jane Smith", 92, 87, 84]], 0], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], ["C", 1], [1, "C", 1], ["C"], ["C"]], -1], [[[1], [1, "C", 1], ["B", 1], ["C", 1]], 0], [[["A", 1], ["B", 2], ["C", "CC", 1]], 1], [[["A", 1], ["CC", 1], ["C", 1]], 0], [[["AA", "A", 1], ["B", 1], ["AA", "A"], ["C", 1]], 0], [[["A", 1], ["A", 92], ["B", 1], ["C", 1, 1], ["A", 1]], 1], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], [1, "", "C", 1], ["C", 1], [1, "C", 1]], 0], [[["Emily BrownA", 1], ["B", 1], ["Jane Smith"], ["C", 1], [1, "C", 0, 1], [1, "C", 0, 0], ["C"]], -1], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], -2], [[["Emily BrownA", 1], [1, "C", 1], ["B", 1], ["C"], ["C", 1], [1, "C", 1], [1, "C", 1]], -1], [[["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Mark Johnson", 78, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1], ["B", 1]], 0], [[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 78, 91, 89], ["John Doe", 78, 90, 82]], 0], [[["A", 1], ["", 1], ["C", 1], ["C", 1]], 0], [[["A", 1], ["B", 1], ["C", 1]], -2], [[["Mark Johnson", 79, 85, 91], ["Mark Johnson", 78, 85, 91], ["Emily Brown", 88, 91, 89]], 0], [[["A", 1], ["C", 1], ["BrownA", 1], ["A", 1]], -1], [[["Jane Smith", 91, 87, 84], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Jane Smith", 0, 87, 84], ["Emily Brown", 88, 91, 89], [79, "Emily Brown", 88, 91, 89], ["Jane Smith", 92, 87, 84]], -2], [[["Emily BrownA", 1], ["B", 90, 1], ["Emilyy BrownA", 1], [1, "C", 1], ["B", 1], ["C", 1]], 0]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(tup, tuple) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all(n < len(tup) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n"}
{"task_id": "Mbpp/414", "prompt": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "entry_point": "overlapping", "canonical_solution": "\ndef overlapping(list1,list2):  \n    return any(v in list2 for v in list1)\n", "base_input": [[[1, 2, 3, 4, 5], [6, 7, 8, 9]], [[1, 2, 3], [4, 5, 6]], [[1, 4, 5], [1, 4, 5]]], "atol": 0, "plus_input": [[[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1000000, 2000000, 3000000], [1000000, 2000000, 3000000]], [[3000000], []], [[], [1, 2]], [[63.43122042559975, -31.187672074988427, 63.43122042559975], [1]], [[false, false, true, false, true, false], [3, 2, 63, 2000000, 2, -93, 51, 3000000, -61, 3]], [[63.43122042559975, -31.187672074988427, 63.43122042559975], [1, 1]], [[63.43122042559975, -31.187672074988427, 63.43122042559975, -31.187672074988427], [63.43122042559975, -31.187672074988427, 63.43122042559975, -31.187672074988427]], [[1, 3], [true]], [[63.07613966106393, -31.187672074988427, 63.43122042559975], [1]], [[], [2, 3]], [[2, 2, 3], [2, 2, 3]], [[63.07613966106393, 63.07613966106393, 63.43122042559975], [1]], [[false, false, true, false, true, true], [false, false, true, false, true, true]], [[2, 3], [2, 3]], [[63, 3000000, 3000000], [63, 3000000, 3000000]], [[], [1, 2, 2]], [[2, 3, 3], [2, 3, 3]], [[3, 3000000, 2, 4, 3], [3, 3000000, 2, 4, 3]], [[1, 2], [1, 2]], [[1], [1]], [[false, false, false, true, false, true, false], [false, false, false, true, false, true, false]], [[1, 2, 3], [-64]], [[], [false, true, false]], [[-93], []], [[], [2, 2]], [[63.07613966106393, 63.07613966106393, 63.43122042559975, 63.43122042559975], [63.07613966106393, 63.07613966106393, 63.43122042559975, 63.43122042559975]], [[33.96565948782273, 63.07613966106393, 63.43122042559975, 63.43122042559975], [33.96565948782273, 63.07613966106393, 63.43122042559975, 63.43122042559975]], [[3, 3000000, 1, 2, 4, 3, 3], [3, 3000000, 1, 2, 4, 3, 3]], [[3, 3000000, 4, 3], [3, 3000000, 4, 3]], [[33.17607444762987, 63.07613966106393, 44.99937757260167, 63.43122042559975], [33.17607444762987, 63.07613966106393, 44.99937757260167, 63.43122042559975]], [[2, 3, 3000000], [2, 3, 3000000]], [[1, 2, 2, 2], [1, 2, 2, 2]], [[3, 2999999, 1, 3, 4, 3, 3, 3], [3, 2999999, 1, 3, 4, 3, 3, 3]], [[-76.59859490046561, 33.96565948782273, 0.21095117898697424, -99.50475342484972, 33.96565948782273, 63.43122042559975, 33.17607444762987], [2]], [[-61, 3000000, 4, 3], [-61, 3000000, 4, 3]], [[3], [3]], [[1000000, 2000000, 3000000], [2000000, 1000000, 2000000, 3000000]], [[2, 5, 3, 2], [2, 5, 3, 2]], [[3, 3000000, 1, 2, 4, 3, 3, 3000000], [3, 3000000, 1, 2, 4, 3, 3, 3000000]], [[3, 3000000, 1, 4, 3], [3, 3000000, 1, 4, 3]], [[], [2, 2, 3]], [[], [3, 3]], [[63.07613966106393, 63.07613966106393, 63.43122042559975, 63.43122042559975, 63.07613966106393], [63.07613966106393, 63.07613966106393, 63.43122042559975, 63.43122042559975, 63.07613966106393]], [[3, 3000000, 1, 2, 4, 3, -93, 3, 3000000], [3, 3000000, 1, 2, 4, 3, -93, 3, 3000000]], [[2, false, 3000000], [2, false, 3000000]], [[2, 3, 2], [2, 3, 2]], [[63.07613966106393, 63.07613966106393, 63.43122042559975, 63.43122042559975, 63.07613966106393, 63.07613966106393], [63.07613966106393, 63.07613966106393, 63.43122042559975, 63.43122042559975, 63.07613966106393, 63.07613966106393]], [[false, true, false, true], []], [[3, 3, 3, 3], [3, 3, 3, 3]], [[-64, -81, 3, 31, 18, 51], [3, 3]], [[], [2, 2999999, 2, 3]], [[33.96565948782273, 63.07613966106393, 63.43122042559975], [33.96565948782273, 63.07613966106393, 63.43122042559975]], [[3, 3000000, 4], [3, 3000000, 4]], [[1, 1], [1, 1]], [[1, 1, 1], [63.07613966106393, 63.07613966106393, 63.43122042559975]], [[3, 2999999, 1, 3, 4, 3, 3, false], [3, 2999999, 1, 3, 4, 3, 3, false]], [[false, true, false], [-93, -57, -51, 38, -57]], [[1, 3, 2, 1, 2, 2], [1, 3, 2, 1, 2, 2]], [[3000000, -64], [3000000, -64]], [[3, 2999999, 3000000, 38], [3, 2999999, 3000000, 38]], [[3, 3, 3], [3, 3, 3]], [[63.07613966106393, 63.07613966106393, 63.43122042559975, 71.94678677068327, 63.43122042559975, 63.07613966106393, 63.07613966106393], [63.07613966106393, 63.07613966106393, 63.43122042559975, 71.94678677068327, 63.43122042559975, 63.07613966106393, 63.07613966106393]], [[false, false, true, false, false, false], []], [[0, -64, -13, 2000000, -97, -34, 78, 2000000, 1000000, -64], []], [[92.17179846001889, 63.43122042559975], [92.17179846001889, 63.43122042559975]], [[2, 51], [2, 51]], [[], [2, 3000000, 60, 38, 33, 78, -13, -93, -34, -81]], [[1, 1, 1], [1, 1, 1]], [[3, 4], [3, 4]], [[], [5, 3, 3]], [[-93, -57, -57, -51, 18, -57], [-93, -57, -57, -51, 18, -57]], [[3, 3000000, 3000000, 3], [3, 3000000, 3000000, 3]], [[3000000, 3000000, 3, 3], [3000000, 3000000, 3, 3]], [[3000000, 4], [3000000, 4]], [[-64, -81, 3, 31, 51], [3, 3]], [[0, 3, 2, 1, 2, 2, 3, 3, 2], [0, 3, 2, 1, 2, 2, 3, 3, 2]], [[false, false, true, false, true, false, true], [3, 2, 63, 2000000, 2, -93, 51, 3000000, -61, 3]], [[2, 2, 2], [2, 2, 2]], [[33.31988234449095, 63.07613966106393, 63.43122042559975], [33.31988234449095, 63.07613966106393, 63.43122042559975]], [[31], [31]], [[3, 3000000, 1, 2, 4, 38, 3, 3, 3], [3, 3000000, 1, 2, 4, 38, 3, 3, 3]], [[1, 63, 1, 1], [1, 63, 1, 1]], [[1, -34], [1, -34]], [[3, 3000000, 1, 4, -34], [3, 3000000, 1, 4, -34]], [[3000000, 3000000, 3, 3, 3], [3000000, 3000000, 3, 3, 3]], [[true, true, false, true], [false, true, false, false]], [[-70, -57, -93, 2999999, -48, false, false, 81], []], [[true, false], [true, false]], [[3, 3], [3, 3]], [[2, 2, -34, 3], [2, 2, -34, 3]], [[2, 5, 2, 2], [2, 5, 2, 2]], [[63.43122042559975, 63.43122042559975, -31.187672074988427, 63.43122042559975], [63.43122042559975, 63.43122042559975, -31.187672074988427, 63.43122042559975]], [[33.96565948782273, 44.99937757260167, 63.07613966106393, 63.43122042559975], [33.96565948782273, 44.99937757260167, 63.07613966106393, 63.43122042559975]], [[-57, -57, -51, 18, -57], [-57, -57, -51, 18, -57]], [[63.07613966106393, 63.07613966106393, 63.43122042559975, 46.05166169810378, 63.43122042559975, 63.07613966106393], [63.07613966106393, 63.07613966106393, 63.43122042559975, 46.05166169810378, 63.43122042559975, 63.07613966106393]], [[-57, -51, 18, -57], [-57, -51, 18, -57]], [[3, 2, 2], [3, 2, 2]], [[3, 3, 3, -81], [3, 3, 3, -81]], [[-64], [18, 2, 3]], [[2999999, 3000000, 38, 38], [2999999, 3000000, 38, 38]], [[31, 3, 3, 3], [31, 3, 3, 3]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n"}
{"task_id": "Mbpp/415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "entry_point": "max_Product", "canonical_solution": "\ndef max_Product(arr): \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n", "base_input": [[[1, 2, 3, 4, 7, 0, 8, 4]], [[0, -1, -2, -4, 5, 0, -6]], [[1, 2, 3]]], "atol": 0, "plus_input": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, -20, 30, -40, 50, -60, 70, -80, 90, -100]], [[2, 3, 5, 7, 11, 13, 17]], [[-5, -10, -20, -30, -1, 0, 1, 2, 3, 4, 5, 10, 20, 30]], [[1000000, 2000000, 3000000, 4000000]], [[999999, 1000000, 1000001]], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]], [[999999999, 888888888, -777777777, 666666666, -555555555]], [[1000, -2000, 3000, -4000, 5000, -6000, 7000, -8000, 9000, -10000]], [[-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000]], [[1000000, -1000000, 999999, -999999, 888888, -888888, 777777, -777777]], [[1000000000, 2000000000, 3000000000, 4000000000, 5000000000]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[100, 200, 300, 401, 500, 600, 700, 800, 1000]], [[-2, -1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 10]], [[-2, -1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 9]], [[2, 16, 3, 5, 12, 13, 17, 7]], [[1000000, 2000000, 3000000, 4000000, 4000000]], [[-5, -10, -20, -30, -1, 0, 1, 2, 3, 4, 5, 10, 20, 30, 2]], [[-10000, 20000, -30000, 40000, -50000, -70000, 60000, 80000, -90000, 100000]], [[-1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 8]], [[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[-2, -1, 0, 1, 2, 3, 4, 5, -555555555, 7, 8, 9, 10]], [[-1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 8, 6]], [[1000000, 2000000, 3000000, 4000000, 1000000]], [[100, 200, 201, 300, 400, 500, 600, 700, 800, 900, 1000, 1000]], [[1000000, 3000000, 4000000, 4000000]], [[100, 200, 301, 400, 500, 600, 700, 800, 900, 1000]], [[-1, 0, 1, 2, 800, 5, 6, -50000, 7, 8, 9, 8, 6]], [[-1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 8, 6, 1]], [[-1000000, 999999, -999999, 888888, -888888, 777777, -777777]], [[100, 20, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 900]], [[1000000, 2000000, 4000000, 1000000]], [[-2, -1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 10, 7]], [[10, -20, 30, -40, 50, 11, 10, -60, 70, -80, 90, -100, 10]], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2, 300, 800]], [[100, 200, -888888, 401, 500, 600, 700, 800, 1000]], [[-2, -1, 0, 1, 2, 4, 3, 4, 5, -555555555, 7, 8, 9, 10]], [[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 6]], [[999999999, 888888888, -777777777, -555555555]], [[-2, -1, 1000000000, 1, 2, 800, 70, 6, 7, 8, 9, 9]], [[-1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 8, 6, 0]], [[200, 201, 300, 400, 500, 600, 700, 900, 1000, 1000]], [[2, 4, 6, 8, 10, 13, 14, 16, 18, 20]], [[2, 17, 3, 5, 12, 13, 17, 7]], [[-2, -1, 0, 1, 2, 800, 5, 6, 7, 8, 9, 10, 7, 9]], [[100, 200, 300, 400, 500, 601, 700, 800, 5000, -6000]], [[100, 200, 300, 400, 300, 500, 700, 800, 900, 1000, 200]], [[-1, 0, 1, 2, 800, 4, 5, 6, 7, 8, 9, 8, 6, 1]], [[-1, 0, 1, 1, 800, 5, 6, 7, 8, 9, 8, 6, -1]], [[10, -20, 30, -40, 50, -60, 70, -80, -100]], [[-2, -1, 0, 1, 2, 3, 4, 5, -555555555, 7, 8, 9, 10, 8]], [[-1, 0, 1, 0, 2, 800, 5, 6, 7, 8, 601, 9, 8]], [[-2, -1, 0, 1, 2, 801, 5, 6, 7, 8, 9, 10, 7]], [[-2, -1, 0, 1, 2, 800, 5, 7, 8, 9, -90000, 7, 7]], [[10, -20, 30, -40, 50, -60, 70, -80, -100, 10]], [[100, 200, 201, 300, 400, 500, 600, 700, 800, 900, 1000, -6000, 1000]], [[-10000, 20000, -30000, 1000001, 40000, -50000, 60000, -70000, 80000, -90000, 100000]], [[1000000, 2000000, 100, 4000000, 4000000]], [[-2, -1, 0, 1, 2, 3, 5000000000, 5, 6, 7, 8, 9, 6]], [[-1000000, 999999, -999999, 888888, -888888, 777777, -777777, -999999]], [[-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000, -90000]], [[20000, -30000, 1000001, 40000, 888888888, -50000, 60000, 80000, -90000, 100000]], [[100, 200, 4999, 300, 400, 601, 700, 800, 5000, -6000]], [[100, 200, 300, 400, 500, 600, 700, 900, 1000]], [[100, -888888, 401, 500, 600, 700, 800, 1000]], [[-2, -1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 6, 6]], [[100, 200, 300, 400, 500, 601, 700, 800, 5000, -6000, 500]], [[100, 200, 201, 300, 400, 500, 600, -5, 700, 800, 900, 1000, -6000, 1000, 600]], [[-2, -1, 0, 1, 2, -40, 5, 6, 7, 8, 9, 10, 7]], [[2, 4, 6, 301, 8, 10, 13, 14, 16, 18, 20]], [[-1, 0, 1, 2, 800, 5, 6, -50000, 7, 8, 9, 8]], [[1000000, -1000000, 999999, -999999, 888888, -888888, 777777, -777777, 999999]], [[1000000, 4000000, 2000000, 4000000]], [[20000, -30000, 1000001, 666666666, 40000, 888888888, -50000, 60000, 80000, -90000, 100000]], [[100, 200, 300, 400, 300, 500, 700, 3000000, 800, 900, 1000, 200]], [[-1, 0, 1, 2, 800, 5, 6, -50000, 7, 8, 9, 8, 6, -1]], [[20000, -30000, 666666666, 40000, 888888888, -50000, 60000, 80000, -90000, 100000, 60000]], [[-1, 0, 1, 2, 800, 5, 6, -50000, 7, 8, 9, 8, 6, 5]], [[-1, 0, 1, 0, 2, 800, 5, 6, 7, 8, 601, 9, 8, 0, 2]], [[100, 200, 201, 300, 400, 500, 600, -5, 700, 800, 1000, -6000, 1000, 600]], [[100, 199, 300, 400, 500, 601, 700, 800, 5000, -6000, 601]], [[-1, 0, 1, 2, -40, 5, 6, 7, 8, 9, 10, 7]], [[-1, 0, 1, 3, 2, 800, 5, 6, -50000, 7, 8, 9, 9]], [[-2, -1, -1, 1, 2, 4, 3, 4, 5, -555555555, 7, 8, 9, 10]], [[100, 199, 300, 400, 500, 601, 700, 800, 5000, -6000, 601, 800]], [[100, 200, 300, 400, 101, 500, 600, 700, 900, 1000, 200, 200]], [[1000000, -1000000, 1000000, -999999, 888888, -888888, 777777, -777777, 999999]], [[999999, 1000000, -999999, 888888, 777777, -777777, 999999, 999999]], [[100, 200, 201, 300, 400, 500, 600, -5, 700, 9000, 900, 1000, -6000, 1000, 600]], [[100, 199, 300, 400, 601, 700, 800, 5000, -6000, 601, 800, 700]], [[100, 200, 201, 300, 400, 500, 600, 700, 14, 800, 900, 1000, -6000, 1000]], [[200, 201, 300, 400, 500, 600, 700, 900, 1000, 1000, 600]], [[100, 199, 300, 400, 500, 601, 101, 700, 800, 5000, -6000, 601]], [[-20, 30, -40, 50, -60, 900, 70, -80, 90, -100]], [[-1, 0, 1, 2, 800, 5, 6, -50000, 7, 8, 9, 8, 6, 6]], [[-2, -1, 0, 1, 2, 4, 5, 5, 7, 8, 9, 0]], [[-1, 0, 1, 3, 2, 2000000000, 800, 5, 6, -50000, 7, 8, 9, 9]], [[100, 200, 400, 101, 500, 600, 700, 900, 1000, 200, 200]], [[-1, 0, 1, 0, 2, 800, 5, 6, 8, 8, 601, 9, 8, 0, 2]], [[-20, 30, -40, 50, -79, -60, 900, 70, -80, 90]], [[20000, -30000, 1000001, 39999, 888888888, -50000, 60000, -79, -90000, 100000]], [[-2, -1, 0, 1, 2, 3, 4, 6, 7, 8, 9]], [[-20, 30, -40, 50, -60, 900, 70, 90, -100, -20]], [[100, 200, -888888, 401, 500, 700, 800, 1000]], [[-1000000, 999999, -999999, 888888, 199, 777777, -777777]], [[-1, 0, 2, -40, 5, 6, 7, 8, 9, 10, 7]], [[-2, -1, 0, 1, 2, 5, 5, 5, 7, 8, 9, 0]], [[-2, -1, -1, 1, 2, 4, 3, 4, -555555555, 7, 8, 9, 10]], [[-2, -1, 0, 1, 2, -1000000, 4, 6, 7, 8, 9, 7]], [[1000000, 30, 4000000, 1000000]], [[-1, 0, 1, 2, 800, -5, 5, 7, 8, 1, 9, 8, 6, 1]], [[-2, -1, 0, 1, 2, 800, 5, 6, 8, 9, 9]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n"}
{"task_id": "Mbpp/418", "prompt": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "entry_point": "Find_Max", "canonical_solution": "\ndef Find_Max(lst): \n    return max(lst, key = len)\n", "base_input": [[[["A"], ["A", "B"], ["A", "B", "C"]]], [[[1], [1, 2], [1, 2, 3]]], [[[1, 1], [1, 2, 3], [1, 5, 6, 1]]]], "atol": 0, "plus_input": [[[[], [], []]], [[[1, 2, 3], [4, 5, 6], []]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[[1, 2], [3, 4, 5]], [[6, 7], [8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17, 18]]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[[[[1]]]], [[[[2]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]]]], [[[[6, [7, [8, [9]]]]]]]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26]]], [[[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25]]]], [[[1, 2, 3], [5, 6, 6], [5, 6, 6], [5, 6, 6], [7, 8, 9], [4, 5, 6]]], [[[[[[1]]]], [[[[2]]]], [[[[3]]]], [[[[3]]]]]], [[[], [[1, [2, [3, [4, [5]]]]]], []]], [[[[3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16]], [[3, 4, 5], [6, 7, 8, 9]], [[22, 23, 24]]]], [[[[[[1]]]], [[[[3]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]]]]]], [[[[[[2]]]], [[[[3]]]]]], [[[1, 2, 3], [5, 6], [5, 6], [5, 6], [5, 6], [7, 8, 9], [4, 5, 6]]], [[[], [[1, [2, [3, [4, [5]]]]]], ["emZAcCGw"]]], [[[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25], [23, 24, 25]], [[20, 21, 22], [23, 24, 25], [23, 24, 25]]]], [[[[1, 2], [3, 4, 5]], [[6, 7], [8], [9, 10, 11, 12], [8], [8]], [[6, 7], [8], [9, 10, 11, 12], [8], [8]], [[13, 14, 15], [16, 17, 18]]]], [[[12, 5, 6, 6], [1, 2, 3], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [7, 8, 9], [4, 5, 6]]], [[[12, 5, 6, 6], [1, 2, 3], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [7, 8, 9], [4, 5, 6], [12, 5, 6, 6]]], [[[[1, [2], [2]], [1, [2], [2]]]]], [[[[1, 2], [3, 4, 5], [3, 4, 5]], [[6, 7], [8], [8], [8]], [[6, 7], [8], [8], [8]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[[1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]]]]], [[[], [[[[6, [7, [8, [9]]]]]]]]], [[[1, 2, 3], [6, 6], [6, 6], [6, 6], [6, 6], [7, 8, 9], [4, 5, 6]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [20.740277818565374, "hCZBB", true]]], [[[], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], []]], [[[], [], [[[[3]]]], [[[[3]]]]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[17, 18, 19, 20, 21], [22, 23, 24]], [[1, 2], [3, 4, 5], [6, 7, 8, 9]]]], [[[12, 5, 6, 6, 12], [1, 2, 3], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [7, 8, 9], [4, 5, 6], [12, 5, 6, 6, 12]]], [[[[[[1]]]], [[[[2]]]], [[], []], [[], []]]], [[[], [], [], []]], [[[5, 6], [5, 6], [5, 6], [5, 6], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[], [[1, [2, [3, [4, [5]]]]]], [], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14]]], [[[1, 2, 3], [-7, 6], [-7, 6], [-7, 6], [-7, 6], [7, 8, 9], [4, 5, 6]]], [[[1, 2, 3], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [7, 8, 9], [4, 5, 6]]], [[[], [], [[[[3]]]], [[[[3]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]]]], ["emZAcCGw"], ["emZAcCGw"]]], [[[[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]]]], [[[5, 6], [5, 6], [5, 6], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3], [4, 5, 6], [20.740277818565374, "hCZBB", true], [4, 5, 6]]], [[[2, 3]]], [[[], [[1, [2, [3, [4, [5]]]]]], [], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [[1, [2, [3, [4, [5]]]]]]]], [[[5], [1, 2, 3], [5], [5], [5], [5], [7, 8, 9], [4, 5, 6]]], [[[6], [6], [6], [6], [6], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[18, 2, 3], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [7, 8, 9], [4, 5, 6, 5], [7, 8, 9]]], [[[1, 2, 3], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [7, 8, 9], [4, 5, 6]]], [[[], [9, -67, 55, 18, -67], [], []]], [[[5], [2, 3], [5], [5], [5], [5], [7, 8, 9], [4, 5, 6]]], [[[2, 3], [2, 3]]], [[[6], [6], [6], [6], [6], [4, 5, 6], [7, 8, 9]]], [[[12, 5, 6, 6, 12], [12, 2, 3], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [7, 8, 9], [4, 5, 6], [12, 5, 6, 6, 12]]], [[[[14, 15], [16, 17, 18, 19]], [[14, 15], [16, 17, 18, 19]]]], [[[[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[20, 21, 22], [23, 24, 25]]]], [[[[1, [2, [3, [4, [5]]]]]], ["hCZBB", "emZAcCGw"], ["hCZBB", "emZAcCGw"]]], [[[], [], [], [false, 2], []]], [[[[1, [2, [3, [4, [5]]]]]], ["emZAcCGw"], ["emZAcCGw"], ["emZAcCGw"]]], [[[], []]], [[[], [[1, [2, [3, [4, [5]]]]]], [false, true, false, false, true, false, true, true, false, false], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [[1, [2, [3, [4, [5]]]]]]]], [[[], [], [], [], [], [], []]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [11, 12, 13, 14, 15]]], [[[[14, 15], [16, 17, 18, 19], [16, 17, 18, 19]], [[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25], [23, 24, 25]]]], [[[], [true, true, false, true, false, false], [9, -67, 55, 18, -67], []]], [[[[1, [4], [4], [4]], [1, [4], [4], [4]], [1, [4], [4], [4]]]]], [[[2, 3, 2]]], [[["VGFKYtM", "jYImzalw", "K", "hssnGSPRt", "lGtBwSKKld", "hCZBB"], [[1, [[3, [4, [5]]]], [[3, [4, [5]]]]], [1, [[3, [4, [5]]]], [[3, [4, [5]]]]]], [[1, [[3, [4, [5]]]], [[3, [4, [5]]]]], [1, [[3, [4, [5]]]], [[3, [4, [5]]]]]], [], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14]]], [[[5, 6, 5], [5, 6, 5], [5, 6, 5], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[[[[3]], [[3]]], [[[3]], [[3]]]], [[[[1]]]], [[[[2]]]], [[[[3]], [[3]]], [[[3]], [[3]]]], [[[[3]], [[3]]], [[[3]], [[3]]]]]], [[[18, 2, 3], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [7, 8, 9], [4, 5, 6, 5], [7, 8, 9], [-7, 6, -7, -7]]], [[[[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], ["hCZBB", "emZAcCGw"]]], [[[[1, [2, [3, [4, [5]]]]]], ["hssnGSPRt"], ["hssnGSPRt"], ["hssnGSPRt"], ["hssnGSPRt"]]], [[[2, 26, 7], [2, 26, 7]]], [[[[[[2]]]], [[[[3]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], []]], [[[[[[1]]]], [[[[3]]]], [[[[3]]]], [[[[3]]]]]], [[["jYImzalw"], ["jYImzalw"], ["jYImzalw"]]], [[[]]], [[["LLhHY", "K"], []]], [[[[20, 21, 22], [23, 24], [23, 24]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[20, 21, 22], [23, 24], [23, 24]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]]]], [[[[1, [2, [3, [4, [5]]]]]], ["emZAcCGw"]]], [[[5, 6, 5, 5], [5, 6, 5, 5], [5, 6, 5, 5], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[[3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16]], [[3, 4, 5], [6, 7, 8, 9]], [[22, 23, 24]], [[3, 4, 5], [6, 7, 8, 9]], [[3, 4, 5], [6, 7, 8, 9]]]], [[[[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]]]], [[[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[20, 21, 22], [23, 24, 25]]]], [[[1, 2, 3], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [7, 8, 9], [4, 5, 6], [-7, 6, -7]]], [[[], [[1, [2, [3, [4, [5]]]]]], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14]]], [[[], [[[[6, [7, [8, [9]]]]]]], []]], [[[[1, 2], [3, 4, 5]], [[6, 7], [8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [7, 9], [4, 5, 6], [7, 9]]], [[[[1, [2, [3, [4, [5]]]]]], []]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26]]], [[[1, 2, 3], [6, 6], [6, 6], [6, 6], [7, 8, 9], [4, 5, 6], [6, 6]]], [[[6], [6], [6], [6], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]]], [[[[[[2]]]], [[[]], [[]]], [[[]], [[]]]]], [[[[1, 2, 3], [4, 5, 9, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3], [4, 5, 9, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[20, 21, 22], [23, 24, 25], [20, 21, 22]]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 6], [4, 6]]], [[[[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[20, 21, 22], [23, 24, 25]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]]]], [[[false, false, false, false, true, true], [[1, [2, [3, [4, [5]]]]]], []]], [[[[6, 7], [8], [8], [8]], [[6, 7], [8], [8], [8]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[[[[1]]]], [[[[2]]]], [[[[3]], [[3]]], [[[3]], [[3]]]], [[[[3]], [[3]]], [[[3]], [[3]]]]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[17, 18, 19, 20, 21], [22, 23, 24]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[4, 5, 6], [20.740277818565374, "hCZBB", true], [4, 5, 6]]], [[[[[[3]], [[3]]]], [[[[1]]]], [[[[2]]]], [[[[3]], [[3]]]], [[[[3]], [[3]]]]]], [[[], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]]]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n"}
{"task_id": "Mbpp/419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n", "entry_point": "round_and_sum", "canonical_solution": "\ndef round_and_sum(list1):\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n", "base_input": [[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[5, 2, 9, 24.3, 29]], [[25.0, 56.7, 89.2]]], "atol": 0, "plus_input": [[[]], [[1, 2, 3, 4, 5]], [[999999999999999, 888888888888888, 777777777777777]], [[1234.56789, 9876.54321, 1111.22222, 3333.44444]], [[1234.56789, 9876.54321, -1111.22222, -3333.44444]], [[-9999999999.998, 8888888888.887, -10000000000.43, 7777777777.4, -99999999999.999, 5555555555.5432]], [[12.345, -6.789, 9.876, -3.21, 1.234]], [[true, true, false, true, true, false, false, false, true, true]], [[1234.56789, -1111.22222, -3333.44444]], [[true, true, false, true, true, false, false, false, true, true, false]], [[12.345, -6.789, 9.876, 1.234]], [[12.345, -6.789, -1.8925412084393396, 1.234]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 5555555555.5432]], [[12.345, 9.876, 1.234]], [[1.234, 9876.54321, 1111.22222, 3333.44444]], [[1233.577044983001, 9876.54321, -1111.22222, -3333.44444]], [[1, 2, 3, 3, 4, 5]], [[12.345, -6.789, 1.234, -6.789]], [[-9999999999.998, -10000000000.43, 7777777776.487441, -99999999999.999, 5555555555.5432]], [[12.345, 9.876, 1.234, 13.039304120445887, 12.345]], [[-10000000000.43, 1234.56789, 9876.54321, 1111.22222, 9876.595139749, 3333.44444]], [[-9999999999.046753, 8888888888.887, -10000000000.43, 7777777777.4, -99999999999.999, 5555555555.5432, 8888888888.887]], [[12.345, -2.3815343652904044, -6.789, 1.234, -3.21, 1.234]], [[true, true, false, true, true, false, false, false, true, true, false, true]], [[12.345, -2.3815343652904044, -6.323863532860684, 1.234, -3.21, 1.234]], [[-9999999999.998, -10000000000.43, 7777777776.487441, -99999999999.999, 5555555555.5432, -10000000000.43]], [[-9999999999.998, -3333.44444, 5555555555.5432, -9999999999.998]], [[-3333.44444, 5555555555.5432, -9999999999.998]], [[1, 2, 3, 3, 4]], [[12.345, 1234.56789, 9.876, 1.234]], [[1234.56789, 9876.54321, -1111.22222]], [[1, 2, 3, 999999999999999, 5]], [[12.345, 1234.56789, 12.345]], [[true, true, false, true, true, false, false, false, true, true, false, true, true, true]], [[12.345, -2.3815343652904044, -6.323863532860684, 1.234, 1.234, 12.345]], [[12.345, 1.234, 13.039304120445887, 12.345]], [[12.345, 1.0234087299417132, -6.789, 1.234, -6.789]], [[1.234, 9876.54321, 1111.22222]], [[1.234, 9876.54321]], [[true, true, false, true, false, true, false, false, false, true, true]], [[12.345, 1234.56789, 12.345, 1234.56789]], [[1235.513119491916, 9875.64860469328, 9875.902825290452, 9876.54321, 1111.22222, 3333.44444, 9876.54321]], [[1.234, 1235.513119491916]], [[1, 2, 3, 5]], [[-9999999999.998, -10000000000.43, 8888888888.887, -10000000000.43, 7777777777.4, -99999999999.999, 5555555554.949068]], [[12.345, 1234.9868070521075, 12.345]], [[5, 1, 2, 3, 4, 5]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 5555555556.229488, 5555555556.229488]], [[true, true, false, true, true, true, false, false, true, true, false, true]], [[1.234, 1235.513119491916, 1235.513119491916]], [[-9999999999.998, -10000000000.43, 8888888888.887, -10000000000.43, 7777777777.4, 7777777777.281848, -99999999999.999, 5555555554.949068, 7777777777.4, -10000000000.43]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 5555555556.229488, 5555555556.229488, -9999999999.998]], [[1234.56789, -1111.22222, -3333.44444, -3333.44444]], [[1, 2, 3]], [[false, true, true, false, true, true, true, false, false, true, true, true, true, false]], [[-9999999999.998, -10000000000.43, 7777777777.4, 5555555554.949068, -99999999999.999, 5555555555.5432]], [[-9999999999.998, 7777777776.487441, -99999999999.999, 5555555555.5432]], [[9875.64860469328, 1.234, 1235.513119491916]], [[12.345, -6.789, -1.8925412084393396, 12.175109362539212, 1.234]], [[-9999999999.998, -5984060847.287674, 7777777776.487441, -99999999999.999, 5555555555.5432, -10000000000.43]], [[-6.789, 1234.56789, 9876.54321, -1111.22222]], [[5, 1, 2, 3, 4, 5, 5]], [[-9999999999.998, -3333.44444, 5555555555.5432, -9999999999.998, -3333.44444]], [[12.345, -6.789, 9.876, 7777777777.281848, 1.234]], [[-9999999999.998, -10000000000.43, 5555555554.949068, -99999999999.999, 5555555555.5432]], [[9875.55054044343, 1234.56789, 9876.54321, -1111.22222, -3333.44444]], [[1234.56789, -3333.22999419903, -3332.447053089045, -1111.22222, -3333.44444, -3333.44444, -3333.44444]], [[7777777777.4, -3333.22999419903, -2003.815194513465, 12.345, -1111.22222, -3333.44444, -3333.44444, -3333.44444]], [[false, true, true, false, false, true, true, true, false, false, true, true, true, true, false]], [[12.345, 9.876, 1235.513119491916, 1.234]], [[true, true, false, true, true, false, false, false, true]], [[9875.64860469328, 1.234, 1204.5558674183492]], [[1234.56789, -9999999999.998, -3333.44444, 5555555555.5432, 7216273895.0863905, -9999999999.998]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 1204.5558674183492]], [[1.234, 13.039304120445887, 12.345]], [[12.345, 1.0234087299417132, -6.789, 1.234, -6.789, 1.0234087299417132]], [[-1111.22222, 12.345, -6.789, -1.8925412084393396, 12.175109362539212, 1.234]], [[12.345, -2003.815194513465, -6.789, 9.876, -3.21, 1.234, 0.7325595045021591]], [[9.876, 12.345, -6.789, 9.876, 7777777777.281848, 1.234]], [[-9999999999.998, -10000000000.43, 7777777776.487441, -99999999999.999, 5555555555.3888855]], [[1111.22222, -1111.22222, -3333.44444, -3333.44444]], [[true, true, false, true, false, true, false, false, true, true]], [[12.345, -6.789, -1.8925412084393396, 1.234, -1.8925412084393396]], [[-9999999999.998, 1111.22222, -10000000000.43, 7777777777.4, 5555555554.949068, -99999999999.999, 5555555555.5432, -99999999999.999]], [[false, true, false, true, true, false, false, false, true, true, true, true, false, false]], [[true, false, false, true, true, true, false, false, true, true, false, true]], [[-9999999999.998, -3333.44444, -9999999999.998]], [[true, true, false, false, false, true, false, false, false, true, true]], [[2, 3, 4, 2, 5]], [[12.345, -2.3815343652904044, -6.789, 1.234, -3.2950216498422646, -3.21, 1.234]], [[-9999999999.998, -8911921504.74599, 7777777776.487441, -99999999999.999, 5555555555.3888855, -9999999999.998]], [[1.234, 7777777776.487441, -10000000000.43]], [[false, true, false, true, true, true, false, false, false, true, true, true, true, false, false, false]], [[8888888888.887, 1111.22222, 9876.54321, 1111.22222, 1.234]], [[12.345, -6.789, -1.8925412084393396, 9.876, 1.234]], [[1.234, 9876.54321, 1111.22222, 1111.22222]], [[-8304365886.95686, -3333.44444, 5555555555.5432, -9999999999.998]], [[-2003.815194513465, 8888888888.887, 1111.22222, 9876.54321, 1111.22222, 1.234]], [[1234.56789, -3333.22999419903, -3332.447053089045, -1111.22222, -3333.44444, -3333.44444]], [[1234.56789, -3333.22999419903, -3332.447053089045, -1111.22222, -3333.44444, -3333.44444, -3333.44444, 1234.56789]], [[-9999999999.998, 7777777777.4, -99999999999.999, 5555555556.229488, 5555555556.229488, -9999999999.998]], [[13.039304120445887, 12.345]], [[1234.56789, -3.2950216498422646, -3333.44444]], [[12.345, 1.0234087299417132, -9.234536526623243, 1.234, -6.789]], [[12.345, -6.789, 9.876, 7777777777.281848, -6.323863532860684, 1.234]], [[1.234, 13.039304120445887]], [[1, 2, 2]]], "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n"}
{"task_id": "Mbpp/420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "entry_point": "cube_Sum", "canonical_solution": "\ndef cube_Sum(n): \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n", "base_input": [[2], [3], [4]], "atol": 0, "plus_input": [[100], [1000], [true], [false], [1001], [1002], [999], [99], [98], [101], [35], [69], [998], [97], [96], [36], [65], [70], [66], [1003], [997], [996], [995], [71], [68], [72], [102], [64], [994], [103], [73], [993], [67], [37], [91], [104], [63], [62], [992], [34], [92], [1004], [95], [991], [33], [1005], [89], [90], [105], [93], [106], [59], [28], [39], [74], [94], [40], [1006], [60], [88], [55], [38], [75], [27], [87], [61], [26], [76], [58], [32], [56], [25], [57], [31], [29], [45], [30], [46], [44], [9], [8], [77], [990], [107], [54], [1007], [7], [43], [47], [42], [24], [6], [5], [108], [86], [989], [12], [1008], [53], [85], [988], [41]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n"}
{"task_id": "Mbpp/421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n", "entry_point": "concatenate_tuple", "canonical_solution": "\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n", "base_input": [[["ID", "is", 4, "UTS"]], [["QWE", "is", 4, "RTY"]], [["ZEN", "is", 4, "OP"]]], "atol": 0, "plus_input": [[["The", "quick", "brown", "fox"]], [[]], [[42]], [[null, null, null, null]], [[null, 42, "foo", true]], [["hello-world", "hello", "-", "world"]], [[10, "Hello", true, 3.14, [1, 2, 3], {"a": 1, "b": 2}]], [[["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"]]], [[{"a": 1, "b": 2}]], [[[1, 2], [3, 4], [5, 6]]], [[[1, 2, 3], ["a", "b", "c"], [[true, false], ["x", "y", "z"]]]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"]]], [["quichk", "The", "quick", "brown", "fox"]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["g", "h", "i"]]], [[false]], [[10, "Hello", true, 3.14, [1, 2, 3], {"a": 1, "b": 2}, true]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["g", "h", "i"]]], [[{"a": 5, "b": 2}]], [["The", "quick", "gbrown", "fox"]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["g", "h", "i"], ["a", "b", "c"]]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["d", "cd", "e", "f"], ["g", "h", "i"], ["g", "h", "i"]]], [[["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"], ["UTS", "is", null]]], [[null, 42, "foo", true, "foo"]], [["awesome", "quick", "brown", "y"]], [[[5, 6], [3, 4]]], [[["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"], ["Python", "is", "awesome"]]], [[10, "Hello", true, 3.14, [1, 2, 3]]], [["quick", "brown", "y"]], [[["d", "Python", "is", "awesome"], ["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"], ["Python", "is", "awesome"]]], [[["aa", "a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["g", "h", "i"]]], [[["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"], ["Python", "is", "awesome"], ["ID", "is", 4]]], [["ID", "hello-world", "hello", "-", "world"]], [[10, "Hello", false, 3.14, [1, 2, 3], {"a": 1, "b": 2}]], [[{"b": 2}]], [[{"a": 1, "b": 2, "aa": 0}]], [[[1, 1, 3], [1, 2, 3], ["a", "b", "c"], [[true, false], ["x", "y", "z"]]]], [[null, null, null, null, null, null]], [["quichk", "awesome", "The", "quick", "brown", "fox"]], [[{"a": 5, "b": 42}]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["g", "h", "i"], ["aa", "a", "b", "c"]]], [[[5, 6, 5], [3, 4]]], [[[1, 1, 3], [1, 2, 3], ["a", "b", "c"], [[true, false], ["x", "y", "z"]], [[true, false], ["x", "y", "z"]]]], [["The", "quick", "fox"]], [[42, 42]], [[10, "Helo", true, 3.14, [1, 2, 3]]], [[null, 42, "foo", true, 5, "foo"]], [["brown", "y", "brown"]], [[{"a": 5, "b": 5}]], [[null, 42, "foo", true, "foo", true]], [[["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"], ["UTS", "is", null], ["UTS", "is", null]]], [[null, 42, 42, "foo", true, 5, "foo"]], [["quichk", "awesome", "The", "quick", "brown", "fox", "fox"]], [[5, 5]], [[[1, 2], [3, 4], [1, 2], [5, 6]]], [[["a", "b", "c"], ["d", "e", "f"], ["d", "UTS", "e", "f"], ["g", "h", "i"], ["g", "h", "i"]]], [[42, 5, 42]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["g", "h", "i", "i"], ["g", "h", "i"]]], [["quichk", "awesome", "quick", "brown", "fox", "fox"]], [[10, true, "Hello", true, 3.14, [1, 2, 3], {"a": 1, "b": 2}]], [[["ID", "is", 4], ["UTS", "is", null], ["Python", "is", "awesome"], [null, "UTS", "is", null]]], [[4]], [[5, 10, 42]], [[null, 42, 42, "foo", true, 5, "foo", 43, "foo"]], [[5]], [[[1, 2, 3, 3], [1, 1, 3], [1, 2, 3], ["a", "c"], [[true, false], ["x", "y", "z"]], [[true, false], ["x", "y", "z"]]]], [["quichk", "awesome", "quick", "brown", "fox", "fox", "fox"]], [[true, 5, 5]], [[null, 42, "ffoo", true, "foo"]], [[[true], null, -88, 96.91126492184753, "PcXu", false]], [[10, "Helo", true, 3.14, [1, 2, 3], "Helo"]], [[[1, 2], [3, 4], [1, 2]]], [["awesome", "quick", "brown", "y", "y"]], [["hello-world", "hello", "-", "world", "world"]], [[5, 42]], [[null, 42, "foo", true, 5, "foo", null]], [[null, 42, 42, "fo", true, 5, "foo"]], [[4, "Hello", true, 3.14, [1, 2, 3], {"a": 1, "b": 2}, true]], [[-100, -22, 6, 5, -22]], [["awesome", "Hello", "quick", "brown", "y", "y"]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "worldi", "h", "i"], ["d", "UTS", "e", "f"], ["g", "h", "i"], ["g", "h", "i"]]], [["brown", "y", "brown", "brown"]], [["y", "y", "brown"]], [[null, null, null, null, null]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["d", "cd", "e", "f", "e"], ["g", "h", "i"]]], [[[1, 2], [3, 4]]], [[[1, 2, 3, 3], [1, 2, 3], ["a", "c"], [[true, false], ["x", "y", "z"]], [[true, false], ["x", "y", "z"]]]], [[null, -88, 96.91126492184753, "PcXu", false]], [[{"a": 1, "b": 6, "aa": 0}]], [[["is", 4], ["UTS", "is", null], ["Python", "is", "awesome"]]], [[["ID", "is", 4], ["Python", "is", "awesome"], ["Python", "is", "awesome"]]], [["quichk", "awesome", "quick", "brown", "fox", "fox", "Python"]], [[{"a": 5, "b": 2}, {"a": 5, "b": 2}, {"a": 5, "b": 2}]], [["awesome", "quick", "brown", "y", "y", "y", "y"]], [[-18, -100, -75, -41, 80, -42, 51, -69, -69]], [["awesome", "fooHelo", null, 42, 42, "foo", true, 5, "foo"]], [[[3, 4]]], [["awesome", "quick", "fo", "y", "y", "y", "y"]], [[true, -69, 10, 5]], [["hello-world", "hello", "UTS", "-", "world", "world"]], [[null, 42, 42, "foo", true, "foo"]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "Python", "i"], ["g", "h", "i"]]], [[-18, -75, -41, 80, -42, 51, -69, -69, -69]], [[["aa", "a", "b", "c"], ["a", "b", "c"], ["g", "h", "i"], ["g", "h", "i"], ["a", "b", "c"]]], [[null, 42, 42, "foo", true, 5, "foo", 43, "foo", null]], [[10, "Hello", true, 3.14, 80, [1, 2, 3], {"a": 1, "b": 2}, true, [1, 2, 3]]], [[[1, 2, 3, 3], [1, 1, 3], [1, 2, 3], ["a", "c"], [[true, false], ["x", "y", "z"], [true, false]], [[true, false], ["x", "y", "z"]], [1, 1, 3]]], [["brhello-worldwn", "y", "brown"]], [[{"a": 1, "b": 2, "aa": 0}, {"a": 1, "b": 2, "aa": 0}]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "worldi", "h", "i"], ["d", "UTS", "e", "f"], ["g", "h", "i"], ["g", "h", "i"], ["a", "b", "c"]]], [[54, -18]], [[null, 42, 42, "foo", true, 5, "foo", 43, "foo", 42]], [["awesome", "brown", "y"]]], "contract": "\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n"}
{"task_id": "Mbpp/422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n", "entry_point": "find_Average_Of_Cube", "canonical_solution": "\ndef find_Average_Of_Cube(n):  \n    return sum([(i ** 3) for i in range(1, n + 1)]) / n\n", "base_input": [[2], [3], [1]], "atol": 0, "plus_input": [[10], [100], [1000], [9], [7], [8], [998], [102], [101], [6], [99], [5], [997], [1001], [11], [999], [994], [993], [12], [true], [992], [13], [991], [990], [4], [995], [39], [1002], [996], [97], [16], [3], [40], [1004], [41], [1005], [15], [103], [1006], [94], [989], [38], [17], [96], [95], [93], [14], [2], [1], [1003], [92], [1007], [98], [1008], [1009], [42], [35], [36], [37], [988], [43], [34], [104], [33], [65], [105], [44], [54], [106], [55], [32], [53], [56], [91], [31], [90], [52], [28], [30], [57], [29], [89], [18], [59], [66], [64], [63], [62], [60], [61], [27], [26], [88], [87], [107], [1010], [67], [85], [25], [1011], [51], [68], [50]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n"}
{"task_id": "Mbpp/424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n", "entry_point": "extract_rear", "canonical_solution": "\ndef extract_rear(test_tuple):\n  return [ele[-1] for ele in test_tuple]\n", "base_input": [[["Mers", "for", "Vers"]], [["Avenge", "for", "People"]], [["Gotta", "get", "go"]]], "atol": 0, "plus_input": [[["Lorem", "ipsum", "dolor", "sit", "amet"]], [["Quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]], [["Python", "is", "a", "widely", "used", "programming", "language"]], [["This", "is", "a", "test", "for", "the", "function"]], [["Complex", "input", "to", "test", "the", "function", "with"]], [["I", "love", "writing", "code", "in", "Python"]], [["The", "function", "should", "handle", "both", "strings", "and", "numbers"]], [["We", "expect", "the", "output", "to", "be", "a", "list", "of", "characters"]], [[]], [["Hello", "World!", "12345"]], [["123", "abc", "456"]], [["Hello World", "This is a test", "for the function"]], [["apple", "banana", "cherry", "durian"]], [["apple", "orange", "mango", "kiwi", "papaya"]], [["dog", "cat", "hamster", "guinea pig", "rabbit", "gerbil"]], [["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog!"]], [["hello123", "world456", "python789"]], [["1", "2", "3", "4", "5"]], [["-1", "-2", "-3", "-4", "-5"]], [["9", "a", "b", "1", "2"]], [["input", "kiwi", "app4le", "papaya"]], [["Hello", "World!", "12345", "He", "12345"]], [["apple", "banana", "mango", "cherry", "durian", "bananna", "durian", "durian"]], [["The", "function", "over", "should", "handle", "both", "strings", "and", "numbers"]], [["strings", "This is a test", "for the function"]], [["banana", "durian", "apple"]], [["Hello World", "This is a test"]], [["The", "quick", "brown", "fox", "jumps", "over", "the", "World", "lazy", "dog!"]], [["banana", "durian", "fox"]], [["The", "quic", "brown", "fox", "jumps", "over", "the", "World", "lazy", "dgd!"]], [["The", "function", "over", "should", "handle", "both", "strings", "and", "numbers", "strings"]], [["dog", "cat", "hamster", "guinea pig", "rabbit", "gerbil", "guinea pig"]], [["brown", "fox", "jumps", "over", "the", "lazy", "dog"]], [["dog", "cat", "love", "used", "hamster", "guinea pig", "rabbit", "gerbil"]], [["strings", "This is a test", "for the function", "strings"]], [["apple", "orange", "maoutputngo", "kiwi", "papaya"]], [["1", "2", "3", "4", "dolor"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "strings"]], [["brown", "fox", "jumps", "over", "the", "lazy", "dog", "fox"]], [["The", "function", "over", "should", "handle", "dgd!", "strings", "and", "numbers"]], [["uswidelyed", "dog", "cat", "love", "used", "hamster", "guinea pig", "rabbit", "gerbil"]], [["The", "quick", "brown", "fox", "expect", "jumps", "over", "the", "lazy", "dog!"]], [["dog", "cat", "love", "used", "guinea pig", "rabbit"]], [["This", "is", "a", "test", "for", "function"]], [["This", "is", "a", "sit", "test", "for", "function"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "strings", "strings"]], [["4", "brown", "fox", "jumps", "over", "the", "lazy", "doog", "fox"]], [["1", "2rabbit", "3", "4", "handle", "dolor"]], [["The", "quic", "brown", "fox", "jumps", "the", "World", "d!gd!", "abc", "dgd!"]], [["The", "function", "over", "should", "handle", "ThTe", "both", "strings", "and", "numbers", "strings"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "strings", "handle"]], [["dog", "cat", "hamster", "guinea pig", "rabbit", "gerbil", "guinea pig", "guinea pig"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "and", "string", "strings", "strings"]], [["Quick", "brown", "fox", "jumps", "over", "laazy", "the", "lazy", "dog"]], [["dog", "ctI", "hamster", "guinea pig", "rabbit", "gerbil", "guinea pig", "guinea pig"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "-2", "numbers", "strings", "handle"]], [["This", "is", "a", "test", "for", "the", "function", "for", "for"]], [["apple", "laazy", "banana", "mango", "cherry", "durian", "bananna", "durian", "durian"]], [["This", "is", "a", "test", "for", "function", "for"]], [["apple", "laazy", "banana", "mango", "cherry", "durian", "bananna", "durian", "durian", "cherry"]], [["The", "function", "over", "should", "handle", "ThTe", "both", "and", "numbers", "strings", "over"]], [["input", "kiwi", "pappaya", "gerbil", "papaya"]], [["dog", "cat", "hamsterof", "guinea pig", "rabbit", "gerbil"]], [["The", "function", "over", "should", "handle", "both", "strings", "anjumpsd", "numbers", "strings"]], [["The", "quick", "brown", "fox", "brown", "jumps", "over", "the", "lazy", "dog!"]], [["dtheog", "love", "used", "guinea pig", "rabbit"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "strings", "handle", "and"]], [["dog", "cat", "guinea pig", "rabbit", "gerbil", "dog"]], [["kiwi", "app4le", "papaya"]], [["Complex", "-5", "love", "used", "hamster", "guinea pig", "rabbit", "gerbil", "guinea pig"]], [["Lorem", "dolor", "cat", "sit", "amet", "amet"]], [["The", "function", "over", "should", "handle", "dgd!", "strings", "and", "numbers", "numbers", "The"]], [["The", "functon", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "strings", "handle"]], [["apple", "orange", "mango", "kiwi", "papaya", "kiwi"]], [["brown", "fox", "jumps", "over", "the", "lazy", "dog", "fox", "fox"]], [["Hello World", "This is a test", "for the function", "Hello World"]], [["This", "test", "for", "function"]], [["dtheog", "love", "used", "guinea pig", "rabbit", "guinea pig"]], [["This", "a", "test", "for", "the", "function"]], [["uswidelyed", "dog", "cat", "used", "hamster", "guinea pig", "rabbit", "gerbil"]], [["The", "function", "should", "handle", "both", "strings", "botd!gd!h", "and", "numbers"]], [["The", "funnction", "over", "should", "handle", "dgd!", "strings", "and", "numbers"]], [["-3The", "function", "over", "should", "handle", "both", "strings", "and", "numbers", "strings", "handle"]], [["rrabbit", "dog", "ctI", "hamster", "guinea pig", "rabbit", "gerbil", "guinea pig", "guinea pig"]], [["banana", "apple", "apple"]], [["dog", "cat", "used", "hamter", "guinea pig", "rabbit", "gerbil"]], [["-3The", "function", "over", "d!gd!", "handle", "both", "strings", "and", "numbers", "strings", "handle"]], [["dog", "cat", "guinea pig", "123", "gerbil", "dog"]], [["We", "expect", "pappaya", "output", "to", "be", "a", "list", "of", "characters"]], [["banana", "durian", "fox", "durian"]], [["The", "function", "over", "should", "ThTe", "handale", "both", "strings", "and", "numbers", "strings", "strings", "The"]], [["dtheog", "love", "used", "guinea pig", "rabbit", "guinea pig", "guinea pig"]], [["This", "is", "a", "for", "function"]], [["1", "3", "4", "handle", "dolor"]], [["Imango", "love", "writing", "code", "in", "Python", "Python"]], [["The", "function", "over", "should", "ThTe", "numipsumrs", "handle", "both", "brown", "and", "numbers", "strings"]], [["I", "love", "writing", "code", "in", "Python", "I"]], [["Thloveis", "is", "a", "sit", "test", "for", "function"]], [["rOdbYFwfQl", "TI", "hamter", "jumps"]], [["input", "kiwi", "pappaya"]], [["dtheog", "love", "used", "guinea pig", "rabbit", "guinea pigwriting", "guinea pig", "guinea pig"]], [["The", "brown", "fox", "jumps", "the", "World", "d!gd!", "abc", "dgd!"]], [["The", "function", "over", "should", "ThTe", "3", "both", "strings", "and", "numbers", "strings", "handle"]], [["ctI", "banana", "apple", "apple"]], [["input", "kiwi", "app4le", "papaya", "app4le"]], [["The", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "strings", "handle"]], [["The", "brown", "fox", "Wrld", "jumps", "the", "World", "d!gd!", "abc", "dgd!"]], [["apple", "orange", "maoutputngo", "kiwi", "papaya", "apple"]], [["We", "expect", "the", "output", "to", "be", "a", "list", "of", "characters", "expecct"]], [["1", "2", "3", "4", "dolor", "2"]], [["apple", "banana", "durian", "durian"]], [["The", "function", "over", "shoduld", "ThTe", "handle", "both", "strings", "and", "numbers", "strings", "strings"]], [["The", "function", "over", "should", "ThTe", "handle", "both", "strings", "and", "numbers", "used"]], [["brown", "ddog", "fox", "jumps", "over", "the", "lazy", "dog"]], [["-33The", "function", "over", "d!gd!", "handle", "both", "strings", "and", "numbers", "strings", "handle"]], [["We", "expect", "papWorldpaya", "output", "to", "be", "a", "of", "characters"]], [["input", "kiwi", "app4le"]], [["9", "a", "1", "2"]], [["love", "9", "TI", "hamter", "jumps"]], [["The", "funnction", "over", "nmangoumbers", "should", "handle", "dgd!", "strings", "and", "numbers"]]], "contract": "\n  assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n"}
{"task_id": "Mbpp/425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n", "entry_point": "count_element_in_list", "canonical_solution": "\ndef count_element_in_list(list1, x): \n    return sum(x in sublist for sublist in list1)\n", "base_input": [[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1], [[["A", "B"], ["A", "C"], ["A", "D", "E"], ["B", "C", "D"]], "A"], [[["A", "B"], ["A", "C"], ["A", "D", "E"], ["B", "C", "D"]], "E"]], "atol": 0, "plus_input": [[[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"]], "A"], [[], "A"], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"]], "G"], [[["A", "B", "C", "D", "E"], ["F", "G", "H"], ["I", "J", "K", "L"]], "F"], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], "L"], [[["A", "B", "C"], ["D", "E"], ["F", "G", "H", "I", "J"]], "K"], [[["A", "B", "C", "D"], ["E", "F"], ["G", "H", "I", "J"], ["K"], ["L", "M", "N"]], "D"], [[["A", "B"], ["C", "D"], ["E"], ["F", "G", "H", "I", "J"]], "I"], [[["A", "B"], ["C", "D"], ["E"], ["F", "G", "H", "I", "J"]], "J"], [[["A", "B"], ["C", "D"], ["F", "G", "H", "IB", "J"], ["E"], ["F", "G", "H", "IB", "J"]], "J"], [[["A", "B", "C", "D"], ["E", "F"], ["G", "H", "I", "J"], ["K"]], ""], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"]], "GG"], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"]], "GG"], [[["C", "D"], ["E"], ["F", "G", "H", "I", "J"]], "J"], [[["A", "B", "C", "D"], ["E", "F"], ["G", "H", "I", "J"], ["K"]], "IB"], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"], ["H"]], [["A", "B"], ["C", "D"], ["E", "F"], ["H"], ["H"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"]], ""], [[["A", "B"], ["D"], ["E", "F"], ["G", "H"], ["A", "B"]], "A"], [[["A", "B", "C", "D"], ["G", "H", "I", "J"], ["K"]], "E"], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], "LL"], [[["B"], ["C", "D"], ["B"], ["E", "F"], ["G", "H"]], "GG"], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"]], "C"], [[["BB", "A", "B"], ["C", "D"], ["F", "G", "H", "IB", "J"], ["E"], ["F", "G", "H", "IB", "J"]], "J"], [[["A", "B", "C", "D", "E"], ["F", "G", "H"], ["I", "J", "K", "L"]], "I"], [[["A", "B", "C", "D", "E"], ["F", "G", "", "H"], ["F", "G", "", "H"], ["I", "J", "K", "L"]], [["A", "B", "C", "D", "E"], ["F", "G", "", "H"], ["F", "G", "", "H"], ["I", "J", "K", "L"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"]], ""], [[["A"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], "L"], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], [["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]]], [[["D"], ["E"], ["D"], ["F", "G", "H", "I", "J"]], [["D"], ["E"], ["D"], ["F", "G", "H", "I", "J"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"]], [["A", "B"], ["C", "D"], ["E", "F"], ["H"]]], [[["A", "B"], ["LLF", "C", "D"], ["E", "F"], ["H", "H"]], [["A", "B"], ["LLF", "C", "D"], ["E", "F"], ["H", "H"]]], [[["A", "B", "C", "D", "E"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["I", "J", "K", "L"]], [["A", "B", "C", "D", "E"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["I", "J", "K", "L"]]], [[["A", "B"], ["LLF", "C", "D"], ["F"], ["F"], ["H", "H"]], [["A", "B"], ["LLF", "C", "D"], ["F"], ["F"], ["H", "H"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["G", "H"], ["C", "D"]], [["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["G", "H"], ["C", "D"]]], [[["B"], ["C", "D"], ["E", "F"], ["G", "H"]], "GG"], [[["C", "D"], ["E", "F"], ["H"]], [["C", "D"], ["E", "F"], ["H"]]], [[["A", "B"], ["C", "D"], ["G", "H"]], "GG"], [[["A", "B", "C", "D"], ["E", "F"], ["G", "H", "I", "J"], ["K"]], "K"], [[["A", "B"], ["C", "D"], ["E"], ["F", "G", "H", "I", "J"]], "H"], [[["A", "B"], ["C", "D"], ["E"], ["F", "IB", "H", "I", "J"]], "H"], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"], ["B", "C", "D"]], "L"], [[["D"], ["E"]], [["D"], ["E"]]], [[["B"], ["G", "IBH"], ["C", "D"], ["B"], ["E", "F"], ["G", "IBH"]], [["B"], ["G", "IBH"], ["C", "D"], ["B"], ["E", "F"], ["G", "IBH"]]], [[["A", "B"], ["E", "F"], ["H", "H"]], [["A", "B"], ["E", "F"], ["H", "H"]]], [[["A", "B"], ["C", "D", "D"], ["E", "F"], ["G", "H"]], [["A", "B"], ["C", "D", "D"], ["E", "F"], ["G", "H"]]], [[["A", "B"], ["H", "H", "H"], ["E", "F"], ["H", "H", "H"]], [["A", "B"], ["H", "H", "H"], ["E", "F"], ["H", "H", "H"]]], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"], ["B", "C", "D"]], "LL"], [[["A", "B"], ["LLF", "C", "D"], ["F"], ["H", "H"]], [["A", "B"], ["LLF", "C", "D"], ["F"], ["H", "H"]]], [[["DD", "DD"], ["E"], ["DD", "DD"], ["DD", "DD"], ["F", "G", "H", "I", "J"], ["DD", "DD"]], [["DD", "DD"], ["E"], ["DD", "DD"], ["DD", "DD"], ["F", "G", "H", "I", "J"], ["DD", "DD"]]], [[["A", "B", "C", "D"], ["G", "H", "I", "J"], ["K"], ["A", "B", "C", "D"]], [["A", "B", "C", "D"], ["G", "H", "I", "J"], ["K"], ["A", "B", "C", "D"]]], [[["D"], []], [["D"], []]], [[["A", "IBH", "B", "C", "D", "E"], ["F", "G", "H"], ["A", "IBH", "B", "C", "D", "E"], ["I", "J", "K", "L"]], "I"], [[["A", "B", "C", "D", "E"], ["F", "G", "DH"], ["I", "J", "K", "L"]], "F"], [[["DD", "DD"], ["E"], ["DD", "DD"], ["DD", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "DD"]], [["DD", "DD"], ["E"], ["DD", "DD"], ["DD", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "DD"]]], [[["A", "IBH", "B", "C", "D", "E"], ["F", "G", "H"], ["I", "LL", "J", "K", "L"], ["A", "IBH", "B", "C", "D", "E"], ["I", "LL", "J", "K", "L"]], "I"], [[["DD", "E", "DD"], ["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"]], [["DD", "E", "DD"], ["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"]]], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["KK", "K", "L", "M"]], "L"], [[["A", "B"], ["C", "D", "D"], ["F"], ["GG", "G", "H"], ["GG", "G", "H"], ["GG", "G", "H"]], [["A", "B"], ["C", "D", "D"], ["F"], ["GG", "G", "H"], ["GG", "G", "H"], ["GG", "G", "H"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["G", "H"], ["C", "D"], ["E", "F"]], [["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["G", "H"], ["C", "D"], ["E", "F"]]], [[["C", "D"], ["E"], ["F", "G", "H", "I", "J", "F"], ["F", "G", "H", "I", "J", "F"]], [["C", "D"], ["E"], ["F", "G", "H", "I", "J", "F"], ["F", "G", "H", "I", "J", "F"]]], [[["A", "B", "C", "D"], ["KE"], ["KE"], ["A", "B", "C", "D"]], [["A", "B", "C", "D"], ["KE"], ["KE"], ["A", "B", "C", "D"]]], [[["A", "B", "D"], ["G", "H", "I", "J"], ["K"], ["A", "B", "D"]], [["A", "B", "D"], ["G", "H", "I", "J"], ["K"], ["A", "B", "D"]]], [[["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"]], [["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"]]], [[["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"], ["E"]], [["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"], ["E"]]], [[["A", "B"], ["E", "EE", "F"], ["H", "H"]], [["A", "B"], ["E", "EE", "F"], ["H", "H"]]], [[["A", "B", "C", "A"], ["D", "E"], ["F", "G", "H", "I", "J"]], "K"], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["K", "L", "M", "K"]], [["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["K", "L", "M", "K"]]], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], ""], [[["D"], ["BB", "A", "B"], ["D"], ["F", "G", "H", "IB", "J"], ["E"], ["F", "G", "H", "IB", "J"]], "J"], [[["C", "D", "C"], ["A", "B"], ["C", "D", "C"], ["E", "F"], ["H"], ["C", "D", "C"]], [["C", "D", "C"], ["A", "B"], ["C", "D", "C"], ["E", "F"], ["H"], ["C", "D", "C"]]], [[["A", "B"], ["C", "D", "D"], ["E", "F"], ["G", "H"], ["E", "F"]], [["A", "B"], ["C", "D", "D"], ["E", "F"], ["G", "H"], ["E", "F"]]], [[["A", "B"], ["E", "F"], ["H", "H", "H"]], [["A", "B"], ["E", "F"], ["H", "H", "H"]]], [[["AI", "A", "B", "C", "D", "E"], ["F", "G", "H"], ["I", "J", "K", "L"], ["AI", "A", "B", "C", "D", "E"]], [["AI", "A", "B", "C", "D", "E"], ["F", "G", "H"], ["I", "J", "K", "L"], ["AI", "A", "B", "C", "D", "E"]]], [[["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"], ["E"]], [["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"], ["E"]]], [[["A", "B"], ["E"]], "I"], [[["A", "B", "C", "D", "E"], ["F", "G", "", "N"], ["F", "G", "", "N"], ["F", "G", "", "N"], ["I", "J", "K", "L"]], [["A", "B", "C", "D", "E"], ["F", "G", "", "N"], ["F", "G", "", "N"], ["F", "G", "", "N"], ["I", "J", "K", "L"]]], [[["A", "B"], ["D"], ["E", "F"], ["G", "H"], ["A", "B"]], [["A", "B"], ["D"], ["E", "F"], ["G", "H"], ["A", "B"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["E", "F"]], [["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["E", "F"]]], [[["C", "D"], ["E"], ["F", "G", "H", "I", "J"], ["F", "G", "H", "I", "J"]], "DDJ"], [[["C", "F"], ["A", "B"], ["C", "F"], ["H", "H", "H"]], [["C", "F"], ["A", "B"], ["C", "F"], ["H", "H", "H"]]], [[["A", "B"], ["E", "GGF"], ["C", "D"], ["E", "GGF"], ["H"]], [["A", "B"], ["E", "GGF"], ["C", "D"], ["E", "GGF"], ["H"]]], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], "BB"], [[["A"], ["E", "F", "G", "H"], ["K", "L", "M", "K"]], [["A"], ["E", "F", "G", "H"], ["K", "L", "M", "K"]]], [[["A", "B", "C", "D"], ["E", "F"], ["G", "H", "I", "J"], ["K"]], [["A", "B", "C", "D"], ["E", "F"], ["G", "H", "I", "J"], ["K"]]], [[["H", "H", "H"], ["E", "F"]], [["H", "H", "H"], ["E", "F"]]], [[["BB", "A", "B"], ["C", "D"], ["F", "G", "", "H", "IB", "J"], ["F", "G", "", "H", "IB", "J"], ["E"], ["F", "G", "", "H", "IB", "J"]], [["BB", "A", "B"], ["C", "D"], ["F", "G", "", "H", "IB", "J"], ["F", "G", "", "H", "IB", "J"], ["E"], ["F", "G", "", "H", "IB", "J"]]], [[["A", "B", "C", "D", "E"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["I", "J", "K", "L"], ["F", "FF", "", "H"]], [["A", "B", "C", "D", "E"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["F", "FF", "", "H"], ["I", "J", "K", "L"], ["F", "FF", "", "H"]]], [[["I", "J", "K", "L", "K"], ["A", "B", "C", "D", "E"], ["F", "G", "DH"], ["I", "J", "K", "L", "K"]], [["I", "J", "K", "L", "K"], ["A", "B", "C", "D", "E"], ["F", "G", "DH"], ["I", "J", "K", "L", "K"]]], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"], ["K", "L", "M"]], [["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"], ["K", "L", "M"]]], [[["A", "B", "C", "A"], ["D", "E"], ["F", "G", "H", "I", "J"], ["F", "G", "H", "I", "J"]], "AA"], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"], ["H"], ["E", "F"]], [["A", "B"], ["C", "D"], ["E", "F"], ["H"], ["H"], ["E", "F"]]], [[["AI", "A", "B", "C", "D", "BB", "E"], ["F", "G", "H"], ["I", "J", "K", "L"], ["AI", "A", "B", "C", "D", "BB", "E"]], [["AI", "A", "B", "C", "D", "BB", "E"], ["F", "G", "H"], ["I", "J", "K", "L"], ["AI", "A", "B", "C", "D", "BB", "E"]]], [[["A", "B"], ["C", "D"]], "GG"], [[["A"], ["E", "F", "G", "GG", "H"], ["I", "J"], ["E", "F", "G", "GG", "H"], ["K", "L", "M"]], [["A"], ["E", "F", "G", "GG", "H"], ["I", "J"], ["E", "F", "G", "GG", "H"], ["K", "L", "M"]]], [[["A", "B"], [], ["C", "D"], ["F", "G", "H", "I", "J"]], [["A", "B"], [], ["C", "D"], ["F", "G", "H", "I", "J"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["H"]], "IBH"], [[["F", "G", "H"], ["A", "IBH", "B", "C", "D", "E"]], [["F", "G", "H"], ["A", "IBH", "B", "C", "D", "E"]]], [[["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["G", "H"], ["E", "F"], ["C", "D"], ["C", "D"]], [["A", "B"], ["C", "D"], ["E", "F"], ["G", "H"], ["G", "H"], ["E", "F"], ["C", "D"], ["C", "D"]]], [[["A", "B", "C", "BB"], ["KE"], ["KE"], ["A", "B", "C", "BB"]], [["A", "B", "C", "BB"], ["KE"], ["KE"], ["A", "B", "C", "BB"]]], [[["B"], ["B"], ["C", "D"], ["E"], ["F", "G", "H", "I", "J"], ["B"]], "J"], [[["B", "C", "D"], ["E", "N", "G", "H"], ["I", "J"], ["K", "L", "M"]], [["B", "C", "D"], ["E", "N", "G", "H"], ["I", "J"], ["K", "L", "M"]]], [[["A"], ["I", "J"], ["K", "L", "M"]], [["A"], ["I", "J"], ["K", "L", "M"]]], [[["E", "EE", "F"], ["H", "H"], ["H", "H"]], [["E", "EE", "F"], ["H", "H"], ["H", "H"]]], [[["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"], ["DD", "E", "DD"]], [["E"], ["DD", "E", "DD"], ["DD", "E", "DD"], ["GG", "F", "G", "H", "I", "J"], ["DD", "E", "DD"], ["DD", "E", "DD"]]], [[["A", "B"], [false, true], ["C", "D"], ["F", "G", "H", "I", "J"]], [["A", "B"], [false, true], ["C", "D"], ["F", "G", "H", "I", "J"]]], [[["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"], ["E", "F", "G", "H"]], [["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"], ["E", "F", "G", "H"]]], [[["A"], ["B", "C", "D"], ["E", "F", "G", "H"], ["I", "J"], ["K", "L", "M"]], "EKE"], [[["D"], ["AE"], ["AE"], ["AE"]], [["D"], ["AE"], ["AE"], ["AE"]]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n"}
{"task_id": "Mbpp/426", "prompt": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n", "entry_point": "filter_oddnumbers", "canonical_solution": "\ndef filter_oddnumbers(nums):\n    return [n for n in nums if n % 2 == 1]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 45, 67, 84, 93]], [[5, 7, 9, 8, 6, 4, 3]]], "atol": 0, "plus_input": [[[-5, 0, 5, -10, 15, 20, -25, 30]], [[-100, -50, 0, 50, 100]], [[3, -5, -5, -2, 7, 7, 2, 3, -2, 3]], [[3, -5, -5, -2, 7, 7, 2, 5, -2, 3]], [[3, -5, -5, -2, 7, 7, -100, 2, 5, -2, 3]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5]], [[3, -5, -2, 7, 7, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5, 7]], [[3, -5, -2, 7, 7, 2, 5, -2, 50, 3, 5]], [[-100, -50, 50, 100]], [[-5, 3, -5, -5, -2, 7, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, 2, 5, -1, 3, 5, 7, 7]], [[3, -5, -5, -2, 7, 7, 2, 3, -2, 3, -2]], [[3, -5, -5, 2, -2, 7, -100, 2, 5, -2, 3]], [[3, 2, -5, -5, -2, 7, 7, 2, 3, -2, 3]], [[3, -5, -5, -2, 7, 7, 2, 3, 3, -2, 3, -2]], [[-5, 0, 5, -10, 15, -6, 20, -25, 30]], [[3, -5, -2, 7, 7, 5, -2, 3]], [[-100, -101, -50, 50, 100]], [[3, -5, -2, 7, 7, 2, 5, -2]], [[-100, 50, 100]], [[3, -5, -2, 7, 5, 7, 2, 5, -2, 50, 3, 5]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3, -2]], [[3, -5, -2, 7, 7, 4, -2, 3, 7]], [[3, -5, -5, -50, 7, 7, 2, 5, 30, 3]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3, -2, 2]], [[-5, 0, 5, -10, -6, 20, -25, 30]], [[3, -5, -2, 7, 7, 2, 5, -2, 50, 3, 5, 5]], [[3, -5, -2, -2, 7, -100, 2, 5, -2, 3, -2, 2, -2]], [[-5, 5, 5, -10, -6, 15, -25, 30, 15, -6]], [[4, -5, -5, -50, 7, 7, 5, 30, 3]], [[4, 7, -5, -5, -51, 7, 7, 5, 30, 3]], [[3, -5, -5, -2, 7, -100, 5, -2, 3, -2]], [[3, -5, -5, 7, 7, 2, 5, 30, 3]], [[-100, -50, 50, 100, 50, -50]], [[4, -5, -5, 2, -2, 7, -100, 2, 5, -2, 3]], [[-5, 3, -5, -5, -2, 7, 2, 5, -2, 3, 2]], [[3, -5, -5, 7, 7, -100, 2, -101, 5, -2, 3, 5, 7]], [[-100, 30, -50, 50, 100]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5, 3]], [[3, -5, -2, 7, 7, 2, 6, 5, -2, 50, 3, 5, 5]], [[3, -5, 6, 7, 7, 2, 5, -2, 3, 7]], [[3, -5, -2, 7, 7, 2, 5, -2, 5, 7]], [[3, 0, -5, -5, -2, 7, 7, 2, 3, -2, 3, -2]], [[4, 7, -5, -5, -51, 7, 7, 5, 30, 3, 5]], [[-5, -5, -2, 7, 7, -100, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, -2, 5, -2, 3, 5, 3, 3]], [[2, -5, -2, 7, 7, 4, -2, 3, 7]], [[-100, 30, -50, 50, 100, 30]], [[3, -5, -5, -2, 7, 7, -100, -6, 2, 5, -2, 3]], [[3, -5, 3, -5, -50, 7, 7, 2, 5, 30, 3]], [[3, 3, -5, -5, -2, 7, -100, 2, 5, -2, 3]], [[5, 3, -5, 7, 7, 2, 5, -2, 3, 7]], [[3, -5, -5, 7, 7, -100, 3, -101, 5, 3, 5, 7]], [[-100, 50, 100, 100]], [[3, 2, -5, -5, -2, 7, 7, -100, 3, -2, 3]], [[3, 0, -5, -5, -2, 7, 7, 2, 3, -2, -2]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3, -2, 2, -100]], [[-5, 3, -5, -2, 7, 2, 5, -2, 3, 2]], [[3, -5, -5, 7, 7, -100, -101, 5, 3, 5, 7]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5, 7, 3]], [[3, -5, -5, -2, 7, 7, -100, -6, 2, 5, -2, 3, -6]], [[3, -5, -2, 7, 5, 7, 5, -2, 50, 3, 5]], [[3, -2, 7, 7, 2, 5, -2, 50, 3, 5]], [[3, -5, -2, 7, 7, 2, 30, -2]], [[-100, 100, 50, 100, 100]], [[3, -5, -5, -2, 7, 7, 5, 3]], [[4, 7, -5, -5, -51, 7, 7, 20, 30, 3, 5]], [[-5, 5, -10, -6, 20, -25, 30]], [[3, -5, -5, -2, 6, 7, 7, -100, -6, 2, 5, -2, 3, -6, -2]], [[3, -5, 3, -5, -50, 7, 7, 2, 5, 30, 3, 7]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, -6]], [[5, -5, 7, 7, 2, 5, -2, 3, 7]], [[3, -5, -5, -2, 7, 7, -6, 2, 5, -2, 3]], [[5, -10, -6, -5, -25, 30]], [[3, -5, -5, 7, 7, 2, 5, 30, 4, 3]], [[3, -5, -5, -2, 7, 2, 3, -2, 3]], [[4, -5, -5, 2, -2, 7, -100, 2, 5, -2, 3, -5]], [[-5, 5, 4, -10, -6, 20, -25, 30]], [[3, -5, -2, 7, 7, 5, -2, 3, 3, -2]], [[-5, 3, -25, -5, -5, -2, 7, 2, -51, 5, -2, 3]], [[4, 30, -50, -5, -5, -50, 7, 7, 5, 30, 3]], [[3, -51, -5, -2, 7, 7, -100, 2, 5, -2, 3, -100]], [[5, -10, -6, -5, -25, 30, -6]], [[3, -5, -2, 7, 7, 2, 5, 2, -2, 3, 2]], [[-100, 30, -50, 50]], [[3, -5, -2, 7, 7, 2, 6, 5, -2, 50, 5, 5]], [[3, -5, -5, -2, 6, 2, 3, -2, 3]], [[3, -2, 7, 7, 2, 5, -2, 50, 3, 30]], [[100, 50, 100, 100, 100, 100]], [[3, -5, -5, -2, 7, -100, 2, 5, -4, -2, 3, -2, -3, 2]], [[3, -5, 6, 7, 8, 2, 5, -2, 3, 7]], [[3, 0, 1, -5, -5, -2, 7, 7, 2, 3, -2, 3, -2]], [[5, 7, -5, -5, -51, 7, 7, 8, 30, 3, 5, -5]], [[-100, -25, -50, 50, 100]], [[3, -5, -2, 7, 7, 2, 5, -2, 3, 5]], [[3, -5, -2, 7, 7, -5, -2, 3, 7, -5]], [[3, -5, -5, 7, 7, -100, -101, 5, 3, 5, 7, 5]], [[3, -2, 7, 7, 2, 5, -2, 50, 3, 30, 7]], [[3, -5, -2, 7, -100, 2, 5, -2, 3, -3, 2, -100]], [[3, -2, 7, 7, 2, 5, 50, 3, 30, 7]], [[3, -2, 7, 7, 2, 5, 50, 3, 5]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n"}
{"task_id": "Mbpp/427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "entry_point": "change_date_format", "canonical_solution": "\nimport re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n", "base_input": [["2026-01-02"], ["2020-11-13"], ["2021-04-26"]], "atol": 0, "plus_input": [["2021-1-026"], ["2024-02-29"], ["0001-01-01"], ["0000-00-00"], ["2100-45-98"], ["2020-00-15"], ["2025-13-01"], ["2022-02-29"], ["2020-02-29"], ["2022-04-31"], ["2023-06-31"], ["2030-09-31"], ["2022-04-32030-09-311"], ["0000-00-2022-02-290"], ["2020-02-20000-00-2022-02-2909"], ["2025-13-2020-02-20000-00-2022-02-290901"], ["2024-02-299"], ["2022-0-2-29"], ["2020-02-2002002024-02-299-00-2022-02-2909"], ["2024-02-2"], ["2022-0-2-22024-02-2999"], ["2022-0-2-2"], ["2020-02-2002002024-02-299-02-2909"], ["2022-04-30000-00-001"], ["2022-0-22-22024-02-299"], ["2022-0-2-22024-02-2020-02-292999"], ["2022-0-2-22024-02-2-999"], ["2022-0-2-22024-02-2020-02-2929909"], ["2020-02-20000--00-2022-02-2909"], ["2020-02-2-00-2022-02-2909"], ["2020-02-20020202024-02-299-02-2909"], ["2025-13-2020-02-20000-100-2022-02-290901"], ["2020-02-20020202022020-00-154-02-299-02-2909"], ["2020-02-2000001-01-012002024-02-299-002-2022-02-2909"], ["2025-13-2020-02-20000-100-22020-02-20000-00-2022-02-290922-02-290901"], ["2022-0-22-22024-02-29-9"], ["2020-00-1-5"], ["2022-0-02-22024-02-2020-02-292999"], ["2022-04-302030-09-311"], ["0000-00-2022-0290"], ["2020-02-200-2909"], ["2020-00-12022-0-2-295"], ["0000-00-2002-290"], ["2022-04-302000-00-001"], ["2022-0-2020-02-2902-22024-02-2020-02-292999"], ["2022-02-292022-04-32030-09-311"], ["2020-02-20000--00-2022-02-29092022-0-2-22024-02-2023-06-31999"], ["2022-04-302-001"], ["2020-00-12022-0-2-2022-0-2-22024-02-2020-02-292999295"], ["2020-02-20000-0"], ["2020-02-20020202022020-00-154-02-299-020-2909"], ["2022-0-2020-02-29002-22024-02-2020-02-292999"], ["2020-02-2002002024-02-22022-02-2999-00-2022-02-2909"], ["2020-02-20000-"], ["0000-00-2022-02-20001-01-0190"], ["2020-02-2000200202020-00-1-524-02-299-02-2909"], ["2020-02-200022025-13-0100202020-00-1-524-02-299-02-2909"], ["2022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-0190000-00-2022-02-290901"], ["2020-02-20000-00-2022022-04-31909"], ["2022-04-30000-00-02022-0-2020-02-29002-22024-02-2020-02-292999"], ["2020-00-12022-0-22999295"], ["2022-0-2-22024-02020-02-20020202022020-00-154-02-299-020-29092-2-999"], ["0000-00-202022-02-290"], ["2020-02-2002024-02-22022-02-2999-00-2022-02-2902022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-00-00-2022-02-2909019"], ["2025-13-2020--02-20000-100-2022-02-22020-00-151"], ["2025-13-2020--02-20000-100-2022-02-22151"], ["2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-151"], ["2022-02-22020-02-20020202022020-00-154-902-299-02-290992022-04-32030-09-311"], ["2020-00-1202020-022023-06-31-20000-00-2022022-04-3190922-0-2-295"], ["2020-00-120922-0-2-20222-0-2-22024-02-2020-02-292999295"], ["2020-02-20000--2020-02-20020202022020-00-154-02-299-020-290900-2022-02-2909"], ["2020-02-2000002022-0-22-22024-02-29-91-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-2909"], ["2020-02-2000002022-0-22-22024-02-29-911-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-2909"], ["2020-00-1202020-022023-06-31-22-295"], ["2022-0-02-22024-02-2020--02-292999"], ["2022-04-302030-09-1311"], ["2022-04-302-0001"], ["2022-04-30000001"], ["2030-09-312020-02-2002002024-02-299-00-2022-02-2909"], ["2020-02-202000--2020-02-20020202022020-00-154-02-299-020-290900-2022-02-2909"], ["2020-02-2000002022-0-22-22024-02-29-91-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-29009"], ["2025-13-2025-13-2020-02-20000-100-22020-02-20000-00-2022-02-290922-02-2909012020-02-20000-100-22020-02-20000-00-2022-02-290922-02-290901"], ["2020-00-12022-2020-02-2002024-02-22022-02-2999-00-2022-02-2902022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-00-00-2022-02-2909019295"], ["2022-04-3020002024-02-2-00-02020-02-20000-001"], ["2020-02-209"], ["2022-0-22-220024-02-29-9"], ["2021-1-0226"], ["2030-09-3120000-00-2022-0290020-02-2002002024-02-299-00-2022-02-2909"], ["2022-0-2-22024-022020-02-20000-99"], ["2020-02-200020202022020-00-154-02-299-020-2909"], ["2020-02-2002002024-022020-00-12022-0-22999295-299-02-2909"], ["2020-02-2002002024-02-299-00-2022-02-29209"], ["2020-00-12022-2020-02-2002024-02-22022-02-2999-00-2022-02-029020022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-00-00-2022-02-2909019295"], ["2030-09-312020-02-2002002024-02-299-02022-04-302030-09-3110-2022-02-2909"], ["2020-02-20000-00-2022022-04-3190"], ["2022-0-2-2202909"], ["2022-20-2999"], ["2022-0-222020-02-2002002024-02-299-00-2022-02-292092-29-9"], ["2022-0-2020-02-29002-22024-02-20202020-00-1202020-022023-06-31-22-295-02-292999"], ["2020-02-2002002024-02-292024-02-29909"], ["2020-02-20000-002-2022022-04-31909"], ["2020-02-20000-00-2"], ["2020-02-200022025-13-0100202020--00-1-524-02-299-02-2909"], ["2022-00-2-22024-02-2-999"], ["0000-00-202022-02-222022-02-22020-02-20020202022020-00-154-902-299-02-290992022-04-32030-09-31190"], ["2020-02-200022025-13-0100202020--2020-02-20020202022020-00-154-02-299-02-290900-1-524-02-299-02-2909"], ["2020-02-2000031909"], ["2022-0-222020-02-2002002024-02-299-00-2022-02-292092-29--9"], ["2020-02-20000--2020-02-200202020220200000-00-202022-02-222022-02-22020-02-20020202022020-00-154-902-299-02-290992022-04-32030-09-31190-00-154-02-299-020-290900-2022-02-2909"], ["2020-02-209000-0-00-202022-02-290"], ["2025-13-2020--02-20000-100-202020-02-2000002022-0-22-22024-02-29-91-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-2900922-02-22151"], ["2020-02-202000--2020-02-20020202022020-00-154-02-2022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-0190000-00-2022-02-290901299-020-290900-2022-02-2909"]], "contract": "\n    assert isinstance(dt, str), \"invalid inputs\" # $_CONTRACT_$\n    assert re.match(r'\\d{4}-\\d{1,2}-\\d{1,2}', dt), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n"}
{"task_id": "Mbpp/428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n", "entry_point": "shell_sort", "canonical_solution": "\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "base_input": [[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[24, 22, 39, 34, 87, 73, 68]], [[32, 30, 16, 96, 82, 83, 74]]], "atol": 0, "plus_input": [[[90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]], [[12, 12, 15, 15, 32, 32, 32, 45, 45, 70]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 21, 32, 45, 54, 64, 78, 87, 90]], [[90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[11, 21, 32, 45, 54, 64, 78, 87, 87, 90]], [[12, 12, 15, 15, 32, 32, 32, 45, 70]], [[1, 2, 3, 4, 5, 6, 7, 9, 10]], [[8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 90]], [[90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 98, 99, 100]], [[1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]], [[90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 99, 100]], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 10, 100]], [[1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10]], [[1, 2, 3, 3, 4, 5, 7, 8, 9, 10]], [[false, true]], [[12, 12, 15, 15, 15, 32, 32, 32, 45, 45, 70]], [[1, 2, 4, 5, 6, 7, 9, 10]], [[12, 21, 21, 32, 45, 54, 64, 78, 87, 90]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100]], [[true, true]], [[12, 12, 14, 15, 15, 32, 32, 32, 45, 45, 70]], [[12, 12, 15, 15, 32, 32, 32, 45, 45, 45, 70]], [[90, 91, 92, 92, 94, 95, 96, 97, 98, 99, 99, 100]], [[78, 90, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100]], [[91, 92, 93, 93, 94, 95, 95, 96, 98, 99, 99, 100]], [[false, false, true]], [[1, 2, 3, 4, 4, 5, 6, 7, 9, 10, 10, 100]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]], [[false, 1, 2, 3, 4, 4, 6, 9, 10, 10, 100]], [[8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 88, 90]], [[1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8, 11, 12, 21, 32, 45, 54, 64, 64, 78, 87, 88, 90]], [[1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 2, 3, 3, 5, 6, 7, 8, 9, 10]], [[21, 90, 91, 92, 92, 94, 95, 96, 97, 99, 99]], [[1, 2, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 10]], [[12, 12, 15, 15, 15, 31, 32, 32, 32, 45, 45, 70]], [[false, 1, true, 2, 3, 4, 4, 6, 9, 10, 100]], [[4, 8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 90]], [[1, 91, 92, 94, 95, 96, 97, 98, 99, 100]], [[90, 91, 92, 93, 93, 94, 95, 96, 97, 99, 99, 99, 100]], [[12, 12, 15, 15, 32, 32, 32, 45, 45, 45, 45, 70]], [[12, 21, 21, 32, 45, 54, 78, 90]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 70]], [[91, 93, 93, 94, 95, 95, 96, 98, 99, 99, 100]], [[90, 90, 91, 92, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 100]], [[2, 3, 4, 4, 5, 6, 7, 9, 10, 15]], [[90, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100]], [[1, 1, 2, 3, 3, 5, 6, 7, 8, 9, 9, 10]], [[2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]], [[78, 90, 91, 92, 92, 92, 94, 95, 97, 97, 98, 98, 99, 99, 100]], [[12, 12, 12, 14, 14, 14, 15, 31, 32, 32, 32, 45, 45, 70]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 45, 70]], [[12, 12, 15, 15, 32, 45, 45, 45, 45, 45, 70]], [[1, 2, 3, 4, 5, 6, 7, 7, 9, 10, 10, 100]], [[90, 91, 92, 93, 95, 95, 95, 97, 98, 99, 100]], [[false, false, 1, 2, 3, 4, 4, 6, 9, 10, 10, 99, 100]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45]], [[2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99]], [[2, 2, 3, 4, 5, 6, 6, 8, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 7, 10, 10, 31, 100]], [[1, 2, 3, 4, 4, 5, 6, 6, 7, 10, 10, 31, 100]], [[78, 90, 91, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100]], [[4, 90, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100]], [[90, 91, 92, 92, 94, 95, 95, 96, 97, 98, 99, 99, 100]], [[90, 90, 91, 92, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 99, 100]], [[90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 100]], [[false, true]], [[true, true, true]], [[90, 91, 92, 93, 93, 93, 94, 96, 96, 97, 98, 99, 100]], [[12, 12, 15, 15, 45, 45, 45, 45, 45, 70]], [[1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 12]], [[90, 91, 92, 93, 95, 95, 95, 97, 98, 99, 100]], [[90, 91, 92, 93, 93, 95, 95, 95, 97, 98, 99, 100]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 45]], [[4, 90, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100]], [[11, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100]], [[78, 90, 91, 91, 92, 92, 94, 95, 95, 97, 97, 98, 99, 99, 100]], [[90, 91, 92, 93, 94, 95, 96, 97, 97, 98, 99, 100]], [[false, 1, true, true, 2, 3, 4, 4, 4, 6, 9, 10, 100, 100]], [[90, 91, 92, 92, 94, 95, 96, 98, 99, 99, 100]], [[1, 2, 2, 2, 3, 3, 3, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9]], [[12, 12, 15, 15, 15, 32, 32, 32, 45, 45, 70, 87]], [[90, 91, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100]], [[true, true, true, true]], [[2, 3, 3, 4, 5, 7, 8, 9, 10]], [[8, 8, 11, 12, 21, 32, 45, 54, 64, 64, 78, 87, 88, 90]], [[90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 99, 99, 99, 100]], [[4, 8, 11, 12, 21, 32, 45, 45, 54, 64, 78, 87, 90]], [[4, 5, 90, 91, 92, 94, 95, 97, 98, 99, 99, 100]], [[12, 21, 21, 21, 32, 45, 54, 78, 90]], [[21, 90, 91, 92, 92, 94, 95, 96, 97, 97, 99, 99]], [[3, 90, 91, 92, 93, 93, 94, 96, 97, 98, 98, 100]], [[8, 8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 88, 90]], [[3, 91, 92, 92, 93, 93, 94, 96, 97, 97, 98, 98, 100]], [[11, 88, 90, 91, 92, 93, 93, 94, 95, 96, 98, 100]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 99, 100]], [[12, 12, 21, 21, 32, 45, 45, 45, 54, 64, 78, 87, 90]], [[2, 3, 4, 5, 6, 7, 7, 7, 10, 10, 12, 31, 100]], [[90, 91, 92, 93, 95, 95, 95, 97, 99, 100]]], "contract": "\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n"}
{"task_id": "Mbpp/429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "entry_point": "and_tuples", "canonical_solution": "\ndef and_tuples(test_tup1, test_tup2):\n  return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n", "base_input": [[[10, 4, 6, 9], [5, 2, 3, 3]], [[1, 2, 3, 4], [5, 6, 7, 8]], [[8, 9, 11, 12], [7, 13, 14, 17]]], "atol": 0, "plus_input": [[[0, 0, 0, 0], [0, 0, 0, 0]], [[123, 456, 789, 10], [987, 654, 321, 10]], [[-1, -2, -3, -4], [-5, -6, -7, -8]], [[-10, -20, -30, -40], [-5, -2, -3, -3]], [[2, 5, 8, 10], [3, 5, 10, 12]], [[0, 1, 2, 3], [0, 0, 2, 3]], [[1000000, 2000000, 3000000], [500000, 1250000, 2500000]], [[99999, 88888, 77777], [12345, 54321, 98765]], [[0, 1], [1, 0]], [[], []], [[0, -1, 2, -3], [0, 0, -2, -3]], [[-10, 0, 20, -30], [5, -2, 10, 3]], [[0, 0, 0, 0], [-1, -1, -1, -1]], [[10, 20, 30, 40], [0, 0, 5, 5]], [[1000, 10000, 100000, 1000000], [-10000, 10000, -100000, -1000000]], [[1000, 10000, 100000, 1000000], [-10000, 10000, 12, -1000000]], [[0, -1, 2, -3], [0, -1, 2, -3]], [[-10000, 10000, 12, -1000000], [-10000, 10000, 12, -1000000]], [[99999, 88888, 77777], [99999, 88888, 77777]], [[-6, 0, 2, 3], [-6, 0, 2, 3]], [[0, -1, 2, 40], [0, -1, 2, -3]], [[0, -1, 2, -4, -3], [0, -1, 2, -2, 40]], [[-10000, 10000, 12, -1000000], [-10000, 9999, 12, -1000000]], [[88888, 77777, 88888], [99999, 88888, 20]], [[99999, 88888, 77777, 99999], [99999, 88888, 77777, 99999]], [[0, 0, 2, 3, 2, 3], [0, 0, 2, 3, 2, 3]], [[9999, -10000, 9999, 12, -1000000], [9999, -10000, 9999, 12, -1000000]], [[2, 5, 8, 10], [2, 5, 8, 10]], [[-5, -2, -3, -3], [-5, -2, -3, -3]], [[1000, 10000, -100000, 1000000], [-10000, 10000, 12, -1000000]], [[499999, 1250000, 2500000], [500000, 1250000, 2500000]], [[1000, 10000, -100000, 1000000], [-9999, 10000, 12, -1000000]], [[-10000, 9999, 12, -1000000], [-10000, 9999, 12, -1000000]], [[-10, 0, 20, -30, -30], [-10, 0, 20, -30, 321]], [[0, -1, 2, -3], [77777, 0, -2, -3]], [[-9999, 10000, 12, -1000000], [-9999, 10000, 12, -1000000]], [[-10, 0, 20, -30, -30], [-10, 0, 20, -30, -30]], [[0, -1, 2, -3, -1], [0, -1, 2, -3, -1]], [[0, 0, -1, 0], [0, 0, 0, 0]], [[-10000, 10000, -100000, -1000000], [1000, 10000, 100000, 1000000]], [[500000, 1250000, 1250001, 2500000, 1250000], [500000, 1250000, 1250001, 2500000, 1250000]], [[-5, -6, -7, -8], [-5, -6, -7, -8]], [[0, -1, 2, -2, 40], [0, -1, 2, -2, 40]], [[-5, -6, -7, -8], [-1, -2, -3, -20]], [[-10000, 9999, 12, 3000000], [-10000, 9999, 12, -1000000]], [[0, 1, 2, 3], [0, 1, 2, 3]], [[0, 0, 2, 3], [0, 1, 2, 3]], [[-10, -20, -30, -40], [-10, -20, -30, -40]], [[0, -1, 98765, 40, 3], [0, -1, 98765, 40, 40]], [[99999, 88888, 99999], [99999, 88888, 99999]], [[-10000, 9999, 12, -1000000, 9999], [-10000, 9999, 12, -1000000, 12]], [[-8, 1, 2, 3], [0, 1, 2, 3]], [[-5, -2, -3, -3], [-5, -2, 1250001, -3]], [[1, -1, 2, 40], [0, -1, 2, -3]], [[0, 0, 2, 3], [0, 0, 2, 3]], [[false], [false]], [[2, 8, 10], [2, 8, 10]], [[-10000, -1, 2, -3], [0, -1, 2, -3]], [[100000, 10000, 12, -1000000], [-10000, 9999, 12, -1000000]], [[0, 1, 2, 789], [0, 1, 2, 3]], [[123, 456, 789, 10], [123, 456, 789, 10]], [[-10000, -10000, 12, -1000000], [-10000, 9999, 12, -1000000]], [[-10000, 10000, 12, -1000000], [-10000, 10000, 12, -1000001]], [[12345, 54321, 98765], [12345, 54321, 98765]], [[88888, 77777, 88888], [88888, 77777, 88888]], [[0, -1, 2, 40, -1], [0, -1, 2, 40, -1]], [[-5, -2, 20, -3], [-5, -2, -3, -3]], [[99999, 88888, 654, 99999], [99999, 88888, 654, 99999]], [[-10, -20, -30, -40], [-5, -3, 10000, -3]], [[3, 5, 10, 12], [3, 5, 10, 12]], [[10, 20, 30, 40], [0, 1, 5, 5]], [[10, 20, 30, 40], [10, 20, 30, 40]], [[0, -1, 987, 40, 3], [0, -1, 98765, 40, 3]], [[-5, -2, -3, -2], [-5, -2, 1250001, -3]], [[0, 0, 0], [0, 0, 0]], [[88888, 77777, 88889, 88888], [88888, 77777, 88889, 88889]], [[2, 5, 8, 20], [3, 5, 10, 12]], [[-5, -6, -7, -7, -8], [-5, -6, -7, -7, -8]], [[1000, 10000, 100000, 1000000], [-10000, 9999, -100000, -1000000]], [[1000, 10000, -1000000, 1000000], [-10000, 9999, -100000, -1000000]], [[12345, 54321, 98765, 54321], [987, 12345, 54321, 98765]], [[3, 5, 99999, 12], [3, 5, 10, 12]], [[2, 7, 10], [2, 8, 10]], [[-10, 0, 20, -30], [-10, 0, 20, -30]], [[0, 0, 5, 5], [0, 0, 5, 5]], [[-10, 20, -30, -30], [-10, 20, -30, -30]], [[-5, -1, -3, -2], [-6, -2, 1250001, -3]], [[true], [false]], [[-5, -2, -3, -1], [-5, -2, 1250001, -3]], [[-10000, -1000000, 10000, 12, -1000000], [-10000, 10000, 12, -1000000, 10000]], [[1, 0, 20, -30], [5, -2, 10, 3]], [[0, -40, 2, 3], [0, 1, 2, 3]], [[-1, -2, -3, -20], [-5, -6, -7, -8]], [[123, -10, 790, 10], [123, 456, 790, 10]], [[499999, 1250000, 2500000], [499999, 1250000, 2500000]], [[-5, 20, -3], [-2, -3, -3]], [[-9999, 10000, 12, 8], [-9999, 10000, 12, -1000000]], [[99999, 88888, 20], [99999, 88888, 20]], [[0, 0, -1, 1], [0, 0, -1, 1]], [[99999, 88888, 1000, 77777], [99999, 88888, 1000, 77777]], [[-6, 0, 2, 3], [-6, 1, 2, 3]], [[0, 0, 5, 5, 5], [0, 0, 5, 5, 5]], [[-10, 3, -30, -40], [-5, -3, 10000, -3]], [[-10000, 9999, 12, -1000000], [-10000, 9999, 12, 3000000]], [[3, 10, 12], [3, 10, 12]], [[10, 0, 2, 3], [0, 0, 2, 3]], [[1000000, 2000000, 456], [1000000, 2000000, 2999999]], [[-5, -2, -3, -3], [-5, -2, -20, -3]], [[499999, 1250000, 2500000, 499999], [499999, 1250000, 2500000, 499999]], [[-5, -6, -7, -8, -5], [-5, -6, -7, -8, -5]], [[3, 5, 99999, 12], [4, 5, 99999, 12]], [[-10000, 9999, 12, -1000000, 9999], [-40, 9999, 12, -1000000, 12]], [[-5, -6, -7, -8], [-2, -2, -3, -20]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n"}
{"task_id": "Mbpp/430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n", "entry_point": "parabola_directrix", "canonical_solution": "\ndef parabola_directrix(a, b, c): \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n", "base_input": [[5, 3, 2], [9, 8, 4], [2, 4, 6]], "atol": 0, "plus_input": [[0, 0, 0], [0, 8, 4], [3, 3, 3], [8, 2, 3], [3, 0, 0], [4, 3, 3], [0, 2, 3], [0, 4, 0], [3, 2, 3], [8, 8, 3], [8, 1, 2], [1, 7, 2], [2, 3, 3], [1, 3, 2], [2, 3, 0], [8, 1, 8], [0, 7, 2], [1, 2, 2], [7, 9, 4], [6, 3, 3], [1, 7, 1], [3, 2, 2], [8, 3, 2], [3, 1, 8], [8, 3, 0], [8, 9, 1], [1, 0, 0], [6, 4, 3], [8, 6, 6], [2, 3, 2], [3, 1, 1], [8, 9, 3], [0, 7, 9], [8, 1, 1], [2, 1, 3], [4, 1, 2], [3, 9, 9], [2, 8, 2], [0, 1, 2], [0, 3, 0], [8, 9, 9], [1, 0, 1], [4, 4, 4], [8, 4, 4], [3, -1, -1], [3, 0, 6], [-1, 0, 3], [2, 2, 3], [1, 4, 0], [-1, -1, -1], [6, 3, 4], [0, 7, 0], [0, 9, 0], [9, 1, 2], [9, 0, 1], [2, 2, 2], [3, 9, 1], [3, 7, 3], [6, 2, 8], [1, 8, 1], [9, 6, 1], [0, 3, 8], [3, -2, -1], [1, 1, 1], [9, 4, -1], [8, 3, 7], [-1, 3, 2], [5, 2, 4], [9, 2, -1], [3, -1, 0], [-2, 1, 1], [-1, 1, 0], [9, 1, 1], [8, 6, 3], [3, 6, 3], [6, 8, 4], [8, 8, 7], [9, 9, 9], [3, 6, 0], [1, 1, 2], [0, 2, 7], [6, 7, 9], [0, 2, 2], [2, 2, 1], [3, 1, 4], [0, 1, 1], [5, 3, 3], [2, 0, 1], [0, 1, -1], [6, 6, 3], [9, -1, 2], [1, 6, 1], [6, 2, 9], [3, 3, -1], [3, -2, 4], [5, 0, 2], [8, 3, 3], [5, 1, 1], [9, 9, 3], [4, 2, 2], [7, 6, 6], [3, -2, 0]], "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n"}
{"task_id": "Mbpp/431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n", "entry_point": "common_element", "canonical_solution": "\ndef common_element(list1, list2):\n    return any(item in list2 for item in list1)\n", "base_input": [[[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5], [6, 7, 8, 9]], [["a", "b", "c"], ["d", "b", "e"]]], "atol": 0, "plus_input": [[[], []], [[1, 2, 3], []], [[], [4, 5, 6]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3, 1, 2], [4, 5, 6]], [[1, "hello", true, 3.14], ["world", 2, false]], [["apple", "orange", "banana"], ["pear", "kiwi"]], [[1, 2, 3, [4, 5]], [[4, 5], 6, 7, 8]], [[{"name": "John", "age": 30}, {"name": "Jane", "age": 25}], [{"name": "Jane", "age": 25}, {"name": "Bob", "age": 35}]], [[1, "apple", 3.14, true, {"name": "John"}, [1, 2, 3]], ["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple"]], [["Bob", "apple", "orange", "banana"], ["Bob", "apple", "orange", "banana"]], [["apple", "apple", "orange", "banana"], ["apple", "apple", "orange", "banana"]], [[1, 2, 3, [4, 5]], [1, 2, 3, [4, 5]]], [["banana", 3.14, true, [1, 2, 3], "apple", [1, 2, 3]], ["banana", 3.14, true, [1, 2, 3], "apple", [1, 2, 3]]], [[[4, 4], 1, 2, 3, [4, 4]], [[4, 4], 1, 2, 3, [4, 4]]], [[1, 3, [4, 5]], [1, 3, [4, 5]]], [["bananba", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple"], ["bananba", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple"]], [[[4, 4], 1, 3, 2, [4, 4], 1], [[4, 4], 1, 3, 2, [4, 4], 1]], [[1, 1, 3], [1, 1, 3]], [[false, true, true], []], [[1, "apple", [1, 2, 3, 1], 3.14, true, {"name": "John"}, [1, 2, 3, 1]], [1, "apple", [1, 2, 3, 1], 3.14, true, {"name": "John"}, [1, 2, 3, 1]]], [["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", "banana"], ["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", "banana"]], [["banana", 3.14, true, [1, 2, 3], "apppeare", [1, 2, 3]], ["banana", 3.14, true, [1, 2, 3], "apppeare", [1, 2, 3]]], [[7, 2, 3, [4, 5]], [7, 2, 3, [4, 5]]], [["apple", "world", "orange", "bpearanana"], ["apple", "world", "orange", "bpearanana"]], [["bananba", 4.307788630507801, [1, 2, 3], {"name": "Jane"}, "apple"], ["bananba", 4.307788630507801, [1, 2, 3], {"name": "Jane"}, "apple"]], [[2, 3, [4, 5]], [2, 3, [4, 5]]], [["Bob", "apple", "orange", "banana", "banana"], ["Bob", "apple", "orange", "banana", "banana"]], [[30, 2, 3, [4, 5]], [30, 2, 3, [4, 5]]], [[true, "banana", 3.14, true, [2, 1, 2, 3], "apppeare", [2, 1, 2, 3], [2, 1, 2, 3]], [true, "banana", 3.14, true, [2, 1, 2, 3], "apppeare", [2, 1, 2, 3], [2, 1, 2, 3]]], [[null, {"91.18946345806884": true, "21.134908344200582": true, "3.14": false, "4.307788630507801": false, "-77.78378643178206": false}], [4, 5, 6]], [[7, 6, 2, 3, [4, 5]], [7, 6, 2, 3, [4, 5]]], [[21.134908344200582, 93.89038801407574, 21.134908344200582, 3.14], [-35, -3, 7, -76, 30, 2, -91, 15, -63, -37]], [[1, "apple", [1, 3, 1], 3.14, true, [1, 3, 1], {"name": "John", "apple": "Jane"}, [1, 3, 1]], [1, "apple", [1, 3, 1], 3.14, true, [1, 3, 1], {"name": "John", "apple": "Jane"}, [1, 3, 1]]], [["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", "apple"], ["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", "apple"]], [[1, [4], 2, 3, 0, [4]], [1, [4], 2, 3, 0, [4]]], [["Bob", "banaana", "Jane", "apple", "orange", "banana", "banana"], ["Bob", "banaana", "Jane", "apple", "orange", "banana", "banana"]], [[1, "apple", 3.14, true, {"name": "John"}, [1, 2, 3]], ["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", 3.14]], [[-3, -32, 90, -43, -68, 1, -63, 90], [4, 5, 6]], [[-35, -3, 7, -76, 30, 2, -91, 15, -63, -37], [-35, -3, 7, -76, 30, 2, -91, 15, -63, -37]], [["Bob", "apple", "orange", "b", "banana"], ["Bob", "apple", "orange", "b", "banana"]], [[true, "banaana", 3.14, true, [2, 1, 2, 3], "apppeare", [2, 1, 2, 3], [2, 1, 2, 3]], [true, "banaana", 3.14, true, [2, 1, 2, 3], "apppeare", [2, 1, 2, 3], [2, 1, 2, 3]]], [[-3, -32, 90, -43, -3, 1, -63, 90], [4, 5, 6]], [[1, 2, 3, 1, 2], [1, 2, 3, 1, 2]], [[[-37, 2, 3], 1, "apple", 3.14, true, {"name": "John"}, [-37, 2, 3]], [[-37, 2, 3], 1, "apple", 3.14, true, {"name": "John"}, [-37, 2, 3]]], [[1, true, "apple", 3.14, true, {"name": "John"}, [1, 2, 3]], ["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple"]], [[1, 0, "hello", true, 3.14], ["world", -37, false, false]], [[30, 2, 3, [4, 5], 4, [4, 5]], [30, 2, 3, [4, 5], 4, [4, 5]]], [["hello", true, 3.14], [true, "world", 2, false]], [["banana", 3.14, 2.3693017780569647, false, [1, 2, 3], {"name": "Jane"}, "apple"], ["banana", 3.14, 2.3693017780569647, false, [1, 2, 3], {"name": "Jane"}, "apple"]], [[1, 1, 1, 2], [1, 1, 1, 2]], [[true, "world", 2], [true, "world", 2]], [["Bob", "orange", "b"], ["Bob", "orange", "b"]], [[-3, -32, 90, -43, 4, 1, -63, 90], [-3, -32, 90, -43, 4, 1, -63, 90]], [["bananba", 91.18946345806884, [1, 2, 3], {"name": "Jane"}, "applpe"], ["bananba", 91.18946345806884, [1, 2, 3], {"name": "Jane"}, "applpe"]], [[1, 2, 35, 3, [4, 5]], [1, 2, 35, 3, [4, 5]]], [["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", "aple", "apple", 3.14, "banana"], ["banana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", "aple", "apple", 3.14, "banana"]], [["bananba", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", [1, 2, 3]], ["bananba", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple", [1, 2, 3]]], [["bananba", 91.18946345806884, [1, 2, 3], "applpe"], ["bananba", 91.18946345806884, [1, 2, 3], "applpe"]], [["world", -37, false, false], [1, 0, "hello", true, 3.14, "hello"]], [[-3, -32, 90, -43, -68, 1, -63, 90], [5, 5, 6]], [[true, "banana", 3.14, true, [2, 1, 2, 3], "apppeare", [2, 1, 2, 3], [2, 1, 2, 3], [2, 1, 2, 3]], [true, "banana", 3.14, true, [2, 1, 2, 3], "apppeare", [2, 1, 2, 3], [2, 1, 2, 3], [2, 1, 2, 3]]], [[7, 7, 6, 2, 3, [4, 5]], [7, 7, 6, 2, 3, [4, 5]]], [[-3, -32, 89, -43, 4, 1, -63, 90], [-3, -32, 89, -43, 4, 1, -63, 90]], [[1, "apple", 3.14, true, {"name": "John"}, [1, 2, 3], 3.14], ["banana", 3.14, false, [1, 2, 4], {"name": "Jane"}, "apple", 3.14]], [[30, 3, [4, 5]], [30, 3, [4, 5]]], [["banana", 3.14, 2.3693017780569647, false, [1, 2, 3], {"name": "Jane"}, "banana"], ["banana", 3.14, 2.3693017780569647, false, [1, 2, 3], {"name": "Jane"}, "banana"]], [[-68, 4, -91, 5, 6], [-68, 4, -91, 5, 6]], [[true, "banana", 4.307788630507801, true, [2, 1, 2, 3, 1], "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana"], [true, "banana", 4.307788630507801, true, [2, 1, 2, 3, 1], "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana"]], [[false, true, true], [true, false, false, false, false]], [[true, "banana", 2, true, true], [true, "banana", 2, true, true]], [[true, "banana", 4.307788630507801, [2, 1, 2, 3, 1], "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana"], [true, "banana", 4.307788630507801, [2, 1, 2, 3, 1], "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana"]], [["bananba", 4.307788630507801, [1, 2, 4, 3], {"name": "Jane"}, "apple"], ["bananba", 4.307788630507801, [1, 2, 4, 3], {"name": "Jane"}, "apple"]], [[-3, -32, 90, -43, -68, 1, -63, 90], [4, 5, 7]], [[[4, 5], 7, 8, 8], [[4, 5], 7, 8, 8]], [[1, "apple", 3.14, true, [1, 3, 1], {"name": "John", "apple": "Jane"}, [1, 3, 1], "apple", [1, 3, 1], "apple"], [1, "apple", 3.14, true, [1, 3, 1], {"name": "John", "apple": "Jane"}, [1, 3, 1], "apple", [1, 3, 1], "apple"]], [[true, "world"], [true, "world"]], [[1, "apple", [1, 2, 3, 1], 3.14, true, {"name": "John"}, [1, 2, 3, 1], [1, 2, 3, 1]], [1, "apple", [1, 2, 3, 1], 3.14, true, {"name": "John"}, [1, 2, 3, 1], [1, 2, 3, 1]]], [["bananba", 4.307788630507801, [1, 2, 3], {"name": "Jane"}], ["bananba", 4.307788630507801, [1, 2, 3], {"name": "Jane"}]], [["apple", "orange", "banana"], ["apple", "orange", "banana"]], [[1, 2, 8, 3, [4, 5]], [[4, 5], 6, 7, 8]], [[7, 2, 3, [4, 5], -37, 7], [7, 2, 3, [4, 5], -37, 7]], [[7, 7, 6, 1, 3, 8, [4, 5]], [7, 7, 6, 1, 3, 8, [4, 5]]], [[-68, 4, 5, 6], [-68, 4, 5, 6]], [[2, 35, 3], [2, 35, 3]], [[1, 0, "hello", true, 3.14, "hello"], [1, 0, "hello", true, 3.14, "hello"]], [[91.61855254750878, "banBobanba", 91.39307103978749, [1, 2, 3], 91.61855254750878], [91.61855254750878, "banBobanba", 91.39307103978749, [1, 2, 3], 91.61855254750878]], [[2, 3, [4, 5], 3], [2, 3, [4, 5], 3]], [["Bob", "apple", "orange", "banana", "banana", "apple"], ["Bob", "apple", "orange", "banana", "banana", "apple"]], [[true, "banana", 4.307788630507801, "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana"], [true, "banana", 4.307788630507801, "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana"]], [["banana", 4.307788630507801, true, [2, 1, 2, 3, 1], "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana", "banana"], ["banana", 4.307788630507801, true, [2, 1, 2, 3, 1], "apppeare", [2, 1, 2, 3, 1], [2, 1, 2, 3, 1], "banana", "banana"]], [["Bob", "apple", "peaar", "pear", "banana"], ["Bob", "apple", "peaar", "pear", "banana"]], [["bana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple"], ["bana", 3.14, false, [1, 2, 3], {"name": "Jane"}, "apple"]], [[-3, -32, 4, 90, -43, -3, 1, -63, 91], [-3, -32, 4, 90, -43, -3, 1, -63, 91]], [[2, 3, 3, [4, 5]], [2, 3, 3, [4, 5]]], [[[4, 5], 7, 8, 8, 8, [4, 5]], [[4, 5], 7, 8, 8, 8, [4, 5]]], [[1, "apple", [1, 2, 3, 1], 3.14, true, {"name": "John"}, [1, 2, 3, 1], [1, 2, 3, 1], [1, 2, 3, 1]], [1, "apple", [1, 2, 3, 1], 3.14, true, {"name": "John"}, [1, 2, 3, 1], [1, 2, 3, 1], [1, 2, 3, 1]]], [[3.14, 2.3693017780569647, false, [1, 2, 3], {"name": "Jane"}, "banana"], [3.14, 2.3693017780569647, false, [1, 2, 3], {"name": "Jane"}, "banana"]], [[-3, -32, 90, -43, -68, 1, -63, 90], [4, 5, 7, 5]], [["apple", "world", "orange", "bpearanana", "apple"], ["apple", "world", "orange", "bpearanana", "apple"]], [[0, 1, [4], 2, 3], [0, 1, [4], 2, 3]], [["bananba", 91.18946345806884, [1, 2, 3], "baananba", "applpe"], ["bananba", 91.18946345806884, [1, 2, 3], "baananba", "applpe"]], [[1, "apple", [1, 2, 3, 1], 21.134908344200582, true, {"name": "John"}, [1, 2, 3, 1], [1, 2, 3, 1], [1, 2, 3, 1]], [1, "apple", [1, 2, 3, 1], 21.134908344200582, true, {"name": "John"}, [1, 2, 3, 1], [1, 2, 3, 1], [1, 2, 3, 1]]], [[1, "apple", 3.14, true, {"name": "John"}, [1, 2, 3], 3.14], ["banana", 3.14, -77.78378643178206, false, [1, 2, 4], "apple", 3.14]], [["apple", "age", "orange", "bpearanana"], ["apple", "age", "orange", "bpearanana"]], [[false, true, false, true], [false, true, false, true]], [[7], [7]], [["Bob", "banaana", "Jane", "apple", "orange", "banana", "banana", "banaana"], ["Bob", "banaana", "Jane", "apple", "orange", "banana", "banana", "banaana"]], [["banana", false, {"name": "Jane"}, "apple", {"name": "Jane"}], ["banana", false, {"name": "Jane"}, "apple", {"name": "Jane"}]], [[1, 2, 3, 5], [1, 2, 3, 5]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==False\nassert common_element(['a','b','c'], ['d','b','e'])==True\n"}
{"task_id": "Mbpp/432", "prompt": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n", "entry_point": "median_trapezium", "canonical_solution": "\ndef median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2\n", "base_input": [[15, 25, 35], [10, 20, 30], [6, 9, 4]], "atol": 0, "plus_input": [[2.3, 4.7, 3.9], [9.8, 7.1, 5.6], [6.2, 3.5, 8.9], [999999, 1000000, 1000000], [10000000, 5000000, 1000000000], [0, 0, 0], [999999, 1000000, 10000001], [10.351335245743993, 7.1, 5.4977102681459025], [2.76692487581672, 8.9, 8.9], [6.2, 3.5, 5.6], [10000000, 1000000000, 10000000], [0, 999999, 1000000], [7.1, 5.6, 7.1], [2.3, 4.7, 2.3], [1000000, 1000000000, 10000000], [1000001, 0, 1000000], [6.022223408955435, 7.1, 5.530370540982478], [1000000, 1000000000, 10000001], [1000001, 1000000, 0], [12.228674915981982, 7.1, 5.4977102681459025], [6.022223408955435, 2.76692487581672, 8.9], [1000000, 10000000, 1000000], [0, 10000001, 1000000], [10000000, 10000001, 1000000], [3.5, 8.9, 3.5], [7.1, 10.351335245743993, 5.6], [6.2, 3.5, 7.1], [3.9, 5.6, 7.1], [1000000, 0, 1000000], [1000000, 999999, 1000000], [1000000000, 10000000, 1000000], [1000000, 999999, 10000001], [-88, 999999, 10000001], [10000001, 1000001, 10000001], [6.2, 4.854251964633547, 8.9], [10000001, 10000001, 10000001], [3.5, 5.6, 5.715398378080888], [4.7, 3.9, 3.9], [1000000, 1000000000, 1000000000], [0, 1000000, 999998], [4.850138598783948, 5.6, 7.1], [2.76692487581672, 8.9, 9.893908979364358], [9999999, 10000000, 1000001], [5.6, 8.9, 2.76692487581672], [999999, 1000001, 1000000], [0, 10000002, 10000002], [9999999, 10000001, 0], [0, 10000001, 10000001], [1000001, 10000000, 999998], [-88, 0, 0], [-88, 0, -88], [3.5, 8.9, 2.8209769415973507], [10000002, 1000001, 10000001], [9999999, 10000000, 999998], [1000000, 1000000, 1000000000], [2.7014656823764467, 2.3, 10.351335245743993], [2.3, 5.6, 4.7], [1000001, 999997, 999998], [1000000001, 1000000000, 1000000000], [-88, 10000000, 1000000], [12.228674915981982, 3.5, 8.9], [1000001, 999998, 10000001], [9.893908979364358, 8.93173150209581, 9.893908979364358], [4.522479161912187, 5.6, 2.7775010956134483], [999997, 1000001, 1000001], [2.9887311136415176, 2.538621128154383, 8.9], [7.1, 7.1, 7.1], [1000000, 1000000, 10000001], [3.5, 2.538621128154383, 3.5], [2.76692487581672, 8.9, 5.705802537957529], [999999, 1000000, 10000002], [4.850138598783948, 5.8060581662192785, 2.76692487581672], [999999, 10000002, 10000002], [5.6, 6.2, 12.228674915981982], [6.2, 8.9, 6.2], [2.538621128154383, 5.4977102681459025, 12.228674915981982], [2.3, 8.9, 2.8209769415973507], [10000001, 1000001, 1000001], [6.2, 3.5393547718834983, 6.2], [5.4977102681459025, 2.7014656823764467, 10.351335245743993], [9999999, 10000002, 10000002], [4.7, 5.4977102681459025, 9.893908979364358], [6.022223408955435, 5.530370540982478, 8.9], [1, 0, 1000000], [12.228674915981982, 2.9793130653024416, 8.9], [2.3, 5.8060581662192785, 8.9], [10000000, 1000001, 1], [10.351335245743993, 4.522479161912187, 3.5], [6.2299590099438475, 5.068507205133304, 6.2299590099438475], [-88, 1000000, 1000000], [10000000, 999999, 999999], [5.715398378080888, 8.9, 8.9], [8.871527604619072, 8.011219353977074, 9.893908979364358], [2.9887311136415176, 5.4977102681459025, 2.8209769415973507], [2.7014656823764467, 11.989047929768356, 9.96018534975334], [999997, 999998, 10000000], [10000002, 9999999, 999998], [8.93173150209581, 9.893908979364358, 8.93173150209581], [1000000, 1000000000, 1000000002], [10000002, 999998, 10000001], [9.893908979364358, 8.93173150209581, 4.854251964633547], [7.1, 14.507707595032242, 5.6], [2.3, 2.8209769415973507, 1.6758070525843425], [1000000000, 1000000000, 1000000000], [999997, 999998, 999997], [999998, 1000001, 10000002]], "contract": "\n    assert isinstance(base1, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(base2, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5\n"}
{"task_id": "Mbpp/433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n", "entry_point": "check_greater", "canonical_solution": "\ndef check_greater(arr, number):\n  return all(number > el for el in arr)\n", "base_input": [[[1, 2, 3, 4, 5], 4], [[2, 3, 4, 5, 6], 8], [[9, 7, 4, 8, 6, 1], 11]], "atol": 0, "plus_input": [[[], 10], [[1, 2, 3, 4, 5], 6], [[], -10], [[-24.9567031174266, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 10], [[true, false, false, false, true, true, false, false, false], -10], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 7], [[true, true, false, false, true, true, false, false, false], -10], [[1, 2, 3, 4, 5], 7], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 8], [[1, 2, 3, 2, 4, 5, 2], 7], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 3], [[true, true, false, false, true, true, true, false, false], -10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -22.030348483337058, 76.11828953745851, -29.07079657602243], 10], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 3], [[1, 2, 3, 2, 4, 5, 2], 3], [[-88.95249619481227, -89.04505768413293, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[1, 2, 3, 4, 5, 3], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 2], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 4], [[true, true, false, false, false, true, true, false, false, false], -10], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 39.03098002919728, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, -29.07079657602243], 9], [[1, 2, 3, 2, 4, 5, 2], 4], [[1, 2, 3, 2, 4, 5, 3], 7], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 6], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], 4], [[76.11828953745851, -24.9567031174266, 76.49684430385265, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], -10], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 6], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851, -24.9567031174266], 4], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 8], [[44, -55, 10, 9], -10], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, -29.07079657602243], 3], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -88.95249619481227], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 28.64651047073241], 7], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 9], [[], 9], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], 6], [[true, true, false, false, true, true, true, false, false], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 29.445371536010146, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851, -28.530054745009153], 6], [[5], 2], [[-30, -55, 1, -84, 37], -11], [[39.03098002919728, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[1, 2, 3, 4, 5], 5], [[true, true, false, false, false, true, true, false, true, false, false], -10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 9], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 1], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 8], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851, -88.95249619481227], 4], [[-102.29228051425821, 28.64651047073241, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 5], [[-24.9567031174266, -88.95249619481227, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -89.9137698848537, -29.07079657602243], 8], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], -11], [[76.11828953745851, -24.9567031174266, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 4], [[true, true, false, true, true, true, false, false], -10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 9], [[1, 2, 3, 2, 4, 5, 2, 2], 8], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-88.95249619481227, -89.04505768413293, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 7], [[-24.9567031174266, -21.950010757474818, 41.531086520483385, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 4], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], -10], [[1, 2, 3, 4, 5], 8], [[true, false, false, false, true, true, false, false, false, false], -10], [[true, true, false, false, true, true, true, false, false, true], 5], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 39.03098002919728, -88.95249619481227, 76.11828953745851, -29.07079657602243], 5], [[-89.9137698848537, -24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 8], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], -12], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11523496633954, -29.07079657602243, 76.11828953745851, -88.95249619481227], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 5], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 2], [[true, true, false, false, true, true, true, false, false, true], -12], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -24.9567031174266, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-24.9567031174266, -21.950010757474818, 41.531086520483385, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243, -88.95249619481227], 4], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, 76.11828953745851, 76.11828953745851, -28.530054745009153], 6], [[false, true, true, true, false, true], -10], [[true, true, false, true, true, true, false, true], -10], [[true, true, false, false, true, true, true, false, false, true], 9], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], -30], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.49684430385265, 76.11828953745851, -29.07079657602243], 7], [[1, 2, 4, 5], 5], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 10], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.27369600369303, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], -30], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243, 28.64651047073241], 6], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 5], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 3], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -16.56428238448845, -29.07079657602243], 1], [[-24.9567031174266, -21.950010757474818, -29.07079657602243, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -88.95249619481227, 76.11828953745851, -29.07079657602243], 3], [[-14.595458215631101, 39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 7], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243, 28.64651047073241], 1], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, 76.11828953745851, -24.9567031174266], 3], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.27369600369303, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, 76.11523496633954], -30], [[-102.39704966749818, -21.950010757474818, -102.29228051425821, 28.64651047073241, -24.9567031174266, 76.11828953745851, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 4]], "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(number, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n"}
{"task_id": "Mbpp/435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "entry_point": "last_Digit", "canonical_solution": "\ndef last_Digit(n) :\n    if n < 0: \n        n = -n\n    return n % 10\n", "base_input": [[123], [25], [30]], "atol": 0, "plus_input": [[-987], [0], [999999999999999999999999], [-988], [-989], [-2], [-3], [97], [true], [false], [-990], [1], [-1], [42], [-986], [999999999999999999999998], [96], [95], [94], [93], [61], [-14], [-992], [-991], [43], [-18], [98], [62], [92], [5], [60], [91], [-48], [28], [-994], [-19], [44], [2], [29], [1000000000000000000000000], [53], [-4], [63], [-985], [-5], [4], [-79], [-15], [999999999999999999999997], [3], [-78], [-91], [-993], [-90], [59], [-92], [49], [-76], [-17], [45], [58], [64], [-16], [-995], [-77], [-6], [27], [-12], [6], [22], [46], [1000000000000000000000001], [-20], [54], [65], [41], [30], [57], [56], [-7], [23], [-67], [55], [66], [50], [51], [99], [-65], [-93], [-66], [-21], [-23], [-47], [-996], [47], [-13], [-8], [-71], [89], [52], [48], [-24], [-50]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n"}
{"task_id": "Mbpp/436", "prompt": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n", "entry_point": "neg_nos", "canonical_solution": "\ndef neg_nos(list1):\n  return [i for i in list1 if i < 0]\n", "base_input": [[[-1, 4, 5, -6]], [[-1, -2, 3, 4]], [[-7, -6, 8, 9]]], "atol": 0, "plus_input": [[[]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18]], [[-10, -5, -3, 0, 2, 5, 8, -7, 12, 15]], [[-2, -4, -6, -8, -10, 0, 2, 4, 6, 8, 10]], [[-1, -3, -5, -7, -9, -11, 1, 3, 5, 7, 9, 11]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-100, -200, 0, 50, -75, 100, -150, 200, 0, -250, 300, -350]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10]], [[-1, -5, -7, -9, -11, 1, 3, 5, 7, 9, 11]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[1, -6, 2, 3, 4, -5, -6, 7, 8, -9, 10, 7]], [[-2, -4, -6, -8, 0, 2, 4, 6, 8, 10]], [[1, -6, 2, 3, 4, -5, -6, 7, 8, -9, 10, 7, -6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, 18, 0]], [[-1, -8, -5, -7, -9, -11, 1, 3, 5, 7, 9, 11]], [[-2, -4, -6, 10, -8, 0, 2, 4, 8, 10]], [[4, -2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[-2, -4, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -3, -4]], [[4, -2, -4, 0, 3, 3, -8, -10, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[-10, -5, -3, 0, 2, 5, 8, -7, 12, 15, -7]], [[-2, -4, -6, -8, -10, 0, 3, 4, 6, 8, 10]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18, -2]], [[4, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[-2, -4, 4, 3, -8, -10, 0, 2, 11, 4, 2, 6, 8, -10, 20, -15, -15, -3, -4]], [[-2, -4, 20, -8, 2, 4, 6, 8, 10]], [[-2, 11, 0, 3, 3, -8, -11, 20, -250, 0, 2, 4, 2, 6, 8, -10, -15, 18, 6]], [[1, -2, 0, 1, -5, 7, -8, 10, 12, 0, -15, 18, -2, 12]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 10, 6]], [[-350, -2, 0, -5, 7, -8, 10, 12, 0, 18, 0]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -14, -4, 3]], [[2, 2, 3, 4, 5, 6, 7, 200, 8, 9, 10, 7, 10]], [[1, -2, 0, -14, 7, -8, 10, 300, 0, -15, 17]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3, 3]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10, -5]], [[-2, -4, -6, -10, 0, 2, 4, 6, 8, 10]], [[-2, 16, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6]], [[-2, 16, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -11, -15, -15, 18, 6]], [[1, -6, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8]], [[1, -2, 0, -5, 7, -8, 10, 0, 18, 0, 0]], [[-10, -5, -3, -14, 0, 2, 5, 8, -7, 12, 15]], [[-2, -4, 0, 3, 3, -9, -11, 20, 0, 4, 2, 6, 8, -10, -15, 18, 6, 6, 3]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10, -5, 7]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18, -2, -2]], [[-1, -8, -350, -7, -9, -11, 1, 3, 5, 7, 9, 11, -8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 10]], [[-2, 0, -5, 7, -8, 10, 12, 0, -15, 18]], [[-10, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10]], [[1, -6, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[1, 2, 2, 4, -5, 3, -6, 7, 8, -9, 10, 11, 7, 7]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -2, -15, -15]], [[4, -2, -4, 0, 3, 2, -8, -10, 4, 2, 6, 8, -10, -15, -15, -4]], [[4, -2, -4, 0, 3, 3, -8, -10, 1, 4, 2, 6, 8, -10, -15, -15, -4]], [[1, -2, 0, -5, 7, -8, 10, 12, 50, 0, -15]], [[-2, -4, -6, -8, 2, 4, 6, 8, 10]], [[1, -6, 15, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18]], [[1, -6, 2, 3, 4, -5, -6, 7, 8, -9, 7, -5]], [[1, -6, 3, -5, -150, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 2, 6, 8, -10, -15, -15]], [[-10, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 6, 9, 10]], [[-2, -4, -6, -8, -10, 0, 3, 6, 8, 10]], [[-2, -4, -6, -8, 0, 2, -150, 6, 10, 2]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -16, -14, -4, 3]], [[-100, -200, 0, 50, -75, -150, 200, 0, -250, 300, -350]], [[1, 8, -6, 2, 3, 4, -5, -6, 7, 8, -9, 10, 7, -6]], [[4, -2, -75, -4, 0, 3, 3, -8, -10, 1, 4, 2, 6, 8, -10, -15, -15, -4]], [[1, -6, 15, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 8, -6]], [[4, -4, -9, 0, 1, 3, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3]], [[-2, -4, 4, 3, -8, -10, 0, 2, 11, 4, 2, 6, 8, -10, -15, -15, -3, -4]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]], [[1, -6, 3, 7, 100, -150, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[-4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6]], [[0, 1, 2, 3, 4, 5, 3, 6, 7, 8, 9, 10]], [[-2, -4, -2, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6]], [[-2, -4, -6, -8, 0, 2, 4, 8, 10]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 2, 8, -10, -15, -15]], [[-1, -3, -5, -1, -9, -11, 1, 3, 5, 7, 9, 11, 9]], [[1, -6, 15, 3, -5, -6, 7, 8, -9, 10, 7, 8, 8]], [[0, 1, 16, 2, 3, 4, 5, 6, 7, 8, 6, 9, 10]], [[-10, -5, 16, 9, 0, 2, 5, 8, -7, 12, 15]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10, -5, 1]], [[4, -2, -75, 0, 3, 3, -8, -10, 1, 4, 2, 6, 8, -10, -15, -15, -4]], [[-2, -4, 4, 3, -8, -10, 2, 11, 4, 2, 6, 8, -10, 20, -15, -15, 6, -3, -4, 2]], [[1, 2, -3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, -5, -6, 4, 8, -9, 10]], [[1, -6, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 10]], [[-2, -4, -6, -8, 2, 6, 8, 10]], [[1, 2, 2, 4, -5, 8, 3, -6, 7, 8, -9, 10, 11, 7, 7, -9]], [[-10, -5, -3, -14, 0, 2, -7, 8, -7, 12, 15]], [[-10, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, 10]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18, -5]], [[1, -6, 16, 3, -5, -6, 7, -5, 8, -9, 10, 7, -6, 8, 8]], [[-2, -4, 0, 3, 3, -8, -10, 2, 0, 2, 2, 6, 8, -10, -15, -15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 7, 10, 6]], [[1, 2, 3, 4, 5, 7, 8, 9, 10, 6, 6, 10, 1]], [[1, 2, -3, 4, 5, 6, 7, 8, 9, 10, 8]], [[1, 2, 3, 4, -5, -6, 7, 8, -14, -9, 10]], [[4, -4, 0, 1, 4, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3, 3, 4]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6, -2]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6, -75]], [[2, -3, 4, 5, 6, 7, 8, 9, 10]]], "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n"}
{"task_id": "Mbpp/437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n", "entry_point": "remove_odd", "canonical_solution": "\ndef remove_odd(str1):\n    return str1[1::2]\n", "base_input": [["python"], ["program"], ["language"]], "atol": 0, "plus_input": [[""], ["Hello, world!"], ["acegikmoqsuwy"], ["world!"], ["Hello,"], ["e,Hello,"], ["e,He"], ["e,Hellol,"], ["e,Held!"], ["e,Hello,Hello, world!"], ["e,"], ["e,Hdeld!"], ["Hewllo, world!"], ["e,,"], ["Hee,Held!llo,"], ["Hello,e,Held!"], ["e,Hel"], ["e,HelHello,"], ["wor!ld!"], ["acegiHello,e,Held!kmoqsuwy"], ["e,Hell,"], ["Hello,orld!"], ["eHello, world!,,"], ["Hewllo, lworld!"], ["lworld!"], ["e,Hello,Hee,Held!world!"], ["lworld!e,Hello,Hee,Held!world!"], ["world!,,"], ["eHello, worlld!,,"], ["wore,Hee,Helle,Hdeld!o,Hee,Held!world!l!,,"], ["wore,Hee,Hellelworld!,Hdeld!o,Hee,Held!world!l!,,"], ["eHello, world!,e,,"], ["eHello,"], ["Hello,ore,Hdeld!"], ["e,HdeldHello,orld!!"], ["Hello,ore,Hdel!"], ["Hewllo,"], ["aceHello,ore,HdelHello,ore,Hdeld!d!Hello,e,Held!kmoqsuwy"], ["acegiHello,Hewllo, world!e,Held!kHello,ore,Hdel!suwy"], ["eeHello,"], ["RrjlJwpJaM"], ["e,Held!e,Hell,"], ["e,Hddeld!"], ["HewllHo,e,Held! lworld!"], ["Hello, wHello, world!ld!"], ["e,eHello, world!,,Held!e,Hell,"], ["eHe"], ["HewllHo,e,Held!"], ["He,ore,Hdel!"], ["eeeHello, world!,e,,Hello,"], ["e,eHHello, wHello, world!ld!ello, world!,,Held!e,Hell,"], ["eeHelolo,"], ["e,HdeldHell!!"], ["e!,Hdeld!"], ["wore,Hee,Helle,Hdeld!o,Hee,Held!world!l!,,lworld!"], ["e,eld!e,Hell,"], ["wore,Hee,Helle,Hdeld!eeeHello,o,Hee,Held!world!l!,,lworld!"], ["lwHello,orld!orld!"], ["HewllHo,e,Held! lw!orld!"], ["Hewllo, worl"], ["e,He,ld!e,Hell,"], ["eeHello, worlld!,,,Hell,"], ["lorld!"], ["e,,,"], ["lwlHello,orld!orld!"], ["e,Hee,ld!e,Hee,Hello,Hee,Held!world!ll,e,eHello, world!,,Held!e,Hell,"], ["eeeHello,"], ["aworlld!,,,Hell,cegikmoqsuwy"], ["e,Heee,ld!e,Hee,Hello,Hee,Held!world!ll,e,eHello, world!,,Held!e,Hell,"], ["wore,Hee,Hellelworld!,Hdeld!o,H!ee,Held!world!l!,,"], ["loe,Hello,Hello,rld!"], ["wolrld!,,Held!e,Hell,"], ["world!,e,,Hello,"], ["wore,Hee,HHellelworld!,He,HdeldHello,orld!!deld!o,H!ee,Held!world!l!,,"], ["e,Hel!"], ["Hello,ore,world!,,Hdel!"], ["acegikmoqsuwore,Hee,Helle,Hdeld!o,Hee,Held!world!l!,,"], ["eHello,Hee,Held!llo,"], ["e,,,Hewllo, worl"], ["e,Heee,ld!e,Hee,Hello,H,ee!world!ll,e,!eHello,"], ["e,Hreee,ld!e,Hee,Hello,Hee,Held!world!ll,e,eHello, world!,,Held!e,Hell,"], ["He wllHo, world!"], ["wllHo,"], ["eHello,Heo,"], ["e,Hee,ld!e,Hee,Hello,Hee,Held!world!ll,e,eHello,"], ["e,HHddeld!"], ["e,,eHe"], ["lwHello,orlHee,Held!llo,d!orld!"], ["Hello, wHello, world!Hewllo, worlld!"], [",e,,"], ["ld!"], ["e,Hreee,ld!e,Hee,Hello,Hee,Held!world!ll,e,eHello,"], ["mvWHEUyrs"], ["lwHello,orlHee,Held!llo,d!olw!orld!rld!"], ["wore,Hee,Helworld!le,Hdeld!o,Hee,Held!world!l!,,lworld!"], ["nhh"], ["e,Hreee,ld!e,HeeHee,Held!llo,,Hello,Hee,Held!world!ll,e,eHello,"], ["wore,Hee,HHellelworld!,He,HdeldHello,orld!!deld!o,H!ee,Held!world!l!,world!ld!ello,"], ["ee,eHHaworlld!,,,Hell,cegikmoqsuwyello, wHello, orld!ld!ello, worlmd!,,Held!e,Hell,elle!!"], ["worlld!,,"], [",,e,,"], ["e,He,ld!e,Hee,Heee,ld!e,Hee,Hello,Hee,Held!world!ll,e,eHello, world!,,Held!e,Hell,l,"], ["e,HeHl"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\n"}
{"task_id": "Mbpp/438", "prompt": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\n", "entry_point": "count_bidirectional", "canonical_solution": "\ndef count_bidirectional(test_list):\n  return sum(test_list.count(l[::-1]) for l in test_list) / 2\n", "base_input": [[[[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]], [[[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]], [[[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]]], "atol": 0, "plus_input": [[[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9]]], [[]], [[[1, 1], [2, 1], [4, 1], [5, 1], [6, 1]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]], [[[3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[3, 4], [5, 6], [7, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9], [2, 1]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [6, 7], [3, 4]]], [[[5, 6], [7, 8], [9, 10], [11, 12], [13, 13], [14, 16], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [4, 5]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 7]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 9], [9, 10], [10, 9], [2, 1]]], [[[5, 6], [7, 8], [9, 10], [11, 12], [14, 16], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [15, 16], [19, 20], [9, 10]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1, 1], [5, 6], [7, 8], [9, 7], [4, 3]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [5, 6]]], [[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [4, 1]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9], [3, 4]]], [[[1, 2], [2, 3], [3, 4], [1, 3], [4, 5], [6, 7]]], [[[5, 6], [7, 8], [9, 10], [11, 12], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[3, 4], [5, 6], [7, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [17, 18]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [6, 7]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 10], [10, 9], [3, 4]]], [[[1, 1], [2, 1], [5, 1]]], [[[3, 4], [5, 6], [7, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 15], [17, 18], [19, 20]]], [[[5, 6], [9, 10], [11, 12], [14, 16], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [7, 8]]], [[[2, 3], [3, 4], [4, 5], [5, 6], [4, 5], [2, 3]]], [[[7, 7], [1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 10], [10, 9], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [4, 5], [5, 6]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 12], [15, 16], [17, 18], [19, 20], [5, 6]]], [[[7, 7], [1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 10], [3, 4], [5, 6]]], [[[5, 6], [7, 8], [9, 10], [11, 12], [15, 16], [17, 18], [19, 20], [17, 18]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10], [7, 8]]], [[[7, 7], [1, 2], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 10], [3, 4], [5, 6]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [7, 8]]], [[[7, 8], [9, 10], [11, 12], [14, 16], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [5, 7], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [5, 6]]], [[[1, 2], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [5, 6]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9], [6, 5]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [15, 16], [19, 20], [9, 10], [9, 10]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10], [7, 8]]], [[[1, 2], [2, 3], [3, 4], [1, 3], [4, 5], [6, 7], [3, 4]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [6, 8], [8, 7], [9, 10], [10, 9], [3, 4]]], [[[5, 6], [7, 8], [12, 10], [11, 12], [13, 13], [14, 16], [15, 16], [17, 18], [19, 20]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [5, 6], [1, 2]]], [[[1, 2], [5, 15], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [5, 7], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [5, 6], [1, 2]]], [[[1, 12], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [6, 8], [8, 7], [9, 10], [10, 9], [3, 4]]], [[[1, 1], [2, 1], [4, 1], [5, 1], [6, 1], [4, 1]]], [[[1, 2], [12, 6], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10], [13, 14]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10], [7, 8], [15, 16], [19, 20]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 8], [11, 12], [15, 16], [17, 18], [19, 20], [5, 6]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 7], [4, 3], [6, 5]]], [[[1, 1], [2, 1], [4, 1], [5, 1], [6, 1], [5, 1]]], [[[7, 7], [1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [2, 2], [9, 10], [5, 6], [9, 10]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1, 1], [5, 6], [7, 8], [9, 7], [4, 3], [5, 6]]], [[[4, 5], [4, 5], [2, 3]]], [[[1, 1], [2, 1], [5, 16]]], [[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [1, 1]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9], [3, 4], [4, 3], [9, 10], [2, 1], [7, 8]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [10, 9], [3, 4]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [7, 8], [9, 7], [4, 3], [6, 5]]], [[[4, 5], [4, 5]]], [[[1, 1], [4, 1], [5, 1], [6, 1], [5, 1]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1, 1], [5, 6], [7, 8], [4, 3], [5, 6]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [1, 1], [7, 8], [9, 7], [4, 3]]], [[[1, 1], [2, 1], [4, 1], [5, 1], [5, 1]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 8], [11, 12], [15, 16], [17, 18], [19, 20], [5, 6], [11, 8]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 8], [11, 12], [15, 16], [12, 18], [19, 20], [5, 6], [11, 8]]], [[[1, 1], [2, 1], [5, 1], [5, 1]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 1], [9, 10], [11, 12], [13, 14], [15, 16]]], [[[1, 2], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[1, 2], [3, 5], [5, 6], [7, 8], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [1, 1], [3, 1], [2, 1]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [11, 8], [11, 12], [15, 16], [17, 18], [19, 20], [5, 6], [15, 16]]], [[[4, 5]]], [[[1, 2], [2, 3], [3, 4], [1, 3], [4, 5], [3, 4], [3, 4]]], [[[7, 7], [1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 10], [3, 4], [5, 6], [6, 5]]], [[[1, 2], [2, 3], [3, 4], [1, 3], [4, 5], [6, 7], [2, 3]]], [[[5, 6], [9, 18], [7, 8], [9, 10], [11, 12], [15, 16], [17, 18], [19, 20], [17, 18], [9, 10]]], [[[1, 2], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7]]], [[[1, 2], [3, 4], [1, 3], [4, 5], [6, 7], [3, 4]]], [[[1, 2], [2, 3], [1, 3], [4, 5], [3, 4], [3, 4]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [7, 1], [9, 10], [11, 12], [13, 14], [15, 16], [9, 10]]], [[[1, 2], [2, 1], [3, 4], [5, 6], [6, 5], [7, 8], [8, 7]]], [[[7, 7], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [9, 10], [3, 4], [5, 6]]], [[[1, 2], [5, 15], [11, 12], [13, 14], [15, 16], [19, 20], [9, 10]]], [[[1, 2], [2, 3], [3, 4]]], [[[1, 2], [2, 1], [3, 4], [4, 3], [6, 5], [7, 8], [8, 7], [10, 9], [3, 4], [3, 4]]], [[[1, 1], [2, 9], [4, 1], [5, 1], [1, 1], [1, 1]]], [[[1, 2], [2, 1], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [4, 3]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [6, 7], [3, 4], [3, 4]]], [[[5, 6], [9, 18], [7, 8], [9, 10], [11, 12], [15, 16], [17, 18], [19, 20], [17, 18]]], [[[5, 6], [9, 18], [7, 8], [9, 10], [11, 12], [15, 16], [17, 18], [19, 20]]], [[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [5, 1], [6, 1]]], [[[1, 1], [2, 9], [5, 1], [1, 1], [1, 1]]], [[[1, 2], [2, 3], [3, 4], [1, 3], [4, 5], [6, 7], [3, 4], [3, 4]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele[0], int) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele[1], int) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 3\n"}
{"task_id": "Mbpp/439", "prompt": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n", "entry_point": "multiple_to_single", "canonical_solution": "\ndef multiple_to_single(L):\n  return int(''.join(map(str,L)))\n", "base_input": [[[11, 33, 50]], [[-1, 2, 3, 4, 5, 6]], [[10, 15, 20, 25]]], "atol": 0, "plus_input": [[[1000000, 999999, 100000, 99999]], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], [[999999999999999999999, 888888888888888888888, 777777777777777777777]], [[123456789123456789123456789, 987654321987654321987654321]], [[999999999999999999999, 888888888888888888888, 999999999999999999999, 777777777777777777777]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777777]], [[99999, 123456789123456789123456789]], [[99999, 888888888888888888888]], [[999999999999999999999, 888888888888888888888, 999999999999999999998, 777777777777777777777]], [[987654321987654321987654321]], [[999999999999999999999, 99999, 999999999999999999998, 777777777777777777777]], [[99999, 888888888888888888888, 99999]], [[987654321987654321987654321, 987654321987654321987654321]], [[9, 999999999999999999999, 99999, 888888888888888888888]], [[999999999999999999999, 100000, 999999999999999999999, 777777777777777777777]], [[99999, 888888888888888888888, 888888888888888888888]], [[1000000, 999999, 100000, 100000]], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9]], [[99999, 987654321987654321987654321, 987654321987654321987654321, 987654321987654321987654321]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 1000000000000000000000]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999]], [[1000000, 999999, 100000]], [[99999, 987654321987654321987654321, 987654321987654321987654321]], [[999999999999999999999, 100000, 999999999999999999999, 100000, 999999999999999999999]], [[1000000, 99999, 987654321987654321987654321, 987654321987654321987654321]], [[1000000, 999999, 999999, 1000000, 100000, 99999]], [[888888888888888888888, 99999, 99999]], [[888888888888888888888, 777777777777777777777]], [[99999, 987654321987654321987654321, 987654321987654321987654321, 1000000]], [[999999999999999999998, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 888888888888888888888, 777777777777777777776, 777777777777777777777]], [[123456789123456789123456789, 99999, 888888888888888888888, 99999]], [[999999999999999999998, 999999999999999999999, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 777777777777777777778, 999999999999999999999]], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], [[999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 100000, 999999999999999999999]], [[987654321987654321987654321, 987654321987654321987654322]], [[1000000000000000000000, 999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999]], [[1000000000000000000000, 99999, 777777777777777777777]], [[999999999999999999998, 888888888888888888888, 777777777777777777777]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], [[123456789123456789123456789, 777777777777777777776]], [[1000000, 999999, 100000, 999999, 999999]], [[999999999999999999999, 99999, 999999999999999999999, 1000000000000000000000]], [[1000000, 99999, 987654321987654321987654321]], [[999999999999999999999, 99999, 777777777777777777778, 999999999999999999998, 777777777777777777777]], [[100001, 999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 100000, 999999999999999999999]], [[999999999999999999999, 99999, 1000000000000000000000, 777777777777777777777, 777777777777777777778, 999999999999999999999]], [[888888888888888888888, 777777777777777777778, 99999, 99999]], [[9, 999999999999999999999, 99999]], [[999999999999999999999, 99999, 987654321987654321987654321]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9]], [[999999999999999999999, 999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 1000000000000000000000, 777777777777777777777]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[999999999999999999999, 99999, 777777777777777777778, 999999999999999999998, 777777777777777777777, 999999999999999999999]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 777777777777777777777, 999999999999999999999]], [[888888888888888888888, 777777777777777777777, 777777777777777777777]], [[999999999999999999999, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 1000000, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999, 999999999999999999999]], [[888888888888888888889, 99999, 99999]], [[777777777777777777779, 888888888888888888888, 777777777777777777778, 99999, 99999]], [[888888888888888888888, 777777777777777777778, 99999, 99999, 888888888888888888889, 99999, 99999]], [[888888888888888888888, 99999]], [[999999999999999999999, 888888888888888888889, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 999999, 999999999999999999999, 1000000000000000000000]], [[9, 123456789123456789123456789, 999999999999999999999, 99999]], [[999999999999999999998, 999999999999999999999, 999999999999999999999, 999999999999999999999, 999999999999999999999]], [[777777777777777777778]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9]], [[999999999999999999999, 9, 888888888888888888888, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[888888888888888888888, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 888888888888888888889, 888888888888888888888, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 1000000000000000000000, 777777777777777777777, 777777777777777777778, 999999999999999999999, 999999999999999999999, 777777777777777777777]], [[1000000, 999999, 100000, 999999]], [[999999999999999999999, 99999, 1000000000000000000000, 777777777777777777777, 100001, 999999999999999999999]], [[999999, 100000]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 777777777777777777777, 999999999999999999999, 777777777777777777777]], [[999999999999999999999, 99999, 888888888888888888888]], [[99999, 1000000, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999, 999999999999999999999]], [[1000000, 999999, 999999, 1000000, 100000, 1000000000000000000000, 99999]], [[999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 100000, 999999999999999999998, 100000]], [[999999999999999999999, 100000, 999999999999999999999, 777777777777777777777, 100000]], [[999999999999999999999, 100001, 999999999999999999999, 987654321987654321987654321, 888888888888888888888, 999999999999999999999, 100000, 999999999999999999999]], [[999999999999999999999, 888888888888888888888]], [[999999999999999999999, 888888888888888888887, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 777777777777777777778, 999999999999999999999, 999999999999999999999]], [[999999999999999999999, 99998, 999999999999999999999, 777777777777777777777]], [[999999, 8, 100000]], [[999999999999999999999, 777777777777777777776, 999999999999999999999, 1000000000000000000000]], [[888888888888888888888, 888888888888888888888, 888888888888888888888, 888888888888888888888]], [[987654321987654321987654322, 987654321987654321987654322]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9]], [[999998, 99998, 99999, 888888888888888888888]], [[999999999999999999999, 1000000000000000000000, 777777777777777777777, 777777777777777777778, 999999999999999999999, 999999999999999999999, 777777777777777777777]], [[1000000, 99999, 987654321987654321987654321, 1000000, 99999]], [[987654321987654321987654322, 987654321987654321987654322, 987654321987654321987654322]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 100000, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9]], [[999999999999999999999, 888888888888888888888, 987654321987654321987654322, 777777777777777777777]], [[999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 999999999999999999998, 100000, 100000]], [[777777777777777777777, 123456789123456789123456789, 777777777777777777776]], [[999999999999999999999, 123456789123456789123456789, 999999999999999999999, 777777777777777777777]]], "contract": "\n  assert isinstance(L, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n"}
{"task_id": "Mbpp/440", "prompt": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n", "entry_point": "find_adverb_position", "canonical_solution": "\nimport re\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n", "base_input": [["clearly!! we can see the sky"], ["seriously!! there are many roses"], ["unfortunately!! sita is going to home"]], "atol": 0, "plus_input": [["heavily and quickly we ran down the steep hill"], ["they swiftly and silently tiptoed through the dark room"], ["quickly and quietly, the bird flew away"], ["flew"], ["they swiftly and silentlywe tiptoed through the dark room"], ["swiftly"], ["dhillrk"], ["quicklthey flew away"], ["they swiftly and silentlywe tiptoede through the dark room"], ["and"], ["they"], ["dark"], ["awaquicklyy"], ["ran"], ["andran"], ["they swiftly and silently tiptoed thr ough the dark room"], ["ttiptoed"], ["they swiftly and silentlywe tiptoede through the dark om"], ["ann"], ["ythey"], ["dhilllrk"], ["they swiftly and silentlywe dtiptoede through the dark om"], ["darkran"], ["yththey swiftly and silently tiptoed through the dark roomey"], ["they swiftly and silently tiptoedd through the dark room"], ["dhillhrdtiptoedek"], ["aran"], ["awaquickalyy"], ["silentlywe"], ["tsilentyhey"], ["annthey"], ["quietly,"], ["awfayfle"], ["tthey swiftly and silently tiptoed through the dark roomheey"], ["fswiftlylew"], ["dathey swiftly and silentlywe tiptoede through the dark roomrk"], ["they swiftly and silentlywe tiptoed th rough the dark room"], ["roomey"], ["they sdhilllrkwiftly and silentlywe tiptoede through the dark room"], ["awfsilentlyayfle"], ["yt"], ["they roomswiftly and silentlywe dtiptoede through the dark om"], ["hj"], ["dathey swiftly and silentlywe tiptoede thandranrk"], ["awefsilentlyayfle"], ["they swiftly and sittiptoedlentlywe tiptoed th rough the dark room"], ["room"], ["awilentlyayfle"], ["ough"], ["bird"], ["they swiftly and sittiptoedlentlywe h rough the dark r"], ["they swiftly and sittiptoedlentlywe tiptoed th rthroughough the dark room"], ["roomrk"], ["dtiptoede"], ["away"], ["heavily"], ["awfsilentlyale"], ["dhillhrdtiptoed"], ["quroom flew away"], ["dathey swiftly and silentlywe tndranrk"], ["thesdhilllrkwiftlyy swiftly and silentlywe tiptoede through the dark om"], ["dathey swiftly and silentlywe tiyt"], ["quickly and quietldtiptoedey, the bird flew away"], ["quickly anrand quietly, the bird flew away"], ["dhililrk"], ["darak"], ["thesdhilllrkwiftlyy"], ["rdathey swiftly and silentlywe tndranrkugh"], ["quickly anhe bird flew away"], ["fswiftlysilentlywellew"], ["theyfswiftlysilentlywellewy and silentlywe dtiptoede through the dark om"], ["quietheavilyly,"], ["htthey swiftly and silently tiptoed through the dark roomheeyj"], ["they swiftly and silentlywe tiptoed th rough ethe dsdhilllrkwiftlyark room"], ["quicklydehillhrdtiptoed"], ["oroweomrk"], ["dhk"], ["tiptoedthandranrkd"], ["sOlS"], ["dand silentlywfe tndranrk"], ["they swiftly and sittiptoedlentlywe tiptoed th rough tdhde dark room"], ["quickly and quietldtiptoedey, the bird flroomheeyew away"], ["they swiftly and silroomentlywe tiptoede through the dark room"], ["thesdquroom flew awayitlyy"], ["thesdhtlyy"], ["they swiftly and silroomentlywe tiptoede through the dark rooom"], ["awfafle"], ["tiptoed"], ["dathey swiftly and silentlywesilesntly tndranrk"], ["BesPtviFH"], ["awaquiyckalyy"], ["anhe"], ["fswiftlysilentlywe"], ["tsdhilllrkwiftlytiptoed"], ["thr"], ["theyfswiftlysilentlywellewy and silentlywe dtiptoede throrugh the dark om"], ["fleww"], [""], ["they swiftly and silentlyy tiptoed through the dark room"], ["arran"], ["othey swiftly and silroomentlywe tiptoede through the dark roomughh"], ["t"], ["BeFsPtviFFH"]], "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n"}
{"task_id": "Mbpp/441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n", "entry_point": "surfacearea_cube", "canonical_solution": "\ndef surfacearea_cube(l):\n  return 6 * l * l\n", "base_input": [[5], [3], [10]], "atol": 0, "plus_input": [[-3], [-2.5], [4.87], [0.25], [-1.5], [1000000000], [1e-07], [-3.14159], [0], [2.5], [-10.75], [1000.99], [0.5], [-0.5], [0.1], [-0.1], [7.5], [-7.5], [-100], [1000000000.0], [1e-09], [-0.7833397694106897], [0.8494504982876602], [0.15352390338434846], [-1.5921304345343799], [649.4568442171686], [-98], [1213822087.9025333], [-3.3073827123371813], [-0.7173157124933989], [0.060867338964320276], [0.14202999273585748], [0.07731273407773312], [0.21845268051821995], [-0.7897050637830042], [-2.077650969935703], [-51], [0.48099036515089505], [-3.6650740669567794], [-53], [-13.991843109620316], [-2], [-54], [-4.224549503602699], [-11.5925721122433], [834.4099469283142], [-1.362652227511529], [0.669095102959225], [-1.1124744378873135], [99], [-0.7225210145234627], [2.9408787220495345], [true], [79.42277112345812], [6.424249164056521], [-1.4304272670642526], [-7.783795864228866], [-55], [-5.895708615626183], [-3.2831281220684794], [-1], [-99], [-1.7101417197726843], [-2.27164824673296], [false], [-0.8123412262207785], [-0.0862816333496792], [-56], [96.86102612940118], [3.150457377596041], [1.3491782276693538], [-6.622554416660341], [-0.8740457687240922], [-1.2506691418209748], [-1.6834766016684863], [-0.88077825995143], [-5.283993759870942], [1.317025041202332e-07], [-3.371613058891193], [-10.694700345005673], [-0.770562557059889], [92.37966491121615], [2.155625055096069], [999999999], [-52], [0.2348918214522808], [-1.8441850039935714], [-0.17181241425157523], [0.528043166028691], [-2.8178101657048966], [-0.1026154716805201], [-27.177579261950612], [-1.3887345698294844], [0.27433384840036557], [-0.8287577161233002], [0.09411992864949742], [3.7280094428014032], [-1.7309883161021529], [650.2971930104544], [-2.4035389795800386], [-0.0906065143363286], [-2.798971522040114], [-0.8051303292507048], [-0.9283454987422104], [-1.685988421113601], [-7.563181339792204], [0.11067389399020672], [7.447501343369524], [-8.562451124993594], [-34], [-1.1119968344584181], [26], [-1.5655892787150538], [2.4582707902800376], [29], [-1.9700898710134198], [-14.996207385575758], [5.945011428956811e-08], [0.6821813827747135], [0.47296433668740345], [-1.9118829776343407]], "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600\n"}
{"task_id": "Mbpp/442", "prompt": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n", "entry_point": "positive_count", "canonical_solution": "\ndef positive_count(nums):\n    return sum(x > 0 for x in nums) / len(nums)\n", "base_input": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17]]], "atol": 0.0001, "plus_input": [[[1, 2, 3, 4, 5]], [[-2, -4, -6, -9, -11, -12, -14, -5, -17]], [[-2, 1, -6, -9, -11, -12, -14, -5, -17]], [[1, 2, 3, 4, 4]], [[-2, -4, -6, -9, -12, -5, -17]], [[-2, 1, -6, -9, -11, 3, -12, -5, -17]], [[-2, 1, -6, -9, -11, -12, -14, -5, -17, -2]], [[-2, -11, 1, -6, -11, -12, -14, -5, -17, -2]], [[-2, -11, 1, -6, -11, -12, -14, -4, -17, -2]], [[1, 3, 4, 4]], [[1, 2, 3, 4, -5, 5]], [[1, 3, 4, 2, 4]], [[-2, 1, -6, -9, -12, -14, -5, -17]], [[1, 2, 3, 4, -17, -17]], [[5, -4, -6, -9, -11, -12, -14, -5, -17]], [[1, 3, 2, 4]], [[1, 2, 4, 4]], [[1, 2, 5, 4, -5, 5, -5]], [[1, 2, 4, 2, -5, 5]], [[-2, 1, -14, -9, -11, -12, -14, -5, -17]], [[-2, 1, -14, -9, -11, -11, -14, -5, -17, -9]], [[0, 2, 4, 2, -5, 5]], [[-4, -6, -9, -11, -12, -14, -5, -17]], [[1, 4, 3, 4, -17, -17]], [[-2, 1, 2, 3, 4, 5, -17, -17]], [[1, 3, 0, 4]], [[-2, 1, 2, 3, 5, -6, 4, 5, -17]], [[1, 3, 4, 2, 4, 2]], [[-2, -4, -6, -9, -11, -12, -14, -5, -17, -2, -17]], [[-2, -4, -6, -9, -11, -12, -14, -6, -17]], [[-2, -11, -12, 1, -6, -11, -12, -14, -5, -17, -2]], [[2, 3, 4, -17, 1, -17]], [[-2, -11, 1, -6, -11, -12, -14, -4, -17, -2, -11]], [[2, 3, 2, 4, 2]], [[2, 3, -12, 2, 4, 2, 2]], [[-2, 4, -14, -9, -11, -11, -14, -5, -17, -9, -2]], [[1, 2, 3, 4, 5, 5]], [[-2, -4, -6, -9, -18, -11, -12, -14, -5, -17, -2, -17]], [[-2, 1, -6, -9, -11, -12, -12, -5, -17]], [[1, 2, 5, 4, -5, 5, -5, -5]], [[1, -6, -9, -11, 2, -12, -5, -17]], [[-2, -4, -6, -6, -9, -12, -5, -17]], [[-2, -4, -6, -6, -9, -12, -5, -17, -4]], [[2, 3, 4, -17, 1, -17, 1]], [[-2, 1, 2, 2, 3, 5, -6, 4, 5, -17]], [[-2, 0, -11, 1, -6, -11, -12, -14, -4, -17, -2]], [[-2, 1, 2, 2, 3, 5, -6, 4, 5, -17, -17]], [[-2, -4, -6, -9, -12, -5, 4]], [[-2, -11, -12, 1, -6, -11, -12, -14, -5, -17, -2, -17]], [[-2, -4, -6, -9, -11, -12, -14, -6, -17, -14]], [[-2, 4, -12, -9, -11, -11, -14, -5, -17, -9, -2]], [[-2, 1, 3, -9, -11, -14, -5, -17]], [[2, 3, -12, 2, 4, 2, 1]], [[-4, -6, -9, -11, -13, -14, -5, -6]], [[-2, -6, -9, -10, -12, -3, -14, -5, -17]], [[-2, -4, -9, -18, -11, -12, -14, -6, -5, 0, -2, -17]], [[-2, 1, -6, -9, -11, -12, -14, -5, -17, -2, -12]], [[4, 2, 5, 4, -5, 5, -5]], [[-2, 2, -14, -9, -11, -12, -14, -5, -17]], [[-2, -4, -6, -9, -11, -12, -14, -5, -5, -17]], [[-2, -4, -6, -9, -11, -12, 2, 3, -17, -14]], [[-3, -4, -6, -9, -11, -14, -5, -5, -17, -5]], [[-4, -6, -9, -11, -13, -5, -14, -5, -6]], [[-2, 1, -14, -9, -11, -12, -14, -5, -17, -5]], [[1, 2, 3, 5, 5, 5]], [[-2, -1, -13, -4, -6, -2, -6, -9, -12, -5, -17, -2]], [[4, 5, 2, 5, 4, -5, 5, -5, 2]], [[1, 3, 3, 5, 5]], [[1, 2, 3, 1, 4, -5, 5]], [[-2, -11, 1, -6, -18, -11, -12, -14, -4, -17, -2, -11]], [[-2, -4, -6, -9, -12, -5, -9]], [[-2, -4, -6, -9, -11, -12, 2, -13, 3, -17, -14]], [[-2, 1, -9, -11, -12, -14, -5, -17]], [[-2, -2, 1, -14, -9, -11, -11, -14, -5, -17, -9]], [[-2, 0, -11, 1, -3, -6, -11, -12, -14, -4, -17, -2, -11]], [[-5, 0, 2, 4, 2, -5, 5]], [[-2, 1, -6, -9, -11, -12, -14, -5, -17, -2, -11]], [[-2, 1, 2, 3, 4, 5, -17, -17, 1]], [[-2, 1, 2, 2, 2, 5, -6, 4, -12, -17]], [[-2, -13, -4, -6, -6, -9, -11, -12, -14, -6, -17, -14]], [[-4, -6, -6, -9, -12, -5, -17, -4]], [[-2, -4, -9, -11, -12, -14, -5, -17, -2, -17]], [[1, 2, 3, 4, -5, 5, 4]], [[-2, 4, -12, -9, -11, -11, -14, -5, -17, -9, -3]], [[1, 3, 2, 4, 4]], [[1, 2, 2, 3, -6, 4, 5, -17]], [[1, 2, 4, 4, 5, 5, 2]], [[1, -10, 4, 2, 4]], [[-2, 2, -16, -14, -9, -12, -14, -13, -5, -17]], [[-2, -11, 1, -6, -11, -13, -14, -5, -17, -2]], [[-2, 1, 2, 3, 5, -6, 4, 5]], [[1, -4, 3, 0, 4, 1]], [[-2, 1, -14, -9, -11, -12, -14, -4, -17]], [[1, 2, 4, 4, 1]], [[4, 1, -6, -9, -11, -12, -14, -5, -17, -2, -12]], [[-2, -11, 1, -6, -18, -11, -12, -14, -4, -17, -2, -11, -14, -14]], [[-13, -2, 0, -11, 1, -3, -6, -11, -12, -14, -4, -17, -2, -11, 1]], [[-4, 2, 3, 4, -17, 1, -17]], [[1, 3, 4, 2, 4, 3]], [[-13, 2, 4, 4, 1]], [[-2, 1, -6, -9, -11, -12, -12, -4, -5, -17]], [[-9, -2, 1, -14, -9, -11, -12, -14, -5, -17, -5]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, int) for ele in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.538, rel_tol=0.001)\nassert math.isclose(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.692, rel_tol=0.001)\nassert math.isclose(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.555, rel_tol=0.001)\n"}
{"task_id": "Mbpp/445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n", "entry_point": "index_multiplication", "canonical_solution": "\ndef index_multiplication(test_tup1, test_tup2):\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n", "base_input": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]], [[[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]], [[[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]]], "atol": 0, "plus_input": [[[[1, 1], [2, 2], [3, 3], [4, 4]], [[5, 5], [6, 6], [7, 7], [8, 8]]], [[], []], [[[1.5, 2.25], [3.75, 4.5], [6.25, 7.5]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75]]], [[[true, false], [false, true], [true, true]], [[false, false], [true, true], [false, true]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1.5, -2.25], [-3.75, 4.5]], [[-0.5, 0.75], [1.5, -1.25]]], [[[true, false], [false, true]], [[false, true], [true, false]]], [[[1.5, -2.25], [-3.75, 4.5]], [[1.5, -1.25]]], [[[2.75, -2.25], [-3.75, 4.5]], [[1.5, -1.25]]], [[[1.5, -1.25], [1.5, -1.25]], [[1.5, -1.25]]], [[], [[-3.75, 4.5]]], [[[-3.75, 4.5]], [[-3.75, 4.5]]], [[[false, true]], [[false, true], [true, false]]], [[[true, false], [false, true], [false, true]], [[false, true], [true, false]]], [[[-3.75, 4.5]], []], [[[1.5, -2.25]], [[1.5, -2.25], [-3.75, 4.5]]], [[[1.5, -1.25]], [[2.75, -2.25], [-3.75, 4.5]]], [[[1.5, -2.25], [-3.75, 4.5], [1.5, -2.25], [-3.75, 4.5]], [[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75]]], [[[true, false], [false, true]], [[false, true], [true, false], [true, false]]], [[], [[1.5, -2.25], [-3.75, 4.5]]], [[[false, true], [false, true]], [[false, true], [true, false]]], [[[true, false], [true, true]], [[false, true], [true, false], [true, false]]], [[[true, true], [false, true]], [[true, true], [false, true]]], [[[false, true]], [[false, true]]], [[[1.5, -1.25]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5]]], [[[-3.75, 4.5], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5]]], [[[true, false], [false, true], [false, true]], [[false, true], [true, false], [true, false]]], [[[1, 1], [2, 2], [3, 3], [4, 4], [1, 1]], [[5, 5], [6, 6], [7, 7], [8, 8]]], [[[true, false], [false, true]], [[false, true], [true, false], [false, true]]], [[[1.5, 2.25], [6.25, 7.5]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75]]], [[[1.5, -1.25]], [[1.5, -1.25]]], [[[false, true], [false, true], [false, true]], [[false, true], [false, true]]], [[[1.5, -2.25]], [[1.5, -2.25], [-3.75, 4.901681689356799], [-3.75, 4.5]]], [[[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75]], [[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75]]], [[[2.75, -0.5], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]]], [[[false, true]], []], [[[1.5, -1.25], [1.5, -1.25]], [[1.5, -1.25], [1.5, -1.25]]], [[[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]], [[1.5, -1.25]]], [[[1.5, -1.25]], [[1.5, -1.25], [1.5, -1.25]]], [[[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [2.75, -2.25]], [[2.75, -2.25], [-3.75, 4.5]]], [[[-2.25, 0.75], [1.5, -1.25], [-0.5, 0.75]], [[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75], [-0.5, 0.75]]], [[[1.5, -2.25], [-3.75, 4.5], [1.5, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]], [[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75]]], [[[false, true], [true, false]], [[false, true]]], [[[2.75, -0.5], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]]], [[[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]]], [[[-3.75, 4.5], [-3.75, 4.5]], [[-3.75, 4.5], [-3.75, 4.5]]], [[[1.5, -1.25], [-0.5, 0.75]], [[1.5, -1.25], [-0.5, 0.75]]], [[[0.5, 0.75], [1.5, 1.25], [2.5, 2.75]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75]]], [[[1.884494549830971, -2.25], [2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]], [[1.884494549830971, -2.25], [2.75, -2.25], [-3.75, 4.5], [2.75, -2.25], [2.75, -2.25]]], [[[1.5, -2.25]], [[1.5, -2.25]]], [[[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [6, 6]]], [[], [[1.5, -2.25]]], [[[5, 5], [6, 6], [7, 7], [8, 8], [8, 8]], [[5, 5], [6, 6], [7, 7], [8, 8], [8, 8]]], [[[1.5, 2.25], [6.25, 6.646053579170405]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75]]], [[[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75], [-0.5, 0.75]], [[-0.5, 0.75], [1.5, -1.25], [7.5, 0.75], [-0.5, 0.75]]], [[[2.75, -2.25], [-3.75, 4.5], [-3.75, 6.129668563099175], [2.75, -2.25]], [[2.75, -2.25], [-3.75, 4.5]]], [[[2.75, -2.25], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5]]], [[[true, false], [false, true], [true, true]], [[false, false], [true, true], [false, true], [false, false]]], [[[-3.75, 4.5]], [[-3.75, 0.5], [-3.75, 4.5]]], [[[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75]], [[-0.5, 0.75], [-0.5, 0.75], [0.9219506936109663, -1.25]]], [[[1.5, -2.25]], [[1.5, -2.25], [-3.75, 4.901681689356799]]], [[[-0.5, 0.75], [1.5, -1.25]], [[-0.5, 0.75], [1.5, -1.25]]], [[[5, 5], [6, 6], [7, 7], [8, 8], [7, 7], [8, 8]], [[5, 5], [6, 6], [7, 7], [8, 8], [7, 7], [8, 8]]], [[[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25], [2.75, -2.25]], [[1.5, -1.25]]], [[[1.5, 2.25], [6.25, 7.5], [6.25, 7.5]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75], [0.5, 0.75]]], [[[false, true], [true, false]], [[false, true], [true, false]]], [[], [[1.5, -1.25], [1.5, -1.25]]], [[[true, false], [false, true], [true, true]], [[true, false], [false, true], [true, true]]], [[[1.5, -1.25], [-0.5, 0.75]], [[1.5, -1.25], [-0.5, 0.75], [-0.5, 0.75]]], [[[1.5, -1.25], [1.5, -1.25]], [[2.75, -2.25], [-3.75, 4.5]]], [[[1.5, -1.25], [-0.5, 0.75]], [[1.5, -1.25], [-0.5, 0.75], [1.5, -1.25]]], [[[1.5, 2.25], [6.25, 6.646053579170405], [6.25, 6.646053579170405]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75]]], [[[1.884494549830971, -2.25], [2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]], [[1.884494549830971, -2.25], [2.75, -2.25], [-3.75, 4.5], [2.75, -2.25], [2.75, 6.25], [2.75, -2.25], [2.75, -2.25]]], [[[1.5, -1.25]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]]], [[[6.646053579170405, 1.25], [0.5, 0.75], [1.5, 1.25], [2.5, 2.75], [1.5, 1.25]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75], [1.5, 1.25]]], [[[-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5]]], [[[3, 4], [6, 6]], [[1, 2], [3, 4], [6, 6]]], [[[-2.25, 0.75], [1.5, -1.25], [-0.5, 0.75]], [[-2.25, 0.75], [1.5, -1.25], [-0.5, 0.75]]], [[[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [2.75, -2.25], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5]]], [[[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75], [-0.5, 0.75], [1.5, -1.25]], [[-0.5, 0.75], [1.5, -1.25], [7.5, 0.75], [-0.5, 0.75]]], [[[2.75, -2.25], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5]]], [[[1.5, 2.25], [6.25, 6.646053579170405], [6.25, 6.646053579170405]], [[1.5, 2.25], [6.25, 6.646053579170405], [6.25, 6.646053579170405]]], [[[1.5, -2.25], [-3.75, 4.5]], [[1.5, -2.25], [-3.75, 4.5]]], [[[-0.5, 0.75], [-0.5, 0.75]], [[1.5, -1.25], [-0.5, 0.75], [-0.5, 0.75]]], [[[0.5, 0.75], [1.5, 1.25], [2.5, 2.75], [0.5, 0.75]], [[0.5, 0.75], [1.5, 1.25], [2.5, 2.75], [0.5, 0.75], [2.5, 2.75]]], [[[1.5, -2.25], [-3.75, 4.5], [1.5, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]], [[1.5, -2.25], [-3.75, 4.5], [1.5, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]]], [[[5, 5], [6, 6], [7, 7], [8, 8], [7, 7], [8, 8]], [[5, 5], [7, 7], [8, 8], [7, 7], [8, 8]]], [[[1.5, -1.25]], [[-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]]], [[[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5]]], [[[-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5]]], [[[false, true], [true, false], [false, true]], [[false, true]]], [[[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75], [1.5, -1.25]], [[-0.5, 0.75], [1.5, -1.25], [-0.5, 0.75], [-0.5, 0.75], [1.5, -1.25]]], [[[false, true], [false, true]], [[false, true], [true, false], [false, true]]], [[[false, true], [true, false], [false, true]], [[false, true], [true, false], [false, true]]], [[[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]], [[3.735487464883578, -2.25], [-3.75, 4.5], [2.75, -2.25], [-3.75, 4.5]]], [[[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5], [-3.75, 4.5], [2.75, -2.25]], [[1.5, -1.25]]], [[[2.75, -2.25], [-3.75, 4.5]], [[1.0743535791751668, -1.25]]], [[[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]], [[2.75, -2.25], [-3.75, 4.5]]], [[[-3.75, 4.5], [2.75, -2.25], [-3.75, 4.5]], [[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]]], [[[1, 2], [1, 10], [3, 4], [5, 6]], [[1, 2], [1, 10], [3, 4], [5, 6]]], [[[1.5, 2.25], [6.25, 7.5]], [[0.5, 0.75], [2.5, 3.582638962127178], [1.5, 1.25], [2.5, 2.75], [1.5, 1.25]]], [[[-3.75, 4.5], [-3.75, 4.5]], [[-3.75, 4.5], [0.9219506936109663, 4.5], [-3.75, 4.5]]], [[[2.75, -2.25], [-3.75, 4.5], [-3.75, 4.5]], [[2.75, -2.25]]], [[[1.5, 2.25], [3.75, 0.5], [6.25, 7.5], [6.25, 7.5]], [[1.5, 2.25], [3.75, 4.5], [6.25, 7.5], [6.25, 7.5]]], [[[-3.75, 4.5], [-3.75, 4.5]], [[-3.75, 4.5]]], [[[false, false], [false, true]], [[false, true]]], [[[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]], [[2.75, -2.25], [-3.75, 4.5], [2.75, -2.25]]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n"}
{"task_id": "Mbpp/446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "entry_point": "count_Occurrence", "canonical_solution": "\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    return sum(tup.count(ele) for ele in lst)\n", "base_input": [[["a", "a", "c", "b", "d"], ["a", "b"]], [[1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]], [[1, 2, 3, 4, 5, 6], [1, 2]]], "atol": 0, "plus_input": [[[], []], [[1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [[], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[4, -46, 64, 3, 3, 1, 67], [1, 2, 3, 4, 5]], [[1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [["OX", -48.873894802445946], []], [["OOXX", -48.873894802445946], []], [["OOXX", -48.873894802445946], [false, true, true, true, false, false, true, false, true, true]], [[4, -46, 64, 3, 9, 3, 1, 67], [1, 2, 3, 4, 5]], [["OOXX", -48.873894802445946], [8, 87, 1, 3, 34, 79, -32, 28, false]], [[], [1, 2, false, 3, 4, 5]], [[1, 1, 2, 2, 2, 0, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [[1, 1, 2, 2, 2, 0, 3, 3, 3], [1, 2, 2, 3, 3]], [["OOXX", -48.873894802445946, "OOXX"], []], [["OOXX", -48.873894802445946], [false, true, true, true, false, false, true, false, true, true, true]], [[1, 1, 2, 2, 2, 3, 3, 3], [1, 2, 2, 3, 3]], [[5, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [[-48.873894802445946, 89.4498825238312, -48.873894802445946, -48.873894802445946, -63.30134785965016, -83.39947209096098, -48.873894802445946, -48.873894802445946, -28.62571567417322, -71.79928701608094], [72, -86, 79]], [[3, 1, 1, 2, 2, 2, 0, 3, 3, 3], [1, 2, 2, 3, 3]], [["OOXX", -48.873894802445946, -48.873894802445946], [8, 87, 1, 3, 34, 79, -32, 28, false]], [[1, 1, 2, 2, 2, 0, 3, 3, 3], [1, 2, 2, 3, 3, 2]], [[1, 1, 2, 2, 2, 0, 3, 3, 3], [7, 1, 2, 2, 3, 3]], [[4, -46, 64, 3, 9, 3, 1, 67, -46], [1, 2, 3, 4, 5]], [["OOXX", -48.873894802445946], [8, 87, 1, 3, 34, 79, -32, 29, 2, false]], [["OOXX", -48.873894802445946, "OX", -48.873894802445946], [8, 87, 1, 4, 3, 34, 79, -32, 28, false, 0, -32]], [[3, 2, 1, 2, 2, 2, 0, 3, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [["OOXX", -28.62571567417322], [false, true, true, true, false, false, true, false, true, true]], [["OOXX", -48.873894802445946, "OX", -48.873894802445946], [8, 87, 1, 4, 3, 34, 79, -32, 28, false, 0, 79, -32, 8]], [["OOXX", -48.873894802445946], [true, true, true, true, false, true, true, false]], [[1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 3, 3]], [[1, 1, 2, 2, 7, 2, 0, 3, 3, 3], [1, 2, 2, 3, 3]], [["OOXX", -48.873894802445946], [false, true, true, true, false, false, true, true, false, true, true, true]], [[4, -46, 3, 9, 3, 1, 67], [1, 2, 3, 4, 5, 5]], [["OOXX"], ["OX", "mYim", "", "YdH", "Qnm"]], [[4, -46, 64, 3, 9, 3, 1, 67, 3], [1, 2, 3, 4, 5]], [[1, 1, 2, 2, 2, 0, 3, 3, 3], [1, 2, 2, 3, 3, 2, 3]], [["OOXX", -83.39947209096098, -48.873894802445946], [false, true, true, true, false, false, true, true, false, true, true, true]], [[1, 1, 2, 2, 2, 0, 3, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [[1, 1, 2, 2, 2, 3, 3, 3], [2, 3, 3]], [[1, 2, 3, 4, 5, 6], [1, 3, 3, 4, 5, 6, 7, 8, 9]], [[3, 1, 1, 2, 2, 0, 3, 3, 3], [1, 2, 2, 5, 3, 3]], [["OOXX", "OOmYimXX", -48.873894802445946, "OOXX"], []], [[4, -46, 64, 3, 9, 3, 1, 67], [1, 2, 3, 9, 4, 5]], [["OOXQnm", -122.20173217485707, -48.873894802445946], [false, true, true, false, false, true, true, false, true, true, true]], [[4, -46, 64, 3, 9, 3, 1, 67, -46, 64], [1, 2, 3, 4, 5]], [[4, -46, 64, 9, 3, 1, 67], [1, 2, 3, 4, 5]], [[2, 3, 4, 5, 6], [1, 3, 3, 4, 5, 6, 7, 8, 9]], [["OOXX", -48.873894802445946], [false, true, true, true, false, false, true, false, true, false, true]], [["OOXX", -48.873894802445946, "OOXX"], ["OOXQnm", "IUtxz", "sEegPEBDio", "OOXQnm", "IUtxz"]], [[1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 3, 3, 2]], [["OOOXX", -48.873894802445946], []], [["OOXX", -48.873894802445946], [false, true, true, true, false, false, true, true, false, true, true, true, true]], [["", -48.873894802445946], [false, true, true, true, false, false, true, true, false, true, true, true]], [["sEegPEBDio", -122.20173217485707, -122.20173217485707], [false, -86, 70, 4, 34, -73, -35, 2, -46]], [[1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 3, 3, 2]], [["OOXX", -48.873894802445946, -48.76647231712022, "OOXX"], []], [["OOXX", -48.873894802445946, -48.873894802445946], [8, 87, 1, 34, 79, -32, 28, false]], [[4, -46, 64, 3, 9, 3, 1, 67, 3, 1], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5, 6], [87, 1, 3, 3, 4, 5, 6, 7, 8, 9]], [[1, 1, 2, 2, 2, 3, 3, 3, 1], [1, 1, 2, 2, 3, 3]], [[4, -46, 64, 4, 9, 3, 1, 67, -46], [1, 2, 3, 4, 5]], [["OOOXXX", "OOXX", -48.873894802445946, "OX"], [8, 87, 1, 4, 3, 34, 79, -32, 28, false, 0, -32, 0]], [[4, -46, 64, 3, 9, 3, 1, 67], [1, 2, 3, 9, 4, 5, 9]], [["OOXX", -28.62571567417322], [false, true, true, true, false, false, true, true, false, true, true, true, true]], [[1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 3, 3, 2, 1]], [[1, 2, 3, 4, 5, 6], [87, 1, 3, 3, 4, 5, 8, 6, 7, 8, 9]], [[4, -46, 64, 3, 9, 3, 1, 67, 67], [1, 2, 3, 9, 4, 5, 9, 5]], [[1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 2, 2, 3, 3]], [[-48.873894802445946, "OOXX", -48.873894802445946, -48.873894802445946], [8, 87, 1, 34, 79, -32, 28, false]], [["OOXX", -48.873894802445946, "OOXX"], ["OOXQnm", "IUtxz", "sEegPsEBDio", "sEegPEBDio", "OOXQnm", "IUtxz", "sEegPEBDio"]], [["OOXX", -48.873894802445946], [true, true, true, true, false, true, true]], [[1, 1, 2, 2, 0, 3, 3, 3], [1, 2, 3, 2, 5, 3, 3]], [["OOXX", -48.873894802445946], [false, true, true, false, true, false, true, true]], [["OOXX", -48.873894802445946, -48.873894802445946], [false, true, true, true, false, false, true, false, true, true, true, false, true]], [["OOXX", -48.873894802445946], [false, true, true, false, false, true, false, true, false, true]], [[4, -46, 3, 9, 3, 1, 67, 9], [1, 2, 3, 4, 5, 5]], [["", -48.873894802445946], [false, true, true, true, false, false, true, true, false, true, true, true, true]], [["OOOXXX", "OOXX", -48.873894802445946, "OX"], [8, 5, 87, 1, 4, 3, 34, 79, -32, 28, false, 0, -32, 0, 1]], [[], [34.05391711465737, -2.906905516918812, 89.4498825238312, 65.92462636516228, 39.94639777324457]], [[-48.873894802445946, "OOXX", "mYim", -48.873894802445946, -48.873894802445946], [8, 87, 1, 34, 79, -32, 28, false]], [[1, 1, 2, 2, 2, 0, 3, 3, 3], [1, 2, 2, 3, 3, 2, 3, 3]], [["OOXX", -48.873894802445946, "YdH", "OOXX"], ["OOXQnm", "IUtxz", "sEegPEBDio", "OOXQnm", "IUtxz"]], [["OX", -48.873894802445946, "OX"], [72.37354833611045, "TewyJp", false, "sEegPsEBDio", null]], [["OOXX"], ["OX", "mYim", "YdHQnm", "", "YdH", "Qnm"]], [[4, 3, 9, 3, 1, 67, 9], [1, 2, 3, 4, 5, 5]], [[4, -46, 64, 9, 3, 1, 67, 64], [1, 2, 3, 4, 5]], [["OOXX", "sEegPsEBDio", -48.873894802445946, -48.873894802445946], [8, 87, 1, 34, 79, 28, false]], [[4, -46, 64, 3, 9, 3, 1, 67, -46, 64, 1], [1, 4, 3, 4, 5]], [[1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3]], [["OOXX", -28.62571567417322], [false, true, true, true, false, false, true, true, false, true, true, true, true, false]], [["OOXX", -48.873894802445946], [8, 87, 1, 3, 34, 79, 29, 2, false]], [["OOXX", -28.62571567417322, -28.62571567417322], [false, true, true, true, false, false, true, true, false, true, true, true, true, false]], [[1, 1, 0, 2, 2, 2, 0, 3, 3, 3], [7, 2, 2, 3, 3, 3]], [["sEegPEBDio", -122.20173217485707, -122.20173217485707, -122.20173217485707], [false, -86, 70, 4, 34, -73, -35, 2, -46]], [[3, 1, 1, 2, 2, 2, 0, 3, 3, 3, 3], [1, 2, 2, 3, 3]], [["OOXX", -48.873894802445946, "OOXX"], ["OOXQnm", "IUtxz", "sEegPsEBDio", "sEegPEBDio", "OOXQnm", "IOOXXxz", "sEegPEBDio"]], [[-122.20173217485707, -48.873894802445946], [false, true, true, false, false, true, true, false, true, true, true]], [["OOX", "OOmYimXX", -48.873894802445946, "OOXX"], []], [["OOXX", -48.873894802445946, "OOXX"], [2, -10, 87]], [[3, 1, 1, 2, 2, 0, 3, 3, 3], [1, 2, 3, 2, 5, 3, 3, 2]], [[1, 2, 3, 4, 5, 6], [87, 1, 3, 3, 4, 5, 8, 8, 6, 7, 8, 9]], [["OOXX", -122.20173217485707, -48.873894802445946], [true, true, true, true, false, true, true, false]]], "contract": "\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n"}
{"task_id": "Mbpp/447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "entry_point": "cube_nums", "canonical_solution": "\ndef cube_nums(nums):\n    return [n**3 for n in nums]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 30]], [[12, 15]]], "atol": 0, "plus_input": [[[]], [[-1, 0, 1, -2, 3, -4]], [[1, 2.5, 3, -4.7, 5, 6, 7, -8.9]], [[-5, -10, -15]], [[1000000]], [[1, 2.5, 3, -4.7, 5, 6, 7, -8.72172602966587]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, -8.9, 24.753109546228686]], [[0, -5, -10, -15]], [[0, -5, -15]], [[0, 0, -5, -15]], [[1, 2.5, -4.7, 5, 7, 7, -8.9]], [[1000000, 1000000]], [[0, 0, -5, -15, 0]], [[1, 2.5, -4.7, 5, 7, 7, -8.9, -8.9]], [[0, 0, -5, -15, -15]], [[0, 0, -4, -15]], [[-6, 0, 0, -5, -15, 0]], [[1000000, 1000000, 1000000, 1000000]], [[1, 2.5, -4.7, 5, 7, 7, 2.6465487078850902, -8.9]], [[1, -5, 2.5, 3, -4.7, 5, 6, -4.584526506846036, 7, -8.72172602966587]], [[0, -4, -15]], [[0, -4, 0, -5, -15, -15]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, -8.9, 24.753109546228686, 83.25955683011043]], [[24.82021742307545, -8.9, 83.70113458577298, 2.5, -2.7576561022677204, -8.201037222609227, 24.753109546228686, -8.9, 24.753109546228686]], [[-6, 2.5, 3, -2.7576561022677204, 5, 6, 7, -8.72172602966587]], [[0, -4, 0, -10, -5, -15, -15]], [[1, 2.5, -4.7, 5, 7, 7, 2.6465487078850902, -8.9, -4.7]], [[7, -5, -10, -15, -10]], [[-1, -5, 1, 3, -4]], [[1, -4, 0, -10, -5, -15]], [[24.82021742307545, -8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, 24.753109546228686, -8.9, 24.753109546228686]], [[1, 2.5, -4.7, 7, 5, 7, 6, 2.6465487078850902, -8.9, -4.7]], [[1, 2.2169763918581937, -4.7, 7, 5, 7, 6, 2.836490197182278, -8.9, 6]], [[-5]], [[1, 2.5, 2.6465487078850902, 7, 5, 6, 2.6465487078850902, -8.9, -4.7]], [[-6, 0, 0, -5, -15, 0, -5]], [[0, 0, -4, -4, 0]], [[-5, -10]], [[-1, -5, -15, -15]], [[1, -4, 0, -10, -4, -15]], [[-5, -5]], [[1, 2.5, -4.7, 5, 7, 7, 2.6465487078850902, -8.9, 5]], [[-1, 0, -2, 3, -5]], [[1, -4, -9, 0, -10, -15]], [[1000000, 1000000, 1000000, 1000000, 1000000]], [[0, 0, -5, -15, -1]], [[24.82021742307545, -8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, 24.753109546228686, -8.9, -4.584526506846036, 24.753109546228686]], [[1, -5, 2.5, -2, -4.7, 5, 6, -4.584526506846036, 7, -8.72172602966587, 2.5]], [[0, -5, -15, -1]], [[-15, 1.8501344536549909, 3, -2.7576561022677204, 5, 6, 7, -8.72172602966587, 3]], [[-6, 0, -4]], [[0, -15, -1, -1, -1]], [[-6, 1000000, 0, 0, -5, -15, 0, -5]], [[-8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, 24.753109546228686, -8.9, -4.584526506846036, 24.753109546228686]], [[24.82021742307545, -8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, 14.182649846232774, -8.9]], [[1, 2.5, -4.7, 5, 7, 7, 2.6465487078850902, -8.9, 5, -8.9]], [[-1, -5, -15, -2, -15, -5]], [[1, -5, 2.5, 3, -4.7, -2, -4, 6, -4.584526506846036, 7, -8.72172602966587]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, -8.9, 24.753109546228686, 83.25955683011043, -8.9]], [[3, -5, -10]], [[7, 0, 0, -5, -15]], [[0, 0, -5, -1, -15, 0]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, 24.753109546228686, 83.25955683011043]], [[1, 2.5, -4.7, 5, 8, 7, 2.6465487078850902, -8.9, 5, -8.9]], [[7, 6, -5, -10, -15, -10]], [[1, -5, 2.5, -2, -4.7, 6, 6, -4.584526506846036, 7, 2.5, -4.584526506846036, -4.7]], [[1, 2.5, -4.7, 4, 7, 7, -8.9]], [[1, -5, 2.5, -2, 1.8501344536549909, -4, 6, 6, -4.584526506846036, 7, 2.5, -4.584526506846036, -4.7]], [[24.82021742307545, 47.032765210131785, -8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, 24.753109546228686, -8.9, -4.584526506846036, 24.753109546228686, -4.584526506846036]], [[1, 2.5, -4.7, 5, 7, 7, 2.6465487078850902, -8.9, 4]], [[0, 0, -5, -15, 0, 0]], [[0, -1, -5, -15]], [[1, 2.5, -4.7, 5, 5, 7, 7, 2.6465487078850902, -8.9, 4]], [[-1, -5, 1, -15, 3, -4]], [[-6, 1000000, 0, 0, -15, 0, -5]], [[0, 0, -5, -15, 0, 0, 0, 0]], [[-8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, 24.753109546228686, -8.9, -4.409923735811289, 24.753109546228686, 83.70113458577298]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, -8.9, 58.017978656752504, 24.753109546228686, 83.25955683011043, -8.9]], [[0, -15, -5, -15, 0, 0, 0, 0]], [[-8.9, 47.032765210131785, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, -8.9, 24.753109546228686, 83.25955683011043, 24.753109546228686]], [[1, 2.5, -4.7, 5, 7, 7, 2.6465487078850902, -8.9, -4.7, 2.6465487078850902]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -2.7576561022677204, 24.753109546228686, -8.9, 24.753109546228686, -8.9, -8.9]], [[1, -5, 2.5, -2, -4.7, 5, 6, -4.584526506846036, 7, -8.72172602966587, 2.5, 2.5]], [[1000000, 1000000, 1000000]], [[-6, 1000000, 0, 0, 0, -5, 1000000]], [[-1, -5, 1, -15, 3, -4, -5]], [[0, -16, 0, -5, -15, -16]], [[-8.9, 60.14886561626176, 2.5, 83.25955683011043, -3.4333260030736827, 24.753109546228686, -8.9, 58.017978656752504, 24.753109546228686, 83.25955683011043, -8.9]], [[1, 2.5, -4.7, 7, 7, 2.6465487078850902, -8.9]], [[-4, 0, -10, -4, -15]], [[24.82021742307545, 24.753109546228686, 83.70113458577298, 2.5, -1.6259727483177557, -8.72172602966587, -8.201037222609227, 14.182649846232774, -8.9]], [[7, -5, 1000000, -10, -15, -10]], [[-40, -15]], [[0, 0, -5, -15, 0, -5, 0, 0]], [[0, 0, -5, -15, 0, -4, 0]], [[-6, 0, 0, -15, 0, -5]], [[-1, -5, 1, -15, 4, 1, -4]], [[24.82021742307545, -8.9, 83.70113458577298, 2.5, -1.8071120625507624, -8.201037222609227, -8.9, 24.753109546228686]], [[24.82021742307545, -8.9, 83.70113458577298, 2.5, -8.201037222609227, -8.9, 24.753109546228686]], [[1, 0, -5, -15, -1]], [[0, -15, -1, -1]], [[-8.72115684988007, 60.14886561626176, 2.5, 83.45789457940089, -2.7576561022677204, 24.753109546228686, -8.9, 24.753109546228686]], [[-1, -5, -15, 3, -4, -5]], [[7, 0, -5, -15, 0]], [[1, -4, -8, 0, -10, 1]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])\n"}
{"task_id": "Mbpp/448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "entry_point": "cal_sum", "canonical_solution": "\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n", "base_input": [[9], [10], [11]], "atol": 0, "plus_input": [[-5], [-4], [-6], [-7], [true], [false], [-8], [-3], [-9], [-10], [-11], [-12], [75], [74], [73], [72], [76], [71], [-13], [57], [-14], [77], [56], [-2], [-46], [-16], [-15], [70], [-17], [-1], [0], [-47], [-60], [55], [78], [-48], [54], [-61], [-49], [58], [59], [-18], [-19], [53], [-62], [-20], [-21], [-63], [79], [-45], [-87], [-88], [-89], [-22], [-44], [-59], [1], [-86], [-50], [-51], [-90], [2], [95], [-23], [60], [-85], [96], [-91], [-93], [-94], [-84], [-92], [-24], [52], [97], [94], [-52], [93], [92], [-83], [9], [61], [62], [50], [-53], [8], [49], [-25], [69], [-66], [3], [4], [99], [-33], [51], [-32], [63], [100], [-82], [-95], [-54]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n"}
{"task_id": "Mbpp/450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n", "entry_point": "extract_string", "canonical_solution": "\ndef extract_string(str1, l):\n    return [e for e in str1 if len(e) == l] \n", "base_input": [[["Python", "list", "exercises", "practice", "solution"], 8], [["Python", "list", "exercises", "practice", "solution"], 6], [["Python", "list", "exercises", "practice", "solution"], 9]], "atol": 0, "plus_input": [[[], 5], [[], 0], [["abcdef", "xyz", "pqr", "lmnop", "abcde"], 5], [["abc", "defg", "hijkl", "mnopqr"], 3], [[], 3], [["abc", "defg", "mnopqr"], 3], [["abc", "defg", "hijkl"], 0], [[], 6], [["abcdef", "xyz", "pqr", "lmnop", "abcde"], 0], [["abc", "defg", "hijkl"], 3], [["hijkl", "KpROouj", "xyz", "vRyohLy"], 5], [["abc", "defg", "hijkl", "defg"], 6], [["abcddef", "xyz", "pqr", "lmnop", "abcde", "abcde"], 5], [["abc", "defg", "hijkl", "defg"], 3], [["abc", "defg", "mnopqr", "hijkl"], 3], [["abcdef", "xyz", "pqr", "lmnabc", "abcde"], 5], [["abc", "defg", "hijkl", "abc"], 0], [["abcdef", "xyz", "pqr", "lmnop", "abcddef"], 5], [["abc", "hijkl", "defg", "abc"], 3], [["hijkl", "KpROouj", "xyz", "vRyohLy", "hijkl"], 5], [["abc", "defg", "deffg", "mnopqr", "hijkl"], 3], [["abc", "mnopqr", "hijkl", "defg", "abc", "abc", "abc"], 3], [["abcdef", "xyz", "pqr", "lmnop", "abcde"], 3], [["abc", "defg", "mnopqr"], 4], [["abcddef", "xyz", "pqr", "lmnop", "abcde", "abcde"], 4], [["abc", "mnopqr", "hijkl", "defg", "abc", "abc", "abc", "abc"], 4], [["abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], 3], [["abc", "defg"], -1], [["abc", "defg", "hijkl", "hijkl"], 3], [["deffg", "defg"], 3], [["deffg", "defg", "deffg"], 3], [["abc", "defg", "dedfg", "hijkl", "defg"], 6], [["defg", "mnopqr"], 4], [["abc", "defg", "mnopqr", "hijkl"], 4], [["abc", "hijkl", "mnopqr"], 3], [["abc", "defg", "dedfg", "hijkl", "defg", "abc"], 6], [["xyz", "pqr", "lmnop", "abcde", "abcde"], 4], [["abc", "defg", "hijkl", "abc", "defg"], 0], [["hijkl", "xyz", "vRyohLy", "hijkl", "KpROouj"], 5], [["ddeffg", "defg", "deffg"], 3], [["abc", "defg", "hijkl", "mnopqr", "mnopqr", "abc"], 0], [["abc", "KpROouj", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], 3], [["abc", "defg", "mnopqr", "hijkl"], 2], [["abc", "defg", "xyzabc", "hijkl"], 0], [["abc", "pqr", "defg", "mnopqr", "hijkl"], -1], [["abc", "defg", "hijkl", "abc"], 1], [["abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], -1], [[], 2], [["abc", "defg", "hijklmnabcl", "abc"], 1], [["abcdef", "xyz", "pqr", "lmnop", "defg"], 3], [["abc", "KpROouj", "hijkldefg", "hijkl", "abbc", "defg", "abc", "aabcdec", "babc", "abc", "abc"], 3], [["hijkl", "abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], 3], [["abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], -2], [["abc", "hijkl", "abc", "defg"], 0], [["abc", "defg", "hijkl", "defg"], 1], [["abc", "hijkl", "mnopqr"], 4], [["abc", "defg", "dedfg", "hijkl", "dedfddeffgg", "defg", "abc"], 6], [["abc", "defg", "xyzabc", "hijkl"], 4], [["xz", "hijkl", "KpROouj", "xyz", "vRyohLy"], 5], [["abc", "defg", "hijkl", "defg"], -1], [["abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], 1], [["abc", "mnopqr", "hijkl", "defg", "abc", "abc", "aabcdec"], 3], [["abc", "defg", "xyzabc", "hijkl"], 2], [["abc", "defg", "hijkl", "defg"], 0], [["abc", "defg", "mnopqr"], 5], [["abc", "mnopqr", "abbc", "defg", "abc", "babc", "abc", "abc"], 3], [["abc", "mnopqr", "hijkl", "dgefg", "abc", "abc", "abc", "abc"], -1], [["deffg", "defg", "deffg"], 2], [["ddeffg", "abc"], 3], [["abc", "mnopqr", "abbc", "defg", "abc", "babc", "abc", "abc"], 2], [["defgabcddef", "abc", "defg", "mnopqr"], 3], [["hijkl", "mnopqr", "hijkl"], 4], [["abc", "mnopqr", "hijkl", "hijk", "abbc", "defg", "abc", "babc", "abc", "abc"], -2], [["abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], 4], [["hijkl", "xyz", "vRyohLy", "hijkl", "KpROouj", "vRyohLy"], 5], [["abc", "defg", "xyzabc", "hijkl"], 5], [["abc", "mnopqr", "hijkl", "abbc", "defg", "abc", "babc", "abc", "abc"], 5], [["abc", "defg", "dedfg", "hijkl", "defg"], 5], [["hijk", "abc", "defg", "hijkl", "defg"], 3], [["abcddef", "xyz", "pqr", "lmnop", "abcde", "abcde", "lmnop"], 3], [["abc", "defg", "dedfg", "hijkl", "defg", "abc", "dedfg"], 6], [["abc", "defg", "abc", "abc"], -1], [["abc", "hijkl", "hijklmnabcl", "abc", "defg"], 0], [["abc", "mnopqr", "hijkl", "dgefg", "abc", "abc", "abc", "abc", "dgefg"], -1], [["defg", "defddeffgg", "xyzabc", "hijkl"], 5], [[], -1], [["abc", "defg", "deffg", "mnopqr", "hijkl"], 4], [["deffg", "defg", "deffg"], 1], [["abc", "defg", "deffg", "mnopqr", "hijhijklkl"], 3], [["abc", "defg", "deffg", "hijkl", "defg"], 2], [["abc", "defg", "xyzabc", "hijkl"], 6], [["abc", "hijkl", "defg"], 3], [["ababcdefc", "defg", "deffg", "hijkl", "defg", "defg"], 2], [["abc", "defg", "deffg", "mnopqr", "hijkl", "hijkl"], 4], [["xz", "hijkl", "KpROouj", "xyz", "vRyohLy"], 4], [["hijkl", "ababcdefc", "xyz", "vRyohLy"], 5], [["abbc", "abc", "defg", "hijklmnabcl", "abc"], 1], [["abcdef", "xyz", "pqr", "lmnop", "defg"], 2], [["ababcdefc", "defg", "deffg", "hijkl", "defg", "defg"], 0], [["abcddef", "xyz", "pqr", "lmnop", "abcde", "ababcdefc", "lmnop"], 3], [["hijkl", "abc", "mnopqr", "hijkl", "abbc", "defg", "aabbc", "abc", "babc", "abc", "abc"], 3], [["abc", "defg", "dedfg", "hijkl", "defg"], 4], [["abc", "defg", "hijkl", "mnopqr"], 1], [["ddeffg", "abc"], -2], [["abc", "defg", "hijkl", "dedfddeffgg", "abc", "defg"], 0]], "contract": "\n    assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n"}
{"task_id": "Mbpp/451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n", "entry_point": "remove_whitespaces", "canonical_solution": "\nimport re\ndef remove_whitespaces(text1):\n  return text1.replace(' ', '')\n", "base_input": [[" Google    Flutter "], [" Google    Dart "], [" iOS    Swift "]], "atol": 0, "plus_input": [[""], ["1234567890"], ["\n\t"], [" \t\n\n\t"], ["iOS\u180e\u200b\u200c\u200d\u2060Swift"], ["This    is    a    long    string    with    multiple    spaces"], ["Google\u200bDart"], [" \u180e\u200b\u200c\u200d\u2060 "], ["  1234567890  "], [" \u180e\u200b\u200c\u200d\u2060  "], ["  12384567890  "], ["This    is    a    long    string    with    mltiple    spaces"], ["1234567\n\t890"], ["1234567"], [" \u180e\u200b "], ["is"], ["   12384567890  \u180e\u200b "], [" \u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060 "], ["string"], ["   12384567890  \u180e\u200b multiple"], ["multipl"], [" \u180e\u200b\u200c\u200d "], ["spacses"], ["iss"], [" \u180e\u200b1234567\n\t890\u200c\u200d "], ["aspacses"], ["31234567890"], [" \u180e\u200biOS\u180e\u200bO\u200c\u200d\u20601234567890Swift\u200c\u200d\u2060 "], [" \u180e\u200biOS\u180e\u200bO\u200c\u200d\u206012string34567890Swif9t\u200c\u200d\u2060 "], ["iOS\u180e\u200b\u200c\u200d\u2060Stwift"], ["Googgle\u200bD\u180e\u200biOS\u180e\u200bO\u200c\u200d\u20601234567890Swift\u200c\u200d\u2060art"], ["hGMmu"], [" \u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060\u2060 "], ["stri"], ["aspacsesis"], [" \u180e\u200biOS\u180e\u200bO\u200c\u200d\u20601234567890Swift0\u200c\u200d\u2060 "], ["multiple"], ["This    is p   a    long    string    with    mltiple    spaces"], ["\u180e\u200b\u200c\u200d\u2060"], ["mullongtipl"], ["\u180e\u200b1234567"], [" \u180e\u200bi890\u200c\u200dOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060 "], ["mupl"], ["12384567890"], ["   12384567890  \u180e\u200b multiple \u180e\u200b "], ["tstring"], ["iis"], [" \u180e\u200b12345\n67\n\t890\u200c\u200d "], ["mutmipl"], ["iOS\u180e12345678 \u180e\u200bi890\u200c\u200dOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060 90\u200b\u200c\u200d\u2060Swift"], ["\u180e\u200d\u200b\u200c\u200d\u2060"], ["long"], ["890\u200c\u200d"], ["lon"], [" \u180e\u200biOS\u180e\u200bO\u200c\u200d\u206012s\u180e\u200b\u200c\u200dtring34567890Swif9t\u200c\u200d\u2060 "], [" This\u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060 "], ["This    is    a    long    strin31234567890ltiple    spaces"], [" \u180e\u200b12890\u200c\u200c\u200d "], [" \u180e\u200b123\u200d4567\n\t890\u200c\u200d "], ["  123 "], ["\u180e\u200b\u200c\u200d"], ["\u180e\u200b1\u180e\u200b123\u200d4567234567"], [" \u180e\u200b\u200ciOS\u180e12345678 \u180e\u200bi890\u200c\u200dOS \u180e\u200biOS\u180e\u200bO\u200c\u200d\u206012s\u180e\u200b\u200c\u200dtring34567890Swif9t\u200c\u200d\u2060 \u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060 90\u200b\u200c\u200d\u2060Swift\u200d\u2060  "], ["67"], ["This    is    a    long    strin31234567890ltie    spaces"], ["\u180e\u200bi890\u200c\u200dOS"], [" \u180e\u200b\u200ciOS\u180e12345678 \u180e\u200bi890\u200c\u200dOS \u180e\u200biOS\u180e\u200bO\u200c\u200d\u206012s\u180e\u200b\u200c\u200dtring34567890Swif9t\u200c\u200d\u2060 \u180e\u200b\u200cThis    is p   a    long    string    with    mltiple    spaces\u200d\u2060Swift\u200c\u200d\u2060 90\u200b\u200c\u200d\u2060Swift\u200d\u2060  "], [" \u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060\u2060 \u180e\u200b1\u180e\u200b123\u200d4567234567"], ["iOS\u180e\u200b\u200c\u200d\u2060St"], [" \u180e\u200b12890\u200d\u200c\u200c\u200d "], ["loiisn"], ["This    is    a    long    stri    spaces"], ["spaces\u200d\u2060Swift\u200c\u200d\u2060"], ["This    is    a    long    strinmultipl31234567890ltiple    spaces"], ["h890\u200c\u200dGhMmu"], ["\u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swiftmultipl\u200c\u200d\u2060\u2060"], [" \u180e\u200b123\u200d4\n567\n\t890\u200c\u200d "], ["This\u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060"], [" \t\n\n"], ["\u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swif890\u200c\u200dtmultipl\u200c\u200d\u2060\u2060"], ["   12384567890  \u180e\u200b multipleThis\u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060\u180e\u200b "], ["spaces\u200d\u2060Swif\u2060t\u200cf\u200d\u2060"], ["iOS\u180eS\u200b\u200c\u200d\u2060Stwift"], ["This    i123s    a    longiOS\u180e\u200b\u200c\u200d\u2060St    strinmultipl31234567890l tiple    spaces"], ["90\u200b\u200c\u200d\u2060Swift"], ["strin3p1234567890ltiple"], ["  \u180e\u200b12345\n67\n\t890\u200c\u200d This\u180e\u200biOS\u180e\u200b\u200c\u200d\u2060Swift\u200c\u200d\u2060 "], [" \u180e\u200biO0S\u180e\u200bO\u200c\u200d\u206012sString34567890Swif9t\u200c\u200d\u2060 "], ["hGMmuiOS\u180eS\u200b\u200c\u200d\u2060Stwift"], ["  \u180e\u200b \u180e\u200b\u200c\u200d\u2060 \u200c\u200d\u2060 "], ["iOS\u180e\u200b\u200c\u200diOS\u180e\u200b\u200c\u200d\u2060Stwift\u2060Swift"], ["\u180e\u200d\u200b\u200c\u200d\u2060hGMmuiOS\u180eS\u200b\u200c\u200d\u2060Stwift"], ["56"], ["  13 "], ["hwplSpwh"], [" \u180e\u200b\u200c\u200d  "], ["  \u180e\u200b\u200c\u200d "], ["\u180e\u200b\u200cThis"], ["\u180e\u200b123\u200d4"], ["   \u180e\u200b\u200c\u200d\u200b "], ["\u180e\u200d\u200b\u200c\u200d\u2060hGMmuwitht"], ["strin31234567890ltielon"], ["naXeNJpPR"], ["lstrin3167890ltielon"], ["\u180e\u200d\u200b\u200cG\u200d\u2060hGMmuwitht"], ["90\u200b\u200cstringSwift"], ["spacewift\u200c\u200d\u2060"], ["longiOS\u180e\u200b\u200c\u200d\u2060St"], ["spaceswift\u200c\u200d\u2060"]], "contract": "\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n"}
{"task_id": "Mbpp/453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n", "entry_point": "sumofFactors", "canonical_solution": "\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])\n", "base_input": [[18], [30], [6]], "atol": 0, "plus_input": [[101], [997], [9973], [99991], [1000003], [102], [998], [9974], [1000004], [999], [1000005], [1000006], [1000], [9972], [9975], [996], [99992], [103], [1000007], [99993], [995], [1000008], [true], [99989], [99988], [false], [1001], [1000010], [99990], [1002], [1003], [1000009], [994], [104], [993], [84], [992], [9971], [85], [23], [99994], [83], [9970], [86], [991], [87], [1004], [24], [25], [9], [105], [9976], [1000011], [82], [106], [26], [99995], [9977], [39], [27], [10], [107], [28], [8], [88], [22], [38], [1000002], [9969], [99996], [990], [21], [7], [6], [108], [1005], [81], [1000001], [100], [40], [20], [19], [3], [1000012], [5], [55], [89], [1000000], [37], [9968], [41], [999998], [999997], [2], [9967], [9965], [109], [1000013], [90], [99997], [9966], [99998], [999999], [111], [1006]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8\n"}
{"task_id": "Mbpp/454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n", "entry_point": "text_match_wordz", "canonical_solution": "\nimport re\ndef text_match_wordz(text):\n        return 'z' in text\n", "base_input": [["pythonz."], ["xyz."], ["  lang  ."]], "atol": 0, "plus_input": [["*z@"], ["1234z5678"], ["z x z"], ["x"], [""], ["*z@*z@"], ["*z"], ["**z@"], ["**zz@"], ["*z x z*zz@"], ["*x*z@*z@z"], ["***z@"], ["z"], ["x****z@"], ["*z xz x z z*zz@"], ["z*zz@"], ["*@*z@"], ["***@"], ["***zz@@x****z@"], ["*x*z@*z@"], ["*z xzz x z z*zz@"], ["z*z@"], ["**z"], ["*@"], ["*@*z@@"], ["z*zz@z"], ["*@**z@"], ["****@"], ["****z@"], ["*zz"], ["***zz@@x*****z@"], ["z*zz@z*zz@z"], ["z*zz@z*zzz@z"], ["****z*z@z@@x****z@"], ["**zx*z@*z@"], ["*x@*z@"], ["z*****z@zz@z*zz@z"], ["*****@*z"], ["n"], ["**@*z@@"], ["z**z@"], ["*zzz*@z"], ["***@@"], ["z****z@"], ["*z@*z****z@z"], ["****z@*zzz*@z"], ["**z****z*z@z@@x****z@z@"], ["*zzz*z"], ["****z@*zzz*z****z@@z*z@**z@"], [" z  x z"], ["z**@*z@zz@z*zz@z"], ["*z@*z@**zz"], ["*zz xzz x z z*zz@"], ["*z *zz x zz x z z*zz@z*zz@"], ["z**z@*z@zz@z*zz@z"], ["**zx*z@*z*@"], ["z*zzz@"], ["*"], ["z*zz@zz"], ["z**zz@"], ["*z x*x@*z@zz  z*zz@"], ["1234z56n78"], ["z*zzzz@"], ["zzz"], ["**@@x*****z@"], ["**zx*z@*z*@x"], ["***z**z@@@*z@"], ["xz"], ["*zz xzz x z z*z"], ["1234z566n78"], ["z*zz@z*z*zz@z*zzz@zzzz@z"], ["z**@*z@ z  x zzz@z*zz@z"], ["1234z78"], ["zz"], ["*x*z@*zz@"], ["x*x@*z@zz"], ["**zz xzz x z z*z"], ["z**z**zz@"], ["z*zz@***z@"], ["z***zz@z@"], ["12334z78"], ["*z zzz"], ["*@@"], ["yVHKcHlY"], ["z*zz@***z@x*zz xzz x z z*z"], ["*z  x z*zz@"], ["z*zz@z*zz@*@*z@@"], ["*@***z"], ["JlGWYIid"], ["*****@"], ["zyVHKcHlY x z"], ["@*@*z@"], ["****z@*zzz*@zz"], ["*zzz***z x*x@*z@zz  z*zz@*z@z"], ["12314z566n78"], ["z*****z@"], ["12314z566n78*z x*x@*z@zz  z*zz@"], ["l"], ["*z@*z*z x*x@*z@zz  z*zz@****z@z"], ["*x@*zz@"], ["********z@*zzz*@zz"], ["****z@*zzz*z*@@z*z@**z@"], ["1234z566nl78"]], "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False\n"}
{"task_id": "Mbpp/455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "entry_point": "check_monthnumb_number", "canonical_solution": "\ndef check_monthnumb_number(monthnum2):\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n", "base_input": [[5], [2], [6]], "atol": 0, "plus_input": [[1], [12], [10], [11], [9], [2], [8], [true], [7], [3], [6], [4], [5]], "contract": "\n  assert isinstance(monthnum2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False\n"}
{"task_id": "Mbpp/456", "prompt": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n", "entry_point": "reverse_string_list", "canonical_solution": "\ndef reverse_string_list(stringlist):\n    return [x[::-1] for x in stringlist]\n", "base_input": [[["Red", "Green", "Blue", "White", "Black"]], [["john", "amal", "joel", "george"]], [["jack", "john", "mary"]]], "atol": 0, "plus_input": [[[]], [["John", "aMaL", "jOeL", "George"]], [["John", "", "George"]], [["John"]], [[""]], [["John", ""]], [["John", "", "George", "George"]], [["John", "George", "", "George"]], [["John", "George"]], [["", ""]], [["aMaL", "George"]], [["John", "", "George", "George", ""]], [["John", "", "George", "Geoerge", "", ""]], [["John", "", "George", "George", "George", ""]], [["John", "aMaL", "jOeL", "George", "John"]], [["aMaL", "John"]], [["John", "", "George", "jOeL", "George"]], [["aMaL", "John", "", "George"]], [["aMaL", "John", "George"]], [["John", "", "George", "jOeL", "Geoerge", ""]], [["John", "", "George", ""]], [["aMaL", "John", "", "George", "John"]], [["John", "", ""]], [["JohnJohn", "John"]], [["aMaL", "Geoorge", "John", "", "George", "John"]], [["John", "", "GeorgGeoergee"]], [["JohGeorgGeoergee", "JohnJohn", "John"]], [["", "John"]], [["JohnGeorge", "John", "", "George", "jOeL", "Geoerge", ""]], [["JohnJohn", "Geoerge", "John"]], [["JohaMaLnJohn", "JohnJohn"]], [["oJohn", "", "George", "George", ""]], [["John", "Geoorge", "John"]], [["John", "JaMaLn", "", "George", "George", ""]], [["aMaL", "John", "aMaL", "George", "John"]], [["John", "aMaL", "jOeL", "aM", "George", "jOeL"]], [["John", "aMaL", "Geoorge", "jOeL", "George", "John", "aMaL"]], [["John", "aMaL", "jOeL", "aM", "George", "jOeL", "jOeL"]], [["aMaL", "John", "GeorgGeoergee"]], [["John", "", "JohnGeorge", "George"]], [["", "", ""]], [["aMaL", "Geoorge", "John", "", "George", "John", "George"]], [["aMaL", "John", "John"]], [["Geoerge", "John", "", "George"]], [["aMaL", "John", "George", "John"]], [["John", "George", "jOeL", "George"]], [["JohnJohn", "JaMaLn"]], [["John", "", "George", "jOeL", "Geoerge", "JohnGeorge", "George", "jOeL"]], [["aMaL", "John", "aMaL", "John"]], [["oJohn", "", "George", "Geoerge", "", ""]], [["Geoorge", "George", "jOeL", "George"]], [["aMaL", "Geoorge", "Joh", "aMaL", "George", "nJohn"]], [["aMaL", "aMaL", "George", "John", "George"]], [["", "George", "Geoerge", "", ""]], [["aM", "aMaL", "Geoorge", "John", "", "George", "John", "George", "aM"]], [["JohnGeorge", "John", "", "GeorgGeoergee", "jOeL", "Geoerge", ""]], [["aMaL", "Geoeorge", "John", "", "aMaLL", "George", "John"]], [["John", "aMaL", "JoJohnGeorgehn", "Geoorge", "jOeL", "George", "John", "aMaL"]], [["aMaL", "John", "GeorgGeoergee", "Joh", "John"]], [["GeorgGeoergee", "Geoerge", "John", "", "George"]], [["GeorgGeoergee", "Geoerge", "", "George", "John"]], [["JohaMaLnJohn", "FTlwsSD", "wPcq", "vI", "JohaMaLnJohn", "SqPn", "aM", "JocyrPAB", "qMHbL"]], [["John", "George", "George", ""]], [["John", "", "George", "jOeL", "Geoerge", "GeorgGeoergee", "George", "Geoorge", "jOeL"]], [["aMaL", "John", "aMaL"]], [["JohaMaLnJohn", "JohnJohn", "JohaMaLnJohn"]], [["John", "", "George", "Geoerge", "", "Geoerge", "", ""]], [["John", "George", "George", "George", ""]], [["aMaL", "John", "", "George", ""]], [["", "George", "", "orge", "SqPn"]], [["vI", "John", "", "George", "jOeL", "Geoerge", "", "John"]], [["JohnJohnJohnJohn", "John", "JohnJohn", "GeGeoergeoerge", "Geoerge", "JohnJohnJohnJohn"]], [["aMaL", "John", "George", "John", "John"]], [["JohaMaLnJohn", "FTlwsSD", "wPcq", "vI", "JohaMaLnJohn", "SqPn", "aM", "JocyrPAB"]], [["", "JohnGeorge", "", "", ""]], [["John", "", "", "", ""]], [["John", "John"]], [["JohGeorgen", "JohGeorgGeoergee", "JohnJohn", "John"]], [["aGeorgeMaL"]], [["John", "George", "", "GeorgGeoergee", "John"]], [["", "George", "Geoerge", "orge", "", "", "aGeorgeMaL", "George"]], [["aMaL", "John", "aMJohGeorgenaL", "", "George"]], [["John", "", "George", "aM", "Ge", "jOeL", "Geoerge", "JohnGeorge", "George", "jOeL"]], [["John", "Geoerge", "", "", ""]], [["aMaL", "JaMaLn", "JaMaLn"]], [["", "George", "aGeorgeMaL", "Geoerge", "", ""]], [["John", "", "George", "", ""]], [["", "aMaL", "jOeL", "George"]], [["oJohn", "", "George", "Geoerge", "", "Geoerege", ""]], [["aMaL", "John", "aMaL", "JohaMaLnJohn", "aMaL", "John"]], [["", "", "", ""]], [["aMaL", "John", "JoGeorgGeoergee", "GeorgGeoergee", "Joh", "John"]], [["nJohn", "JohnGeorge", "", "", ""]], [["", "George", "aGeorgeMaL", "", ""]], [["George"]], [["aMaL"]], [["aMaL", "aMaL", "John", "", ""]], [["John", "aMaL", "John", "aMaL", "George", "John"]], [["Geoorge", "George", "jOeL", "Geoorge"]], [["nJohn", "JohnGeorge", "", "JohGeorgGeoergee", "", ""]], [["JohGeorgGeoergee", "John", "aMaL", "John", "aMaL", "George", "John"]], [["aMaL", "JocyrPAB", "Geoeorge", "John", "", "aMaLL", "George", "John"]], [["Geoerge", "Geooerge", "John", "", "George"]], [["John", "aMaL", "aMaGeoeregeL", "jOeL", "aM", "George", "jOeL", "jOeL"]], [["aMaL", "Geoeorge", "John", "", "aMaLL", "GeorgaMaLe", "John"]], [["aMaL", "Geoorge", "John", "", "George", "John", "GeorgGeoergee"]]], "contract": "\n    assert isinstance(stringlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n"}
{"task_id": "Mbpp/457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "entry_point": "Find_Min", "canonical_solution": "\ndef Find_Min(lst): \n    return min(lst, key=len) \n", "base_input": [[[[1], [1, 2], [1, 2, 3]]], [[[1, 1], [1, 1, 1], [1, 2, 7, 8]]], [[["x"], ["x", "y"], ["x", "y", "z"]]]], "atol": 0, "plus_input": [[[[], [], []]], [[["x"]]], [[["x"], ["x", "y"]]], [[["x"], ["x", "y"], ["x", "y", "z"], ["x", "y", "z", "a"]]], [[["x"], ["x", "y"], ["x", "y", "z"], ["x", "y", "z", "a"], ["x", "y", "z", "a", "b"]]], [[[], ["x", "y"], [], ["x", "y", "z"]]], [[[[1]], [[1, 2]], [[1, 2, 3]]]], [[[[1]], [[1, 2], [3, 4]], [[1, 2, 3, 4, 5]]]], [[[[1]], [[1, 2], [3, 4]], [[1, 2, 3, 4, 5]], [[0, 1, 2, 3]]]], [[[[1]], [[1, 2], [3, 4]], [[1, 2, 3, 4, 5]], [[0, 1, 2, 3]], []]], [[[], ["a", "b", "c"], ["d", "e", "f"], [], [], ["g"], [], ["h", "i"]]], [[[[1, 2, 3], [4, 5, 6]], [], [[7, 8, 9, 10], [11, 12], [13]], [[14, 15]], []]], [[["apple", "banana"], ["carrot", "potato"], ["orange"], [], ["grapefruit", "watermelon"]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"]]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["m", "n"]]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10], [11, 12]], [[13, 14, 15, 16, 17], [18, 19], [20, 21, 22]]]], [[["x", "y"], ["a", "b"], ["i", "j"], ["u", "v", "w"], ["m", "n", "o", "p"]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[10, 11]], [[12, 13, 14], [15, 16, 17], [18, 19, 20]], [[21, 22], [23, 24], [25, 26], [27, 28]]]], [[["apple", "banana", "cherry"], ["doughnut"], ["elephant", "fox"], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"]]], [[["x"], ["y"], ["z", "a"], ["b", "c", "d"], ["e", "f", "g", "h"]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9, 10], [11, 12], [13]], [[1, 2, 3], [4, 5, 6]], [[14, 15]], [[1, 2, 3], [4, 5, 6]]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]]]], [[["x"], [], [], ["z", "a"], ["b", "c", "", "d"], ["e", "f", "g", "h"]]], [[[], []]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"], ["e", "f", "g", "h"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"], ["e", "f", "g", "h"]]]], [[[["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[["g", "h"], ["i", "j", "k", "l"]], [["g", "h"], ["i", "j", "k", "l"]]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"], ["e", "f", "g", "h"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"], ["e", "f", "g", "h"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"], ["e", "f", "g", "h"]]]], [[[], [], ["l", "tFbRBOk", "cfOPt", "fox", "grape", "mango", "bURovwB", "lemon", "ZRkprFsNlc", "BdjtDHroYE"], []]], [[[["a"], ["b"], ["c"]], [["dd"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"]], [["dd"]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[12, 13, 14], [15, 16, 17], [18, 19, 20]], [[21, 22], [23, 24], [25, 26], [27, 28]]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["dd", "e", "f"]], [["dd", "e", "f"]], [["m", "n"]]]], [[[], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], []]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["g", "h"], ["i", "j", "k", "l"]]]], [[[["a"], ["b"], ["c"]], [], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"], ["e", "f", "g", "h"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"], ["e", "f", "g", "h"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"], ["e", "f", "g", "h"]]]], [[[], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], [], [], []]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["m", "n", "m"], ["m", "n", "m"]]]], [[[], [], [], ["eqmZrrw", "NUksHJFgXB", "B", "u", "j", "BdjtDHroYE", "LONOBOhF", "", "qIZtur", "grape"]]], [[[], [], [], []]], [[["x"], [], [], ["z", "a"], ["b", "c", "", "d"]]], [[["apple", "banana", "cherry"], [], ["elephant", "fox"], [], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"]]], [[["apple", "banana"], [-85.491799009766, -28.429789067892102, -13.346744109726245, -58.44119256953919, 60.7668803444335, 47.68813139253385, -7.5873331040208, 47.72732136154761, -85.491799009766, -28.429789067892102], ["carrot", "potato"], ["orange"], [], ["grapefruit", "watermelon"]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[12, 13, 14], [15, 16, 17], [18, 19, 20]], [[21, 22], [23, 24], [25, 26], [27, 28]], [[1, 2, 3], [4, 5, 6]]]], [[[true, true, true, true], [false, true, false]]], [[["apple", "banana", "cherry"], [], ["elephant", "fox"], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"], ["ice cream"]]], [[[], ["a", "b", "c"], ["d", "e", "f"], [], [], ["g"], [], ["h", "i"], []]], [[[true, true, true, true], [true, true, true, true], [true, true, true, true], [false, true, false]]], [[[["cf", "c"], ["a"], ["b"], ["cf", "c"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"]], [["dd"]], [["dd"]]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10], [11, 12]], [[13, 14, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 14, 15, 16, 17], [18, 19], [20, 21, 22]]]], [[[], ["eqtKS"], [["g", "h"], ["i", "j", "k", "l"]]]], [[[], [], ["l", "tFbRBOk", "cfOPt", "fox", "grape", "mango", "bURovwB", "lemon", "ZRkprFsNlc", "BdjtDHroYE"], [], []]], [[[], [], [], ["eqmZrrw", "NUksHJFgXB", "B", "u", "c", "j", "BdjtDHroYE", "LONOBOhF", "", "qIZtur", "grape"]]], [[[], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], [], [], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], []]], [[["x", "x"], ["x", "x"], ["x", "y"]]], [[[], ["a", "b", "c"], ["d", "e", "f"], [], [], ["g"], [], ["h", "i"], [], []]], [[[true, true, false, false, false], [], []]], [[[], ["a", "b", "c"], ["d", "e", "f"], [], [], ["g"], [], [], ["h", "i"], [], [], [], []]], [[["x"], [], [], ["zz", "a"], ["b", "c", "", "d"], ["e", "f", "g", "h"]]], [[[-70.45849814287817, -79.72463141052742], ["x", "y"], [], ["x", "y", "z"]]], [[[-89.56928478588684, 69.15039976127599, -58.61307409762566, -70.45849814287817, 63.11673272639632], [], [], [], []]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["m", "n", "m"], ["m", "n", "m"]], [["x", "y", "z"], ["a", "b", "c"]]]], [[["apple", "baanana", "cherry"], [], ["elephant", "fox"], [], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"], []]], [[["apple", "banana", "cherry"], [false, true], [], ["elephant", "fox"], [], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["m", "n"]], [["m", "n"]]]], [[[], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], [], [true, false, true, true, false], [], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], []]], [[[["a", "b", "c"]], [["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["m", "n", "m"], ["m", "n", "m"]], [["a", "b", "c"]]]], [[[false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, false]]], [[[[0], [0]], [[0], [0]], [[1, 2], [3, 4]], [[1, 2, 3, 4, 5]]]], [[[["a"], ["b"], ["c"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"]], [["n", "o", "p", "p", "o"], ["n", "o", "p", "p", "o"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m", "k"]]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["i", "j", "k", "l"]]]], [[[false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, false, true]]], [[["x"], [], [], ["z", "a"], ["b", "c", "", "d"], ["e", "f", "g", "jh"]]], [[[-70.45849814287817, -79.72463141052742], ["x", "y"], [], ["x", "y", "z"], ["x", "y"], []]], [[[-89.56928478588684, 69.15039976127599, -58.61307409762566, -70.45849814287817, 63.11673272639632], [], [], [], [], []]], [[[true, true], [true, true], [true, true], [true, true], [false, true, false], [true, true]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[12, 13, 14], [15, 16, 17], [18, 19, 20]], [[21, 22], [23, 24], [25, 26], [27, 28], [27, 28]]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10], [11, 12]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]]]], [[[["a"], ["by", "b"], ["c"]], [["d"]], [["a"], ["by", "b"], ["c"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"], ["n", "o", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[], ["elephant", "fox"], [], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"], ["ice cream"]]], [[[[1]], [[1, 2], [3, 4]], [[1, 2, 3, 4, 5]], [[0, 1, 2, 3]], [], [[1, 2, 3, 4, 5]]]], [[[[1, 2, 3], [4, 5, 6]], [96, 61], [[7, 8, 9, 10], [11, 12], [13]], [[14, 15]], [], [[7, 8, 9, 10], [11, 12], [13]]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10], [11, 12]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22]]]], [[[], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], [], []]], [[["x"], [], [], ["e", "f", "g", "h", "f"], ["z", "a"], ["b", "c", "", "d"], ["e", "f", "g", "h", "f"]]], [[[["g", "h"], ["i", "j", "k", "l"]]]], [[[], [], ["l", "tFbRBOk", "cfOPt", "fox", "grape", "mango", "bURovwB", "lemon", "ZRkprFsNlc", "BdjtDHroYE"], [], [], ["l", "tFbRBOk", "cfOPt", "fox", "grape", "mango", "bURovwB", "lemon", "ZRkprFsNlc", "BdjtDHroYE"]]], [[[], ["l", "tFbRBOk", "cfOPt", "fox", "grape", "mango", "bURovwB", "lemon", "ZRkprFsNlc", "BdjtDHroYE"], [], [true, false, false, false, true], [], ["l", "tFbRBOk", "cfOPt", "fox", "grape", "mango", "bURovwB", "lemon", "ZRkprFsNlc", "BdjtDHroYE"]]], [[[], ["x", "y", "x"], [], ["x", "y", "z"]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"]], [["e", "f", "g", "h"]]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"]], [["n", "o", "p", "p"]], [["e", "f", "g", "h"]], [["e", "f", "g", "h"]], [["d"]]]], [[[], [], ["x", "y", "z"]]], [[[false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, false], [false, true, true, true]]], [[[], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], [], [true, false, true, true, false], [], [], [-58.44119256953919, -85.491799009766, 69.15039976127599, -28.429789067892102, 22.405065830734472, 63.11673272639632], []]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "ll"]], [["g", "h"], ["i", "j", "k", "ll"]]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["d", "e", "f"]], [["g", "h"], ["i", "j", "k", "l"]], [["m", "n"]], [["m", "n"]], [["m", "n"]]]], [[[false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, true, true], [false, true, false], [false, true, true, true], [false, true, true, true]]], [[[["a"], ["by", "b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["plemon", "n", "o", "p", "p"], ["plemon", "n", "o", "p", "p"], ["plemon", "n", "o", "p", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[["x", "y", "z"], ["a", "b", "c"]], [["e", "f"], ["e", "f"]], [["i", "j", "k", "ll"]], [["i", "j", "k", "ll"]], [["i", "j", "k", "ll"]]]], [[["grape", "apple", "baanana", "cherry", "grape"], ["grape", "apple", "baanana", "cherry", "grape"], [], ["elephant", "fox"], [], ["grape", "honey"], ["ice cream"], ["juice"], ["kiwi", "lemon", "mango"], [], ["ice cream"]]], [[[], [], [false, false, false, true, true, true, false, false], [-4, -79, 15, 11, 18, 14, -1, -59, 11], []]], [[[[1, 2, 3], [4, 5, 6]], [96, 61], [[14, 15], [14, 15]], [[7, 8, 9, 10], [11, 12], [13]], [[14, 15], [14, 15]], [], [[7, 8, 9, 10], [11, 12], [13]], [[7, 8, 9, 10], [11, 12], [13]]]], [[["grapefruit"], ["apple", "banana"], ["carrot", "potato"], ["orange"], [], ["grapefruit"]]], [[[["a"], ["b"], ["c"]], [["d"], ["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"]]]], [[[], [], ["Icky", "g", "sRzEiFHz", "kT", "aoLcOFLFH", "tFbRBOk", "RaynjY", "MCUQiO", "OgmzNgy"], ["eqmZrrw", "NUksHJFgXB", "B", "u", "j", "BdjtDHroYE", "LONOBOhF", "", "qIZtur", "grape"]]], [[[[1]], [[1, 2, 3, 4, 5]], [[0, 1, 2, 3]], [[1, 2], [3, 4]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[10, 11]], [[12, 13, 14, 13], [12, 13, 14, 13], [15, 16, 17], [18, 19, 20]], [[12, 13, 14, 13], [12, 13, 14, 13], [15, 16, 17], [18, 19, 20]], [[21, 22], [23, 24], [25, 26], [27, 28]]]], [[[["a"], ["cc", "c"], ["b"], ["cc", "c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p", "p"]], [["a"], ["cc", "c"], ["b"], ["cc", "c"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[["a"], ["by", "b"], ["c"]], [["d"]], [["a"], ["by", "b"], ["c"]], [["n", "o", "p"], ["n", "o", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]]]], [[[["a", "b", "c"]], [["a", "b", "c"]], [["g", "h"], ["i", "j", "k", "l"]], [["a", "b", "c"]], [["m", "n", "m"], ["m", "n", "m"]], [["a", "b", "c"]], [["a", "b", "c"]]]], [[[], ["a", "b", "c"], ["d", "e", "f"], [], [], ["g"], [], ["h", "i"], [], [-28, 94, 16, -11, 9, -4], []]], [[[], [], ["z", "a"], ["b", "c", "", "d"]]], [[["x", "y", "z"], ["x"], ["x", "y"], ["x", "y", "z"], ["x", "y", "z"]]], [[[["a"], ["b"], ["c"]], [["d"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["n", "o", "p"]], [["e", "f", "g", "h"], ["i", "j", "k", "l", "m"]], [["a"], ["b"], ["c"]]]], [[[], [], [], ["x", "y", "z"]]], [[[["g", "h"], ["i", "j", "k", "l"]], [["g", "h"], ["i", "j", "k", "l"]], [["g", "h"], ["i", "j", "k", "l"]]]], [[["ejuiceqtKS"], [["g", "h"], ["i", "j", "k", "l"]]]], [[[false, true, true, true, true], [false, true, true, true, true], [false, true, true, true, true], [false, true, true, true, true], [false, true, true, true, true], [false, true, false], [false, true, true, true, true], [false, true, true, true, true], [false, true, true, true, true]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[10, 11]], [[12, 13, 14], [15, 16, 17], [18, 19, 20]], [[21, 22], [23, 24], [25, 26], [27, 28]], [[21, 22], [23, 24], [25, 26], [27, 28]]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10], [11, 12]], [[13, 15, 16, 17], [18, 19], [20, 21, 22], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22], [20, 21, 22]], [[13, 15, 16, 17], [18, 19], [20, 21, 22], [20, 21, 22]]]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n"}
{"task_id": "Mbpp/458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n", "entry_point": "rectangle_area", "canonical_solution": "\ndef rectangle_area(l,b):\n  return l * b\n", "base_input": [[10, 20], [10, 5], [4, 2]], "atol": 0, "plus_input": [[1000000000000, 1000000000000], [0.5, 0.5], [2.5, 4.8], [2.5, 0.5], [0.5, 4.8], [4.8, 4.8], [0.5, 2.5], [3.232269033100607, 4.8], [2.2649401818410433, 2.5], [3.355279579797867, 0.5], [2.827945062082224, 3.232269033100607], [2.827945062082224, 0.5], [3.6724676500173103, 0.5], [2.5, 2.5], [2.502529257484548, 0.5], [3.6724676500173103, 3.6724676500173103], [4.30918028054133, 0.5], [3.232269033100607, 3.232269033100607], [2.502529257484548, 2.502529257484548], [4.30918028054133, 4.30918028054133], [2.4015224002109283, 2.5], [2.7249479696078422, 0.44475025198075785], [0.44475025198075785, 3.387688585553926], [3.232269033100607, 4.30918028054133], [0.28729718633895834, 2.502529257484548], [4.643217137707291, 3.6724676500173103], [999999999999, 999999999999], [1.6141425564518155, 2.5], [3.232269033100607, 1.9400105931597424], [3.387688585553926, 2.902763503893509], [0.44475025198075785, 2.7249479696078422], [4.577650682955883, 4.577650682955883], [2.5, 4.577650682955883], [2.502529257484548, 1.1182095268286556], [2.7249479696078422, 2.7249479696078422], [0.44475025198075785, 0.5], [2.800623749840809, 3.1735103883415894], [1.6141425564518155, 4.30918028054133], [4.361641706471223, 4.643217137707291], [3.9979716418805142, 3.9979716418805142], [0.24900631443838703, 0.44475025198075785], [0.18551896339706864, 2.926505105970933], [2.5, 5.337986881695393], [0.28729718633895834, 0.3318682967427828], [2.4015224002109283, 4.8], [0.44475025198075785, 3.232269033100607], [2.7249479696078422, 2.2649401818410433], [3.355279579797867, 2.800623749840809], [2.2649401818410433, 1.8949633184341914], [4.643217137707291, 4.730780679514876], [3.232269033100607, 3.9979716418805142], [3.232269033100607, 4.3597224259926195], [4.938837763181859, 3.038849187066821], [5.337986881695393, 3.6724676500173103], [4.30918028054133, 2.7249479696078422], [0.18551896339706864, 3.387688585553926], [3.6724676500173103, 4.5109674752781945], [5.544111628815752, 4.30918028054133], [4.938837763181859, 4.938837763181859], [1.6141425564518155, 2.491326410875134], [1.528102887111072, 2.800623749840809], [2.902763503893509, 4.2131518375751345], [2.491326410875134, 4.577650682955883], [1.9400105931597424, 2.5], [2.0880062589453283, 1.528102887111072], [5.188901974559672, 4.8], [0.8502551367130722, 0.5], [2.502529257484548, 2.6163599366446024], [4.862586711733384, 4.577650682955883], [1.802585055580215, 2.6054612383549913], [999999999999, 1000000000000], [1.974235844442287, 2.5], [3.6724676500173103, 4.361641706471223], [3.232269033100607, 4.579129400641797], [3.232269033100607, 4.016409477413704], [4.2131518375751345, 0.5], [2.6702456228971103, 2.5], [5.379360395952477, 3.6724676500173103], [3.6942938709602657, 3.315493434137359], [1.6141425564518155, 5.544111628815752], [0.5, 2.6163599366446024], [2.5, 6.256758684348407], [3.232269033100607, 5.631658366081931], [4.910950854987185, 7.04710869277477], [2.6702456228971103, 1.4909857068122419], [1.0508042106584865, 0.5], [0.33636486737458804, 0.5], [4.2833724450533825, 4.512760196950995], [2.4015224002109283, 3.4317007071978676], [6.1423927104422855, 4.30918028054133], [1.3470152550051346, 1.3470152550051346], [1.528102887111072, 2.2649401818410433], [0.8502551367130722, 4.577650682955883], [0.3137198020642086, 0.5], [0.33636486737458804, 3.038849187066821], [2.5, 4.206007575725365], [4.577650682955883, 0.44475025198075785], [5.544111628815752, 5.544111628815752], [2.926505105970933, 4.30918028054133], [2.2649401818410433, 2.7249479696078422], [3.1440798686211, 4.643217137707291], [0.24900631443838703, 0.5511696162230015], [1000000000000, 1000000000001]], "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n"}
{"task_id": "Mbpp/459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n", "entry_point": "remove_uppercase", "canonical_solution": "\ndef remove_uppercase(str1):\n  return ''.join(c for c in str1 if c.islower())\n", "base_input": [["cAstyoUrFavoRitETVshoWs"], ["wAtchTheinTernEtrAdIo"], ["VoicESeaRchAndreComMendaTionS"]], "atol": 0, "plus_input": [[""], ["ABCDEFG"], ["ThiS%^%!s&a(mY)TesTStR%i*ng"], ["ThiS%^%!s&a(mY)TsesTStR%i*ng"], ["ThiS%^%!%s*ng"], ["ABCDABCDEFGEFG"], ["ABFCDABCDEFGEFG"], ["CABCDEFG"], ["CACDEFG"], ["ThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ng"], ["ABFCDABCDCEEFG"], ["ABFCDABCGEFG"], ["AABCDEFGABCGEFG"], ["ThiS%^%ABCABFCDABCDCEEFGDEFG!s&a(mY)TsesTStR%i*ng"], ["ThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngABCDABCDEFGEFG"], ["ABFCDABCGEF"], ["ABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ng"], ["ThiSS%^%ABCDEFG!s&a(mY)TsesTStR%i*ng"], ["ThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(mY)TesTStR%i*ng"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTStR%i*ngABCDABCDEFGEFG"], ["AABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABCGEFG"], ["ThiS%^%ABCDEFG!ABCDEFGsTStR%i*ngABCDABCDEFGEFG"], ["ABFCDAABCCDCEEFG"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngStR%i*ngABCDABCDEFGEFG"], ["ABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(mY)TesTStR%i*ngDCEEFG"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFG"], ["ThiS%^%ABCABFCDABCDCEEFGDThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(mY)TesTStR%i*ngEFG!s&a(mY)TsesTStR%i*ng"], ["ABFCDABCDCFG"], ["CABCDEEFG"], ["AEBCDEFG"], ["ThiS%^%!s&a(mY)TsesTStR%i*nAABCDEFGABCGEFG"], ["ABCDEFGThiS%^%)!s&a(mY)TsesTAEBCDEFGStR%i*ng"], ["ThiSS%^%ABCDEFGT!s&a(mY)TsesTStR%i*ng"], ["ThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCGEFG"], ["CACDEFCG"], ["ABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFG"], ["A)TsesTStR%i*ng"], ["ThiSS%^%ABCDEFGT!s&a(mY)TsesTStR%i*ngABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ng"], ["ABFCDABCThiSS%^%ABCDEFGT!s&a(mY)TsesTStR%i*ngGEFG"], ["AABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFGCGEFG"], ["ThiS%^%!s&a(mY)TsesTStR%i*CnAABCDGABCGEFG"], ["ThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCA)TsesTStR%i*ngGEFG"], ["ThiS%^%!s&a(mY)TsesTStRs%i*nAABCDEFGABCGEFG"], ["ThThiSS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngiS%^%ABThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCGEFG%i*ngABCDABCDEFGEFG"], ["AABCDEGEFG"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)ABFCDAABCCDCEEFGTsesTStABCDEFGEFG"], ["ThiSS%^%ABCDEFG!s&a(mY)TsesTABCDEFGThiS%^%)!s%&a(mY)TsesTStR%i*ngStR%i*ng"], ["ThiSS%^%ABCDEFGAABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABCGEFGT!s&a(mY)TsesTStR%i*ngABCDEFGThiS%^%ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFG%i*ng"], ["ABFCDAABCCDDEEFG"], ["ThiS%^%ABCDEFABAABCDEGEFGDEFGThiS%^%)!s&a(mY)ABFCDAABCCDCEEFGTsesTStABCDEFGEFG"], ["ThisS%^%!s&a(mY)TsesTStRs%i*nAABCDEFGABCGEFG"], ["ThBiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngABCDABCDEFGEFG"], ["CABCDE"], ["ABCDEFGThiS%^%)!s&a(mEFGStR%i*ng"], ["ThiSS%^%ABCDEFGA(ABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABCGEFGT!s&a(mY)TsesTStR%i*ngABCDEFGThiS%^%ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesAABCDEFGABCGEFGTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFG%i*ng"], ["CACDEFCThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngAG"], ["ThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFG"], ["ThiS%^%ABCABFCDABCDCEEFGDThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(ThiS%^%!s&a(mY)TsesTStRs%i*nAABCDEFGABCGEFGmY)TesTStR%i*ngEFG!s&a(mY)TsesTStR%i*ng"], ["CABCABFCDABCThiSS%^%ABCDEFGT!s&a(mY)TsesTStR%i*ngGEFGEFG"], ["ThThiSS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngiS%^A%ABThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCGEFG%i*ngABCDABCDEFGEFG"], ["ABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)Tse%sTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFG"], ["ABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)Tse%sTStThBiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngABCDABCDEFGEFGR%i*n%!s&a(mY)TesTStR%i*ngDCEEFG"], ["ThThiSS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngiS%^%ABThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCGEFG%iS*ngABCDABCDEFGEFG"], ["AABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABABFCDABCThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFGT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFGCGEFG"], ["AAABFCDAABCCDCEEFGCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABABFCDABCThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFGT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFGCGEFG"], ["ThiS%^%!s&a(mY)TemsTStR%i*ng"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiSThiS%^%ABCABFCDABCDCEEFGDThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(ThiS%^%!s&a(mY)TsesTStRs%i*nAABCDEFGABCGEFGmY)TesTStR%i*ngEFG!s&a(mY)TsesTStR%i*ng%^%)!s&a(mY)ABFCDAABCCDCEEFGTsesTStABCDEFGEFG"], ["ThiS%^%ABCABFCDABCDCEEFGDThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(mY)TesTStR%i*ngEFG!ABFCDABCDCFGs&a(mY)TsesTStR%i*ng"], ["ThBiS%^%ABCDThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(mY)TesTStR%i*ngEFG!s&a(mY)TsesTStR%i*ngABCDABCDEFGEFG"], ["ACABCCDE"], ["ABCDFEFG"], ["ThBiS%^%ABCDEFG!s&a(mY)TsesThiS%^%ABCDEFABAABCDEGEFGDEFGThiS%^%)!s&a(mY)ABFCDAABCCDCEEFGTsesTStABCDEFGEFGTStR%i*ngABCDABCDEFGEFG"], ["ThiS%^%!s&a(mY)TemsTStR%i*ngAmCABCCDE"], ["ThiS%^%!s&a(mY)(TemsTStR%i*ngAmCABCCDE"], ["ThiSS%^%ABCDEFGA(ABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABCGEFGT!s&a(ThiSS%^%ABCDEFGAABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABCGEFGT!s&a(mY)TsesTStR%i*ngABCDDEFGThiS%^%ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFG%i*ng%ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesAABCDEFGABCGEFGTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFG%i*ng"], ["AABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABABFCDABCThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFGT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTStRCEEFGCGEFG"], ["AThBiS%^%ABCDEFG!s&a(mY)TsesThiS%^%ABCDEFABAABCDEGEFGDEFGThiS%^%)!s&a(mY)ABFCDAABCCDCEEFGTsesTStABCDEFGEFGTStR%i*ngABCDABCDEFGEFGABCDEGEFG"], ["ThiS%^%!s&a(mY)TemsTStR%i*ngABFCDABCGEFAmCABCCDE"], ["CABCDEF"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(m)Y)TsesTStABCDEFGEFG"], ["AABCDEFGABCDEFGThiS%^%)!s&aC(mY)TsesTStR%i*ngABCGEFG"], ["ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCsDEFGThiS%^%)!s&a(m)Y)TsesTStABCDEFGEFG"], ["ThThR%i*ngiS%^%ABThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCGEFG%iS*ngABCDABCDEFGEFG"], ["AABCDEFGABCDEFGThiS%^%)!s&aC(mY)TsesTStR%i*ngABCGEThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFGFG"], ["AABCDThiS%^%!s&a(mY)TemsTStR%i*ngEFGABCGEFG"], ["ABFCDAABCCDDEEEFG"], ["ABFCDABCDEFGGEFG"], ["ThiSS%^%ABCDEFGT!s&a(mY)TsesTStR%i*ngABCDEFGThiS%^%)!s&a(mY)Tse%sTStR%i*ng"], ["AABThThiSS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngiS%^%ABThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCGEFG%i*ngABCDABCDEFGEFGCDEFGABCDEFGThiS%^%)!s&aC(mY)TsesTStR%i*ngABCGEThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFGFG"], ["AABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTSetR%i*ngDCEEFGCGEFG"], ["ABFCDAABCCEDDEEFG"], ["ThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGABCA)TsesTStR%ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFGi*ngGEFG"], ["ACABCABFCDABCT%hiThiS%^%ABCDEFG!s&a(mY)Tse%sTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFGCDE"], ["AThiS%^%!s&a(mY)TsesTStR%i*nAABCDEFGABCGEFGBCDABCDG"], ["ThiSS%^%ABCDEFGAABCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABCGEFGT!s&a(mY)TsesTStR%i*ngABCDEFGThiS%^%ThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStABCThiS%^%ABCABFCDABCDCEEFGDThiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngS%^%!s&a(mY)TesTStR%i*ngEFG!s&a(mY)TsesTStR%i*ngDEFGEFG%i*ng"], ["ThiSAAABFCDAABCCDCEEFGCDEFGABCDEFGThiS%^%)!s&a(mY)TsesTStR%i*ngABSABFCDABCThiS%^%!s&a(mY)TsesTStR%i**CnAABCDGABCGEFGT%hiThiS%^%ABCDEFG!s&a(mY)TsesTStR%i*n%!s&a(mY)TesTStR%i*ngDCEEFGCGEFG%^%!s&a(mY)TsesTStR%i*ng"], ["ThThiSS%^%ABCDEFG!s&a(mY)TsesTStR%i*ngiS%^A%ABThiS%^%!s&a(mY)TsesTStR%i*CnAABCDEFGACDEFGEFG"], ["ABCDEFGThiS%^%)!s&a(mY)TsesTThiS%^%!s&a(mY)TemsTStR%i*ngABAFCDABCGEFAmCABCCDEAEBCDEFGStR%i*ng"], ["CACDEFCThiS%^%ABCDEFG!s&a(mY)TsesTStR%%i*ngAG"], ["AABFCDABCGEFG"], ["ThABFCDABCDEFGGEFGiS%^%!%sg"], ["CAThiS%^%ABCDEFABCDEFGG!s&a(mY)TsesTABCDEFGThiS%^%)!s&a(mY)TsesTStABCDEFGEFGBCDEEFG"], ["ThisS%^%!s&a(mY)ABFCDABCDEFGEFGTsesTStRs%i*nAABCDEFGABCGEFG"]], "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n"}
{"task_id": "Mbpp/460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "entry_point": "Extract", "canonical_solution": "\ndef Extract(lst): \n    return [item[0] for item in lst] \n", "base_input": [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [4, 5]]], [[[9, 8, 1], [1, 2]]]], "atol": 0, "plus_input": [[[]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3], [4], [5, 6, 7, 8]]], [[[9], [1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1], [2], [3], [4], [5]]], [[[1], [2, 3], [4], [5, 6], [7], [8, 9]]], [[["a", "b", "c"], [1, 2, 3], [true, false]]], [[[1.5, 2.75, 3.25], ["apple", "banana", "cherry"], [true, false, true]]], [[[[1, 2], [3, 4], [5, 6]], ["cat", "dog"], [null]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]], [[[["a"], [1], [true]], [["b"], [2], [false]], [["c"], [3], [true]]]], [[[[9], [8], [1]], [[1], [2], [3]], [[4], [5], [6]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8], [9]], [[10, 11, 12], [13, 14]]]], [[[[1, 2, 3], [4]], [[5, 6, 7], [8]], [[9, 10], [11, 12]], [[13, 14], [15]]]], [[[["apple", "banana"], {"carrot": "potato"}, 100], [true, false]]], [[[["b", "a"], ["d", "c"], ["e", "f"]], [[1, 2, 3], [4, 5, 6]]]], [[[{"A": [1, 2, 3]}, {"B": [4, 5, 6]}, {"C": [7, 8, 9]}], [[10, 20, 30], [40, 50, 60]]]], [[[["red", "green"], ["blue", "yellow"]], [[100, 200], [300, 400]]]], [[[["lion", "tiger"], ["elephant", "giraffe"]], [[true, false], ["yes", "no"]]]], [[[[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]]]], [[[1], [2], [3], [4], [5], [1]]], [[[["red", "green"], ["blue", "yellow"]], [[200], [300, 400]], [[200], [300, 400]]]], [[[[1, 2, 3], [4]], [[13, 14], [15]]]], [[[[1, 2, 3], [4]], [[13, 14], [], []]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9]]], [[[[1, 2], [3, 4]], [[5, 6]], [[5, 6]], [[9, 10], [11, 12]]]], [[[["a"], [1], [true]], [["b"], [2], [false]], [[3], [true]]]], [[[1, 2, 3], [4], [6, 7, 8], [1, 2, 3]]], [[[[5, 6]], [[5, 6]], [[9, 10], [11, 12]]]], [[[[9], [8], [1]], [[2], [3]], [[4], [5], [6]]]], [[[["a"], [1], [true]], [["b"], [2], [false]], [["c"], [3], [true, true]]]], [[[true, false], [true, false]]], [[[1], [2], [3], [4]]], [[[2.75, 3.25], ["apple", "banana", "cherry"], [2.75, 3.25], [true, false, true]]], [[[2], [3], [4]]], [[[["b"], [2], [false]], [[3], [true]], [["a"], [1], [true]]]], [[[[1, 2, 3], [4]], [[13, 14], [], []], [[13, 14], [], []]]], [[[[1, 2, 3], [4]], [[13, 14]], [[13, 14]]]], [[[["red", "green"], ["blue", "yellow"]], [[200], [300, 400]], [[200], [300, 400]], [[200], [300, 400]]]], [[[true, true, false, false], [true, true, false, false], [true, true, false, false], [true, true, false, false]]], [[[["red", "green"], ["blue", "yellow"]]]], [[[[1, 2, 3], [4]], [[13, 14, 14], [13, 14, 14], [], []], [[13, 14, 14], [13, 14, 14], [], []]]], [[[[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]]]], [[[[1, 2, 3], [4]], [[13, 14], [], [], [13, 14]], [[1, 2, 3], [4]]]], [[[[13, 14]], [[13, 14]]]], [[[[5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5]], [[9, 10], [11, 12]]]], [[[1, 12], [9], [3, 4, 5], [6, 7, 8, 9]]], [[[["a"], [1], [true]], [["b"], [2], [false]], [[3], [true]], [[3], [true]]]], [[[[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]]]], [[[{"A": [1, 2, 3]}, {"B": [4, 5, 6]}, {"C": [7, 8, 9]}], [[10, 20, 30], [40, 50, 60], [40, 50, 60]]]], [[[[1, 2, 3], [4]], [[13, 14, 13], [], [13, 14, 13], []]]], [[[3, 3], [1], [2], [3, 3], [4]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]], [[1, 2], [3, 4]]]], [[[["a"], [1], [true]], [["b"], [2], [false]], [[3], [true]], [[3], [true]], [[3], [true]]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9, 7]]], [[[["red", "green"], ["blue", "yellow"]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]]]], [[[[1, 2, 3], [4, 5, 6], [4, 5, 6]], [[1, 2, 3], [4, 5, 6], [4, 5, 6]], [[7, 8], [9]], [[10, 11, 12], [13, 14]]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9], [1, 12], [1, 12], [1, 12]]], [[[1, 12, 1], [9], [1, 12, 1], [3, 4, 5], [6, 7, 8, 9]]], [[[12], [9], [12], [3, 4, 5], [6, 7, 8, 9, 7]]], [[[[1, 2, 3], [4]]]], [[[["red", "agreen", "green"], ["blue", "yellow"]], [[200, 200], [300, 400], [200, 200], [300, 400]], [["red", "agreen", "green"], ["blue", "yellow"]], [[200, 200], [300, 400], [200, 200], [300, 400]], [[200, 200], [300, 400], [200, 200], [300, 400]]]], [[[1], [2], [4], [4], [5], [1], [1]]], [[[1, 12], [9], [1, 12], [6, 7, 8, 9]]], [[[2], [4]]], [[[[1, 2, 3], [4, 4]], [[5, 6, 7], [8]], [[9, 10], [11, 12]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[[1, 2, 3], [4]], [[13, 14], [13, 14]], [[13, 14], [13, 14]], [[13, 14], [13, 14]]]], [[[[1, 2, 3]], [[13, 14], [], []], [[13, 14], [], []]]], [[[[9], [8], [1]], [[1], [2], [3]], [[4], [5]], [[4], [5]]]], [[[[1, 2, 3], [4]], [[1, 2, 3], [4]]]], [[[[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[9, 10], [11, 12]]]], [[[[2, 1, 2], [2, 1, 2], [3, 4]], [[5, 6], [7, 8]], [[2, 1, 2], [2, 1, 2], [3, 4]], [[9, 10], [11, 12]]]], [[[[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], ["YHSlmRTLE", "elephant"], []], [[], ["YHSlmRTLE", "elephant"], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], ["YHSlmRTLE", "elephant"], []], [[], ["YHSlmRTLE", "elephant"], []], [[], [], []]]]], [[[[1, 2, 3], [4, 4]], [[5, 6, 7], [8]], [[9, 10, 9], [9, 10, 9], [11, 12]], [[9, 10, 9], [9, 10, 9], [11, 12]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[2], [3], [4], [5], [1]]], [[[[1, 2, 3]], [[], []], [[], []], [[], []]]], [[[9], [3, 4, 5], [6, 7, 8, 9]]], [[[["b"], [2], []], [["a"], [1], [true]], [["b"], [2], []], [["c"], [3], [true]]]], [[[[1, 2], [3, 4], [5, 6]], [null]]], [[[true, true, true, false], [true, true, true, false], [true, true, true, false], [true, true, true, false], [true, true, true, false], [true, true, true, false], [true, true, true, false]]], [[[[1, 2], [3, 4]], [[5, 6]], [[5, 6]], [[9, 10], [11, 12], [11, 12]], [[1, 2], [3, 4]]]], [[[27], [3, 2], [3], [4], [5], [3, 2], [27]]], [[[4, 4], [4, 4], [2]]], [[[[3], [true], [true]], [["a"], [1], [true]], [["b"], [2], [false]], [[3], [true], [true]], [[3], [true], [true]], [[3], [true], [true]]]], [[[[1, 2, 3], [4, 4]], [[9, 10], [11, 12]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[1, 12], [9, 9], [9, 9], [6, 7, 8, 9]]], [[["apple", "banana", "cherry"], [1.5, 3.25], [1.5, 3.25], [true, false, true]]], [[[1], [76, 2], [3], [4], [5]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9], [1, 12], [1, 12], [1, 12], [1, 12]]], [[[[1, 2, 3]], [[5, 6, 7], [8]], [[9, 10], [11, 12]], [[13, 14], [15]]]], [[[[9], [8], [1]], [[2], [3]]]], [[[true, true, false], [true, true, false], [true, true, false], [true, true, false], [true, true, false], [true, true, false]]], [[[3, 3], [1], [2], [3, 3], [3, 3]]], [[[[1, 2, 3], [4, 4]], [[5, 6, 7], [8]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[1, 12], [9], [3, 4, 5], [6, 7, 8, 9], [9]]], [[[2], [4], [2]]], [[[1, 12, 12], [9], [1, 12, 12], [3, 4, 5], [6, 7, 8, 9], [1, 12, 12], [1, 12, 12], [1, 12, 12], [1, 12, 12]]], [[[1, 12], [9], [9], [6, 7, 8, 9]]], [[[4, 5, 6], [7, 8, 200]]], [[[1], [2], [4], [5], [1]]], [[[[1, 2], [3, 4], [5, 6]], ["cat", "dog"]]], [[[1], [2], [3], [4], [5], [5]]], [[[["red", "green"], ["blue", "yellow"]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [["red", "green"], ["blue", "yellow"]]]], [[["apple", "banana", "cherry"], [1.5, 3.25, 3.25], [1.5, 3.25, 3.25]]], [[[[], [1], [true]], [["b"], [2], [false]], [[], [1], [true]], [[3], [true]], [[3], [true]], [[3], [true]]]], [[[[13, 14, 13], [false, false], [], [13, 14, 13], []], [[1, 2, 3], [4]], [[13, 14, 13], [false, false], [], [13, 14, 13], []], [[13, 14, 13], [false, false], [], [13, 14, 13], []]]], [[[1], [1], [9], [1], [3, 4, 5], [6, 7, 8, 9, 7]]], [[[1], [2], [3], [4], [5, 5], [5, 5]]], [[[1], [2, 2], [3, 3], [4], [5]]], [[[true, false, false], [true, false, false], [true, false, false], [true, false, false]]], [[[[3], [true, true], [true, true]], [[3], [true, true], [true, true]], [["a"], [1], [true]], [["b"], [2], [false]], [[3], [true, true], [true, true]], [[3], [true, true], [true, true]], [[3], [true, true], [true, true]]]], [[[["b"], [2], []], [["a"], [1], [false]], [["b"], [2], []], [["a"], [1], [false]], [["c"], [3], [true]]]], [[[4], [4], [2], [4]]], [[[[1, 2, 3]], [[]], [[]], [[]], [[1, 2, 3]]]], [[[[1, 2, 3], [4]], [[13, 14, 14], [13, 14, 14], [], []], [[13, 14, 14], [13, 14, 14], [], []], [[1, 2, 3], [4]]]], [[[true, true, false], [true, true, false], [true, true, false], [true, true, false], [true, true, false], [true, true, false], [true, true, false], [true, true, false]]], [[[["b"], [2], []], [["a"], [1], [true]], [["b"], [2], []], [["c"], [3], [true]], [["b"], [2], []]]], [[[[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], ["YHSlmRTLE", "elephant"], []], [[], ["YHSlmRTLE", "elephant"], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], ["YHSlmRTLE", "elephant"], []], [[], ["YHSlmRTLE", "elephant"], []], [[], [], []]]]], [[[[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[9, 10], [11, 12, 12]]]], [[[[9], [8], [1, 1]], [[2], [3], [3]], [[2], [3], [3]], [[5], [6]], [[9], [8], [1, 1]], [[5], [6]]]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(l) > 0 for l in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n"}
{"task_id": "Mbpp/461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n", "entry_point": "upper_ctr", "canonical_solution": "\ndef upper_ctr(str1):\n    return sum(1 for c in str1 if c.isupper())\n", "base_input": [["PYthon"], ["BigData"], ["program"]], "atol": 0, "plus_input": [[""], ["Y"], ["ThiS is A CoMplEx, InpuT! with 12345"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["lowercaseonly"], ["with"], ["ABCADEFGHIJKLMNOPQRSLTUVWXYZ"], ["YY"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZ"], ["ABCDEFGHIJKLMNOPQRSTUVWX"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXYZ"], ["ABCDEFGHIJIKLMNOPQRSTQUVWX"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXY"], ["ABCDEFGHIJKLMNOPQRSTUVWXABCADEFGHIJKLMNOPQRSLTUVWXYZ"], ["ABCDEFGHIJIKLMNPQRSTQUVWX"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRSLRTUVWXY"], ["CoMplE"], ["lowercaaseoly"], ["ABCADEFGKLMNOPQRSLTUVWXYZ"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXYZ"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXYZY"], ["lowercaseonABCADEFGHIJKLMNOPQRSLRTUVWXYly"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTFUVWXYZY"], ["ThiS is A CoMpABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRSLRTUVWXYlEx, InpuT! with 12345"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMVWXYZVWXYZ"], ["ABCDEFGHIJPINOPQRSTQUVWX"], ["ABCDEFGHIJIKLMNBPQRSTQUVWX"], ["ABCADEFGHIJKJLMNOPQRSLRTUVWXY"], ["A"], ["CoMpABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRSLRTUVWXYlEx,"], ["ABCDEHFGHIJIKLMNBPQRSTJQUVWX"], ["oPGOC"], ["lowerInpuT!caseonly"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUVWXYZ"], ["InpuT!"], ["ABCDEFGHIJKLMNOPQRSTUVWXABCADEFGGHIJKLMNOPQRSLTUVWXYZ"], ["ABCDEFGHIJPINOPUVWX"], ["ABCADEFGHIJKLMNOPQRSLTUMABCADEFGHIJKLMNOPQRSLRTUVWXYZVWXYZABCADEFGKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMVWXYZVWXYZ"], ["ABCDEFGHIJKLMNOPQRSTUVWXABCADEFGHIJKLMNOPQRSLInpuT!TUVWXYZ"], ["AEBCDEFWX"], ["ABCADEFGHIJKLMNOPQRSlowercaaseolyLTUMVWXYZ"], ["ABCDEFGHIJIKLMNOPQRSTQKUVWX"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXY"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKwithLMNOPQRFSLRTUVUWXY"], ["ThiS"], ["ABCADEFGHIJKLMVWXYZ"], ["ThiS is A ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXYZCoMplEx, InpuT! with 12345"], ["ABCDEFGHIJIRSTQUVWX"], ["S"], ["ABCADEFGHIJKLlowerInpuT!caseonlyMNOPQRSLRTUVWXABCDEFGHIJKLMNOPQRSTUVWXABCADEFGHIJKLMNOPQRSLInpuT!TUVWXYZYZABCADEFGHIJKwithLMNOPQRFSLRTUVUWXY"], ["TPSUQjATaE"], ["CoMpABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXYZYlE"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXABCDEFGHIJPINOPUVWX"], ["ABCADEFGHIJKLeMNOPQRSlowercaaseolyABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUVWXYZLTUMVWXYZ"], ["CoMplEx,"], ["CoMpABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKwithLMNOPQRFSLRTUVUWXYLTUVWXYZYlE"], ["ThiS is A CoMplEx,M InpuT! with 12345"], ["ABCADEFGHIJKLeMNOPQRSlowercaaseolyABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUVWXYSZLTUMVWXYZ"], ["WBvLYx"], ["ABCDEFQGHIJIKLMNPQRSTQUVWX"], ["ABCEDEFGHIJPINOPQRSTQUVWX"], ["CoMplECx,"], ["CoMpABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSABCADABCADEFGHIJKLeMNOPQRSlowercaaseolyABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUVWXYSZLTUMVWXYZEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKwithLMNOPQRFSLRTUVUWXYLTUVWXYZYlE"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMABCADEFGHIJKLMNOPQRSLRTUVWXYZVWXYZABCADEFGKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMVWXYZVWXYZVWXYZ"], ["ABCEDEPFGHIJPINOPQRSTQUVWX"], ["lowlABCDEFGHIJIKLMNOPQRSTQUVWX"], ["ABCADEFGHIJKLMNOPQRSLRABCADEFGHIJKLMNOPQRSLTUVWXYZTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXABCDEFQGHIJIKLMNPQRSTQUVWXY"], ["ABCADEFGHIJKLMNOPQRSLTABCDEFGHIJPINOPQRSTQUVWXUMVWXYZ"], ["kVA"], ["ABCDEFGHIJKLMNOPQRSOPQRSLInpuT!TUVWXYZ"], ["CoZMpABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXYZYlE"], ["YABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXABCDEFGHIJPINOPUVWXY"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUVWXXYZ"], ["ABCADEFGHIJKLeMNOPQRSlowercaaseolyABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSLTUVWXYZLTUMVWXYZ"], ["kABCADEFGHIJKLMVWXYZVA"], ["ABCDECoMplEx,IKLMNOPQRSTQKUVWX"], ["ABCADEFGHIJKJLMNOPQRSLRTUMVWXY"], ["lowerInABCADEFGHIJKLMVWXYZpuT!caseonly"], ["ABCADEFGHIJKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMVWXYZVWXYZMVWXYZABCADEFGKLMNOPQRSLTUVWXYZY"], ["ABCADEFGHIJKJLMNOPQRSLYABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXABCDEFGHIJPINOPUVWXYRTUVWXY"], ["ACBCADEFGHIJKJLMNOPQRSLRTUVWXY"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUABCADEFGHIJKLMABCDEFGHIJKLMNOPQRSOPQRSLInpuT!TUVWXYZ"], ["TjPSUQjATaE"], ["oPGOOC"], ["ThiSABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXABCDEFGHIJPINOPUVWX"], ["ABCADEFGHIJKLMNOPQRSLTUABCADEFTGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUABCADEFGHIJKLMNOPQRSLTUMVWXYZVWXYZMVWXYZABCADEFGKLMNOPQRSLTUVWXYZY"], ["CoMplEx,M"], ["CoMpABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSABCADABCADEFGHIJKLeMNOPQRSlowercaaseolyABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOPQRSTUVWXYZGKLMNOPQRSLTUVWXYSZLTUMVWXYZEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKwithLMNOPQRFSLRTUVUWWXYLTUVWXYZYlE"], ["CoABCADEFGHIJKLMNOPQRSLRTUVWXYMplE"], ["uSkzkFbN"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRRSLInpuT!TUVWXYZ"], ["ABCADEFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWY"], ["uSSkzkFbzN"], ["ABCADEFGHIJKLlowerInpuT!caseonlyMNOPQRSLRTUVWXABCDEFGHIJKZYZABCADEFGHIJKwithLMNOPQRFSLRTUVUWXY"], ["lowerInABCADEFJGHIJKLMVWXYZpuT!caseonly"], ["MABCADEFGHIJKLMLNOPQRSLRTUVWXYZ"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXuSSkzkFbzNYZ"], ["TPSUQjATCoMpABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFGKLMNOPQRSLTUVWXYZYlEE"], ["lowlABCDEFGHIJIKWLMNOPQRSTQUVWX"], ["lowercaseonlowlABCDEFGHIJIKLMNOPQRSTQUVWXly"], ["ABCADEFGHIJKLMNOPQRSLTUMVWXYZABCADEFABCDEFGHIJKLMNOTjPSUQjATaEPQRSTUVWXYZGKLMNOPQRSLTUVWXXYZ"], ["ThiSINOPQRSTQUVWXBCDEFGHIJPINOPUVWX"], ["ABCADEFGHIJKLMNOPQRSLRABCADEFGHIJKLMNOPQRSLTUVWXYZTUVWXYZABCADEFGHIJKLMNOPQRFSLRTUVUWXABCDEFQGHIJIKLMXY"], ["lowercaseonABCDEFGHIJKLMNOPQRSTUVWXYZly"], ["ThiS is A CoMpABCADERFGHIJKLMNOPQRSLRTUVWXYZABCADEFGHIJKLMNOPQRSLRTUVWXYlEx, InpuT! with 12345"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert upper_ctr('PYthon') == 2\nassert upper_ctr('BigData') == 2\nassert upper_ctr('program') == 0\n"}
{"task_id": "Mbpp/462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "entry_point": "combinations_list", "canonical_solution": "\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\n", "base_input": [[["orange", "red", "green", "blue"]], [["red", "green", "blue", "white", "black", "orange"]], [["red", "green", "black", "orange"]]], "atol": 0, "plus_input": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]], [["red", "green", "blue", "red", "white", "black", "green"]], [["apple", "banana", "orange", "apple", "banana", "kiwi"]], [["a", "b", "a", "b", "c"]], [["apple", "banana", "red", "apple", "banana"]], [["apple", "banana", "orange", "apple", "kiwi"]], [["banana", "red", "apple", "banana"]], [["apple", "red", "apple", "banana"]], [["bananabanana", "banana", "red", "apple", "apredple", "banana"]], [["apple", "banana", "orange", "appple", "banana", "kiwi"]], [["banana", "apple", "banana"]], [["apple", "banana", "orange", "apple", "kiwi", "apple"]], [["appple", "bna", "orange", "apple", "kiwi"]], [["a", "b", "a", "b", "c", "b"]], [["apple", "banana", "red", "apple", "banana", "banana"]], [["a", "bblack", "c", "d", "e", "f", "g", "h", "i", "j"]], [["a", "b", "a", "bananab", "c"]], [["red", "green", "blue", "red", "wthite", "greenwthite", "black", "green", "green"]], [["nbanana", "apple", "banana", "banana", "banana"]], [["red", "green", "blue", "red", "wthite", "greenwthite", "black", "green", "green", "green"]], [["apple", "orange", "appple", "banana", "kiwi"]], [["red", "green", "blue", "red", "white", "black", "bna", "green"]], [["apple", "banana", "red", "banana"]], [["green", "blue", "red", "wthite", "greenwthite", "black", "green", "green", "green"]], [["banana", "apple", "banana", "banana"]], [["apple", "appple", "banana", "kiwi"]], [["a", "b", "a", "b", "d", "c"]], [["happle", "banana", "abpple"]], [["a", "b", "a", "bananab", "c", "a", "b"]], [["apple", "i", "orange", "apple", "kiwi"]], [["banana", "red", "banana"]], [["orangge", "apple", "banana", "orange", "apple", "kiwi", "apple"]], [["a", "bblack", "cc", "d", "e", "f", "gg", "h", "i", "j"]], [["apple", "orange", "banana", "kiwi"]], [["a", "b", "a", "happlnbanana", "b", "c"]], [["orangge", "apple", "banana", "orange", "aepple", "kiwi", "apple"]], [["apple", "orange", "e", "kiwi", "ore"]], [["apple", "orange", "iwi", "kiwi"]], [["apple", "applle", "red", "apple", "banana"]], [["appple", "bna", "orange", "apple", "kiwi", "orange"]], [["a", "aepplec", "b", "a", "b", "d", "c"]], [["a", "bblack", "cc", "d", "e", "f", "gg", "h", "i", "happle", "j"]], [["nbanana", "apple", "banana", "bna", "banana", "banana"]], [["appple", "bna", "orange", "apple", "kiwi", "kiwi"]], [["nbanana", "apple", "banana", "bna", "banana", "banana", "apple"]], [["red", "green", "blue", "red", "white", "black", "green", "red"]], [["apple", "onge", "e", "kiwi", "ore"]], [["nbanana", "apple", "whitenbanana", "banana", "bna", "banana", "banana", "apple"]], [["apple", "orange", "iwi", "kiwi", "iwi"]], [["orangge", "apple", "banana", "orange", "aepple", "apple"]], [["banand", "apple", "banana", "red", "bana"]], [["apple", "i", "orange", "orang", "apple", "kiwi"]], [["orange", "iwi", "iiwi", "kiwi"]], [["apple", "orange", "e", "kiwi", "ore", "kiwi"]], [["nbanana", "apredple", "whitenbanana", "banana", "bna", "banana", "banana", "apple"]], [["apple", "e", "whitenbanana", "ore"]], [["apple", "orangbanana", "orange", "appple", "banana", "kiwi"]], [["apple", "onge", "e", "kiwi", "ore", "ore"]], [["banand", "apple", "banana", "bana"]], [["apple", "applle", "orang", "red", "apple", "banana", "orang"]], [["apple", "banana", "red", "apporele", "banana"]], [["red", "green", "blue", "red", "wthite", "greenwthite", "bananab", "g", "black", "green", "green"]], [["orange", "iwi", "iiwi", "bblack"]], [["orangge", "apple", "banana", "orange", "orange", "apple", "kiwi", "apple", "kiwi"]], [["apple", "d", "orange", "iwi", "kiwi", "iwi", "orange", "d"]], [["nbanana", "apple", "whitenbanana", "banana", "bna", "banana", "bananiiwia", "apple"]], [["nbanana", "banana", "bna", "banana", "banana"]], [["apple", "aepplle", "orang", "red", "apple", "banana", "apple"]], [["applle", "apple", "applle", "orang", "red", "apple", "banana", "orang", "applle"]], [["appple", "bna", "orange", "apple", "kiwi", "onge", "kiwi", "bna"]], [["apple", "banana", "banana"]], [["nbanana", "apple", "whitenbanana", "banana", "bna", "banana", "bananiiwia", "apple", "banana"]], [["a", "bblack", "cc", "d", "e", "gg", "h", "happle", "j"]], [["apple", "orang", "red", "apple", "a", "apple"]], [["red", "green", "blue", "red", "wthite", "greenwthite", "g", "black", "green", "green"]], [["nbanana", "apple", "banaongena", "banana", "bn", "banana", "banana", "apple", "banaongena"]], [["orange", "iwwi", "bn", "kiwi"]], [["apple", "orang", "red", "apple", "a", "apple", "apple"]], [["oree", "e", "whitenbanana", "ore", "oree"]], [["a", "bb", "a", "happlnbanana", "b", "c"]], [["apple", "orange", "iwi", "kiwi", "applee", "iwi"]], [["apple", "applle", "orang", "red", "apple", "banana"]], [["apple", "banana", "orange", "aepple", "appple", "banana", "kiwi"]], [["apple", "orange", "e", "kiwi", "ore", "e"]], [["apple", "orang", "red", "apple", "bna", "a", "apple"]], [["bn", "b", "a", "orehapplnbanana", "c"]], [["red", "green", "blue", "red", "wthite", "greenwthite", "green", "green"]], [["apple", "f", "banana", "red", "banana", "banana"]], [["aplple", "banana", "banana"]], [["orangge", "apple", "banana", "orange", "aepple", "kiwi", "greenapple", "orange"]], [["nbanana", "apple", "bnanana", "banana", "banana"]], [["nbanana", "apple", "baanana", "banana"]], [["banana", "apple", "bananabanana", "banana"]], [["apple", "d", "orange", "iwbanaongenai", "iwi", "kiwi", "iwi", "orange", "d"]], [["nbanana", "apredple", "whitenbanana", "whitenbananaa", "banana", "bna", "banana", "banana", "apple"]], [["apple", "i", "orange", "e", "kiwi", "ore"]], [["apple", "banana", "red", "baananabanana", "apple", "banana"]], [["nbanaana", "apple", "banana", "bnna", "banana", "banana"]], [["apple", "applle", "red", "apple", "aapplle", "banana"]], [["aplple"]], [["red", "green", "blue", "red", "white", "black"]], [["appple", "bna", "orange", "apple", "kiwi", "aporele", "kiwi"]], [["orange", "bblack", "bn", "kiwi"]], [["apple", "onge", "e", "kiwi", "one", "ore", "ore", "onge"]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n"}
{"task_id": "Mbpp/463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "entry_point": "max_subarray_product", "canonical_solution": "\ndef max_subarray_product(arr):\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n", "base_input": [[[1, -2, -3, 0, 7, -8, -2]], [[6, -3, -10, 0, 2]], [[-2, -40, 0, -2, -3]]], "atol": 0, "plus_input": [[[2, 3, 4, 5, 6]], [[-2, 4, -6, 8, 10, -12, 14, -16]], [[2, 4, 6, 8, 10]], [[-5, -2, -8, -9, -6, -4, -3]], [[-5, -10, -2, -8, -4]], [[-5, -2, -8, -9, -6, -4, -3, -8]], [[2, 4, 6, 8, 10, 6]], [[-10, -2, -8, -4]], [[-5, -10, -2, -8, 5, -4]], [[-2, -2, 4, -6, 8, 10, -12, -16, 8]], [[2, 4, 5, -10]], [[2, 6, 10]], [[-1, -8, -9, -6, -4, -3, -8]], [[-2, -2, 6, -6, 10, -12, -16, 8, 8]], [[-5, -2, -8, -9, -3]], [[-5, -10, -2, -8, 5, -1, -4, -5, -8]], [[-2, -5, -10, -2, -8, 5, -1, -4, -5, -8, -8, -5]], [[-2, -2, -17, 4, -6, 8, 10, -12, -16, 8, -12]], [[-2, -5, -10, -8, 5, -1, -4, -5, -8, -8, -5, -4]], [[-5, -1, -8, -9, -6, -4, -3, -8]], [[-10, -2, -8, 8, -4]], [[-5, -10, -2, -8, 5, -4, 5]], [[-1, -8, -9, -6, -4, -3, -8, -3]], [[-6, -1, -8, -9, -6, -4, -3, -8]], [[-5, -1, -8, -9, -4, -3, -8, -8]], [[-2, -5, -10, -2, -8, 5, -1, -4, -5, -8, -8, -5, -2]], [[2, 3, 4, 5, 6, 4]], [[-5, -10, -2, -8, 5]], [[-2, -1, -2, 4, -6, 8, 10, -12, -16, 8]], [[-10, -2, 8, -4]], [[-2, 4, 8, 10, -12, 6, 14, -16]], [[-2, -2, -6, 8, 10, -12, -16, 8, -6, -2, 10]], [[2, -10, 3, 4, 5, 6, -16]], [[-10, -2, -1, -8, 8, -4]], [[10, -2, 6, -8, 5, -4]], [[-2, -5, -10, -2, -8, 5, -1, -3, -4, -5, -8, -8, -5]], [[2, -10, 2, 4, 5, 6, -16, 5]], [[-5, -2, -8, -9, -6, -8]], [[-10, -2, -2, -8, 8, -4]], [[4, 2, 3, 4, 5, 6]], [[-5, -10, -3, -8, -4]], [[-5, -11, -10, -10, -2, -8, -4]], [[10, -2, 6, -8, 4, -4]], [[-6, -10, -2, 5, -4, 5]], [[-1, -8, -9, -6, -4, -12, 4, -8]], [[-2, -10, -2, -8, 5, -1, -3, -4, -5, -8, -8, -5]], [[-1, -8, -8, -9, -6, -4, -3, -8, -3, -9]], [[2, -8, 5, -10]], [[-2, -5, -10, -8, -1, -4, -5, -8, -8, -5, -4]], [[-11, 2, -8, 5, -10]], [[2, -10, 2, 4, 5, 6, -16, 5, 5]], [[-2, -5, -10, -2, -8, 5, -1, -4, -5, -5, -8]], [[-2, 4, -6, 8, 10, -12, 14, -16, -16]], [[-9, -2, -5, -10, -2, -8, 5, -10, -4, -5, -5, -8, -5]], [[-5, -10, -8, 6]], [[10, 6, -2, 6, -8, 4, -2, -2]], [[2, 7, -10, 2, 6, -16, 5]], [[-5, -2, -8, -9, -6, -4]], [[2, -16, 3, 4, 5, 6, 4, 4]], [[-1, -8, -9, -11, -6, -4, -12, 4, -8]], [[5, 2, 4, 5, 8, 10]], [[-2, -2, -6, 8, 10, -12, -16, -12, 8, -6, -2, 10]], [[2, 5, -10]], [[-5, -10, -3, -8, -10, -4]], [[-5, -11, -10, -2, -8, -4]], [[2, 3, -16, 4, 5, -12]], [[-6, -10, -2, 5, -4, 5, 5]], [[-5, -8, -9, -6]], [[-2, -2, 4, -6, 8, 10, -12, -13, -16, 8, -6]], [[-10, 2, 4, 5, 8, 10, 8]], [[-2, -5, -5, -2, 5, -1, -4, -5, -8, -8, -5, -2]], [[-5, -11, -10, -10, -2, -8, -4, -11]], [[10, 6, -2, 6, -8, 10, 4, -2, -2]], [[-2, -2, -11, 6, -6, 10, -12, -16, 8, 8]], [[-3, -9, -2, -5, -10, -2, -8, 5, -10, -4, -5, -5, -8, -5, -2]], [[-6, -1, -8, -9, -6, -4, -3, -8, -8, -6]], [[-8, 10, -2, 6, -8, 4, -4]], [[-2, 4, -4, -6, 8, 10, -12, 13, -16]], [[-8, 10, -2, 13, -8, 4, -4]], [[-5, -8, -9]], [[-10, -2, -8, -10]], [[-2, -4, -10, -2, -8, 5, -1, -4, -5, -8, -8, -5, -2, -10]], [[-2, -2, -6, 8, 10, -12, 8, -11, 8, -6, -2, 10]], [[-5, -8, -10, -4]], [[-10, -2, -1, -8, 8, -4, -10]], [[-2, 4, -6, 8, 10, -12, 14, -16, 10]], [[-1, -8, -9, -6, -2, -4, -3, -8, -8]], [[-2, -4, -10, -2, -8, 5, -1, -4, -5, -8, -8, -5, -2, -10, -10]], [[-2, -5, -2, 4, -6, 8, 10, -12, -16, 8]], [[2, 4, 5, -10, -10]], [[-6, -1, -8, -9, -6, -4, -3, -13, -8, -6]], [[-2, -5, -5, -2, -1, -4, -5, -8, -8, -5, -6, -2]], [[-2, -5, -10, -2, -8, 5, -1, -4, -5, -8, -8, -5, -10]], [[-5, -11, -10, -10, -17, -2, -8, -4]], [[-10, 8, -4]], [[2, 4, 5, -10, 5]], [[-1, -8, -8, -9, -6, 5, -3, -8, -3, -9]], [[-2, -1, -6, 8, 10, -12, -16, -12, 8, -6, -2, 10]], [[2, 5, -10, 5]], [[2, -10, -8, 3, 4, 5, 6, -16]], [[2, 4, -10]], [[-2, -5, -10, -2, -8, 5, -1, -4, -5, -8, -8, -5, -2, -5]], [[-5, -2, -8, -9, -6, 10, -3, -8]], [[-1, -8, -9, -6, 3, -4, -12, 4]], [[-2, -2, -3, -6, 8, -12, -16, 8, -6, -2, 10, -2]]], "contract": "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n"}
{"task_id": "Mbpp/465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n", "entry_point": "drop_empty", "canonical_solution": "\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n", "base_input": [[{"c1": "Red", "c2": "Green", "c3": null}], [{"c1": "Red", "c2": null, "c3": null}], [{"c1": null, "c2": "Green", "c3": null}]], "atol": 0, "plus_input": [[{}], [{"a": {"b": null, "c": "Yellow"}, "d": {}, "e": {"f": null, "g": "Blue"}}], [{"a": {"b": {"c": null, "d": "Yellow"}, "e": {"f": null, "g": "Blue"}}}], [{"c1": null, "c2": null, "c3": null}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}}, "h": {}, "i": {"j": null}}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null}, "g": {}}}, "h": {}, "i": {}}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}, "h": {"i": "Green"}}}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "i": {"j": {}}, "k": {}, "l": {"m": {"n": {}}}}], [{"1": "", "2": "Red", "3": "Green"}], [{"1": null, "2": null, "3": null}], [{"17.686448927614265": -31.89320380156768, "-87.7768321294155": true, "30.260824595910776": "d"}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": 55.36416869609593}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "i": {"j": {}}, "k": {}, "l": {"m": {"n": {}}}, "aa": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}}], [{"c2": null, "c3": null, "f": null}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null}, "g": {}}}, "h": {}, "i": {}, "hhrEwoDM": {"m": -60.456823042679254, "Yellow": -34.93490266876971, "RCrC": -72.23627753178832, "rK": 55.36416869609593, "VjH": 19.41340571089887, "j": 55.36416869609593, "SA": 99.70252907303427}}], [{"2": null, "3": null}], [{"90.14765271967525": 93, "-77.0135817210946": 33.50640213812878, "-25.18209592843803": -87.7768321294155, "16.387156104276542": 3, "-60.456823042679254": -22.96522880609406, "30.260824595910776": 1.7344311461450843}], [{"a": {"b": null, "c": "Yellow"}, "h": {}, "i": {"j": null, "rK": null}, "l": {"j": null, "rK": null}}], [{"1": null, "2": null}], [{"a": {"b": null, "c": "Yellow"}, "d": {}, "h": {}, "i": {}, "SA": {"45.78890699745773": -34.93490266876971}}], [{"a": {"b": null, "c": "Yellow"}, "d": {}, "e": {"99.86559157367921": false, "-22.96522880609406": -64, "-60.456823042679254": 16.387156104276542, "-52.05849999180157": true, "90.14765271967525": 1, "-95.22697096492752": true, "-96.75250148298278": -34.93490266876971}}], [{"1": "", "2": "Red", "3": "Yellow"}], [{"1": "", "2": "Red", "3": "hGreen"}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": 55.36416869609593, "ff": 18.503047085984324}], [{"a": {"b": null, "c": "Yellow"}, "e": {"f": null, "g": "Blue"}}], [{"1": "", "2": "Red"}], [{"17.686448927614265": -31.89320380156768, "-87.7768321294155": true}], [{"i": {"j": {}}, "k": {}}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}}, "h": {"a": "f", "nu": "f", "c2": "h", "Jfmbh": "i", "EnwqMPlZQ": "MRIkZeajQj", "HgCth": "g"}, "i": {"j": null}}], [{"a": {"b": null, "c": "Yellow"}, "h": {}, "i": {"j": null}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": 55.36416869609593, "c2": 99.70252907303427}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null}}, "hrEwoDM": {"d": null, "e": {"f": null}}}, "h": {}, "i": {}, "hhrEwoDM": {"m": -60.456823042679254, "Yellow": -34.93490266876971, "RCrC": -72.23627753178832, "rK": 55.36416869609593, "VjH": 19.41340571089887, "j": 55.36416869609593, "SA": 99.70252907303427}}], [{"a": {"b": null, "c": "Yellow", "bc": null}, "d": {"e": {"f": null, "g": "Blue"}}, "h": {}, "i": {"j": null}, "nu": {"b": null, "c": "Yellow", "bc": null}}], [{"1": "", "2": "h"}], [{"1": "GGreen", "2": "h"}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "i": {"j": {}}, "k": {}, "l": {"m": {}, "Yellow": {}}, "aa": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "": {"m": {}, "Yellow": {}}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "c": 90.14765271967525, "b": 55.36416869609593}], [{"1": "", "2": "RedSA", "3": "hGreen"}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}}, "h": {"a": "f", "nu": "f", "c2": "h", "Jfmbh": "i", "EnwqMPlZQ": "MRIkZeajQj"}, "i": {"HgCthj": null}, "": {"HgCthj": null}, "RCrC": {"a": "f", "nu": "f", "c2": "h", "Jfmbh": "i", "EnwqMPlZQ": "MRIkZeajQj"}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": 55.36416869609593, "c2": 99.70252907303427, "cc": -36.01858015353834}], [{"90.14765271967525": 93, "-77.0135817210946": 33.50640213812878, "-25.18209592843803": -87.7768321294155, "-60.456823042679254": -22.96522880609406, "30.260824595910776": 1.7344311461450843}], [{"2": null, "93": null}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "c": 90.14765271967525, "b": 55.36416869609593, "aaf": -52.05849999180157}], [{"1": "", "2": "h", "93": "hrEwoDM"}], [{"1": "", "false": "i"}], [{"d": {}, "h": {}, "i": {}, "SA": {"45.78890699745773": -34.93490266876971}, "aa": {"49": 41.28336596794483, "93": -52.05849999180157, "75": -96.75250148298278, "41": 41.33835689978693, "53": -82.44134692437908, "86": 76.23716699017396, "2": 97.48831206775043, "-64": -32.35330674934775}}], [{"c2": null, "c3": null, "f": null, "b": null}], [{"a": {"c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "i": {"j": {}}, "k": {}, "l": {"m": {"n": {}}}}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}, "": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}}, "i": {"j": {}}, "k": {}, "aa": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}, "": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}}, "": {"m": {}, "Yellow": {}}}], [{"1": ""}], [{"17.686448927614265": -31.89320380156768, "-87.7768321294155": true, "30.260824595910776": "d", "41.33835689978693": false}], [{"k": {}}], [{"1": "GGreen", "75": "GHgCthGreen"}], [{"1": "", "2": "Red", "3": "g"}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}, "": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}}, "i": {"j": {}}, "k": {}, "aa": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}, "": {"d": null, "e": {"f": null, "g": {}}, "h": {"68": -77, "96": 74, "93": 49, "62": -41, "49": -62, "-35": -88}}}, "": {"m": {}, "Yellow": {"SA": -91, "aXDUKdv": -77.05024169578405, "GGreen": [-79.68074716966606, -4.346337905877348]}}, "Yellowa": {"91": 52.89970337281363, "-32": -46.12121092013499, "76": -48.835469622222405}, "kk": {"m": {}, "Yellow": {"SA": -91, "aXDUKdv": -77.05024169578405, "GGreen": [-79.68074716966606, -4.346337905877348]}}}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}, "h": {"i": "Green", "SA": "GGreen"}}, "EnwqMPlZQ": {"b": null, "c": "Yellow"}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "b": 55.36416869609593}], [{"a": {"b": null, "c": "Yellow"}, "d": {}, "e": {"99.86559157367921": false, "-22.96522880609406": -64, "-60.456823042679254": 16.387156104276542, "-52.05849999180157": true, "90.14765271967525": 1, "-96.75250148298278": -34.93490266876971}}], [{"e": {"f": null, "g": "Blue"}}], [{"17.686448927614265": -31.89320380156768, "-87.7768321294155": true, "41.33835689978693": false}], [{"d": {}, "h": {}, "i": {}, "SA": {"45.78890699745773": -34.93490266876971}, "aa": {"49": 41.28336596794483, "93": -52.05849999180157, "75": -96.75250148298278, "41": 41.33835689978693, "53": -82.44134692437908, "86": 76.23716699017396, "2": 97.72100445310907, "-64": -32.35330674934775}, "Yellowa": {"49": 41.28336596794483, "93": -52.05849999180157, "75": -96.75250148298278, "41": 41.33835689978693, "53": -82.44134692437908, "86": 76.23716699017396, "2": 97.72100445310907, "-64": -32.35330674934775}}], [{"1": "", "false": "i", "93": "f"}], [{"1": "", "3": "hGrheen"}], [{"a": {"b": {"c": null, "d": "VjH", "": null}, "e": {"f": null, "g": "Blue"}, "m": {"c": null, "d": "VjH", "": null}}, "am": {"b": {"c": null, "d": "VjH", "": null}, "e": {"f": null, "g": "Blue"}, "m": {"c": null, "d": "VjH", "": null}}, "aa": {"b": {"c": null, "d": "VjH", "": null}, "e": {"f": null, "g": "Blue"}, "m": {"c": null, "d": "VjH", "": null}}}], [{"17.686448927614265": -31.89320380156768, "-87.7768321294155": true, "41.33835689978693": false, "40.83179688833383": true}], [{"a": {}}], [{"17.686448927614265": 18.437081129707764, "-87.7768321294155": true, "30.260824595910776": "d", "41.33835689978693": false}], [{"23": true, "73": "hGrheen", "-88": 7, "75": 67, "90": false, "82": false, "-67": 83.95793304873831, "74": [-38.86707295610068, -9.74026238856878, -67.96604233483899, 15.573403443459924, 1.7344311461450843, -56.6039065174891, -96.75250148298278, 16.387156104276542, -9.292502161579932]}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "c": 90.14765271967525, "aaf": -52.05849999180157}], [{"1": "GGreen", "75": "GHgCthGreen", "2": "ff"}], [{"a": {"b": null, "c": "Yellow", "aXDUKdv": null}, "h": {}, "i": {"j": null, "rK": null}, "l": {"j": null, "rK": null}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": 55.36416869609593, "ff": 18.503047085984324, "bEnwqMPlZQ": 99.70252907303427}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "i": {"j": {}, "jYellow": {"aaf": false, "Yellow": true, "SA": false, "uXFZhOyMa": false, "uLzE": false}}, "k": {}, "l": {"m": {"n": {}}}, "aa": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "RCrC": {"j": {}, "jYellow": {"aaf": false, "Yellow": true, "SA": false, "uXFZhOyMa": false, "uLzE": false}}}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"g": "Blue"}, "ee": {"g": "Blue"}}, "h": {}, "akk": {"e": {"g": "Blue"}, "ee": {"g": "Blue"}}}], [{"i": {"j": null, "rK": null}, "l": {"j": null, "rK": null}}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null}}, "hrEwoDM": {"d": null, "e": {"f": null}}}, "h": {}, "i": {}, "hhrEwoDM": {"m": -60.456823042679254, "Yellow": -34.93490266876971, "RCrC": -72.23627753178832, "rK": 55.36416869609593, "VjH": 19.41340571089887, "j": 55.36416869609593, "SA": 99.70252907303427, "SAA": -36.01858015353834}}], [{"k": {"-54": "Zchnevk", "-35": "oRY", "79": "hhrEwoDM", "23": "l", "-91": "wJklFUi", "80": "bEnwqMPlZQ", "48": "EcPr", "-67": "e"}, "": {"-54": "Zchnevk", "-35": "oRY", "79": "hhrEwoDM", "23": "l", "-91": "wJklFUi", "80": "bEnwqMPlZQ", "48": "EcPr", "-67": "e"}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": -9.292502161579932, "hrEjYellowwoDM": -9.292502161579932}], [{"a": {"b": null, "c": "Yellow", "aXDUKdv": null, "aXnDUKdv": "YYellow"}, "h": {"HgCthj": "suhO", "Yellow": "hrEjYellowwoDM", "btLv": "hSq", "FFKZcpb": "ff"}, "i": {"j": null, "rK": null}, "l": {"j": null, "rK": null}}], [{"i": {"j": {}, "k": {"76.23716699017396": -97, "-24.977096289309728": 48, "33.37253964609198": false, "90.14765271967525": 2, "-61.43629796204828": -45, "-26.555661733934684": 2, "20.33515388355309": 62, "-30.045372628236436": 49, "-32.35330674934775": -41}}, "k": {}, "l": {"m": {"n": {}}}}], [{"1": "", "2": "Red", "3": "hGreen", "53": "uLzE", "41": "aa"}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "b": 55.36416869609593, "bb": 18.03470163259701}], [{"-77.0135817210946": 33.50640213812878, "-25.18209592843803": -87.7768321294155, "16.387156104276542": 3, "-60.456823042679254": -22.96522880609406, "30.260824595910776": 1.7344311461450843, "-79.68074716966606": 91}], [{"1": "GGreen", "2": "suhOGGreen"}], [{"1": "GGreen"}], [{"1": "hrEwoDM"}], [{"Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "b": 55.36416869609593, "bb": 18.03470163259701}], [{"a": {"false": false}}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}}, "i": {"HgCthj": null}, "": {"HgCthj": null}, "RCrC": {"a": "f", "nu": "f", "c2": "h", "Jfmbh": "i", "EnwqMPlZQ": "MRIkZeajQj"}}], [{"k": {"-54": "SA", "-35": "oRY", "79": "hhrEwoDM", "23": "l", "-91": "wJklFUi", "80": "bEnwqMPlZQ", "48": "EcPr", "-67": "e"}, "bEnwqMPlZQ": {"-54": "SA", "-35": "oRY", "79": "hhrEwoDM", "23": "l", "-91": "wJklFUi", "80": "bEnwqMPlZQ", "48": "EcPr", "-67": "e"}}], [{"a": {"b": null, "c": "Yellow"}, "d": {"e": {"f": null, "g": "Blue"}, "h": {"i": "Green", "SA": "GGreen"}}, "EnwqMPlZQ": {"b": null, "c": "Yellow"}, "EnwqMhrEjYellowwoDMPlZQ": {"b": null, "c": "Yellow"}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "f": 22.06967982921361, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": 55.36416869609593}], [{"1": "hGrheen", "2": "Red"}], [{"1": "jYellow", "2": "Red"}], [{"d": {}, "h": {}, "i": {}, "SA": {"45.78890699745773": -34.93490266876971}, "aa": {"49": 41.28336596794483, "93": -52.05849999180157, "75": -96.75250148298278, "41": 41.33835689978693, "53": -82.44134692437908, "86": 76.23716699017396, "2": 97.72100445310907, "-64": -32.35330674934775}, "Yellowa": {"49": 41.28336596794483, "93": -52.05849999180157, "75": -96.75250148298278, "41": 41.33835689978693, "53": -82.44134692437908, "86": 76.23716699017396, "2": 97.72100445310907, "-64": -32.35330674934775}, "nu": {"-20": -30, "79": false, "-97": true, "-4": -32, "-35": false}}], [{"k": 17.686448927614265, "Red": 18.437081129707764, "c": 90.14765271967525}], [{"90.14765271967525": 93, "-77.0135817210946": 33.50640213812878, "-25.18209592843803": -87.7768321294155, "-60.456823042679254": -22.96522880609406, "30.260824595910776": 1.7344311461450843, "99.70252907303427": 93}], [{"c2": 16.387156104276542}], [{"d": {"e": {"f": null, "g": "Blue"}, "h": {"i": "Green"}}}], [{"2": "Red"}], [{"i": {"j": {}}}], [{"1": "", "3": "hGrhSAeen"}], [{"a": {}, "oRY": {"J": false, "l": true, "EcPr": true, "ojmpcX": false, "nu": true, "YhcMxt": false, "YtIJq": false, "ff": true, "ydKnZf": false, "k": false}}], [{"a": {"b": null, "c": "Yellow", "bc": null}, "d": {"e": {"f": null, "g": "Blue"}}, "h": {}, "i": {"j": null}}], [{"k": -60.456823042679254, "Red": 18.437081129707764, "f": -60.456823042679254, "hrEwoDM": -52.05849999180157, "c": 90.14765271967525, "b": -9.292502161579932, "hrEjYellowwoDM": -9.292502161579932}], [{"1": "", "2": "Red", "3": "hGreen", "53": "uLzE", "90": "oRY"}], [{"1": "jYellow", "2": "suhOGGreen"}], [{"a": {"b": null, "c": {"d": null, "e": {"f": null, "g": {}}, "h": {}}}, "i": {"j": {}}, "k": {"-4.346337905877348": [-76, -54, 7, 67, 1, 41, 68, -85, 41, -32], "-1.3338626414926296": -82.44134692437908, "42.56105092347323": -4.346337905877348}, "l": {"m": {"n": {}}}}], [{"bEnwqMPlZQ": {"-54": "SA", "-35": "oRY", "79": "hhrEwoDM", "23": "l", "-91": "wJklFUi", "80": "bEnwqMPlZQ", "48": "EcPr", "-67": "e"}}], [{"1": "", "2": "hrEwoDMh", "93": "hrEwoDM"}]], "contract": "\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n"}
{"task_id": "Mbpp/468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n", "entry_point": "max_product", "canonical_solution": "\ndef max_product(arr):   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n", "base_input": [[[3, 100, 4, 5, 150, 6]], [[4, 42, 55, 68, 80]], [[10, 22, 9, 33, 21, 50, 41, 60]]], "atol": 0, "plus_input": [[[-3, -100, -4, -5, -150, -6]], [[3, -5, 2, 6, -1, 4, -3]], [[2, 3, 3, 4, 5, 3, 6]], [[2, -3, 3, 4, -5, 3, -6]], [[50, 100, 200, 150, 300, 250, 400]], [[-5, -4, -3, -2, -1, 0, 1]], [[10, 9, 8, 7, 6, 5, 4, 3]], [[1, -2, 3, -4, 5, -6, 7]], [[10, 8, 6, 5, 1, 9, 7, 4, 3, 2]], [[-3, -4, 5, -2, 6, -1, 7, -8, 9, -10, 11]], [[50, 100, 200, 100, 150, 300, 250, 400, 100]], [[-3, -4, 5, -2, 5, 6, 200, 10, -1, 7, -8, 9, -10, 11]], [[10, 9, 7, 6, 4]], [[50, 250, 150, 300, 250, 400]], [[50, 250, 6, 150, 300, 250, 400]], [[-2, 3, -5, 2, 6, -1, 4, -3]], [[10, 9, 7, 6, 5, 4, 3]], [[50, 100, -3, 150, 300, 250, 400]], [[10, 9, 8, 8, 5, 4, 3, 4]], [[10, 9, 8, 7, 6, 5, -8, 3]], [[3, -5, 2, 6, 4, -3]], [[50, 250, 150, 300, 250, 1, 400]], [[2, 50, 100, 200, 100, 150, 300, 250, 400, 100]], [[2, 50, 100, 200, 100, 150, 300, 400, 100]], [[10, 9, 8, 7, 6, 5, 5, 4, 3, 9]], [[-6, 249, 6, 150, 250, 400]], [[50, 250, 150, 250, 400]], [[10, 9, 7, 7, 6, 5, 5, 4, 3, 9]], [[50, 100, -3, 150, 300, 250, 400, 100]], [[50, 100, -3, 150, 300, 250, 400, 300]], [[10, 9, 8, 7, 6, 5, 5, 4, 9]], [[3, -5, 2, -1, -6, 4, -3]], [[50, 100, -3, 150, 250, 400]], [[10, 8, 5, 1, 9, 7, 4, 3, 2, 6, 6]], [[10, 9, 8, 7, 6, 5, 4, 10]], [[50, 100, 150, 250, 400]], [[-3, -100, -4, -5, -150, -6, -4]], [[50, 100, 200, 150, 300, 250, 400, 100]], [[10, 9, 8, 7, 6, 5, 5, 4, 9, 9]], [[-2, -2, 3, -4, 5, -6, 7]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100]], [[50, 100, 150, 200, 100, 150, 300, 250, 400, 100]], [[2, 50, -8, 200, 100, 150, 300, 250, 400, 100]], [[-2, 3, -4, -6, 7]], [[-4, 2, 3, 3, 4, 5, 3, 6]], [[-3, -101, -4, -5, -150, -6, -150]], [[-6, 249, 150, 250, 400]], [[-2, 4, -5, 2, 6, -1, 4, -3]], [[-3, -101, -4, -5, 6, -6, -150, -4]], [[2, -3, 3, 4, 3, -6]], [[50, 100, 200, 150, 300, 1, 400]], [[-2, -2, 3, -4, 5, 7]], [[2, 3, -5, 2, 300, 6, -1, 4, -3]], [[10, 9, 8, 7, 6, 5, -8, 4]], [[-3, -100, -5, -150, -6]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100, 400]], [[-3, -100, -4, -5, 5, -6, -5]], [[3, -5, 2, 4, -3]], [[-2, -2, -6, -8, 5, -6, 7]], [[-2, -2, -4, 5, -6, 7]], [[-5, -4, -3, 9, 8, -1, 0, -1, 1]], [[10, 9, 6, 4]], [[251, 50, 100, 200, 150, 300, 250, 400, 100]], [[1, -2, 3, -4, -6, 7]], [[-3, -100, -4, -6, -150, -6, -4]], [[-2, 3, -5, 2, -1, 4, -3]], [[10, 9, 7, 6, 5, 5, 4, 3, 9]], [[-2, -2, -6, -8, -6, 7]], [[-3, 50, 100, -2, 150, 300, 250, 400]], [[10, 1, 9, 8, 7, 6, 5, 5, 4, 3, 9]], [[1, -1, -2, 3, -4, 5, -6, 7, -2]], [[10, 9, 8, 7, 6, 5, -8]], [[10, 9, -8, 7, 7, 6, 5, 5, 4, 3, 9]], [[10, 7, 9, 7, 6, 4]], [[10, 9, 1, 8, 3, 7, 6, 5, 4, 3]], [[-4, 2, 3, 3, 4, 5, 3]], [[50, 100, 200, 150, 300, 1, 3]], [[2, 2, 50, -8, 299, 200, 100, 151, 300, 250, 400, -150]], [[50, 100, 200, 100, 150, 300, 250, 400, -5, 100, 300]], [[-3, -101, -4, -5, -150, -6, -150, -4]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100, 400, 2, 150]], [[-5, -3, -2, -1, 0, 1]], [[50, 250, 6, 150, -8, 300, 250, 400]], [[10, 9, 7, 6, 4, 5, 4, 3, 9]], [[10, 8, 7, 6, 5, 5, 251, 9]], [[-3, -100, -4, -5, -150, -6, -6]], [[100, 200, 150, 300, 1, 3]], [[2, 2, -3, 3, 4, -5, 3]], [[50, 100, 150, 250]], [[-5, 2, 6, 4, 250, -3]], [[2, 249, 3, 4, 3, -6, -6, -6, 3]], [[-4, 2, 3, 3, 4, 5, 5, 3, 6]], [[100, 200, 151, 150, 300, 1, 3, 200]], [[9, 8, 7, 6, 5, 4, 3]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100, 400, 250]], [[3, -5, 7, 6, 4, -3]], [[2, -3, 3, 4, -5, 251, 7]], [[4, 50, 250, -4, 150, 300, 250, 400]], [[200, 151, 300, 3, 200]], [[9, 8, 7, 6, 5, 4, 3, 5]], [[2, 2, 50, -8, 299, 200, 100, 151, 300, 250, 400, -150, 2]], [[-101, -101, 10, 9, 7, 6, 4]], [[10, 9, 7, 4, 4]], [[50, 100, 100, 0, 300, 250, 400, 100, 100, 50]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 100, 400, 250]], [[2, -3, 3, 4, -5, -6]], [[50, -3, 150, 300, 250, 400, 300]], [[-2, -2, -7, 5, -6, 7]], [[10, 9, 8, 7, 6, 5, 4, 2]], [[10, 9, -8, 7, 7, 6, 2, 5, 4, 50, 9]]], "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n"}
{"task_id": "Mbpp/470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n", "entry_point": "add_pairwise", "canonical_solution": "\ndef add_pairwise(test_tup):\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n", "base_input": [[[1, 5, 7, 8, 10]], [[2, 6, 8, 9, 11]], [[3, 7, 9, 10, 12]]], "atol": 0, "plus_input": [[[1, 2, -3, 4, 5]], [[0.5, -1.2, 3.7, 0.9]], [[-10, 15, -20, 25, -30]], [[2, 2.5, -3, 1.5, -2]], [[]], [[7]], [[2, 3.5, -1, 2, -0.5]], [[5]], [[0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0]], [[5, 5]], [[2, 2.5, -3, 1.5, 0, 2.5]], [[1, 2, -3, 4, 5, 4]], [[2, 3.5, -1, 2, -0.5, -0.5]], [[2, 2.5, -3, 1.5, 3.7, 2.5]], [[7, 7]], [[7, 2, 0, 7]], [[0.5, -1.2, 3.7, 0.9, 3.7]], [[1, -3, 4, 5, 4]], [[2, 1, 2.5, -3, 1.5, 3, -2]], [[1, 2, -3, -10, 4, 5, 4]], [[1, 2, -3, -10, -20, 4, 5, 4]], [[2, -1, 2, -0.5, -0.5]], [[0.5, -1.2, 3.7, 3.7, 0.9, 1.5]], [[1, -3, -3, 5, 4]], [[-1.7891388020246002, 0.5, -1.2, 3.7, 0.9]], [[2, -1, -0.5, -0.5, -0.5]], [[2, 5, 2, -0.5, -0.5]], [[2, 2.5, -3, 1.5, 3.7, 2.5, 1.5]], [[0.5, 0.9, -1.2, 0.9, 3.7]], [[1, 2, -10, 4, 5, 4]], [[7, 7, 7]], [[2, 3.5, 3, 2, -0.5]], [[1, -10, -10, 4, 5, 4]], [[2, 2.5, -3, 1.5]], [[2, -1, 2, -0.5, -0.5, -1]], [[3.393222332151918, 2, 3.5, -20, -1, 1, -0.5, -1]], [[-1.7891388020246002, 0.6001249926867311, -1.2, 3.7, 0.9]], [[5, 5, 5]], [[7, -20, 3, 7]], [[0.6637886009017347, -1.1953847540147688, 3.7, 0.9, 3.7]], [[0.5, -1.2, 3.7, 0.9, 3.7, 3.7]], [[-2, 0, 7]], [[1, 2, -3, -10, -19, -20, 4, 5, 4]], [[7, -20, -20, 3, 7]], [[0.5, 0.9, -1.2, 3.7]], [[0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0]], [[0.5, -1.2, 3.7, 0.9, 3.7, -1.2]], [[2, 3.5, -0.5]], [[5, 5, 5, 5]], [[3.393222332151918, 2, 3.5, -20, -1, 1, -0.5, -3, -1]], [[1, -10, -10, 3, 4, 5, 4]], [[2, -1, -0.5, -0.5, -0.5, -1]], [[0.5, 0.9, -1.1953847540147688, -1.2, 0.9, 3.7, 0.5, 0.9]], [[7, -20, 3]], [[5, 6, 7, 7]], [[2, -1, -0.5, -0.5, -0.5, -0.5]], [[-1.0905407746693552, -1.7891388020246002, 0.5, -1.2, 3.7, 2.5]], [[-1.0905407746693552, -1.7891388020246002, 0.5, -1.2, 2.5]], [[-10, 5]], [[1, -3, -3, 5, 4, 4]], [[2, 5, -0.5, -0.5, -0.5]], [[15, 1, 2, -10, 4, 5, 4]], [[5, 1, 6, 2, -3, 4, 5, 4, -3]], [[0.5, 0.9, -1.1953847540147688, -1.2, 0.6637886009017347, 3.7, 3.7, 0.5, 0.9, -1.2, 0.9]], [[1, 2.5, -3, 1.5, 3]], [[2, 2.5, -3, 0.795579078414846]], [[2, 2.5, -3, -2]], [[1, 1, 2, -3, 4, 5, 4, 4]], [[2, -1, -0.5, -0.5, -0.5, -1, -1]], [[0.5, -1.2, 3.7, 0.9, 3.7, -1.2, -1.2]], [[0, -1, 0, 0, 0, 0, 0]], [[7, -20, 3, -20]], [[2, -3, -10, -19, -20, 4, 5, 4]], [[1, 2, -3, -10, 4, 6, 4, -20]], [[7, 7, 7, 7]], [[2.5, -3, 1.5, 3.7, 2.5, 1.5]], [[-10]], [[7, -19, 3]], [[7, 7, 7, 7, 7]], [[2, 2.5, -3, 1.5, 3.7]], [[2.5, -3, 1.5, 3.7100374284077136, 0.6001249926867311, 2.5, 1.5]], [[7, 8, -20, -20, 3, 7]], [[5, 1, 6, -10, 2, -3, 4, 5, -3]], [[1, 2, -10, -10, 4, 5, 4]], [[-1.7891388020246002, 0.6001249926867311, -1.2, 1.5, 0.9]], [[0.5, -1.2, 3.7, 0.6001249926867311, 3.7, 0.9, 1.5]], [[0.5, 1.5, 0.9, -1.2, 0.9, 3.7]], [[-2.1831604355627974, -1.5121530645391967, 0.6001249926867311, -1.2, 3.7, 0.9]], [[2, 2.5, -3, 1.5, -1.1953847540147688, 2.5]], [[2, 5, 2, -0.5, -0.5, -0.5]], [[0.5, -1.2, 3.7, 3.7]], [[2, 2, -1, -0.5, -0.5, -0.5, -0.4924192336004098]], [[0.37940521647331327, 0.9, -1.2, 0.9, 3.7]], [[2, -1, 2, -0.5]], [[1, 2, -3, 4, 5, 4, 2]], [[8, 5]], [[-29, 1, -3, -30, 4, 1]], [[1, 1.3351074136147694, -3, 1.5, 3]], [[-29, 1, -3, 1]], [[2, -3, -10, -19, -20, 4, 5, 4, 5]], [[2, 2.5, -3, 1.5, 0, -1.2]], [[0, -1, 0, 0, 0, 0]], [[2, 3.5, -1, 2, -0.5, -0.5, -0.5]], [[3.5, -1, 2, -0.5, -0.5, -0.5]], [[-1.7891388020246002, 0.6001249926867311, -1.2, 1.5, 0.9, 1.3351074136147694]], [[2, 2.5, -2]], [[0.6637886009017347, 3.7, 0.9, 3.7]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n"}
{"task_id": "Mbpp/471", "prompt": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n", "entry_point": "find_remainder", "canonical_solution": "\ndef find_remainder(arr, n): \n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n\n", "base_input": [[[100, 10, 5, 25, 35, 14], 11], [[1, 1, 1], 1], [[1, 2, 1], 2]], "atol": 0, "plus_input": [[[1000000, 2000000, 3000000], 10000], [[1000000, 2000000, 3000000], 10001], [[2000000, 3000000], 10001], [[1000000, 2000000], 10001], [[1000000, 2000000, 3000000], 1000000], [[1000000, 2000000, 3000000], 3000000], [[2000000, 10001, 3000000], 2000000], [[1000000, 3000000], 3000000], [[1000000, 2000000, 3000000], 2000000], [[1000000, 2000000, 3000000, 1000000], 2000000], [[2000000, 3000000, 3000000], 10001], [[2000000, 1000001, 1000000, 2000000], 10001], [[2000000, 3000000, 3000000], 10002], [[2000000, 3000001, 3000000], 10002], [[1000000, 2000000, 3000000, 1000000], 1000001], [[2000000, 10001, 3000000], 3000000], [[1000000, 2000000, 2000000], 10001], [[1000000, 2000000, 3000000, 2000000], 1000001], [[2000000, 10001, 3000000], 10001], [[1000000, 2000000, 10002, 3000000], 3000000], [[2000000], 10001], [[1000000], 3000000], [[1000000, 2000000, 3000000, 2000000, 1000000], 1000001], [[10000, 2000000, 3000000], 2000000], [[1000001, 1000000, 2000000], 10001], [[2000000, 10001, 3000000], 1000000], [[1000001, 1000000, 1000000], 10001], [[1000000, 2000000, 10002, 3000000, 10002], 3000000], [[1000001, 1000000], 10000], [[2000000, 3000000, 2000000, 1000000], 1000000], [[2000000, 10001, 3000000, 10001], 10001], [[2000000, 3000000], 10002], [[1000000, 1000000, 2000000, 3000000, 1000000], 2000000], [[2000001], 10001], [[3000000], 10001], [[1000001, 1000000, 3000000], 3000000], [[1000000, 2000000, 3000000, 1000000], 10000], [[2000000, 3000000, 1999999, 1000000, 1999999], 1000000], [[2000000, 10002, 3000000], 3000000], [[2000000, 2000000, 1000001, 1000000, 2000000], 10001], [[2000000, 10001, 3000000], 3000001], [[2000000, 3000000], 10000], [[10000, 3000000], 2000000], [[2999999, 10000, 2000000, 3000000], 2000000], [[1000000, 2000000, 3000000, 2000000], 10001], [[1000000, 2000000, 3000000, 1000000], 10001], [[2000000, 1000001, 3000000], 1000000], [[2000000, 10001, 3000000, 10001], 10002], [[1000001, 1000000, 1000001], 10001], [[1000001, 1000000, 1000000, 1000000], 10000], [[2000000, 2000000, 3000000], 3000000], [[1000000, 3000000, 2000000, 3000000], 10001], [[3000000, 2000001], 10001], [[1000000, 3000000, 2000001, 3000000], 10001], [[1000001, 3000000, 2000001, 3000000], 10001], [[1000001, 1000000], 10002], [[1000001, 1000000, 2000000], 1000000], [[1000001, 1000000, 10000, 3000000], 3000000], [[1000001, 1000000, 1000000], 10000], [[2000000, 1000001, 2999999], 1000000], [[2000000, 2000000, 1000001, 1000000, 1000001, 2000000], 2000001], [[3000000, 3000000], 10001], [[2000000, 3000000], 1999999], [[1000000, 3000000, 3000000], 10001], [[1000000, 2000000, 3000000, 1000000, 2000000], 10001], [[3000001, 3000000], 10002], [[2000000, 2999999, 10001, 3000000], 3000001], [[1000000, 2000000, 3000000, 1000000, 1000000], 2000000], [[1000001, 1000000, 1000001], 10000], [[2000000, 3000000, 10001, 3000000], 1000001], [[1999999], 10002], [[2000000, 1000001, 3000000], 2999999], [[1000001, 1000000, 1000000, 1000000, 1000000], 10000], [[2000000, 1000001, 1000000, 2000000], 10002], [[2000000, 2999999, 10001, 3000000], 1999999], [[1000000, 3000001, 2000000, 3000000, 1000000, 10002], 2000000], [[2000000, 2999999, 10001, 3000000], 1000000], [[1000000, 2000000], 10000], [[2000000, 1000001, 3000000], 999999], [[999999], 1000000], [[2000000, 2000000, 1000001, 1000000, 1000001, 2000000, 1000001], 2000001], [[1000000, 3000000, 2000001, 3000000], 10002], [[1000000, 2000000, 3000000, 1000000, 1000000], 1999999], [[2000000, 1000001, 2000001, 2000000], 2999999], [[2000000, 3000000, 10001, 3000001], 2000000], [[2000000, 2999999, 10001, 3000000], 999999], [[1000001, 1000000, 3000000], 3000001], [[1000001, 1000000, 1000001], 2000000], [[1000001], 10002], [[2999999, 2000000, 1000001, 3000000], 1000000], [[2000000, 10001, 3000000, 10002], 10001], [[2000000, 3000000, 3000000, 10001, 3000000], 1000000], [[1000000, 3000000, 2000001, 3000000, 1000000], 10001], [[2999999, 1000000], 10001], [[1000000, 1000000, 1000001], 10001], [[2000000, 10001, 3000000], 3000002], [[2000000, 3000000, 10001, 3000000], 2999999], [[10000, 3000000, 3000000], 2000000], [[1000000, 2000000, 3000000, 1000000], 10002], [[2999999, 10000, 2000000, 3000000, 2000000], 1000001], [[10000, 3000000, 3000000], 1999999]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0\n"}
{"task_id": "Mbpp/472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "entry_point": "check_Consecutive", "canonical_solution": "\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n", "base_input": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 5, 6]], [[1, 2, 1]]], "atol": 0, "plus_input": [[[4, 1, 9, 5, 2]], [[4, 9, 5, 2]], [[4, 5, 1, 9, 5, 2]], [[4, 5, 1, 9, 5, 2, 2]], [[4, 4, 9, 5, 2]], [[4, 5, 1, 9, 5, 2, 2, 2]], [[5, 1, 9, 5, 2]], [[4, 1, 9, 5, 2, 9]], [[4, 5, 1, 9, 5, 2, 2, 5]], [[5, 1, 9, 1, 2]], [[4, 2, 4, 9, 5, 2]], [[4, 1, 0, 9, 5, 2, 9]], [[4, 9, 5, 3]], [[0, 9, 2, 9]], [[4, 1, 5, 2, 9]], [[4, 5, 1, 9, 5, 5, 2, 2]], [[4, 5, 1, 9, 5, 2, 1]], [[4, 5, 1, 9, 6, 2, 2]], [[1, 4, 5, 2]], [[4, 5, 1, 5, 5, 2, 1, 5]], [[5, 1, 9, 1, 1, 2]], [[4, 9, 5, 2, 9]], [[0, 4, 2, 9]], [[4, 9, 1, 5]], [[1, 5, 1, 9, 4, 5, 2]], [[1, 5, 1, 9, 2, 4, 5, 2]], [[5, 1, 3, 1, 1, 2]], [[9, 2, 9, 9, 0, 0, 9]], [[5, 1, 9, 5, 2, 9]], [[6, 5, 1, 5, 5, 2, 1, 5]], [[4, 2, 3, 4, 9, 5, 2]], [[4, 2, 9, 3, 2]], [[4, 2, 9, 3, 2, 9]], [[2, 9, 2, 9, 9, 0, 0, 9]], [[2, 4, 5, 1, 0, 2, 9, 5, 2, 2, 5]], [[4, 3, 5, 1, 9, 5, 5, 2, 2]], [[4, 9, 5]], [[1, 4, 9, 2]], [[4, 5, 1, 6, 5, 2, 1, 5]], [[6, 5, 1, 9, 2, 4, 2]], [[3, 2, 4, 9, 5, 2]], [[4, 1, 9, 5]], [[4, 9, 1, 4, 9]], [[4, 2, 9, 2, 3, 2, 9]], [[1, 4, 2]], [[4, 5, 1, 9, 5, 5, 9, 2]], [[4, 5, 1, 6, 5, 2, 1, 5, 6]], [[4, 5, 1, 9, 5, 2, 1, 9]], [[4, 3, 1, 0, 9, 5, 2, 9]], [[4, 9, 5, 3, 5, 3]], [[5, 1, 5, 2]], [[4, 5, 3, 9, 5, 2]], [[4, 5, 1, 9, 5, 2, 9]], [[4, 3, 3, 4, 5, 2]], [[5, 5, 1, 9, 5, 2]], [[4, 2, 3, 4, 9, 5, 2, 9, 3]], [[4, 2, 9, 2, 3, 2, 9, 2]], [[4, 6, 6, 3, 9, 5, 2, 5]], [[5, 9, 5, 2, 9]], [[4, 2, 6, 3, 4, 9, 5, 2, 9, 3]], [[4, 2, 9, 2, 9, 9]], [[4, 5, 1, 9, 5, 2, 1, 1]], [[2, 9, 2, 9, 9, 0, 0, 9, 0]], [[2, 9, 9, 0, 0, 9]], [[4, 5, 5, 9, 5, 2, 2, 2]], [[4, 4, 2, 3, 4, 9, 5, 2, 9, 3]], [[1, 5, 2]], [[1, 5, 1, 9, 2, 4, 2]], [[2, 4, 5, 1, 0, 2, 9, 5, 2, 2, 4, 5]], [[4, 5, 1, 9, 5, 2, 8]], [[1, 4, 5]], [[2, 9, 9, 9, 0, 0, 9, 0]], [[1, 4, 9, 8, 2, 2]], [[4]], [[5, 1, 5, 1, 9, 2, 4, 5, 2, 1]], [[4, 3, 5, 1, 10, 9, 5, 2, 1, 1]], [[1, 1, 9, 2, 4, 6, 2]], [[4, 1, 5, 2, 9, 4]], [[4, 1, 9, 0, 9, 2, 9]], [[5, 1, 9, 5, 5, 2]], [[1, 5, 1, 9, 2, 4, 2, 2]], [[4, 5, 1, 9, 1, 8, 2, 2]], [[4, 1, 9, 10]], [[4, 3, 5, 1, 9, 5, 5, 2, 2, 2]], [[6, 6, 1, 9, 4, 2]], [[4, 1, 9, 5, 5, 2, 2]], [[4, 9, 10, 5, 3, 5, 3]], [[5, 1, 9, 2]], [[6, 6, 1, 9, 4, 1]], [[4, 1, 5, 8, 2, 9, 4]], [[4, 5, 1, 6, 5, 2, 1, 5, 5]], [[6, 6, 1, 9, 1, 6, 6]], [[4, 6, 5, 1, 9, 5, 2, 2, 2]], [[1, 5, 1, 9, 2, 4, 2, 8, 2, 1]], [[4, 5, 1, 1]], [[4, 5, 1, 4, 1]], [[4, 1, 5, 8, 2, 9]], [[0, 4, 9]], [[4, 1, 1]], [[4, 5, 1, 5, 5, 5, 9, 2]], [[4, 2, 9, 2, 9, 9, 2, 2, 9]]], "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n"}
{"task_id": "Mbpp/473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n", "entry_point": "tuple_intersection", "canonical_solution": "\ndef tuple_intersection(test_list1, test_list2):\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n", "base_input": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]], [[[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]], [[[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]]]], "atol": 0, "plus_input": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[2, 3, 1], [6, 5, 4], [11, 12, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[4, 5, 6], [7, 8, 9], [1, 2, 3], [10, 11, 12]]], [[[], [], []], [[]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[12, 10, 9], [8, 7, 6], [6, 5, 4], [3, 2, 1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[4, 5, 6], [7, 8, 9]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[1, 3], [3, 5], [5, 7], [7, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[2, 3, 1], [6, 5, 4], [11, 12, 10]], [[2, 3, 1], [6, 5, 4], [11, 12, 10]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12]], [[4, 5, 6], [7, 8, 9]]], [[[4, 5, 6]], [[4, 5, 6]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [10, 11, 12], [1, 2, 3]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [6, 7]], [[1, 3], [3], [5, 7], [6, 7, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 1, 9]], [[4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6, 4], [7, 8, 9]], [[4, 5, 6], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6, 4], [7, 8, 9]], [[4, 5, 6], [1, 2]]], [[[1, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[1, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [7, 8, 9], [1, 2, 3, 3], [10, 11, 12]], [[1, 2, 3], [7, 8, 9], [1, 2, 3, 3], [10, 11, 12]]], [[[7, 9, 7], [7, 8, 9, 8], [1, 2, 3], [4, 5, 6], [7, 8, 9, 7], [7, 9, 7]], [[7, 9, 7], [7, 8, 9, 8], [1, 2, 3], [4, 5, 6], [7, 8, 9, 7], [7, 9, 7]]], [[[4, 5, 6], [7, 8, 9], [4, 5, 6]], [[4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[1, 2, 3], [4, 5, 6, 4]], [[1, 2, 3], [4, 5, 6, 4]]], [[[2, 1, 3, 1], [11, 12, 10], [2, 3, 1]], [[2, 1, 3, 1], [11, 12, 10], [2, 3, 1]]], [[[1, 2, 3, 1], [4, 5, 6, 4], [7, 8, 9], [1, 2, 3, 1]], [[1, 2, 3, 1], [4, 5, 6, 4], [7, 8, 9], [1, 2, 3, 1]]], [[], []], [[[1, 2, 3, 3], [7, 8, 9], [10, 11, 12], [7, 8, 9]], [[1, 2, 3, 3], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 7, 9, 9], [10, 11, 12]], [[1, 2, 3], [4, 5, 6], [7, 7, 9, 9], [10, 11, 12]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[1, 11], [1, 3], [3, 5], [5, 7], [7, 9]]], [[[1, 2, 3], [4, 5, 6, 4]], [[4, 5, 6], [1, 2, 3]]], [[[2, 1, 3, 1], [2, 3, 1]], [[2, 1, 3, 1], [2, 3, 1]]], [[[1, 2, 3], [4, 5, 6], [5, 6], [7, 8, 9], [10, 11, 12]], [[1, 2, 3], [4, 5, 6], [5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 8, 9]], [[4, 5, 6], [1, 2, 3], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 8, 9], [7, 8, 8, 9]], [[4, 5, 6], [1, 2, 3], [10, 11, 12]]], [[[4, 5, 6], [1, 2]], [[4, 5, 6], [1, 2]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 7]], [[1, 11], [1, 3], [3, 5], [5, 7], [7, 9], [1, 3]]], [[[1, 2, 3], [4, 5, 6, 4]], []], [[[1, 2, 3], [4, 5, 6, 5], [10, 11, 12], [1, 2, 3]], [[1, 2, 3], [4, 5, 6, 5], [10, 11, 12], [1, 2, 3]]], [[[1, 2, 3], [8, 10, 11, 12]], [[1, 2, 3], [8, 10, 11, 12]]], [[[1, 2, 3], [4, 5, 6, 5], [10, 11, 12], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [4, 5, 6, 5], [10, 11, 12], [1, 2, 3], [1, 2, 3]]], [[[1, 2], [2, 3], [4, 5], [5, 6], [6, 7]], [[1, 2], [2, 3], [4, 5], [5, 6], [6, 7]]], [[[1, 2], [2, 2], [3, 4], [5, 6], [6, 7], [3, 4]], [[1, 2], [2, 2], [3, 4], [5, 6], [6, 7], [3, 4]]], [[[1, 2], [4, 5, 6]], [[1, 2], [4, 5, 6]]], [[[1, 1], [4, 5, 6], [1, 2]], [[1, 1], [4, 5, 6], [1, 2]]], [[[2, 1, 3, 1], [11, 12, 10], [2, 3, 1], [2, 1, 3, 1], [2, 1, 3, 1]], [[2, 1, 3, 1], [11, 12, 10], [2, 3, 1], [2, 1, 3, 1], [2, 1, 3, 1]]], [[[2], [1, 2], [2, 3], [3, 4], [4, 5], [6, 7]], [[2], [1, 2], [2, 3], [3, 4], [4, 5], [6, 7]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 8, 9], [7, 8, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 8, 9], [7, 8, 8, 9]]], [[[3], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 7]], [[1, 11], [1, 3], [3, 5], [5, 7], [7, 9], [1, 3]]], [[[1, 2, 3], [1, 2, 3, 3, 1]], [[1, 2, 3], [1, 2, 3, 3, 1]]], [[[1, 2], [4, 7], [5, 6], [6, 7]], [[1, 2], [4, 7], [5, 6], [6, 7]]], [[[10, 11, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[10, 11, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2], [3, 4], [4, 5], [5, 6], [6, 7]], [[1, 2], [3, 4], [4, 5], [5, 6], [6, 7]]], [[[1, 2, 3], [11, 12], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[1, 2, 3], [11, 12], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6, 6, 6], [4, 5, 6], [4, 5, 6, 6], [7, 1, 9]], [[1, 2, 3], [4, 5, 6, 6, 6], [4, 5, 6], [4, 5, 6, 6], [7, 1, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[7, 8, 9, 8], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2], [2, 2], [3, 4], [5, 6], [6, 7], [3, 4], [5, 6]], [[1, 2], [2, 2], [3, 4], [5, 6], [6, 7], [3, 4], [5, 6]]], [[[4, 5, 6, 6], [4, 5, 6], [4, 5, 6]], [[4, 5, 6, 6], [4, 5, 6], [4, 5, 6]]], [[[1, 2, 3], [4, 5, 6, 4], [4, 5, 6, 4]], [[1, 2, 3], [4, 5, 6, 4], [4, 5, 6, 4]]], [[[12, 10, 9], [8, 7, 6], [6, 5, 4], [3, 2, 1], [8, 7, 6]], [[12, 10, 9], [8, 7, 6], [6, 5, 4], [3, 2, 1], [8, 7, 6]]], [[[4, 5, 6], [10, 11, 11], [7, 8, 9], [10, 11, 12], [10, 11, 12]], [[4, 5, 6], [10, 11, 11], [7, 8, 9], [10, 11, 12], [10, 11, 12]]], [[[4, 5, 6], [7, 8, 9], [10, 11, 12]], [[7, 8, 9]]], [[[4, 5, 6], [7, 8, 9], [10, 11, 12, 11]], [[4, 5, 6], [7, 8, 9], [10, 11, 12, 11]]], [[[4, 5, 6], [7, 7, 9, 9], [10, 11, 12]], [[4, 5, 6], [7, 7, 9, 9], [10, 11, 12]]], [[[1, 1], [1, 2, 2], [4, 5, 6], [1, 2]], [[1, 1], [1, 2, 2], [4, 5, 6], [1, 2]]], [[[1, 2], [3, 4], [4, 5], [5, 6], [1, 2]], [[1, 2], [3, 4], [4, 5], [5, 6], [1, 2]]], [[[1, 2, 3], [4, 5, 6, 6, 6], [4, 5, 6], [7, 1, 9]], [[1, 2, 3], [4, 5, 6, 6, 6], [4, 5, 6], [7, 1, 9]]], [[[1, 2], [4], [3, 4], [4, 5], [5, 6], [1, 2]], [[1, 2], [4], [3, 4], [4, 5], [5, 6], [1, 2]]], [[[4, 5, 6], [7, 8, 9], [1, 2, 3], [10, 11, 12]], [[4, 5, 6], [7, 8, 9], [1, 2, 3], [10, 11, 12]]], [[[12, 10, 9], [8, 7, 6], [6, 5, 4], [3, 2, 1], [8, 7, 6], [3, 2, 1]], [[12, 10, 9], [8, 7, 6], [6, 5, 4], [3, 2, 1], [8, 7, 6], [3, 2, 1]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 7]], [[1, 11], [1, 3], [3, 5], [5, 7], [7, 9, 7], [1, 3]]], [[[4, 5, 6], [7, 7, 9, 9], [10, 11], [10, 11, 12], [10, 11, 12]], [[4, 5, 6], [7, 7, 9, 9], [10, 11], [10, 11, 12], [10, 11, 12]]], [[[1, 2, 3], [4, 5, 6], [6, 8, 9], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [6, 8, 9], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6, 4], [1, 2, 3]], [[1, 2, 3], [4, 5, 6, 4], [1, 2, 3]]], [[[1, 2, 3], [1, 2, 3], [4, 5, 6], [10, 11, 12], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [4, 5, 6], [10, 11, 12], [1, 2, 3]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6, 6], [6, 7]], [[1, 3], [3, 5], [5, 7], [7, 9]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[4, 5, 6], [4, 5], [7, 8, 9], [1, 2, 3], [10, 11, 12]], [[4, 5, 6], [4, 5], [7, 8, 9], [1, 2, 3], [10, 11, 12]]], [[[2, 1, 3, 1], [11, 12, 10], [2, 3, 1], [11, 12], [2, 1, 3, 1], [2, 1, 3, 1]], [[2, 1, 3, 1], [11, 12, 10], [2, 3, 1], [11, 12], [2, 1, 3, 1], [2, 1, 3, 1]]], [[[1, 2], [6, 4], [4], [5, 6], [1, 2, 1], [2, 2]], [[1, 2], [6, 4], [4], [5, 6], [1, 2, 1], [2, 2]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]], [[[1, 11], [1, 3], [3, 5], [5, 7], [1, 3]], [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 7, 7]]], [[[1, 2], [3, 4], [4, 5], [5, 6], [6, 7], [1, 3, 2], [1, 2]], [[1, 2], [3, 4], [4, 5], [5, 6], [6, 7], [1, 3, 2], [1, 2]]], [[[1, 2], [4, 7], [5, 6]], [[1, 2], [4, 7], [5, 6]]], [[[1, 2, 3], [4, 5, 6], [4, 5, 6]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[1, 11], [1, 4, 3], [3, 5], [1], [5, 7], [1, 3]], [[1, 11], [1, 4, 3], [3, 5], [1], [5, 7], [1, 3]]], [[[7, 9, 8, 9], [10, 11, 12]], [[7, 9, 8, 9], [10, 11, 12]]], [[[1, 2], [2, 2], [3, 4], [5, 6], [6, 7], [5, 6]], [[1, 2], [2, 2], [3, 4], [5, 6], [6, 7], [5, 6]]], [[[1, 4, 3], [3, 5], [1], [5, 7], [1, 3]], [[1, 4, 3], [3, 5], [1], [5, 7], [1, 3]]], [[[4, 5, 6, 5], [10, 11, 12]], [[4, 5, 6, 5], [10, 11, 12]]], [[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7, 6]], [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9], [4, 5, 6]], [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9], [4, 5, 6]]], [[[1, 2, 3], [4, 5, 6, 4, 5]], [[1, 2, 3], [4, 5, 6, 4, 5]]], [[[4, 5, 5], [4, 5, 5]], [[4, 5, 5], [4, 5, 5]]], [[[7, 7, 8, 9], [7, 8, 9]], [[7, 7, 8, 9], [7, 8, 9]]], [[[1], [1, 2], [4, 5, 6], [1, 2]], [[1], [1, 2], [4, 5, 6], [1, 2]]], [[[4, 5, 6], [10, 11, 12, 11], [7, 8, 9], [10, 11, 12]], [[12, 10, 9], [8, 7, 6], [6, 5, 4]]], [[[1, 4, 3], [3, 5], [3], [5, 7], [5, 12, 7]], [[1, 4, 3], [3, 5], [3], [5, 7], [5, 12, 7]]], [[[1, 2, 3, 1], [1, 2, 3], [10, 11, 12], [1, 2, 3], [1, 2, 3]], [[1, 2, 3, 1], [1, 2, 3], [10, 11, 12], [1, 2, 3], [1, 2, 3]]], [[[4, 5, 6], [6, 5, 6], [7, 7, 9, 9], [10, 11, 12], [7, 7, 9, 9]], [[4, 5, 6], [6, 5, 6], [7, 7, 9, 9], [10, 11, 12], [7, 7, 9, 9]]], [[[1, 2, 3], [1, 2, 3], [4, 5, 6], [10, 11, 12], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [4, 5, 6], [10, 11, 12], [1, 2, 3], [1, 2, 3]]], [[[4, 5, 6], [7, 8, 9]], [[4, 5, 6], [7, 8, 9]]], [[[1, 11], [1, 3], [3, 5], [5, 7], [7, 9], [1, 3]], [[1, 11], [1, 3], [3, 5], [5, 7], [7, 9], [1, 3]]], [[[1, 11], [1, 3], [3, 5], [5, 7], [8, 1, 3], [7, 9], [1, 3]], [[1, 11], [1, 3], [3, 5], [5, 7], [8, 1, 3], [7, 9], [1, 3]]], [[[1, 2], [6, 4], [4], [5, 6], [1, 2, 1], [2, 2], [5, 6]], [[1, 2], [6, 4], [4], [5, 6], [1, 2, 1], [2, 2], [5, 6]]], [[[3, 5], [1], [5, 7], [1, 3], [3, 5]], [[3, 5], [1], [5, 7], [1, 3], [3, 5]]], [[[1, 2, 3, 3], [7, 8, 9], [10, 11, 12], [7, 8, 9], [7, 8, 9]], [[1, 2, 3, 3], [7, 8, 9], [10, 11, 12], [7, 8, 9], [7, 8, 9]]], [[[4, 5, 6], [7, 8, 9], [10, 11, 12]], [[4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [7, 8, 8], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[12, 10, 9], [8, 7, 6], [6, 5, 4], [3, 2, 1]]]], "contract": "\n  assert isinstance(test_list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_list2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n"}
{"task_id": "Mbpp/474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n", "entry_point": "replace_char", "canonical_solution": "\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n", "base_input": [["polygon", "y", "l"], ["character", "c", "a"], ["python", "l", "a"]], "atol": 0, "plus_input": [["", "a", "b"], ["python", "z", "a"], ["python", "o", "o"], ["AbCdEfGhIjKlMnOpQrStUvWxYz", "m", "n"], ["pythoon", "a", "b"], ["python", "z", "o"], ["z", "a", "a"], ["z", "z", "z"], ["", "m", "m"], ["AbCdEfGhIjKlMnOpQrStUvWxYz", "a", "b"], ["python", "z", "z"], ["zzz", "z", "z"], ["zzz", "a", "a"], ["a", "a", "a"], ["a", "b", "o"], ["b", "z", "o"], ["", "o", "m"], ["", "a", "a"], ["AbCdEfGhIjKlMnOpQrStUvWYzz", "a", "a"], ["n", "z", "a"], ["", "b", "o"], ["pythona", "z", "a"], ["pythoonpythona", "z", "a"], ["zz", "a", "a"], ["mz", "z", "z"], ["", "o", "o"], ["a", "m", "o"], ["b", "a", "b"], ["b", "o", "o"], ["AbCdEfGhIjKlMnOpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzz", "m", "n"], ["b", "a", "a"], ["mz", "a", "a"], ["zzz", "z", "a"], ["m", "a", "a"], ["zz", "z", "a"], ["mz", "a", "b"], ["aa", "b", "o"], ["m", "n", "m"], ["a", "o", "b"], ["z", "a", "z"], ["AbCdEfGhIjKlMnOpQrStUvWxYz", "a", "a"], ["bb", "a", "a"], ["python", "o", "b"], ["n", "n", "n"], ["zzzzz", "a", "a"], ["zz", "z", "o"], ["zz", "o", "o"], ["a", "z", "a"], ["a", "b", "a"], ["n", "z", "z"], ["opythoon", "a", "o"], ["AbCdEfGhIjKlMnOpQrStUvWxYz", "m", "b"], ["zzzzza", "b", "b"], ["AbCdEfGhIjKlMnOpQrSthUvWYzz", "a", "a"], ["AbCdEfGhIjKlMnOpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzz", "b", "b"], ["AbCdEfGhIjKlMnOpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzz", "z", "z"], ["zz", "z", "z"], ["aa", "b", "b"], ["pythona", "a", "a"], ["AbCdEfGhIjKlaMnOpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzz", "o", "o"], ["mz", "b", "o"], ["mAbCdEfGhIjKlMnOpQrSthUvWYzz", "m", "m"], ["zz", "n", "a"], ["pythoonpynthona", "z", "a"], ["aa", "o", "o"], ["b", "b", "b"], ["a", "a", "z"], ["zpythoonpynthona", "z", "o"], ["zzzzz", "m", "m"], ["a", "m", "m"], ["oopythoon", "a", "o"], ["m", "m", "m"], ["zpythoonpynthona", "o", "b"], ["o", "o", "o"], ["pytoopythoonhona", "z", "a"], ["AbCdEfGhIjKlaMnOpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzz", "z", "a"], ["bb", "a", "o"], ["oo", "o", "o"], ["pytbboopythoonhona", "z", "z"], ["opythoon", "z", "z"], ["aa", "z", "b"], ["pythnn", "o", "b"], ["zzzzza", "o", "b"], ["AbCdEfGhIjKlaMnOGpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzz", "o", "o"], ["aaa", "b", "b"], ["AbCdEfGhIjKlMnOpQrStUvWxAWbCdEfGhIjKlMnOpQrStUvWxYzz", "b", "b"], ["a", "o", "a"], ["pythoAbCdEpythnnfGhIjKlMnOpQaaaxYzn", "z", "z"], ["AbCdEfGhIjKlMnOpQrStUvWxAbCdEfKGhIjKlMnOpQrStUvWxYzz", "m", "n"], ["opythoon", "o", "o"], ["pythooon", "a", "b"], ["pythooon", "m", "m"], ["", "b", "b"], ["zpythoonpynthona", "b", "o"], ["o", "b", "o"], ["b", "b", "o"], ["n", "z", "n"], ["zzzzza", "b", "a"], ["o", "b", "a"], ["ma", "m", "m"], ["mz", "z", "a"], ["AbCdEfGhIjKlMnOpQrStUvWxAWbCdEfGhIjKlMnOpQrStUvWxYzz", "a", "a"], ["zzzAbCdEfGhIjKlaMnOGpQrStUvWxAbCdEfGhIjKlMnOpQrStUvWxYzzzz", "a", "a"], ["pytohona", "z", "a"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(newch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newch) == 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")\n"}
{"task_id": "Mbpp/475", "prompt": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n", "entry_point": "sort_counter", "canonical_solution": "\ndef sort_counter(dict1):\n return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n", "base_input": [[{"Math": 81, "Physics": 83, "Chemistry": 87}], [{"Math": 400, "Physics": 300, "Chemistry": 250}], [{"Math": 900, "Physics": 1000, "Chemistry": 1250}]], "atol": 0, "plus_input": [[{"A": 1000, "B": 1000, "C": 1000, "D": 1000, "E": 1000}], [{"A": -10, "B": 20, "C": -5, "D": 15, "E": 0}], [{}], [{"A": 1000000, "B": 500000, "C": 750000, "D": 250000, "E": 500000, "F": 1000000}], [{"A": 1, "B": 3, "C": 2, "D": 5, "E": 4, "F": 7, "G": 6}], [{"A": -5, "B": -10, "C": 0, "D": -2, "E": -7, "F": -3}], [{"A": 10, "B": 20, "C": 30, "D": 40, "E": 50, "F": 60, "G": 70, "H": 80, "I": 90, "J": 100}], [{"A": 100, "B": 200, "C": 300, "D": -100, "E": -200, "F": -300}], [{"Apple": 5, "Banana": 10, "Cherry": 15, "Durian": 20, "Elderberry": 25}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "Elderberry": 5}], [{"A": 1000000, "B": 500000, "C": 100000, "D": 1000000000}], [{"A": 1000000, "B": 500000, "C": 100000, "D": 1000000000, "E": 100001}], [{"B": 20, "C": -5, "D": 15, "E": 6, "Durian": 19}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": 66.75054378343333, "23.456168040559433": -21.785397857424897, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "87.65436569878796": 40.25079980305773, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224}], [{"A": 1000000, "B": 500000, "D": 1000000000}], [{"A": 1000000, "B": 19, "C": 750000, "D": 250000, "E": 500000, "F": 1000000}], [{"A": -5, "B": -10, "C": 0, "E": -7, "F": 7}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5}], [{"A": 1000000, "C": 750000, "D": 250000, "E": 500000, "F": 1000000}], [{"A": -10, "C": -5, "D": 15, "E": 0}], [{"A": 1000000, "B": 500000, "C": 100000, "D": 1000000000, "AA": -7, "": 500000}], [{"A": 1000000, "B": 19, "C": 749999, "D": 250000, "E": 500000, "F": 1000000}], [{"A": 1000000, "B": 499999, "D": 1000000000}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "Elderberry": 4}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": 66.75054378343333, "23.456168040559433": -22.73580203466535, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "ChEerry": 5, "Duarian": 5}], [{"A": 1000, "B": 1000, "C": -5, "D": 1000, "E": 1000, "CC": 1001}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "Elderberry": 5, "Appl": 6}], [{"A": -10, "B": 20, "C": -6, "D": 15, "E": 0}], [{"Apple": 5, "Cherry": 5, "Durian": 5, "Elderberry": 4, "": 6}], [{"A": 1000, "B": -6, "C": -5, "D": 1000, "E": 1000, "CC": 1001}], [{"A": -10, "B": 20, "C": -5, "D": 15, "E": 749999}], [{"A": 1000, "B": 1000, "C": -200, "D": 1000, "E": 1000}], [{"Apple": 5, "Cherry": 4, "Durian": 5, "Elderberry": 4, "": 30, "DurBian": 6}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 4, "ChEerry": 5, "Duarian": 5}], [{"A": 1000000, "B": 19, "C": 749999, "D": 250000, "F": 1000000}], [{"A": 10, "B": 20, "C": 30, "D": 40, "E": 10, "F": 60, "G": 70, "I": 90, "J": 100}], [{"A": 1000000, "B": 500000}], [{"A": -10, "B": 20, "C": -5, "E": 0}], [{"A": -10, "B": 20, "C": -5, "D": -100, "E": 749999}], [{"A": 1000000, "C": 750000, "D": 250000, "E": 500000, "F": 1000000, "G": 50}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": 86.96654380163642, "23.456168040559433": -22.73580203466535, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224}], [{"Apple": 5, "Banana": 5, "Cherry": 1, "Durian": 5, "Elderberry": 4}], [{"Apple": 5, "Banana": 5, "Durian": 5, "Elderberry": 5, "Duriian": 6}], [{"B": 200, "C": 300, "D": -100, "E": -200, "F": -300}], [{"A": 10, "B": 20, "C": 30, "E": 50, "F": 60, "G": 70, "H": 80, "I": 90, "J": 100}], [{"A": 10, "B": 20, "C": 30, "E": 50, "F": 60, "H": 80, "I": 90, "J": 100}], [{"A": 1000000, "B": 19, "C": 749999, "D": 250000, "E": 500000, "F": 999999}], [{"A": 1000, "B": 1000, "C": -5, "D": 1000, "E": 1000, "Duarian": 999}], [{"200": -13.699369452712531, "19": -22.73580203466535, "50": 87.65436569878796, "13": -54.297828045785266, "82": 86.96654380163642, "29": -74.13390884180842}], [{"A": 1000, "B": 1000, "C": 71, "D": 1000, "E": 1000, "CC": 1001, "ECC": 2}], [{"Banana": 5, "Durian": 5, "Elderberry": 4}], [{"A": -10, "C": -5, "D": 15, "E": 749999}], [{"200": 87.65436569878796, "19": -22.73580203466535, "50": 87.65436569878796, "13": -54.297828045785266, "82": 86.96654380163642, "29": -74.13390884180842}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "Elderberry": 5, "Bananaa": 6}], [{"A": 10, "C": 30, "D": 40, "E": 50, "F": 60, "G": 70, "H": 80, "I": 90, "J": 100}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "Duarian": 5}], [{"Banana": 15, "Durian": 5, "Elderberry": 4}], [{"Durian": 5}], [{"A": 1000, "B": 1000, "C": 71, "D": 1000, "E": 1000, "CC": 1001, "ECC": -6, "": 1001}], [{"A": 1000000, "B": 19, "C": 749999, "D": 250000, "F": 999999}], [{"A": 1000, "C": -5, "D": 1000, "E": 1000, "Duarian": 999, "AA": 300}], [{"A": 1000000, "B": 500000, "C": 100000, "D": 1000000000, "AA": -7}], [{"Apple": 5, "Cherry": 4, "Durian": 5, "Elderberry": 4, "": 30, "DurBian": 6, "ChEerry": -7}], [{"A": 1000000, "C": 750000, "D": 250000, "E": 500000}], [{"A": 1000000, "B": 500000, "C": 750000, "D": 250000, "F": 1000000, "EB": 249999}], [{"Apple": 5, "Banana": 19, "Durian": 5, "Elderberry": 5, "Duriian": 6}], [{"Apple": 5, "Cherry": 5, "Elderberry": 5, "Appl": 19}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": 86.96654380163642, "23.456168040559433": -22.73580203466535, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224, "-45.19320955711239": 40.25079980305773}], [{"A": -10, "B": 20, "C": -6, "E": 0, "BI": -300}], [{"B": 20, "C": -6, "E": 0}], [{"A": 80, "C": -5, "D": 15, "E": 749999}], [{"B": 20, "C": -5, "D": 15, "E": 0}], [{"A": 1000, "B": 1000, "C": 999, "D": 1000, "E": 1000}], [{"B": 1000, "C": -5, "D": 1000, "CC": 1001}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": -7, "Elderberry": 5, "Bananaa": 6}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": 86.96654380163642, "23.456168040559433": -22.73580203466535, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224, "18.187389932137382": 40.020936818852114}], [{"Cherry": 5, "Durian": 5, "Elderberry": 4, "": 6}], [{"Durian": 5, "DurBian": 6}], [{"A": 10, "B": 20, "C": 30, "D": 40, "E": -100, "F": 60, "G": 70, "I": 90, "J": 100}], [{"B": -10, "C": 0, "D": -2, "E": -7, "F": -3}], [{"A": 10, "C": 30, "D": 40, "E": 50, "G": 70, "H": 80, "I": 90, "J": 100}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": 86.96654380163642, "23.456168040559433": -22.73580203466535, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224, "18.187389932137382": 40.020936818852114, "-90.92860167400039": 80.77796251561224}], [{"Apple": 5, "Cherry": 4, "Durian": 249999, "Elderberry": 4, "": 30, "DurBian": 6}], [{"A": 1000000, "B": 499999, "C": 750000, "D": 250000, "E": 500000, "F": 1000000}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": -7, "Elderberry": 5, "Bananaa": 6, "Ch": -8}], [{"B": 200, "C": 300, "D": -100, "E": -200, "F": -300, "": 200}], [{"Apple": 15, "Banana": 5, "Cherry": 5, "Durian": 5, "Elderberry": 5, "Bananaa": 6, "Bannanaa": 5}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "ChEerry": 5}], [{"A": 1000000, "B": 500000, "C": 100000}], [{"A": 10, "B": 21, "C": 30, "D": 40, "E": 10, "F": 60, "G": 70, "I": 90, "J": 100}], [{"Apple": 5, "Cherry": 4, "Durian": 21, "Elderberry": 4, "": 30, "DurBian": 6, "ChEerry": -7, "B": 4}], [{"Banana": 5, "Durian": 5, "Elderberry": 4, "Elyderberry": 70}], [{"Apple": 5, "Banana": 5, "Elderberry": 5, "Duriian": 6}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": -86.29486535994447, "23.456168040559433": -22.73580203466535, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224, "-51.29311357277765": -90.12008614835415}], [{"A": 1000000, "B": 500000, "D": 250000, "E": 500000, "F": 1000000}], [{"A": 10, "C": 30, "D": 40, "E": 50, "G": 70, "H": 80, "I": 90, "J": 21}], [{"A": -10, "B": 20, "C": -5, "D": 1001, "E": 749999}], [{"B": 200, "D": -100, "F": -300, "FAppl": -201, "AA": 201}], [{"B": -10, "C": 0, "E": -7, "F": 7}], [{"A": 80, "C": -5, "D": 15, "E": 749999, "J": 16, "CC": 749998}], [{"200": -13.699369452712531, "19": -22.73580203466535, "50": 87.65436569878796, "13": -54.297828045785266, "82": 86.96654380163642, "29": -74.13390884180842, "12": -109.25130401662261}], [{"A": -10, "C": -5, "E": 749999, "J": 6, "Cherry": 750000}], [{"-1.5040512093813732": 31.088880669323828, "-68.06007644803495": -45.19320955711239, "-35.77677868980413": 52.11949901444851, "18.594228907699772": -86.29486535994447, "-64.82206635736263": -90.92860167400039, "34.37817144478964": -54.297828045785266, "64.16101544098183": -89.55867599806567, "60.92484190584344": 80.77796251561224, "-51.29311357277765": -90.12008614835415, "-68.51509638551735": 60.92484190584344}], [{"A": -10, "B": 19, "C": -6, "D": 15, "E": 0, "CECC": 10}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 5, "Elderberry": 12, "Bananaa": 6}], [{"Banana": 4, "Elderberry": 4, "EDuarianlderberry": 29, "Duarian": 29}], [{"Apple": 15, "Banana": 5, "Cherry": 5, "Durian": 5, "Bananaa": 200, "Bannanaa": 5}], [{"A": -5, "B": -10, "C": 100001, "D": -2, "E": -7, "F": -3}], [{"Apple": 5, "Banana": 5, "Cherry": 5, "Durian": 71, "Bananaa": 6}], [{"A": 1000, "B": 1000, "C": 71, "D": 1000, "E": 21, "CC": 1001, "ECC": -6, "DD": 29}]], "contract": "\n assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, (int, float)) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n"}
{"task_id": "Mbpp/476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "entry_point": "big_sum", "canonical_solution": "\ndef big_sum(nums):\n      return max(nums) + min(nums)\n", "base_input": [[[1, 2, 3]], [[-1, 2, 3, 4]], [[2, 3, 6]]], "atol": 0, "plus_input": [[[-10, -5, -3, -1, -7]], [[-10, -5, -4, -3, -1, -7, -4]], [[-10, -5, -1, -7]], [[-10, -5, -4, -3, -1, -7, -4, -5]], [[-10, -5, -4, -3, -7, -4]], [[-10, -3, -1, -7, -5]], [[-10, -5, -4, -3, -6, -4]], [[-10, -5, -4, -5, -3, -6, -4]], [[-10, -5, -3, -1, -7, -3]], [[-10, -5, -4, -3, -6, -1, -7, -4, -7]], [[-10, -5, -4, -5, -9, -3, -6, -4, -5]], [[-10, -5, -4, -5, -9, -3, -6, -4, -5, -4]], [[-10, -5, -4, -3, -6, -4, -6]], [[-10, -3, -7, -5]], [[-2, -10, -5, -4, -3, -1, -7, -4]], [[-10, -5, -1, -4]], [[-2, -10, -3, -1, -7, -5]], [[-4, -5, -3, -1, -7]], [[-10, -3, -5, -7, -5]], [[-10, -5, -4, -3, -1, -7, -4, -5, -3]], [[-10, -5, -4, -1, -7, -4, -5, -3]], [[-4, -5, -3, -1, -7, -1]], [[-10, -5, -4, -3, -4, -6, -4, -10]], [[-4, -5, -3, -1, -7, -7]], [[-4, -5, -1, -7, -7]], [[-5, -5, -2, -7]], [[-10, -5, -4, -3, -6, -7, -4, -7]], [[-10, -5, -3, -2, -7]], [[-2, -5, -3, -2, -7]], [[-2, -10, -3, -1, -7, -2, -5]], [[-4, -5, -3, -1, -10, -1]], [[-4, -5, -3, -1, -10]], [[-10, -5, -4, -4, -1, -7, -4, -5, -3]], [[-5, -4, -7, -1, -7, -4, -5, -3]], [[-10, -5, -4, -5, -9, -3, -6, -4, -5, -10]], [[-10, -5, -4, -2, -4, -6, -4, -10]], [[-10, -5, -4, -4, -1, -7, -4, -5, -3, -3]], [[-10, -5, -4, -5, -7, -3, -6, -4]], [[-8, -4, -5, -3, -1, -7, -7]], [[-10, -5, -1, -4, -10]], [[-4, -5, -1, -10, -1]], [[-5, -5, -3, -1, -7]], [[-10, -5, -5, -5]], [[-9, -10, -3, -7, -5]], [[-10, -5, -4, -3, -6, -4, -10]], [[-10, -5, -4, -5, -3, -3, -4]], [[-4, -5, -1, -10, -1, -1]], [[-10, -7, -5]], [[-10, -5, -5, -7, -5, -3, -6, -4]], [[-4, -5, -3, -1, -4]], [[-4, -5, -3, -1, -5, -10]], [[-10, -5, -4, -1, -9, -7, -4, -5, -3]], [[-10, -4, -5, -7, -5]], [[-2, -10, -3, -1, -7, -5, -5]], [[-4, -3, -10]], [[-2, -5, -3, -2, -7, -5]], [[-6, -2]], [[-10, -5, -3, -4, -3, -4, -6, -4, -10]], [[-10, -5, -4, -1, -9, -7, -3, -5, -3, -5]], [[-5, -5, -7]], [[-10, -5, -4, -1, -7, -4, -5, -3, -5]], [[-10, -5, -4, -2, -4, -6, -10, -10]], [[-6, -5, -4, -7, -1, -7, -4, -5, -3]], [[-5, -5, -3, -6, -7]], [[-1, -5, -1, -4, -10]], [[-10, -5, -4, -2, -4, -6, -10]], [[-10, -5, -1, -4, -5]], [[-9, -10, -3, -9, -5]], [[-5, -1, -4]], [[-9, -2, -10, -3, -7, -2]], [[-10, -5, -5, -3, -5]], [[-10, -5, -4, -3, -1, -7, -4, -10]], [[-10, -5, -4, -4, -1, -7, -4, -5, -1, -3]], [[-10, -5, -4, -5, -9, -3, -6, -4, -5, -6, -4]], [[-10, -4, -5, -4, -5, -3, -4, -5]], [[-9, -10, -3, -9, -5, -10, -9]], [[-10, -5, -4, -1, -9, -7, -3, -5, -8, -3, -5]], [[-10, -8, -4, -3, -1, -7, -4]], [[-4, -5, -1, -7]], [[-9, -10, -5, -4, -3, -1, -7, -4, -5, -3, -3]], [[-9, -10, -5, -5, -7, -5, -8, -3, -6, -4]], [[-2, -4, -9, -3, -1, -7, -2, -5]], [[-10, -5, -4, -4, -7, -3, -6, -4]], [[-5, -5, -3, -9, -1, -7]], [[-2, -10, -4, -4, -3, -1, -7, -4]], [[-6, -5, -9, -7, -1, -7, -4, -5, -3]], [[-10, -4, -7, -5]], [[-10, -4, -4, -2, -10]], [[-6, -5, -9, -7, -1, -7, -4, -5, -3, -6]], [[-10, -4, -5, -7, -5, -7]], [[-10, -5, -4, -5, -7, -3, -6, -4, -3]], [[-10, -5, -4, -5, -7, -3, -6, -1, -4]], [[-10, -5, -3, -1, -8, -7, -8]], [[-10, -4, -7, -5, -7]], [[-10, -5, -4, -5, -9, -6, -4, -5, -6, -4, -6, -6]], [[-10, -5, -4, -4, -1, -7, -4, -5, -5, -3]], [[-10, -5, -9, -1, -4, -5]], [[-10, -5, -4, -4, -1, -7, -4, -3, -3, -3]], [[-9, -10, -5, -4, -11, -3, -1, -7, -4, -5, -3, -3, -5]], [[-5, -10, -5, -7, -5, -6, -4]], [[-9, -10, -3, -9, -5, -5]]], "contract": "\n      assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n      assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n"}
{"task_id": "Mbpp/477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "entry_point": "is_lower", "canonical_solution": "\ndef is_lower(string):\n    return string.lower()\n", "base_input": [["InValid"], ["TruE"], ["SenTenCE"]], "atol": 0, "plus_input": [[""], ["True"], ["FALSE"], ["123"], ["StRiNg"], ["LOWER CASE"], ["nUmBeRs 123"], ["    extra spaces    "], ["camelCase"], ["UPPERCASE"], ["LOWER CASOE"], ["LOWER SE"], ["camelCacamelCasese"], ["1123"], ["LOWTrueER CASOE"], ["11123"], ["spaces"], ["LOWER CASCE"], ["LOWTrucamespaceslCacamelCaseseeER CASOE"], ["SE"], ["extra"], ["X"], ["LOWTrucamespaceslCacam11123 CASOE"], ["exxtra"], ["LOWTrucamespaceslCacam11123"], ["Trrue"], ["LOWRER CASOE"], ["LOWEWR CEASE"], ["LOWER CASROE"], ["TUPPERCASErue"], ["Trrrue"], ["LOWER CAROE"], ["LOWER"], ["LOWER CAS ROLOWRERE"], ["LOWER ROLOWRERECAS ROLOWRERE"], ["LOWER LCASCE"], ["CASCE"], ["camelCaese"], ["LOWRER"], ["CAROE"], ["xLOWER CASOexxtraE"], ["camelCasme"], ["eTrrCASOexxtraEue"], ["xLOWER"], ["11eTrrCASOexxtraEue123"], ["eTrrCASOexxtraaEue"], ["C"], ["camelCsme"], ["spnUmBeRsaces"], ["LOWEWR"], ["LOWER ALCASCE"], ["camelCslme"], ["LCASCE"], ["LR CASOE"], ["oa"], ["LOWTrueER"], ["SLOWER SE"], ["eTrrCASOexxtraaEuCASOexxtraEe"], ["LLOWTrueEROWER CASLOWEWR CEASE ROROLOWREREOLOWRERE"], ["TruenUmBeRs"], ["g"], ["CASE"], ["oaa"], ["LOWER ROLOWRERECAS ROLLOWER SEOWRERE"], ["11eTrrCASOexxte123"], ["SSE"], ["FvqXvHKtQ"], ["xLOWERO CASOexxtra"], ["ROROLOWREREOLOWRERE"], ["RACAROE"], ["LOWR SE"], ["cLLOWTrueEROWER CASLOWEWR CEASE ROROLOWREREOLOWREREamelCacamelCasese"], ["eLCASCExtra"], ["sspnUmBeRsaces"], ["LOWER ROLOWRERECAS ROLLOWER SEOWREREoa"], ["Trueg"], ["LOWER ROLOWRERxLOWERO CASOexxtraECAS ROLLOWER SEOWREREoa"], ["cLLOWTrueEROWER"], ["LOWTrueR"], ["11eTrrCASOexxtraExLOWEaROue123"], ["CCAROE"], ["ceamelCasme"], ["SL OWER SE"], ["eLCASCExtraSSE"], ["TUPPERCASErueSE"], ["caeTrrCASexxtraEuemelCase"], ["LOWOTrueER"], ["111323"], ["WLOWEWOR CEASE"], ["CASOexxtraE"], ["SEOWRERE"], ["123LOWTrueER CASOE"], ["cLLOWTrueEROWER CASLOWEWR CEASE ROROLOWREREOLEOWREREamelCacamelCaLOWRER CASOEsese"], ["camTruegelCaese"], ["oeTrrCASOexxtraEueaa"], ["SL OWER oeTrrCASOexxtraEueaaSE"], ["Tre"], ["ROLLOWER"], ["cLLOWTrueEROWERSLOWER SE"], ["CASOexxtra LCASRCE"], ["LOWER cLLOWTrueEROWERSLOWERASCE"], ["LOWER CCE"], ["LsspnUmBeRsacesOWER LCASCE"], ["cLLOWTrueEROWERSLOWERASCE"], ["CASOexxtra LC ASRCE"], ["LROROLOWREREOLEOWREREamelCacamelCaLOWRERER"], ["LCASRCE"], ["spaceROLOWREREs"], ["LR nUmBeRsxLOWERCASOE"], ["12LOWEROROLOWREREOLEOWREREamelCacamelCaLOWRERR CASE3LOWTrueER CASOE"]], "contract": "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n"}
{"task_id": "Mbpp/478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "entry_point": "remove_lowercase", "canonical_solution": "\nimport re\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n", "base_input": [["PYTHon"], ["FInD"], ["STRinG"]], "atol": 0, "plus_input": [[""], ["AbCdEfGhIjKlMnOpQrStUvWxYz"], ["aBCDefghIJKLMNOpQRSTUVWXYz"], ["aBcDeFgHiJkLmNoPqRsTuVwXyZ"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpQRSTUVWXYz"], ["AbQCdEfKGhIjKlMnOpQrStUvWxYz"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYz"], ["aBcDeFgHiJkLmNoPqRsTuVwZ"], ["AbCdEfGhIhjKlMnOpQrStUvWxYz"], ["AbCdEfGhIjKlMnOpQrStUUvWxYz"], ["aAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZ"], ["AbCdEfGhIhjKlMnOpQrStUaBcDeFgHiJkLmNoPqRsTuVwXyZvWxYz"], ["aBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYz"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzRSTUVWXYz"], ["aBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFgHiJkLmNoPqRsTuVwXyZ"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTeUVWXYzRSTUVWXYz"], ["AbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYz"], ["aBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzyZ"], ["aBCDefgaaAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["AbCdEfEGhIhjKlMnOpQrStUvWxYz"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYz"], ["aBcDAbQCdEfKGhIjKlMnOpQrStUvWxYzeFgHiJkLmNoPqRsTuVwZ"], ["aBcDAbQCdEfKGhIjKlMnOpQrStUvWxYzeFgHiJkLmNoPqRsTuVZ"], ["AbCdEfEGhIhjKlMnOpQAbCdEfGhIjKlMnOpQrStUvWxYzvWxYz"], ["aBcDeaBCNDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVAbQCdEfKGhIjKlMnOpQrStUvWxYzwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzyZ"], ["AbCdEfGhIjKlMnOpQrStUvWxYKz"], ["q"], ["AbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzz"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYezRSTUVWXYz"], ["AbCdEfGhIhhjKlMnOpQrStUaBcDeFgHiiJkLmNoPqRsTuVwXyZvWxYz"], ["aBCDefghIJKLMNAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzOpQRSTUVWXYz"], ["aAbCdEfGhIjKlMnOpQrStUUvWxbYzBcDeFgHiJkLmNoPqRsTuVwXyZ"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYzAbQCdEfKGhIjKlMnOpQaBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFCgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzyZStUvWxYz"], ["AbCdEfGhIjKlMnOpQrStUvWxYzH"], ["aAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYezRSTUVWXYztUUvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["qq"], ["AbCdEfGhIjKlMnOpQrStUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzWxYz"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNogPqRsTuVwXRyZhIJKLMNOpAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["aBCDefgaBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYLz"], ["aBcDeFgHiJkLmNoPqRsBTuVwXyZ"], ["AbCdEfGhIjKlMnOpQrStUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYz"], ["aBcDAbQCdAbCdEfGhIhhjKlMnOpQrStUaBcDeFgHiiJkLmNoPqRsTuVwXyZvWxYzEfKGhIjKlMnOpQrStUvWxYzeFgHiJkLmNoPqRsTuVwZ"], ["AbQCdEfKtGhIjKlMnOpQrStUvWxYz"], ["aAbCdEfGAbCdEfGhIjKlMnOpQrStUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVAbCdEfEGhIhjKlMnOpQrStUvWxYzWXYzWxYzhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZ"], ["aAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzUVWXYezRSTUVWXYztUUvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"], ["aBcDAbQCdEfKGhIjKlMnOpQAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzrStUvWxYzeFgHiJkLmNoPqRsTuVZ"], ["AbQCdEfKtGhIjKlMnOpQrStUvAbCdEfGhIhjKlMnOpQrStUvWxYzWxYz"], ["aBCDefgaBcDeFgHiJkLmVwXRyAbCaBcDeaBCNDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVAbQCdEfKGhIjKlMnOpQrStUvWxYzwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzyZdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYz"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYzAbQCdEfKGhIjKlMnOpQaBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFCgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzYzZhIJKLMNOpaQRSTUVWXYzyZStUvWxYz"], ["AbCStUvWxYz"], ["AbCdEfGhIjKlMnOpQrSttUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYz"], ["AbkCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxeYz"], ["AbQCdEfKGhIjKlMnOIpQrStUvWxYz"], ["AbCdEfGhIhjKlMnOpQrStUvWxYlz"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStAbCdEfGhIjKlMnOpQrSttUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYzUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYzAbQCdEfKGhIjKlMnOpQaBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFCgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYYzyZStUvWxYz"], ["aBCDefaghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYz"], ["aBcDeFgHiJkLmNoPqRsBTuVwXysZ"], ["AbCvWxYz"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxUVWXYz"], ["aAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTu"], ["AbCdEfGhIhjKlMnOpQrStUaBaAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZLmNoPqRsTuVwXyZvWxY"], ["aBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaaQRSTUVWXYz"], ["AbCdEfGhIjKlMnOpQrStEUvWxYzH"], ["AbCdEfGhIjKlMnOaBcDAbQCdEfKGhIjKlMnOpQAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzrStUvWxYzeFgHiJkLmNoPqRsTuVZpQrStUvWxYKz"], ["AbCdEfGhIjKlMnOUVWXYzWxYz"], ["aBcDAbQCdEfKGhIjKlMnOpQrStUvWxYzeFgHiJkLmNoPqRsTuDVZ"], ["aBCDefgaBcDeFgHiJkLmNoPqRsAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzTuVwXyZhIJKLMNOpQRSTUVWXYz"], ["aBCDefgaBcDeFgHiJkLmVwXRyAbCaBcDeaBCNDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVAbQCdEfKGhIjKlMnOpQrStUvWxYzwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzKLMNOpaQRSTUVWXYzyZdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYz"], ["aBCDefghIJAbQCdEfKtGhIjKlMnOpQrStUvWxYzKLMNAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzOpQRSTUVWXYz"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYzaBcDeFgHiJkLmNoPqRsBTXysZ"], ["aBCDefgJhIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxUVWXYz"], ["aBcDAbQCdEfKGhIjKlMnOpQAbCdEaBcDeFgHiJukLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzrStUvWxYzeFgHiJkLmNoPqRsTuVZ"], ["aBeFgHiJkLmNoPqRsBTuVwXyZ"], ["aBcDeaBCDefgaBcDeFgHiJkLmoPqRsTuVwXyZ"], ["aAAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIaBCDefgaBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNogPqRsTuVwXRyZhIJKLMNOpAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNogPqRsTuVwXRyZhIJKLMNOpAbCdEaAbCdEfGhIjKlMnOpQrSttUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYzBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["aAbCdEfGAbCdEfGhIjKlMnOpQrStUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVAbCdEfEGhIhjKlMnOpQrStUvWxYzWXYaBCDefgaBcDeFgHiJkLmNoPqRsAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzTuVwXyZhIJKLMNOpQRSTUVWXYzzWxYzhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZ"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJaAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuzaBcDeFgHiJkLmNoPqRsBTXysZ"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNogPqRsTuVwXRyZhIJKLMNOpAbCdEaAbCdEfGhIjKlMnOpQrSttUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYzBcDeFgHiJkLmNoPqRsTuVwXyZfaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYezRSTUVWXYzGhIhjKlMnOpQrStUvWxYzaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["AAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzbCvWxYz"], ["AbCdEfGhIhjKlMnAbCdEfGhIjKlMnOpQrStUvWxYzOpQrStUvWxYz"], ["AbCdEfGhIaBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzyZjKlAbCdEfGhIjKlMnOpQrStEUvWxYzHQrStUUvWxYz"], ["aAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIaBCDefgaBcDeFgHiJkLmNoPqRsTuVSTUVWXYzUVWXYezRSTUVWXYztUUvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"], ["aBcDAbQCdEfKGhIjhKlMnOpQrStUvWxYzeFgHiJkLmNoPqRsTuVwZ"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNogPqRsTuVwXRyZhIJKLMNOpAbCdEaAbCdEfGhIjKlMnOpQrSttUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYzBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzaQRSTUVWXYzaBCDefaghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYz"], ["x"], ["IXEPuE"], ["AbCdEbfGhIjKlMnOpQrStUvWxYzH"], ["AbCdEfGhIbjKlMnOpQrStUUvWxYz"], ["aAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEAbCdEfGhIhjKlMnAbCdEfGhIjKlMnOpQrStUvWxYzOpQrStUvWxYzfGhIaBCDefgaBcDeFgHiJkLmNoPqRsTuVSTUVWXYzUVWXYezRSTUVWXYztUUvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"], ["AbCdEfGhIbjKlMnOpQrStUUvWxAbCdEfGhIhjKlMnOpQrStUaBcDeFgHiJkLmNoPqRsTuVwXyZvWxYzYz"], ["aAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEAbCdEfGhIhjKlMnAbCdEfGhIjKaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzlMnOpQrStUvWxYzOpQrStUvWxYzfGhIaBCDefgaBcDeFgHiJkLmNoPqRsTuVSTUVWXYzUVWXYezRSTUVWXYztUUvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYzAbQCdEfKGhaBCDefghIJKLMNAbCdEfGhIhjKlMnOpQrStUvWxYAbQCdEfKGhIjKlMnOpQrStUvWxYzzOpQRSTUVWXYzIjKlMnOpQaBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFCgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzYzZhIJKLMNOpaQRSTUVWXYzyZStUvWxYz"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStAbCdEfGhIjKlMnOpQrSttUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVWXYzWxYzUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYzAbQCdEfKGhIjKlMnOpQaBcDeaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzFCgHiJkLmNoPqRsTuVwXaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQStUvWxYz"], ["AbCdEfGhIhjKlMnAbCdEfGhIjKlMnOpQrSAbCStUvWxYztUvWxYzOpQrStUvWxYz"], ["aAbCdEaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYzZhIJKLMNOpaQRSTUVWXYzfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIaBCDefgaBcDeFgHiJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzUVWXYezRSTUVWXYztUUvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"], ["AaAbCdEfGAbCdEfGhIjKlMnOpQrStUvaBCDefgaBcDeFgHiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVAbCdEfEGhIhjKlMnOpQrStUvWxYzWXYzWxYzhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZbCdEfGhIhjKlMnOpQrStUvWxYlz"], ["AaAbCdEfGAbCdEfGiJkLmVwXRyAbCdEfGhIhjKlMnOpQrStUvWxYOzZhIJKLMNOpaQRSTUVAbCdEfEGhIhjKlMnOpQrStUvWxYzWXYzWxYzhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZbCdEfGhIhjKlMnOpQrStUvWxYlz"], ["AbCdEfGhIhjKlMnOpQrStUaBaAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuVwXyZLimNoPqRsTuVwXyZvWxY"], ["aBCDefghIJKLMNOpQRSTAbCdEfGhIhjKlMnOpQrStbUaBCDefghIJKLMNOpQRSTUVWXYzvWxYzUVWXYz"], ["aBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHisJkLmNoPqRsTuVwXRyZhIJKLMNOpaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJaAbCdEfGhIjKlMnOpQrStUUvWxYzBcDeFgHiJkLmNoPqRsTuzaBcDeFgHiJkLmNoPqRsBTXysZ"], ["aAbCdEfGhIjKlMnOpQrSaBCDefgaBcDeFgHiJkLmNoPqRsTuaBCDefgaBcDeFgHiJkaBCDefgaaAbCdEfGhIjKlMnOpQAbQCdEfKGhIjKlMnOpQrStUvWxYzrStUUvWxYzBcDeFWgHiJkLmNoPqRsTuVwXyZaBCDefgaBcDeFgHiJkLmNogPqRsTuVwXRyZhIJKLMNOpAbCdEaBcDeFgHiJkLmNoPqRsTuVwXyZfGhIhjKlMnOpQrStUvWxYzaQRSTUVWXYzBcDeFgHiJkLmNoPqRsTuVwXyZhIJKLMNOpaQRSTUVWXYzLmVwXRyAbCdEfGhIaBCDefgaBcDeFgHiJkLmNoPqRsTuVSTUVWXYzUVWXYezRSTUVWXYztUUWvWxbYzBcDeFgHiJkLwmNoPqRsTuVwXyZ"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\n"}
{"task_id": "Mbpp/479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "entry_point": "first_Digit", "canonical_solution": "\ndef first_Digit(n) :  \n    return int(str(n)[0])\n", "base_input": [[123], [456], [12]], "atol": 0, "plus_input": [[0], [9999999999999999], [12345678901234567890], [1], [9999999999999998], [12345678901234567889], [12345678901234567888], [10000000000000000], [12345678901234567887], [10000000000000001], [12345678901234567885], [12345678901234567886], [9999999999999997], [2], [12345678901234567891], [75], [76], [74], [12345678901234567892], [3], [77], [73], [12345678901234567893], [26], [95], [96], [78], [10000000000000003], [94], [12345678901234567894], [12345678901234567884], [79], [25], [10000000000000002], [12345678901234567883], [80], [12345678901234567895], [12345678901234567896], [71], [9999999999999996], [72], [12345678901234567882], [88], [27], [10000000000000004], [4], [89], [10000000000000005], [5], [97], [87], [98], [24], [90], [10000000000000006], [12345678901234567897], [62], [70], [28], [23], [69], [93], [86], [10000000000000007], [68], [61], [92], [22], [12345678901234567881], [9999999999999995], [55], [10000000000000008], [9999999999999994], [81], [21], [99], [85], [6], [54], [12345678901234567898], [91], [20], [19], [53], [8], [67], [82], [9999999999999993], [56], [49], [63], [64], [30], [12345678901234567899], [65], [66], [42], [12345678901234567880], [29], [9], [48], [60], [31]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n"}
{"task_id": "Mbpp/554", "prompt": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n", "entry_point": "Split", "canonical_solution": "\ndef Split(l): \n    return list(filter(lambda x: x % 2 == 1, l))\n", "base_input": [[[1, 2, 3, 4, 5, 6]], [[10, 11, 12, 13]], [[7, 8, 9, 1]]], "atol": 0, "plus_input": [[[-3, 0, 5, -9, 10, -13]], [[1, -2, 3, -4, 5, -6, 7, -8, 9, -10]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1]], [[-1000, 500, -100, 250, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000]], [[-3, 0, 5, -9, 10, -13, 5]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, -1]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1, 65]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, -12, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1]], [[-3, 0, 5, -9, 10, 1, -13, 5]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, -1, 90]], [[-3, 0, 5, -9, 10, -13, 5, -13]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -1]], [[-1000, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1, -13]], [[12, 43, -56, 78, 90, 65, 0, 23, -1, 12]], [[12, 43, -56, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, 0]], [[-3, 0, 5, -9, 10, -13, 1, -13]], [[-3, 0, 5, -9, 10, -13, 1, -13, 10]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12]], [[12, 350, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, -12, 0, 90]], [[-3, 0, 5, -9, 10]], [[12, 350, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, 0, 90]], [[12, 43, -56, 78, 90, 65, 0, 23, -1, 12, 43]], [[0, 5, -9, 10]], [[12, 43, 5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, 0]], [[12, 43, 78, 90, -34, 65, 0, 23, -12, 65, 0]], [[false, false, false]], [[12, -56, 78, 90, -34, 65, 0, 23, -12, 65, 0]], [[-3, 0, 5, 10, -13, 1, -13]], [[9, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1, 65, 78]], [[-3, 10, 0, 5, 10, -13]], [[-3, 0, 5, -9, 10, -13, 1, -13, 0]], [[-3, 0, 5, -9, 10, 12, -13, 1, -13, 0]], [[12, 43, -56, 78, -13, -450, 90, -34, 64, 0, -12, -1, -13]], [[12, 43, -56, 78, -13, 90, 64, 0, 23, -12, -1, -1]], [[-50, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1]], [[500, 0, 5, -9, 10, -13]], [[1, -2, 6, 3, 100, 5, -6, 7, -8, 9]], [[12, 250, -56, 78, 90, -34, 64, 0, 23, 90, -12, -1, 90, -12]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1, -34]], [[-3, -50, -9, 9, -13, 0]], [[12, 43, -56, 78, 90, -34, 64, 0, 77, 23, -12, -1, 90]], [[12, 43, -56, 78, 90, 65, -56, 0, 23, -1, 12]], [[12, -56, 78, 90, 10, -34, 65, 0, 23, -12, 65, 0]], [[12, 43, -56, 78, -13, -450, 90, -34, 64, 0, 9, -12, -1, -13]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, -11, -12, 0]], [[-3, 5, -9, 10, 1, -13, 5]], [[77, -3, 5, -9, 10, 1, -13, 5]], [[13, 43, -56, 78, 90, 65, -56, 0, 23, -1, 12]], [[12, -56, 78, 90, 10, -6, 65, 0, 23, -12, 65, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1, 23]], [[-3, 5, -9, 10, -13]], [[12, 43, -56, 78, -13, 90, -1000, 77, 0, 23, -12, -1, 23]], [[-3, 0, -13, -9, 10, -13, 5, -13]], [[-3, 0, 5, 10, 10, 1, -13, 5]], [[-3, 0, 5, 10, 10, 1, -13]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, -1, 90, 64]], [[-3, 0, 5, -9, 10, 1, -13]], [[12, -56, 78, 90, -34, 0, 23, -12, 65, 0, 0]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 900, -11, -12, 0]], [[12, 43, 78, 90, -34, 65, 0, 78, 23, -12, 65, 0, 0]], [[12, -56, 78, 90, 10, -6, 65, 0, 23, -12, 65, 0, 12]], [[12, 43, -56, 78, 43, -34, 65, 0, 23, -1, 43]], [[-3, 0, 5, -1, 10, -13, 1, -13]], [[12, 43, -56, 400, 90, -34, 64, 0, 23, -12, -1, 90]], [[43, -56, 78, 90, 77, -34, -12, 0, -12, -1, 65, 78]], [[0, 5, 10]], [[-3, 0, -9, 10, -13, 1, -13]], [[43, 5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, -1]], [[-1000, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000, 10]], [[-1000, 500, -100, 250, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 1, -700, 800, 900, -1000]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1, 23, 0]], [[-1000, 599, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000]], [[12, 350, 43, -56, 78, 90, -34, 65, 0, 23, -12, 0, -9, 90]], [[-1000, 500, -100, 250, 100, -50, 0, 150, 200, -300, 400, -450, 500, 600, -700, 800, 900, -1000]], [[12, -56, 78, 90, -34, 65, 0, 23, -12, 65, 65, 0]], [[12, 43, -56, 78, 90, -34, 64, 0, -9, 77, 23, -12, -1, 90]], [[-12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1, 23, 0]], [[12, 350, 43, -56, 78, -34, 90, -34, 65, 0, 23, -12, 65, 0, 90, 65]], [[5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, -1]], [[12, 350, 43, -56, 78, 90, -34, 0, 23, -12, 0, -9, 90, 23]], [[12, -56, 78, 90, 10, -34, 65, 0, 23, -12, 65, 5]], [[12, -56, 78, 90, 65, 0, 23, -12, 65, 0, 90]], [[-1000, 599, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 6, 600, -700, 800, 900, -1000]], [[-12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1, 23, 0, 78]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, 0]], [[12, -56, 78, 90, 90, -34, 65, 0, 23, -12, 65, 0]], [[-3, -50, -9, 9, -100, -13, 0]], [[12, -56, 78, 90, -34, 65, 0, 23, -12, 65, 65, 0, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1, 90, -1]], [[12, 43, -56, 78, 43, -34, 65, 0, 23, -1, 43, 23]], [[12, 43, -56, -35, 78, 90, -34, 65, 0, 23, -12, 65, -12, 0]], [[12, 43, -56, 400, 90, -34, -9, 0, 23, -12, -1, 90]], [[12, 43, -56, 90, -34, 64, 0, 77, 23, -12, -1, 90]], [[12, 43, -56, 400, 90, -34, -9, 0, 23, -12, -1]], [[12, 43, 78, 90, -34, 65, 0, 64, 78, 23, -12, 65, 0, 0, 90]], [[12, 43, -56, 78, -34, 64, 0, 77, 23, -12, -1, 90]], [[43, 5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -10, -1]], [[-3, 5, -9, 10, -13, 1, -13, 10]], [[12, 43, -56, 78, 90, 65, 0, 23, -1, 12, 44]], [[11, 12, 43, -56, 78, 90, -34, 65, 0, -35, -12, 65, -12, 0, 65, -12]]], "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]\n"}
{"task_id": "Mbpp/555", "prompt": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n", "entry_point": "difference", "canonical_solution": "\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \n", "base_input": [[3], [5], [2]], "atol": 0, "plus_input": [[0], [10], [100], [101], [99], [1], [102], [8], [2], [3], [4], [true], [false], [11], [9], [5], [42], [7], [43], [103], [51], [6], [81], [82], [50], [52], [98], [12], [49], [97], [37], [41], [22], [26], [80], [40], [44], [13], [21], [46], [20], [96], [48], [45], [47], [53], [38], [79], [23], [25], [104], [19], [24], [95], [91], [78], [14], [36], [94], [39], [63], [93], [30], [62], [29], [77], [35], [90], [92], [28], [83], [89], [57], [18], [105], [61], [16], [15], [58], [27], [72], [56], [85], [33], [76], [73], [75], [59], [60], [17], [84], [55], [31], [74], [32], [88], [54], [87], [106], [64], [107], [108], [34]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n"}
{"task_id": "Mbpp/556", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n", "entry_point": "find_Odd_Pair", "canonical_solution": "\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n", "base_input": [[[5, 4, 7, 2, 1], 5], [[7, 2, 8, 1, 0, 5, 11], 7], [[1, 2, 3], 3]], "atol": 0, "plus_input": [[[], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[2, 4, 6, 8], 4], [[2, 4, 6, 8], 0], [[2, 4, 6, 8], -2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1], [[1, 8, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[10, 1, 8, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7], [[2, 4, 6, 6, 8], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[2, 6, 8], -2], [[2, 4, 6, 8, 4, 2], 4], [[2, 4, 6, 6, 8], 3], [[1, 8, 2, 3, 4, 5, 6, 7, 8, -2, 9, 10], 7], [[5, 2, 6, 8], -3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[2, 4, 6, 8, 4], 0], [[2, 4, 5, 6, 8], -2], [[-3, 2, 4, 6, 8], 0], [[2, 4, 5, 6, 8], -1], [[2, 4, -2, 6, 8], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[2, -2, 6, 8], 2], [[-3, 2, 4, 8], 0], [[1, 8, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8], [[1, 4, 6, 6, 8], -2], [[2, 4, 6, 8, 4, 4], 0], [[2, 4, 6, 6, 8, 8], -2], [[2, 4, 6, 6, 1, 8, 6], 1], [[2, 4, 6, 6, 8, 8, 2], -3], [[-3, 2, 4, 6, 6, 8], 3], [[2, 4, 6, 8, 4, 4], -1], [[2, 4, 6, 8, 4, 3, 2], 4], [[-3, 2, 4, 6, 6, 8, 8], 3], [[2, 3, 6, 6, 1, 8, 6], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6], 1], [[-3, 2, 4, 6, 6, 8, 8], -3], [[2, 0, 4, 6, 8, 4], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1], 1], [[2, 4, 6, 6, 8], 2], [[2, 4, 1, 6, 8, 4, 2], 4], [[1, 7, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[2, -2, 6, 8], 1], [[1, 2, 3, 4, 5, 6, 8, 7, 8, 9], 10], [[2, 4, 6, 8, 4, 4, 8], -1], [[8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0], [[2, 4, 1, 8], 4], [[1, 4, 6, 6, 8, 6], -2], [[2, 8], -1], [[2, 3, 6, 6, 1, 8, 6], 4], [[2, 4, 5, 6, 8, 4, 4], -1], [[0, 2, 4, 6], 4], [[-3, 2, 4, 10, 6, 6, 8], 7], [[8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], 0], [[2, 4, 6, 6, 8], -1], [[1, 7, 2, 3, 5, 6, 7, 8, 9, 10], 8], [[-3, 2, 4, 6, 6, 8, -3, 8], 4], [[-3, 2, 4, 6, 6, 8, -3, 8], -3], [[-2, 6, 8], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 10, 1], 1], [[2, 4, 9, 6, 6, 8], -1], [[2, 4, 6, 6, 8, 8, 2, 2], -3], [[2, 4, -2, 6, 2, 8], 2], [[0, 2, 4, 6, 0], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 10], 10], [[2, 4, -2, 6, 8, 4], 2], [[9, 2, 4, 6, 6, 8], 4], [[4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[2, 4, 6, 8, 4, 4, 8, 8], -1], [[2, 4, 6, 8, 8], -2], [[2, 4, -2, 6, 2, -3, 8], 2], [[2, 4, 6, 6, 8], -2], [[2, 4, 6, 8, 4, 4, 8], 0], [[1, 2, 2, 4, 10, 5, 6, 7, 8, 9, 10, 6], 1], [[8, 1, 3, 4, 5, 6, 7, 8, 9, 10, 4], 0], [[2, 4, 6, 8, 4, 3, 8, 2], 3], [[2, 4, 6, 6, 1, 8], 3], [[2, 4, 6, 6, 8, 8, 2], 7], [[-3, 2, 4, -3, 6, 6, 8, -3, 8], -3], [[2, 5, 4, 5, 6, 8, 4], 7], [[-2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 4], 0], [[2, 4, -2, 6, 8], 1], [[-3, 2, 4, 6, 6, 8, 4], 3], [[10, 1, 8, 2, 3, 5, 6, 7, 8, 9, 10], 6], [[2, 4, 1, 6, 8, 4, 2], 3], [[8, 1, 2, 3, 4, 5, 6, 8, 9, 10], 0], [[2, 6, 8], -1], [[2, 4, 6, 6, 8, 4], -1], [[-14, 2, -25, 0], 0], [[2, 4, 6, 6, 8], 5], [[2, 4, 6, 6], 3], [[8, 1, 2, 3, 4, 5, 6, 8, 9, 10, 6], 1], [[2, 4, 7, 8, 8], -2], [[2, 5, 6, 8], -2], [[10, 1, 8, 2, 3, 5, 6, 7, 8, 10, 10], 6], [[10, 1, 8, 2, 3, 5, 6, 7, 8, 9, 10], 10], [[-3, 2, 4, 6, 8, 8], -1], [[10, 0, -3, 2, 9, 6], 5], [[2, 4, -25, 8, 4, 4], 0], [[2, 4, 7, 8, 7, 8], -2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6], 2], [[1, 7, 3, 4, 5, 5, 7, 8, 9, 10], 5]], "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2\n"}
{"task_id": "Mbpp/557", "prompt": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n", "entry_point": "toggle_string", "canonical_solution": "\ndef toggle_string(string):\n return string.swapcase()\n", "base_input": [["Python"], ["Pangram"], ["LIttLE"]], "atol": 0, "plus_input": [[""], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEFGHIJKLMNOPQRSTUVHWXYZ"], ["ABCDEFGHIJKLMNOPQRSTUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["ABCDEFGHIJKLTMNOPQRABCDEFGHIJKLMNOPQRSTUVSTUVHWXYYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVHWXYZSABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCODHIJKLMNOPQRSTUVSTUVHWXYYZ"], ["uSB"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVHWXYZSABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZTUVABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["BuSB"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEFGHIJRABCDEFGHIJKLMNOPQRSTUVSTUVHWYX"], ["uBSBB"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUV"], ["ABCDEABCDEFABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["uBSBBB"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEFGHIJKLMNOPGQRSTUVVHWXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUV"], ["BuSSABCODHIJKLMNOPQRSTUVHSTUVHWXYYZB"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOWPQRSTUVWXYABCDEABCDEFGHIJKRLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZZ"], ["ABCDEABCDEFGHIJKLMNOPQHRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQPRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQuBSBBBRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWBuSSABCODHIJKLMNOPQRSTUVHSTUVHWXYYZBXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUV"], ["ABCDEABCDEFGHIJKLMNOPQuBSBBBRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHABCDEFGHIJRABCDEFGHIJKLMNOPQRSTUVSTUVHWYXIJKLMNOPABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNSOPQRSTUVHWXYZWXYZFGHIJKLMNOPQPRSTUVWXYZ"], ["ABCABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOWPQRSTUVWXYABCDEABCDEFGHIJKRLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZZDEFGHIJKLMNOPQRSTUVWXYZ"], ["ABABCABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVMNOPQRSTUVHWXYZWXYZFGHIJKLMNOWPQRSTUVWXYABCDEABCDEFGHIJKRLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZZDEFGHIJKLMNOPQRSTUVWXYZCDEFGHIJRABCDEFGHIJKLMNOPQRSTUVSTUVHWYX"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHITUVWXYZVRSTUVWXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUEVHABCDEFGNOPQRVWXYZ"], ["ABABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEFGHIJKLMSTUVWXYZ"], ["ABCDEFGHABCDEFGHIJKLMNOPGQRSTUVVHWXYZIJKLMNOPQRSTUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHABCDEFGHIJRABCDEFGHIJKLMNOPQRSTUVSTUVHWYXIJKLMNOPABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYuBSBBVWXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOBPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPUV"], ["BuSSABCODHIJKDLMNOPQRSTUVHSTUVHWXYYZB"], ["EzeJQlRM"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXQYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXQYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXY"], ["ABCDEFGHIJKLTMNOYZ"], ["ABCDEFGHIJABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWBuSSABCODHIJKLMNOPQRSTUVHSTUVHWXYYZBXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVKLTMNOPQRABCDEFGHIJKLMNOPQRSTUVSTUVHWXYYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTJUVHWXYZFGHHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHITUVWXYZVRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["vE"], ["ABCDEABCDEFGHIJKLMNOPQRSTABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWBuSSABCODHIJKLMNOPQRSTUVHSTUVHWXYYZBXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVUVHWVXYZFGHIJKLABCDEFGTHIJKLMNUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEABCDEFGGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGEHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["ABCDEFGHIJRABCDEFGHIJKLMNOPQRSTUVSTURVHWYX"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFBGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEFGHIJKLMNOPGQRYZ"], ["BeeBaaOMF"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHINJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOBPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPUV"], ["BuSSABCODHIJKLMNOPQRSTUVHSTUVHWXYYABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQPRSTUVWXYZZB"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPDQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPUV"], ["ABCDEFGHIJKLMSTUXYZ"], ["ABCDEABCDEFGHIJKLMNOPQuBSBBBRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDELFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEFGHIJKLMNOPGQRSTUVVHWXYZABCDEFGHIJKLMNOPGQRSTUVVHWQXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXBYZPUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTJUVHWXYZFGHHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHITUVABCDEABCDEFGHIJKLMNOPQuBSBBBRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZWXYZVRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFABCDEFGHIJKLMSTUXYZZ"], ["ABCDEABCDEFGHIJKLMNOPQuBSBBABCDEABCDEFGHIJKLMNOPQRSTUEVHABCDEFGNOPQRVWXYZBRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHOWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEFGHIJKLMNOPQRSABCDEABCDEFGHIJKLMNOPQRSTUEVHABCDEFGNOPQRVWXYZTUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEYABCDEFGHIJMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["BuBSBBBB"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTWXYZVRSTUVWXBYZPUV"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFBuSBABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["uSABCABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVDEABCDEFGHIJKLMNOPQRSTUEVHABCDEFGNOPQRVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHITUVTWXYZVRSTUVWXYZ"], ["BaeeBa"], ["ABABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVCDEABCDEFGGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTJUVHWXYZFGHHIJKLABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDDEFGHIJKLMNOPQRSTUVWXXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZWXYZVRSTUVWXYZ"], ["ABCDEFGHIJKLMNOPGQRSTUVVHWXYZABABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHABCDEFGHIJRABCDEFGHIJKLMNOPQRSTUVSTUVHWYXIJKLMNOPABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYuBSBBVWXYZCDEFGHIJKLMNOPGQRSTUVVHWQXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHITUVWXYZVRSTUVWXYZLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTWXYZVRSTUVWXBYZPUV"], ["ABABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXBYZPUVNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVCDEABCDEFGGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTWXYZVRSTUVWXBYZPUV"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWVXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZXYZNOPQRSTABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXZ"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOWPQRSTUVWXYABCDEABCDEFGHIJKRLMNOPQRSTUVHABCDEFGHIJKLMNOPABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZZ"], ["JuPAx"], ["ABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOABABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSABCDEABCDEFGHIJKLMNOPQRSTUVHABCBDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZTUVWXBYZPUVNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUVCDEABCDEFGGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZPQRSTUABCDEABCDEFGHIJKLMNOPQRBSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["ABCDEABCDEFGHIJKLMNOPUQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHITUVTWXYZVRSTUVWXYZ"], ["uBSABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZBBB"], ["ABCDEABCDEFGGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGEHIJKLMABCDEFGHIJKLMNOPQRSWTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZ"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCJDEABCDEFGHIJKLABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHIJKLMNOPQRSTUVZSTUVHWBuSSABCODHIJKLMNOPQRSTUVHSTUVHWXYYZBXYZWXYZFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPQRSTUV"], ["ABCDEFGHIJRABCDEFGHIJABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZKLMNOPQRSTUVSTURVHWYX"], ["ABCDEFGHIJKLMNOABCDEABCDEFGHIJKLMNOPDQRSTUVHWXYZFGHIJKLABCDEFGTHIJKLMNOPQRSTUABCDEABCDEFGHIJKLABCDEABCDSTUVHABCDEFGHIJKLMABCDEFGHIJKLMNOPQRSTUVWXYZNOPQRSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZVRSTUVWXYZPUV"], ["BuSSABCODHIJKABCDEABCDEFGHIJKLMNOPQRSTUVHABCDEFGHIJKLMNOPEFGHWIJKLMNOPQRSTUVHWXQYZSTUVHWXYZWXYZFGHIJKLMNOPQRSTUVWXYZDLMNOPQRSTUVHSTUVHWXYYZB"]], "contract": "\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")\n"}
{"task_id": "Mbpp/558", "prompt": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n", "entry_point": "digit_distance_nums", "canonical_solution": "\ndef digit_distance_nums(n1, n2):\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n", "base_input": [[1, 2], [23, 56], [123, 256]], "atol": 0, "plus_input": [[123456789, 987654321], [12345, 9], [9876543210, 123], [11111111, 99999999], [123456789, 987654321], [98765, 54321], [999999, 111111], [0, 987654321], [987654321, 23456789], [123456789123456789, 987654321987654321], [1000000, 999999], [9999, 8888], [123456789, 123], [1, 1234567890], [12345, 567891], [0, 256], [123, 0], [0, 0], [1000000, 999999], [123, 456789], [12345, 5678], [1111, 2222], [1020304, 2030405], [1, 9], [10000000, 9999999], [200, 500], [3000, 30], [10, 256], [123, 5], [10, 10], [9999999999, 1111111111], [123, 256789], [23, 568], [0, 0], [0, 1], [1, 0], [1, 1], [3, 0], [24, 30], [9876543, 12], [1, 2], [23, 56], [123, 256], [8888, 9999], [5678, 1000000], [256, 256], [9999, 0], [123, 122], [30, 2], [123456788, 123456789], [1234567888, 1234567889], [1000000, 256], [12, 256], [256, 456789], [11, 256], [99999999, 99999999], [1234567889, 568], [1, 5], [23456788, 23456789], [123, 123], [54321, 0], [56, 9876543], [500, 500], [10000000, 10000000], [23456787, 23456789], [999999, 456789], [10001, 10000], [1111, 2223], [5, 568], [98765, 98765], [1111111111, 1111111111], [201, 500], [201, 123456788], [3, 2223], [456788, 456788], [23456788, 11111111], [567890, 567891], [54321, 123], [123456789, 123456789], [999999, 0], [2, 1], [10000, 123456788], [8889, 8888], [10, 8888], [1, 1111111111], [1111111111, 1111111110], [456787, 123], [98766, 54321], [256789, 1000000], [456789, 456789], [202, 201], [123456789123456789, 1234567890], [23456787, 23456788], [1111111110, 1111111110], [5678, 987654321987654320], [11111111, 123456789], [1000001, 256], [1111111112, 1], [1, 123], [456788, 123456789123456789], [2, 2], [1234567889, 202], [9, 56], [11, 11], [3, 2], [567, 568], [567890, 567890], [256, 3], [257, 257], [10, 499], [9, 256], [1000000, 1000000], [123456789, 123456790], [99999999, 3000], [98765, 987654321], [568, 8888], [0, 11111111], [8889, 8889], [1000003, 1000001], [456788, 456789], [1111111111, 9], [1111111111, 11], [5678, 9999], [8889, 56], [12346, 9], [9999, 2], [999998, 999999], [6, 5], [201, 200], [98765, 568], [8888, 8888], [99999999, 456789], [9999999999, 9999999999], [1000001, 1000001], [255, 256], [23456788, 8888], [123456788, 256], [501, 456789], [255, 1000001], [5678, 12], [1111111111, 2224], [987654321, 987654321], [9, 2030405]], "contract": "\n    assert isinstance(n1, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n2, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7\n"}
{"task_id": "Mbpp/559", "prompt": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n", "entry_point": "max_sub_array_sum", "canonical_solution": "\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\n", "base_input": [[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[-3, -4, 5, -2, -3, 2, 6, -4], 8], [[-4, -5, 6, -3, -4, 3, 7, -5], 8]], "atol": 0, "plus_input": [[[], 0], [[-10, -5, -3, -2, -1], 5], [[-100, -50, -30, -20, -10, 5, -3, -2, -1], 9], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 10], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400], 14], [[1000, 900, 800, 700, 600, -1000, -900, -800, -700, -600], 10], [[100, -100, 200, -200, 300, -300, 400, -400, 500, -500], 10], [[-100, 200, -300, 400, -500, 600, -700, 800, -900, 1000], 10], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], 10], [[14, -9, -8, -7, -6, -5, -4, -3, -2, -1], 10], [[-100, -50, -30, -20, -10, 5, -3, -2, -7], -1], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], -1], [[-1000, -5, -900, -800, -700, -600, -500, -400, 900, 800, 700, 600, 500, 400], 14], [[-100, -50, -30, -20, -10, 5, -3, -2, -7], -800], [[-100, -50, -30, -20, -10, 5, -3, -2, -7], 0], [[-100, -50, -30, -20, -10, 5, -3, -2, -7, -30], -7], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 9], [[1000, 900, 800, 700, 600, -1000, -900, -800, -700, -600], 9], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400], -800], [[900, 800, 700, 600, -1000, -900, -800, -700, -600], 9], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 400, 800, 700, 600, 500, 400], -800], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], -600], [[1000, 900, 800, 600, -1000, -900, -800, -700, -600], 9], [[1000, 900, 800, 700, -400, -1000, -900, -800, -700, -600], 9], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], -20], [[-1000, -800, -700, -600, -500, -400, 1000, 900, 400, 800, 700, 600, 500, 400, 600], -800], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], 9], [[-100, -50, -30, -21, -10, 5, -3, -2, -7], -800], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400], -1000], [[-10, -9, -8, -7, -6, -5, -4, 9, -2, -1], -600], [[14, -9, -8, -7, -6, -5, -4, -3, -2, -1], 9], [[-10, -9, -8, -7, -6, -5, -4, 9, -2], -601], [[14, -9, -8, -7, -6, -5, -4, -3, -2, -1], -400], [[-10, -9, -8, -7, -6, -5, -4, 9, -2], -1], [[-100, -50, -30, -20, -10, 5, -3, -2, -7, -30], -6], [[1000, 900, 800, 700, 600, -1000, -900, -800, -700, -600, 1000], 10], [[-1000, -800, -700, -600, -500, -400, 1000, 900, 400, 800, 700, 600, 500, 400, 600], -801], [[14, -9, -8, -7, -6, -5, -2, -4, -3, -2, -1], 10], [[-10, -9, -8, -7, -6, -5, -4, 9, -2, -5], -1], [[14, -9, -8, -7, -6, -5, -4, -3, -2, -1], -30], [[1000, 900, 800, 700, 600, -1000, -900, -800, -700, -599], -400], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400, 500], 14], [[14, -9, -8, -7, -6, -5, -4, -3, -2, -1], 8], [[-100, -50, -30, -20, -10, 5, -3, -2, -7], -799], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], -3], [[-100, -50, -30, -21, 5, -3, -2, -7, -2], -800], [[14, -50, -30, -20, -10, 5, -3, -2, -1], 9], [[-100, -31, -50, -30, -21, -10, 5, -3, -2, -7], -1000], [[-10, -9, -8, -7, -6, -5, -4, 9, -2], 0], [[-100, -50, -30, -21, -10, 5, -3, -2, 400], -4], [[14, -9, -8, -7, 14, -6, -5, -4, -3, -2, -1], 8], [[-100, -50, -30, -21, -10, 4, -3, -2, 400], -4], [[14, -50, -30, -20, -10, -9, 5, -3, -2, -1, -20], 9], [[14, -9, -8, -7, -6, -5, -2, -4, -3, -2, -1, -9, 14], 10], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400, 1000], -1000], [[-2, -3, -4, -5, -6, -7, -8, -8, -10], -20], [[-10, -9, -8, -7, -6, -5, -4, 9, -2, -9], 0], [[14, -9, -8, -7, -6, -1, -5, -2, -4, -3, -2, -1, -9, 14], 9], [[-100, -50, -21, -10, 5, -3, -2, 400], -4], [[-100, -50, -30, -21, 5, -3, -2, -599, -2], -50], [[900, 800, 700, 600, -1000, -900, -800, -700, -600, -1000], 9], [[-2, -3, -200, -5, -6, -8, -8, -10], -21], [[-100, -50, -30, -20, -10, 5, -3, -2, -700, -7], 0], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], -601], [[-100, -30, -21, 5, -3, -2, -7, -2], -800], [[-100, -50, -30, -20, -10, 5, -3, -2, -31, -7], -1], [[900, -4, 700, 600, -1000, -900, -799, -800, -700, -500, -600], 10], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -5, -10], -9], [[-100, -50, -6, -30, -20, -10, 5, -3, -2, -7], -1], [[-1, -3, -4, -5, -6, -7, -8, -9, -10], -3], [[-100, -50, -30, -20, -10, -11, 5, -3, -2, -7], 0], [[-1, -3, -4, -6, -7, -8, -9, -10, -10], -500], [[14, -9, -8, -7, 14, -6, -5, -4, -3, -2, -1, -6], 8], [[-100, -50, -30, -20, -10, 5, -3, -2, -7, -50], 0], [[-100, -50, -30, -20, 5, -10, 5, -3, -2, -7], -32], [[-100, -50, -30, -20, -10, -11, 5, -3, -2, -7, -30], 0], [[1000, 900, -300, 600, -1000, -900, -800, -700, -600], 9], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400], -400], [[-2, -2, -200, -5, -6, -8, -8, -10], -21], [[-900, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400], -300], [[-100, -31, -50, -30, -21, -10, -599, -3, -2, -7], -1000], [[14, -9, -8, -7, -6, -1, -5, -2, -4, -3, -2, -1, -9, 14, -7], 9], [[-1000, -900, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 399, 500, 400], 14], [[100, -100, 200, -200, 300, 5, -300, 400, -400, 500, -500], 10], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], -50], [[-100, -31, -30, -20, -10, -11, 5, -3, -2, -7, -30], 0], [[-100, -31, -11, -50, -30, -21, -10, -599, -3, -2, -7], -1000], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 400, 800, 700, 600, 500, 400], -801], [[14, -9, -8, -7, -7, -5, -4, -3, -2, -1], 10], [[1000, 900, 800, 700, -801, 600, -1000, -900, -800, -700, -600], 9], [[-100, -50, -10, -30, -20, -10, 5, -3, -2, -7], -800], [[14, -50, -30, -20, -10, -9, -10, 5, -3, -2, -1, -20], 9], [[14, -9, -8, -7, 14, -6, -5, -4, -3, -2, -1, -6], 9], [[-10, -9, -8, -7, -6, -5, -4, 600, -2, -1], -400], [[100, -100, 200, -200, 300, -300, 400, 501, -400, 500, -500], 10], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -8], 9], [[14, -9, -8, -7, -6, -5, -2, -4, -3, -2, -1, -9, 14], 9], [[-1000, -900, -800, -700, -600, -500, -400, 1000, 900, 800, 700, 600, 500, 400, 500], -21], [[-1, -2, -4, -5, -6, -7, -8, -9, -10], -20], [[14, -9, -8, -7, 900, 14, -6, -5, -4, -3, -2, -1], -31], [[1000, 900, 800, 700, 600, -1000, -900, -800, -700, -600], -300], [[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, -10], 9], [[14, -9, -8, -7, -7, -5, -4, -3, -2, -1, -7], 10], [[-100, -50, -30, -20, -10, 5, -3, -2, -1], 8], [[-100, -31, -11, -50, -30, -21, -10, -3, -2, -7], -1000], [[-1, -2, -4, -5, -3, -6, -7, -8, -10], -20], [[-100, -9, -8, -7, -6, -1, -5, -2, -4, -3, -2, -1, -9, 14], 9], [[-1, -2, -3, -4, -5, -6, -8, -9, -10], -20], [[-10, -9, -8, -7, -6, -5, -4, 600, -2, -1], -401]], "contract": "\n  assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(size, int), \"invalid inputs\" # $_CONTRACT_$\n  assert size <= len(a), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n"}
{"task_id": "Mbpp/560", "prompt": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n", "entry_point": "union_elements", "canonical_solution": "\ndef union_elements(test_tup1, test_tup2):\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [3, 4, 5, 6]], [[11, 12, 13, 14], [13, 15, 16, 17]]], "atol": 0, "plus_input": [[[1, 1, 2, 3, 4], [2, 3, 3, 4, 5]], [[5, 7, 7, 4, 10], [3, 4, 5, 6, 6]], [[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30, 40], [40, 50, 60, 70]], [[1, 1, 2, 2, 3, 3], [3, 3, 4, 4, 5, 5]], [[7, 8, 9, 10], [1, 2, 3, 4]], [[5, 15, 25, 35], [35, 45, 55, 65]], [[1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7], [7, 8, 9, 10, 11, 12]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [3, 4, 5]], [[1, 1, 2, 2, 3, 3, 4, 4], [2, 3, 3, 4, 4, 5, 5, 6]], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3], [1]], [[1, 2, 3], [3, 2, 1]], [[1, 2, 3], [2, 4, 6]], [[1, 2, 3], [4, 5, 6, 7]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14, 16]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 1, 2, 2, 3, 3, 4, 4], [5, 5, 6, 6, 7, 7, 8, 8]], [[1, 3, 3, 5, 7, 7, 9, 11, 13, 13, 15], [2, 4, 6, 8, 8, 10, 12, 14, 16]], [[1, 3, 5, 7, 9, 11, 13, 15], [2, 2, 4, 6, 6, 8, 10, 12, 14, 14, 16, 16]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 6, 8, 10, 12, 14, 16]], [[10, 20, 30, 30, 40], [40, 50, 60, 70]], [[], [2, 2, 3]], [[], []], [[6, 7, 8, 9, 10, 6], [6, 7, 8, 9, 10, 7]], [[35, 45, 55, 65], [35, 45, 55, 65]], [[1, 1, 2, 3, 3], [3, 3, 4, 4, 5, 5]], [[1], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 2, 3], [4, 5, 6, 7]], [[10, 20, 30, 30, 40], [40, 50, 60, 70, 70]], [[1, 2, 3, 4, 5], [1, 2, 3, 4]], [[1, 2, 3], [2, 3]], [[], [true, false, true, false, true, false]], [[1, 2, 3, 5, 5], [1, 2, 3, 5, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 3], [1, 1, 2, 2, 3, 3, 4, 4]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 8], [9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 2, 2, 3, 3, 4, 4], [5, 6, 5, 6, 6, 7, 7, 8, 8]], [[1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[10, 20, 30, 40, 10], [10, 20, 30, 40]], [[2, 2, 3], [2, 2, 3]], [[1, 2, 50, 3, 4, 5, 6, 7, 8, 9, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 3, 5, 7, 30, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14, 16]], [[1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[8, 5, 6, 5, 6, 6, 7, 12, 8, 8], [5, 6, 5, 6, 6, 7, 12, 8, 11]], [[1, 3, 5, 7, 9, 11, 13, 15], [1, 3, 5, 7, 9, 11, 13, 15]], [[35, 36, 35, 45, 55], [36, 35, 45, 55]], [[1, 2, 3, 1], [4, 5, 6]], [[40, 50, 61, 70], [40, 50, 60, 70]], [[40, 50, 60, 70, 70], [40, 50, 60, 70, 70]], [[1, 2, 3, 3], [1, 2, 3]], [[2, 2, 3, 3], [2, 2, 3]], [[1, 2, 3], [11, 20, 1, 99, 2, 35, 1, 86]], [[1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[10, 20, 30, 41, 20], [40, 50, 60, 70]], [[9, 16, 8, 7, 6, 5, 4, 3, 2, 1], [9, 16, 8, 7, 6, 5, 4, 3, 2, 1]], [[95.3833483813928], [95.3833483813928]], [[8, 6, 5, 6, 6, 7, 12, 8, 8], [5, 6, 5, 6, 6, 7, 12, 8, 11]], [[1, 60, 3], [1, 2, 3]], [[9], [0]], [[2, 5, 6], [2, 4, 6]], [[2, 3, 5, 3, 4, 5], [2, 3, 3, 4, 5]], [[5, 6, 6, 7, 7, 8, 8, 6], [5, 6, 6, 7, 7, 8, 8, 6]], [[1, 2, 70, 70], [11, 20, 1, 99, 2, 35, 1, 86]], [[36, 1, 2, 3, 3], [1, 3, 3]], [[0, 1], [0, 0]], [[2, 60, 6, 8, 10, 12, 14, 16], [1, 3, 5, 30, 30, 9, 11, 13, 15]], [[1, 2, 3, 4], [5, 6, 7, 8, 8]], [[5, 15, 25, 35], [36, 45, 55, 65]], [[6, 7, 8, 9, 10, 6], [6, 7, 8, 9, 10, 6]], [[0, 1, 1], [0, 0]], [[2, 60, 6, 8, 10, 12, 14, 16], [2, 60, 6, 8, 10, 12, 14, 16]], [[35, 45, 55, 65, 65], [35, 45, 55, 65, 65]], [[1, 1, 2, 2, 3, 3, 4, 4], [1, 1, 2, 2, 3, 3, 4, 4]], [[1, 1, 3, 5, 5], [1, 2, 3, 5, 5]], [[1, 2, 2, 3, 3, 4, 4], [1, 1, 2, 2, 3, 3, 4, 4]], [[10, 20, 30, 30], [40, 50, 60, 70]], [[11, 20, 99, 2, 35, 1, 45, 86], [11, 20, 1, 99, 2, 35, 1, 45, 86, 35]], [[69, 40, 50, 60, 70, 70], [40, 50, 60, 70, 70]], [[6, 7, 8, 9, 10], [1, 2, 3, 4, 5]], [[11, 20, 1, 99, 2, 35, 1, 87, 86], [11, 20, 1, 99, 2, 35, 1, 86]], [[4, 5, 6, 7, 4], [4, 5, 6, 7]], [[20, 30, 40], [20, 30, 14, 40]], [[1, 1, 2, 3, 3], [3, 0, 4, 4, 5, 5]], [[2, 3, 5, 3, 4, 5], [2, 3, 5, 3, 4, 5]], [[7, 8, 9, 2, 10], [7, 8, 9, 10]], [[11, 20, 99, 2, 35, 0, 45, 86], [11, 20, 99, 2, 35, 1, 45, 86]], [[1, 40, 3, 3, 5, 7, 7, 9, 11, 13, 13, 15], [1, 3, 3, 5, 7, 7, 9, 11, 13, 13, 15]], [[1, 1, 2, 3, 1], [1, 1, 2, 3, 3, 1]], [[1, 3, 3, 5, 7, 7, 9, 11, 13, 13, 15], [1, 40, 3, 3, 5, 7, 7, 9, 11, 13, 60, 15]], [[1, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14, 16, 8]], [[2, 3], [4, 5, 6, 7]], [[2, 3], [2, 4, 6]], [[7, 8, 9, 2, 10], [7, 8, 9, 10, 9]], [[1, 2, 3], [1, 2, 3]], [[1, 3], [1, 3, 3]], [[5, 6, 5, 6, 6, 9, 7, 11, 8, 11, 11], [5, 6, 5, 6, 6, 9, 7, 12, 8, 11]], [[2, 4, 5, 8, 10, 12, 14, 16], [2, 4, 6, 8, 10, 12, 14, 16]], [[10, 20, 30, 40], [41, 40, 50, 60, 70]], [[1], [87, 1]], [[2, 4, 6], [2, 6]], [[1, 2, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 3], [5, 6, 7, 8]], [[5, 5, 6, 7, 7, 8, 8, 6], [5, 5, 6, 6, 7, 7, 8, 8]], [[1, 1, 2, 2, 3, 3, 4, 4], [5, 6, 5, 6, 6, 7, 7, 30, 8]], [[3, 4, 3], [3, 4]], [[10, 20, 30, 30, 30], [40, 50, 60, 70]], [[20, 30, 30], [40, 50, 60, 70]], [[4, 5, 30, 7], [4, 5, 6, 7]], [[1, 1, 2, 2, 3, 3, 4, 4, 3], [6, 1, 2, 2, 3, 3, 4, 4]], [[-14, -59, -4, 74, 36], []], [[1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4], [5, 6, 87, 7, 9]], [[1, 2, 3, 1], [5, 5, 6]], [[1, 1], [1]], [[9, 16, 8, 7, 6, 5, 4, 3, 2, 1], [30, 16, 8, 7, 6, 5, 4, 3, 2, 1]], [[35, 45, 55, 65], [45, 55, 65]], [[2, 3], [41, 2, 4, 6]], [[2, 3], [4, 6]], [[2, 3, 3, 4, 4], [2, 3, 3, 4, 5]], [[5, 6, 5, 6, 6, 7, 7, 8, 8], [5, 6, 5, 6, 6, 7, 7, 8, 8]], [[5, -14, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4], [1, 2, 3, 4]], [[2, 3, 3, 4, 4], [2, 3, 3, 4, 4]], [[1, 2, 3, 2], [11, 20, 1, 99, 2, 35, 1, 86]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n"}
{"task_id": "Mbpp/562", "prompt": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n", "entry_point": "Find_Max_Length", "canonical_solution": "\ndef Find_Max_Length(lst):  \n    return len(max(lst, key = len))\n", "base_input": [[[[1], [1, 4], [5, 6, 7, 8]]], [[[0, 1], [2, 2], [3, 2, 1]]], [[[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]]], "atol": 0, "plus_input": [[[[], [], []]], [[[[[[1]]]]]], [[[[[[1]], [[2]], [[3]]]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]], [[27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [41, 42, 43]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[true, true, false, false], [], [], []]], [[[[6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]]]], [[[[1, 2, 3, 4, 5], [6, 7]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[17], [18, 19, 20], [21, 22], [24, 25, 26, 27], [17]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22], [24, 25, 26, 27], [17]]]], [[[[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[17, 17], [18, 19, 20], [21, 22], [17, 17], [24, 25, 26, 27], [17, 17]], [[17, 17], [18, 19, 20], [21, 22], [17, 17], [24, 25, 26, 27], [17, 17]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17, 17], [18, 19, 20], [21, 22], [17, 17], [24, 25, 26, 27], [17, 17]]]], [[[[[[1]]]], [[[[1]]]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[32]]]], [[[[32]]]], [[[[32]]]]]], [[[[[[]]]], [[[[]]]], [[[[]]]], [[[[]]]]]], [[[[11, 12], [13, 14, 15, 16], [11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]]]], [[[[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[12, 11, 12], [12, 11, 12], [13, 14, 15, 16]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]]]], [[[true, true, false, false], [], [true, "oUycV", "zar", null, "v", false, true, false, false, 89.01601789196613], []]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23], [18, 20], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23], [18, 20], [24, 25, 26, 27]]]], [[[[11, 12], [13, 14, 15, 16], [11, 12]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[true, true, false, false], [false, true, true, true, false, false, false, false, true], [], [], [true, true, false, false]]], [[[], [], [18]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[[11, 12], [13, 14, 15, 16]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[11, 12]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], []]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[[6, 7, 6], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[[], []]], [[[], []]], [[[], []]]]], [[[[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16], [11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]]]], [[[[[[], []]]], [[[[], []]]], [[[[], []]]], [[[[], []]]], [[[[], []]]]]], [[[[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16], [11, 12], [13, 14, 15, 16]]]], [[[[6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[6, 7], [8, 9, 10]]]], [[[[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[36, 13, 14, 15, 16]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[36, 13, 14, 15, 16]], [[36, 13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[]], [[]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[[[], []], [[], []]]]], [[[true, true, false, false], [false, true, true, true, false, false, false, false, true], [], [], [true, true, false, false], [true, true, false, false]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[], [], [], []]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[12, 11, 12], [12, 11, 12], [13, 14, 15, 16]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 23, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 23, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[-29.953961965754488, 89.01601789196613, 89.01601789196613, 89.01601789196613, -13.248116391508603], [18]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[11, 12], [13, 14, 15, 16]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[25, 26], [25, 26]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26], [25, 26]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16, 15], [11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]]]], [[[[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[], []], [[], []], [[], []]]], [[[[11, 12], [13, 14, 15], [13, 14, 15]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15], [13, 14, 15]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]]]], [[[[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]], [[[[true], null, -34.7782057789035], []], [[[true], null, -34.7782057789035], []]]]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]]]], [[[[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23]], [[25, 26]], [[27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [41, 42, 43]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]], [[25, 26]]]], [[[[1, 2, 3, 4, 5], [6, 7]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16]]]], [[[[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]]]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23], [21, 22, 23]]]], [[[[1, 2, 3, 4, 5, 2], [6, 7, 6], [1, 2, 3, 4, 5, 2], [6, 7, 6], [22, 8, 9, 10], [22, 8, 9, 10]], [[1, 2, 3, 4, 5, 2], [6, 7, 6], [1, 2, 3, 4, 5, 2], [6, 7, 6], [22, 8, 9, 10], [22, 8, 9, 10]], [[1, 2, 3, 4, 5, 2], [6, 7, 6], [1, 2, 3, 4, 5, 2], [6, 7, 6], [22, 8, 9, 10], [22, 8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23], [21, 22, 23]]]], [[[], [[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]], []]], [[[true, true, false, false], ["fGZxz"], [true, "oUycV", "zar", null, "v", false, true, false, false, 89.01601789196613], []]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]]]], [[[true, false, false, false], [false, true, true, true, false, false, false, false, true], [true, false, false, false], [], ["oUycV", "fGZxz"], [], [true, false, false, false]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]], [], [[1, 2, 3], [4, 5], [6, 7, 8], [9]]]], [[[-34.7782057789035, 58.961234853425736, -13.248116391508603, -29.953961965754488, 89.01601789196613, 20.346774353093892, -13.248116391508603, -34.7782057789035], [], [], [false, false, true, false, true], [], [false, false, true, false, true]]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]]]], [[[[1, 2, 3, 4, 8, 5, 2], [1, 2, 3, 4, 8, 5, 2], [6, 7], [1, 2, 3, 4, 8, 5, 2], [8, 9, 10]], [[1, 2, 3, 4, 8, 5, 2], [1, 2, 3, 4, 8, 5, 2], [6, 7], [1, 2, 3, 4, 8, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23], [21, 22, 23]], [[1, 2, 3, 4, 8, 5, 2], [1, 2, 3, 4, 8, 5, 2], [6, 7], [1, 2, 3, 4, 8, 5, 2], [8, 9, 10]]]], [[[[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []], [[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []], [[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []], [[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23, 22], [18, 20], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23, 22], [18, 20], [24, 25, 26, 27]]]], [[[], [true, true, true, false, true, true, true, true, true, true], [], [], [], []]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]]]], [[[[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[], [false]], [[], [false]], [[], [false]], [[], [false]]]], [[[[1, 2, 3, 4, 5], [6, 7]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7]]]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n"}
{"task_id": "Mbpp/563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n", "entry_point": "extract_values", "canonical_solution": "\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\n", "base_input": [["\"Python\", \"PHP\", \"Java\""], ["\"python\",\"program\",\"language\""], ["\"red\",\"blue\",\"green\",\"yellow\""]], "atol": 0, "plus_input": [["This is a test input."], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yellow\""], [""], ["\"This is a \"complex\" input with nested \"quotes\" inside a string\""], ["\"\"\"\"\"\"\"\"\"\""], ["\"This is a \"nested\"\" input string.\""], ["withtt"], ["Th.is is a test input."], ["Th.is tis a test input."], ["\"nested\"\""], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yeltestlow\""], ["\"yeltestlow\""], ["This is a tesnt input."], ["Th.is tis a test inpTut."], ["\"\"\"\"\"inside\"\"\"\"\""], ["is"], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" e\"yeltestlow\""], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\"e \"blue\" \"green\" \"yeltestlow\""], ["i\"\"\"\"\"inside\"\"\"\"\"\"nested\"\"s"], ["\"\"tesnt\"\"\"\"\"\"\"\""], ["\"testlow\""], ["\"red\" \"blue\" \"green\" \"yow\""], ["\"string\"yeltestlow\""], ["This is withtt input."], ["\"red\" \"bluetesnt\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yellow\""], ["nested"], ["\"bluetesnt\"Th.is"], ["Th.is tis a test inputinpTut.."], ["\"\"tesnt\"\"\"\"\"\"\"\"\""], ["\"red\" \"blue\" \"grinpTut.een\" \"yow\""], ["i\"\"\"\"is\"inside\"\"\"\"\"\"nested\"\"s"], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\"\"yellow\" \"blue\" \"green\" e\"yeltestlow\""], ["Th\"red\"ut."], ["\"green\""], [" This is a test input."], ["AuCeUjnbN"], ["Te\"yeltestlow\"h.is tis a utinpTut.."], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\"\"\"tesnt\"\"\"\"\"\"\"\"\" \"yello\"w\""], ["Te\"yeltestlow\"h.iis tis a utinpTut.."], ["Th.is tis a test iTnpTut."], ["l\"complex\"CWE"], ["\"yeltetisstlow\""], ["Te\"yeltestlow\"h.iis tis a utinpTut\".."], ["Th.is is a test input ."], ["\"yTe\"yeltestlow\"h.iiseltetisstlow\"is"], ["\"yTe\"yisstlow\"is"], ["\"red\" \"blue\" \"green\" \"yellow\" d\" \"blue\" \"green\" "], ["\"This is a \"nested\"\" in put stringt.\""], ["l\"comple\"x\"CWE"], ["\"yTe\"yeltestlow\"h.iiseltetl\"complex\"CWEisstlow\"is"], ["a test input."], ["\"\"tes\"nt\"\"\"\"\"\"\"\"\""], ["a"], ["stringt.\""], ["\"yetestlow\""], ["\"yTe\"yisstlow\"yeltelstlow\"\"is"], ["whith"], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\"a test input.n\" e\"yeltestlow\""], ["\"red\" \"blue\" \"blue\" \"green\" "], ["\"This is a \"complex\" input with nested \"quotes\" inside  a string\""], ["\"This is a \"nested\"\" input string.\"This is a \"complex\" input with nested \"quotes\" inside  a string\""], ["\"quotes\""], ["\"r\"yow\"ed\" \"blue\" \"grinpTut.een\" \"yow\""], ["\"\"string.\"Thistesnt\"\"\"\"\"\"\"\"\""], ["\"qThisuTh.is tis a test inpTut.tes\""], ["\"red\" \"blue\"tlow\""], ["Th.is tis a test i\"green\"npTuut."], ["l\"compl\"ex\"\"red\" \"blue\" \"green\" \"yellow\" \"red\"\"yelllow\" \"blue\" \"green\" e\"yeltestlow\"CWE"], ["\"yTe\"yeltestlow\"h.iiseltetl\"compThis is a test input.lex\"CWEisstlow\"is"], ["This is  a tesnt input."], ["\"greenn\""], ["\"red\" \"blue\" \"green\" \"\"string\"yeltestlow\"estlow\""], ["Th.iis"], ["\"red\" \"blue\" \"grestring.\"Thisen\" \"\"string\"yeltestlow\"testlow\""], ["\"\"string\"yeltestlow\"estlow\""], ["\"\"string\"yeltestlow\"testlow\""], ["This is  a tesnt inpuut."], ["\"string\"tyeltestlTe\"yeltestlow\"h.iis tis a utinpTut..ow\""], ["\"This is a \"nested\"\" input string.\"This is a \"complex\" input with  nested \"quotes\" inside  a string\""], ["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yeltesbtlow\""], ["\"This"], ["\"string\"tyeltestlTe\"yeltestlow\"h.iis"], ["l\"compl\"ex\"inpTut.tes\"\"red\" \"blue\" \"green\" \"yellow\" \"red\"\"yelllow\" \"blue\" \"gereen\" e\"yeltestlow\"CWE"], ["\"red\" \"blue\" \"green\" \"yellow\" d\"Th.is tis a test iTnpTut. \"blue\" \"green\" "], ["l\"compwhithlex\"CWE"], ["TTh.is tis a test iTnpTut."], ["iutinpTut..s"], ["\"yTe\"yeltestlow\"h.iiseltetl\"compThis is a test input.lex\"l\"compl\"ex\"inpTut.tes\"\"red\"CWEisstlow\"is"], ["string.\"This"], ["nesteThisd"], ["Te\"yeltestlow\"th.iis tis a utinpTtestut\".."], ["AuC\"testlow\"eUjnbN"], ["\"red\" \"bluetesnt\" \"green\" \"yellow\" \"red\" \"blue\" \"\"qThisuTh.isgreen\" \"yellow\""], ["tesnt"], [" This is a test input\"\"tesnt\"\"\"\"\"\"\"\"."], ["e\"yeltestlow\"CWE"], ["\"\"qThisuTh.isgreen\""], ["\"r\"yow\"ed\" \"blue\" \"grinpTut\".een\" \"yow\""], ["\"\"string\"yeltestlowinput.lex\"CWEisstlow\"isow\""], ["inpu"], ["\"quote\"red\" \"blue\" \"green\" \"yellow\" d\"Th.is tis a test iTnpTut. \"blue\" \"green\" \""], ["ah\"gres\"Thisen\" test input."], ["iutinpi\"\"\"\"\"inside\"\"\"\"\"\"nested\"\"s.s"], ["\"grinpTut\".een\""], ["\"greenTTh.isn\""], ["\"yTe\"yeltestlo\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yeltesbtlow\"low\"is"]], "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n"}
{"task_id": "Mbpp/564", "prompt": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n", "entry_point": "count_Pairs", "canonical_solution": "\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \n", "base_input": [[[1, 2, 1], 3], [[1, 1, 1, 1], 4], [[1, 2, 3, 4, 5], 5]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 10], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 10], [[1, 2, 1, 2, 1, 2], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], 11], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6], 2], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 10, 10, 10, 7, 6], 2], [[1, 2, 3, 4, 5, 6, 7, 7, 9, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 5], 10], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2], 11], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10], 10], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100], 7], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2], 10], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 80], 10], [[1, 2, 1, 2, 1, 2, 2], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 13], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 3], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 13], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2, 10], 10], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10, 9], 9], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 8], [[20, 2, 3, 4, 5, 6, 70, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 10], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 6, 10, 10, 10, 7, 6], 2], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2], 12], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4], 13], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 3], 3], [[1, 2, 4, 5, 6, 70, 8, 9, 10, 1], 10], [[1, 2, 1, 2, 1, 2, 2], 7], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12], 12], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 5], 3], [[10, 20, 29, 40, 50, 60, 70, 80, 90, 100, 80], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6, 3], 2], [[8, 1, 1, 2, 2, 3, 3, 4, 5, 5, 0], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6], 8], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2, 10, 6], 10], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 5], 9], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6], 1], [[1, 2, 1, 2, 1, 2, 2, 2], 6], [[1, 2, 3, 4, 5, 0, 6, 70, 8, 9, 10], 9], [[1, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 10], 11], [[1, 2, 3, 4, 5, 6, 70, 8, 60, 9, 10], 5], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6], 9], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5, 3], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 12], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 2], 12], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 2, 3, 4, 5, 29, 6, 7, 8, 9, 10, 2], 10], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 12], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10, 10], 12], [[1, 1, 2, 1, 2, 2, 2], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10], 9], [[10, 20, 30, 50, 60, 70, 80, 90, 100, 100], 5], [[8, 1, 1, 2, 2, 3, 3, 5, 5, 0], 10], [[1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 10], 10], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10, 6], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6], 10], [[1, 2, 3, 4, 5, 4, 6, 7, 7, 9, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 1, 2, 3, 3, 4, 5, 70, 0, 3], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10, 1], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 10, 10, 10, 7, 6, 7], 2], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 6, 10, 10, 10, 7, 6], 12], [[1, 2, 3, 4, 7, 80, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 4, 3, 4, 6, 7, 8, 9, 10, 10], 11], [[1, 1, 2, 2, 3, 3, 4, 20, 5, 0, 5, 2], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 9, 6], 9], [[1, 2, 3, 4, 5, 50, 8, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10], 8], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 1, 0, 3], 3], [[1, 2, 4, 5, 6, 70, 8, 9, 10, 1], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10], 10], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5, 3], 9], [[10, 20, 30, 40, 50, 60, 70, 79, 90, 100, 100], 11], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 6], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5, 5], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 10], 21], [[1, 2, 3, 4, 5, 6, 7, 7, 9, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7], 20], [[1, 2, 1, 2, 11, 1, 2, 2], 7], [[1, 3, 2, 1, 2, 1, 2, 2], 6], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 3], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 10, 10, 10], 21], [[1, 2, 3, 5, 6, 8, 8, 9, 10], 8], [[1, 1, 2, 1, 2, 2, 2], 6], [[1, 1, 2, 2, 3, 3, 4, 20, 5, 5, 0, 5, 3], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 10, 10, 10, 10, 7, 6, 7], 1], [[1, 2, 1, 2, 6, 2, 2], 6], [[1, 1, 2, 2, 3, 3, 5, 4, 1, 5, 4], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 5, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6, 10], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 10, 10, 10, 10, 7, 9, 6, 7], 1], [[1, 2, 4, 5, 6, 7, 8, 60, 9, 10, 2], 11], [[1, 2, 3, 4, 5, 6, 50, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6, 10], 1], [[1, 2, 2, 6, 2, 2, 2], 6], [[1, 2, 3, 4, 7, 80, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6, 12], 10]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10\n"}
{"task_id": "Mbpp/565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n", "entry_point": "split", "canonical_solution": "\ndef split(word): \n    return list(word)\n", "base_input": [["python"], ["Name"], ["program"]], "atol": 0, "plus_input": [[""], ["String with spaces"], ["   String with spaces   "], ["@!$p1y2t3h4o5n6"], [" "], ["\t"], ["\n"], ["\r"], ["\t\n\r   "], ["String with sp aces"], ["String wit h spa\t\n\r   ces"], ["String wString with spacesith spaces"], ["aces"], ["String withh sp aces"], ["\races"], ["\n\n"], ["es"], ["wStritng"], ["acs"], ["withh"], ["ceswit"], ["\tsp"], ["String with spaces\t"], ["p"], ["Strin\racesg wString with spacesith spaces"], ["\t\n\np"], ["ces"], ["\n\n@!$p1y2t3h4o5n6"], ["hh"], ["\t\n\r    "], ["\n\n@!Strin\racesg wString with spacesith spaces$p1y2t3h4o5n6"], ["wStriString wit h spa\t\n\r   cesng"], ["spacesithString withh ssp aces"], ["SString with spacestring with sp aces"], ["SS\racestring \rng with sp aces"], ["ssp"], ["acspaces$p1y2ts3h4o5n6es"], ["hspacesithString withh ssp aces"], ["Strin\racesg wString with spaspaces"], ["acesg"], ["spacesithString"], ["acaesg"], ["cesiwit"], ["\n\n@!$p1y42t3h4o5n6"], ["Strin\racesg wString with spacsesith spaces"], ["\n\n@!$np1y42t3h4o5n6"], ["cesiwit\r\r"], ["spacsesith"], [" SS "], ["\nStrin\racesg wString with spacsesith spaces"], ["ceswit@!Strin"], ["ce\n\n@!Strin\racesg wString with spacesith spaces$p1y2t3h4o5n6"], ["ce"], ["ceswit@!Strceswit@!Strinin"], ["Strin\racesg wString with spaspacString wit h spa\t\n\r   cess"], ["spacesithStringes"], ["hspacesithssp aces"], ["cesiwStrint"], ["wStriString hspacesithssp aces  cesng"], ["acSS\racestring \rng with sp acesesg"], ["hspacesith\tsp"], ["Strin\racesg wStrs"], ["\n\n@!StString with sp aces$p1y2t3h4o5n6"], ["cesiwit\r\r\tscessp"], ["hsptacesith\tsp"], ["@!StString"], ["accespaspacStringsiwits"], ["\t\n\r    \races"], ["\n\n@!$p1y2t3h4o5n   String with spaces   "], ["a"], ["   String with@!$p1y42t3h4o5n6 spaces   "], ["  "], ["String wStrwiting  with spacesith spaces"], ["\nStrin\racescesngg wString with spacsesith spaces"], ["pp"], ["SString Strin\racesg wString with spaspacString wit h spa\t\n\r   cesswith spacestring with sp aces"], ["Strin\raScesg wString \rwith spaspaces"], ["String wStrwiting  with spacesith spaces\t\n\r   "], [" p"], ["spacesithStringesspacesi pString"], ["String with spactrwiting  with spacesith spaces\t\n\r   \t"], ["sptring"], ["spa cesithStringesspacesi pString"], ["SStrspa cesithStringesspacesi pStringing"], ["SString Strin\racesg wString with spaspacString wit h spa\t\n\r   cesswspaces$p1y@!$np1y42t3h4o5n62t3h4o5n6ith spacestring with sp aces"], ["\n\n@String wStrwiting  with spacesith spacesy42t3h4o5n6"], ["Strin\racesg wString with spawStriString hspacesithssp aces  cesnges"], ["Strin\racegsg wString with acSS\racestring \rng with sp acesesgspacsesith spaces"], ["SStrspa cesithStringescesi pSitringing"], ["@\n\n@!$p1y2t3h4o5n6"], ["SS"], ["spacesithStraingesspacesi pString"], ["aString wi thhacesesgspacsesith sp \n\naces"], ["String with spactrwiting  with spacesith spacehs\t\n\r   \t"], ["spa cesithStricngesspacesi pString"], ["\race\n\n@!$np1y42t3h4o5n6s"], ["Sspaces\t"], ["acegsg"], ["acesesgspacsesith"], ["@\n\n@!$p1y2t3h4   String with spaces   n6"], ["String with ispactrwiting  with spacesith s \t"], ["\t\n\r  \t "], ["n6Strin\racesg wStrs"], ["\nStrin\racescesngg wString  with spacsesith spaces"], ["\n\n@!$p1y2t3h4o5n   Str ing with spaces   "], ["Strin\raScesg wString \riwith spaspaces"], ["spacesith"], ["aStr ping wi thhacesesgspacsesith sp \n\naces"], ["spacesithStraing\n\n@!$p1y2t3h4o5n6esispacesi pString"]], "contract": "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']\n"}
{"task_id": "Mbpp/566", "prompt": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n", "entry_point": "sum_digits", "canonical_solution": "\ndef sum_digits(n):\n  return sum(map(int, str(n)))\n", "base_input": [[345], [12], [97]], "atol": 0, "plus_input": [[9876543210], [1234567890987654321], [1111111111111], [2147483647], [999999999999999999999999999999999], [987654321987654321987654321987654321], [10000000000000000000000000000000000000000000000000], [987654321012345678998765432101234567899876543210], [1234567890123456789012345678901234567890123456789], [987654321987654321], [0], [5], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000], [1234567890123456789012345678901234567890123456788], [1111111111110], [987654321987654322], [1000000000000000000000000000000000], [9876543211], [1234567890123456789012345678901234567890123456790], [1111111111112], [10000000000000000000000000000000000000000000000001], [987654321987654321987654321987654320], [9999999999999999999999999999999999999999999999999], [1234567890987654322], [1234567890123456789012345678901234567890123456791], [9999999999999999999999999999999999999999999999998], [987654321987654323], [1234567890987654323], [4], [1234567890987654320], [987654321987654324], [2147483648], [1234567890987654324], [987654321987654325], [1234567890123456789012345678901234567890123456787], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002], [1], [1000000000000000000000000000000001], [1234567890987654319], [2], [987654321012345678998765432101234567899876543211], [1234567890987654318], [987654321987654320], [987654321987654326], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003], [9999999999999999999999999999999999999999999999997], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999], [64], [9876543212], [999999999999999999999999999999998], [987654321987654321987654321987654322], [1111111111113], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998], [1234567890987654317], [10000000000000000000000000000000000000000000000002], [1234567890987654316], [65], [9999999999999999999999999999999999999999999999995], [987654321987654321987654321987654323], [9876543214], [999999999999999999999999999999997], [1234567890123456789012345678901234567890123456786], [1000000000000000000000000000000002], [1111111111109], [1234567890987654315], [9876543213], [36], [1111111111114], [9999999999999999999999999999999999999999999999996], [62], [1234567890123456789012345678901234567890123456792], [1111111111115], [9999999999999999999999999999999999999999999999994], [2147483649], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004], [2147483650], [987654321987654319], [9876543215], [63], [987654321987654318], [9876543216], [3], [66], [37], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999996], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006], [999999999999999999999999999999996], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999995], [987654321987654327], [1234567890123456789012345678901234567890123456785], [987654321012345678998765432101234567899876543209], [10000000000000000000000000000000000000000000000003], [1000000000000000000000000000000003], [987654321987654328], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007], [45], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999994], [9876543217], [46], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999997], [6], [1111111111116], [61], [1234567890987654314], [1234567890987654313], [987654321987654321987654321987654324], [1234567890123456789012345678901234567890123456793], [1000000000000000000000000000000004], [60], [7], [35]], "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16\n"}
{"task_id": "Mbpp/567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n", "entry_point": "issort_list", "canonical_solution": "\ndef issort_list(list1):\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n", "base_input": [[[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]], [[1, 2, 4, 6, 8, 10, 12, 14, 20, 17]], [[1, 2, 4, 6, 8, 10, 15, 14, 20]]], "atol": 0, "plus_input": [[[]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 12]], [[9, 4, 7, 3, 1, 6, 8, 2, 5]], [[2, 2, 3, 4, 1, 1, 3, 4]], [[10, 8, 5, 7, 2, 4, 9, 6, 3, 1]], [[2, 3, 4, 1, 4, 1, 3, 4]], [[92.95564823643227, -98.33857708861429, -2.290411094930974, -82.09915106558478, -60.68800671675019, -60.68800671675019]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 12, 6]], [[9, 4, 7, 3, 1, 6, 8, 2, 5, 8]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 12, 13, 6, 10]], [[9, 4, 7, 3, 1, 5, 8, 2, 5]], [["AwjEwVgE", "", "iTVHG", "USyZK", "EPA"]], [[2, 2, 10, 3, 4, 1, 1, 3, 4]], [[9, 4, 7, 7, 3, 1, 6, 8, 2, 5, 2, 7]], [["AwjEwVgE", "", "iTVHG", "EPA"]], [["AwjEwVgE", "iiTVHG", "EPA"]], [[9, 4, 9, 7, 7, 3, 1, 6, 8, 2, 5, 2, 7]], [[2, 2, 10, 3, 4, 1, 1, 3, 3, 4]], [[2, 2, 10, 4, 1, 1, 3, 4]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 12, 6, 6, 12]], [[2, 2, 10, 3, 5, 1, 1, 3, 4]], [["AwjEwVgE", "AwjEwVgE", "iiGTVHG", "iTVHG"]], [[2, 2, 10, 3, 4, 1, 3, 3, 4]], [["AwjEwVgE", "iTVHG", "USyZK", "EPA", "USyZK"]], [[2, 2, 10, 3, 5, 1, 1, 3, 4, 2]], [["AwjEwVgE", "", "iTVHG", "EPA", "EPA", "EPA", ""]], [["AwjEwVgE", "iiGTVHG", "AwjEwVgE", "iTVHG"]], [[2, 2, 10, 3, 4, 1, 1, 3, 3, 9, 4]], [["", "iTVHG", "EPA"]], [[1, 2, 4, 5, 4, 6, 8, 10, 10, 12, 12]], [["AwjEwVgE", "", "USyZK", "EPA"]], [[2, 8, 2, 10, 3, 4, 1, 1, 3, 3, 4, 2, 1]], [[2, 10, 4, 1, 1, 3, 4]], [[2, 11, 2, 10, 2, 3, 4, 9, 1, 3, 3, 4]], [["iiTVHG"]], [[9, 4, 7, 3, 6, 8, 2, 5, 8, 9]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 12, 6, 6, 12, 4]], [[2, 10, 3, 5, 1, 1, 3, 4, 2]], [[1, 4, 4, 6, 8, 10, 10, 12, 12, 10, 6, 12, 5]], [[10, 4, 1, 1, 4]], [[2, 3, 1, 4, 1, 3]], [[9, 4, 7, 7, 3, 1, 6, 8, 13, 5, 2, 7]], [[2, 10, 3, 4, 1, 1, 11, 4]], [["AwjEwVgE", "", "iTVHG", "EPA", "EPA", "EPA", "PEPA", ""]], [[10, 8, 5, 4, 2, 4, 9, 6, 3, 1]], [[2, 10, 5, 3, 5, 1, 1, 3, 4, 2]], [[9, 4, 7, 3, 1, 6, 8, 5, 8]], [["iiTVHG", "iiTVHG"]], [["AwjEwVgE", "AwjEwVVgE", "", "iTVHG", "USyZK", "EPA"]], [[2, 10, 3, 5, 1, 1, 3, 4, 3]], [["AwjEwVgE", "", "iTVHG", "EPA", "EPA", "EPA", "PEPA", "", "EPA"]], [["iiTVTHG", "iiTVHG"]], [[2, 2, 1, 4, 1, 3]], [["EPA", "AwjEwVgE", "EPA", "AwjEwVgE"]], [[10, 4, 1, 1, 4, 4]], [[1, 2, 4, 6, 8, 10, 10, 7, 12, 12, 6, 12, 2]], [["PEPA", "iiTVHG"]], [[2, 3, 4, 1, 4, 1, 1, 4, 2, 1]], [["AwjEwVgE", "iTVHG", "iTVHG"]], [[10, 4, 1, 1, 4, 4, 10]], [[1, 2, 4, 5, 4, 6, 8, 10, 10, 6, 12]], [["AwjEwVgE", "iiGTVHG", "AwjVEwVgE", "iTVHG", "AwjEwVgE"]], [[10, 4, 1, 4, 4, 10]], [[1, 3, 4, 6, 8, 10, 10, 12, 12, 6]], [["iiTVHG", "iiTVTHG"]], [[2, 3, 4, 1, 4, 1, 0, 4, 2, 1]], [[9, 4, 9, 7, 7, 3, 1, 6, 8, 2, 5, 2, 7, 6]], [["AwjEwVgE", "iiTVHG"]], [["AwjEwVgE", "iTVHG", "yUSyZK", "EPA", "USyZK"]], [["iiTVTHG", "iiTVHG", "iiTVTHG"]], [["AwjEwVgE", "", "AwjEwVgyUSyZKE", "iTVHG", "USyZK", "EPA", "AwjEwVVgE"]], [[2, 2, 2, 3, 4, 1, 1, 3, 4, 4]], [["AwjEwVgE", "iiGTVHG", "", "AwjVEwVgE", "iTVHG", "AwjEwVgE", "iiGTVHG"]], [[9, 4, 7, 3, 1, 6, 8, 8]], [["EPA", "AwjEwVgE", "EPA", "EPA"]], [[9, 4, 9, 7, 7, 3, 1, 6, 8, 2, 5, 2, 7, 8]], [[2, 11, 2, 10, 3, 4, 9, 1, 3, 5, 3, 4, 4]], [[2, 2, 10, 3, 5, 3, 1, 1, 3, 4, 3]], [[2, 3, 4, 1, 4, 1, 1, 4, 5, 1]], [[2, 10, 3, 5, 1, 1, 11, 3, 4]], [[2, 3, 8, 2, 1, 4, 1, 3]], [[2, 10, 5, 3, 5, 1, 1, 3, 4, 1]], [[10, 4, 1, 2, 4, 7, 10]], [["iiTG"]], [["AwjEwVgE", "AwjEwVVgE", "", "iTVHG", "UySyZK", "EPA"]], [[9, 4, 7, 3, 1, 6, 8, 2, 5, 2, 7, 9, 7]], [[1, 2, 4, 6, 8, 10, 10, 7, 12, 12, 6, 12, 2, 12]], [[1, 6, 2, 4, 4, 6, 8, 10, 10, 12, 12, 6, 4]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 6]], [[2, 3, 4, 1, 4, 1, 0, 5, 2, 1]], [[2, 10, 5, 1, 1, 11, 3, 4, 5]], [[10, 4, 1, 1, 2, 4, 10]], [[2, 11, 10, 3, 5, 1, 1, 3, 4]], [[2, 2, 10, 3, 5, 6, 1, 1, 3, 4, 3]], [[1, 2, 4, 4, 6, 8, 10, 10, 12, 12, 6, 6, 12, 10]], [[9, 4, 7, 3, 1, 6, 8, 5, 5, 8]], [[2, 11, 10, 3, 5, 1, 1, 3, 4, 10]], [[2, 2, 10, 2, 5, 6, 1, 1, 3, 3]], [[10, 4, 11, 1, 1, 4, 4, 10]], [[2, 10, 3, 5, 1, 11, 3, 4]], [[2, 10, 4, 7, 1, 1, 3, 4, 4]], [[10, 4, 11, 1, 2, 4, 4, 10]], [[9, 4, 7, 1, 5, 8, 2, 5, 1]], [[1, 4, 6, 8, 10, 12, 12, 10, 6, 12, 5, 12]], [["AwjEwVgE", "iTVHG", "USyZK", "EPA", "AwAwjEwVgyUSyZKEwVgE", "USyZK"]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n"}
{"task_id": "Mbpp/568", "prompt": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n", "entry_point": "empty_list", "canonical_solution": "\ndef empty_list(length):\n return [{} for _ in range(length)]\n", "base_input": [[5], [6], [7]], "atol": 0, "plus_input": [[0], [1], [2], [3], [4], [5], [23], [7], [6], [true], [false], [22], [9], [10], [8], [62], [42], [61], [24], [63], [21], [11], [60], [65], [66], [25], [64], [12], [67], [43], [20], [41], [13], [40], [44], [45], [27], [68], [69], [39], [91], [89], [37], [92], [90], [26], [19], [36], [38], [93], [35], [71], [70], [72], [32], [46], [31], [94], [30], [88], [73], [14], [58], [33], [79], [59], [50], [87], [86], [95], [34], [18], [74], [47], [78], [57], [49], [16], [96], [51], [76], [29], [48], [75], [85], [84], [97], [83], [15], [28], [77], [17], [80], [81], [82], [52], [56], [53], [54], [98], [55]], "contract": "\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]\n"}
{"task_id": "Mbpp/569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "entry_point": "sort_sublists", "canonical_solution": "\ndef sort_sublists(list1):\n    return list(map(sorted,list1)) \n", "base_input": [[[["green", "orange"], ["black", "white"], ["white", "black", "orange"]]], [[["green", "orange"], ["black"], ["green", "orange"], ["white"]]], [[["a", "b"], ["d", "c"], ["g", "h"], ["f", "e"]]]], "atol": 0, "plus_input": [[[[]]], [[["a", "b"], ["d", "c"], ["g", "h"], ["f", "e"], ["d", "c"], ["a", "b"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"]]], [[["green", "orange"], ["black", "white", "yellow"], ["red"], ["blue", "pink", "purple", "gray"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mankiwio"], ["watermelon"], [], ["cherry", "pineapple"]]], [[["kiwi", "banana", "grape"], ["orange", "mankiwio"], ["watermelon"], [], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["apple"], ["kiwi", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"]]], [[[], []]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"], []]], [[["kiwblacki", "grape"], ["kiwblacki", "grape"], ["apple"], ["kiwblacki", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"]]], [[["a", "b"], ["d", "c"], ["g", "h"], ["f", "e"], ["d", "c"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], ["watermelon"], [], []]], [[["green", "orange"], ["black", "white", "yellow"], ["red"], ["blue", "pink", "purple", "gray"], ["green", "orange"], ["green", "orange"]]], [[["kiwi", "grape"], ["apple"], ["kiwi", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["orange", "mango"], ["kiwi", "grape"], ["kiwi", "grape"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"], ["watermelon"]]], [[["apple"], ["kiwi", "banana", "gkiwirape", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"], ["watermelon"]]], [[["kiwi"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"]]], [[["kiwi", "grape"], ["apple"], ["kiwi", "grape"], ["orange", "mango"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["green", "gkiwirape", "orange"], ["black", "white", "yellow", "yellow"], ["red"], ["blue", "pink", "purple", "gray"]]], [[["kiwi", "banana", "grape"], ["watermelon"], [], ["cherry", "pineapple"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry"], ["watermelon"]]], [[["", "b"], ["d", "c"], ["g", "h"], ["f", "e"], ["d", "c"], ["a", "b"]]], [[["ge", "kiwi", "grape"], ["apple"], ["ge", "kiwi", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["ge", "kiwi", "grape"], ["orange", "mango"], ["ge", "kiwi", "grape"], ["ge", "kiwi", "grape"]]], [[["kiwigrape"], ["kiwigrape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["kiwigrape"], ["kiwigrape"], ["kiwigrape"], ["kiwigrape"]]], [[["kiwi"], ["orange", "mango"], ["watermelon"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"]]], [[[], [], []]], [[["TiNPm", "h", "gray", "pineapple"], []]], [[["kiwi", "grape"], ["apple"], ["orange", "mango"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mankiwio"], ["watermelon"], ["che", "pineapple"], [], ["che", "pineapple"]]], [[["apple"], ["kiiwi", "banana", "gkiwirape", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"]]], [[["ge", "kiwi", "grape"], ["apple"], ["ge", "kiwi", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["ge", "kiwi", "grape"], ["orange", "mango"], ["ge", "kiwi", "grape"], ["ge", "kiwi", "grape"], ["ge", "kiwi", "grape"]]], [[["kiwi", "grape"], ["kiwi", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["orange", "mango"], ["kiwi", "grape"], ["kiwi", "grape"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mankiwio"], [], ["cherry", "pineapple"]]], [[["kiwi"], ["orange", "mango"], ["watermelon", "watermelon"], ["kiwi"], ["kiwi"], ["watermelon", "watermelon"], ["kiwi"], ["kiwi"]]], [[["grapeapple", "apple"], ["orange", "mango"], [], [], ["cherry", "pineapple"], [], []]], [[["kiwblacki", "grape"], ["kiwblacki", "grape"], ["apple"], ["kiwblacki", "grape"], ["orange", "mango", "mango"], ["watermelon"], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["kiwi", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"]]], [[["kiwigrape", "kiwigrape"], ["kiwigrape", "kiwigrape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["kiwigrape", "kiwigrape"], ["kiwigrape", "kiwigrape"], ["kiwigrape", "kiwigrape"], ["kiwigrape", "kiwigrape"]]], [[["kiwi", "grape"], ["kiwi", "grape"], ["orange", "mango"], [], ["cherry", "pineapple"]]], [[["kiwblacki", "green", "grape", "kiwblacki"], ["kiwblacki", "green", "grape", "kiwblacki"], ["apple"], ["kiwblacki", "green", "grape", "kiwblacki"], ["kiwblacki", "green", "grape", "kiwblacki"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry"], ["watermelon"], ["kiwi", "banana", "grape"]]], [[["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["apple"], ["ge", "black", "kiwi", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["ge", "black", "kiwi", "grape"], ["orange", "mango"], ["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mankiwio"], ["watermelon"], [], ["cherry", "pineapple"], ["watermelon"]]], [[["kiwi"], ["orange", "mnango", "mango"], ["watermelon", "watermelon"], ["kiwi"], ["kiwi"], ["watermelon", "watermelon"], ["kiwi"], ["orange", "mnango", "mango"], ["kiwi"]]], [[["kiwblacki", "green", "grape", "kiwblacki"], ["kiwblacki", "green", "grape", "kiwblacki"], ["apple"], ["kiwblacki", "green", "grape", "kiwblacki"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"]]], [[["", "b"], ["d", "c"], ["g", "h"], ["f", "e"], ["a", "b", "b"], ["d", "c"], ["a", "b", "b"]]], [[["kiwigramankiwiope", "kiwigrape"], ["kiwigramankiwiope", "kiwigrape"], ["orange", "mango"], ["watermelon", "watermelon"], ["cherry", "pineapple"], ["kiwigramankiwiope", "kiwigrape"], ["kiwigramankiwiope", "kiwigrape"], ["watermelon", "watermelon"], ["kiwigramankiwiope", "kiwigrape"]]], [[["grapeapple", "apple"], ["gorange", "orange", "mango"], [], [], ["cherry", "pineapple"], [], []]], [[["d", "c"], ["g", "h"], ["f", "e"], ["d", "c"], ["a", "b"]]], [[["kiwi", "grapegray", "grape"], ["orange", "mango"], ["watermelon"], []]], [[["blgrapeack", "ge", "black", "kiwi", "grape"], ["blgrapeack", "ge", "black", "kiwi", "grape"], ["apple"], ["orange", "mango"], ["blgrapeack", "ge", "black", "kiwi", "grape"], ["watermelon"], ["cherry", "pineapple"], ["blgrapeack", "ge", "black", "kiwi", "grape"], ["orange", "mango"], ["blgrapeack", "ge", "black", "kiwi", "grape"], ["blgrapeack", "ge", "black", "kiwi", "grape"], ["blgrapeack", "ge", "black", "kiwi", "grape"]]], [[[], ["orange", "mango"], ["watermelon", "watermelon"], ["cherry", "pineapple"], [], [], [], []]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mankiwio"], [], ["cherry", "pineapple"], ["orange", "mankiwio"]]], [[["apple"], ["kiwi", "banana", "grape"], ["orange", "mango"], [], ["watermelon"], [], []]], [[["TiNPm", "h", "gray", "pineapple"], ["yellow", "pineapple", "blgrapeack", "RPqMEp", "TwOPAWfh", "c"]]], [[["grapeapple", "apple"], ["gorange", "orange", "mango"], [], [], ["pineappple", "cherry", "pineapple"], [], []]], [[["grapeapple", "apple"], ["dEEf", "", "fhiTqBKG", "D", "mankiwio", "fh", "peEkNRSS", "d", "green"], ["orange", "mango"], [], [], ["cherry", "pineapple"], [], [], []]], [[["kiwi"], ["watermelon"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"]]], [[["kiwi"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"], ["kiwi"]]], [[["ge", "kiwi", "grape"], [], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["ge", "kiwi", "grape"], ["orange", "mango"], ["ge", "kiwi", "grape"], ["ge", "kiwi", "grape"]]], [[["green", "gkappleiwirape", "orange"], ["black", "white", "yellow", "yellow"], ["green", "gkappleiwirape", "orange"], ["red"], ["blue", "pink", "purple", "gray"]]], [[["kiwi", "grapegray", "grape"], ["orange", "mawatermelonngo", "mango"], ["watermelon"], []]], [[["TiNPm", "h", "gray", "pineapple", "TiNPm"], ["TiNPm", "h", "gray", "pineapple", "TiNPm"], [], ["TiNPm", "h", "gray", "pineapple", "TiNPm"]]], [[["", "b"], ["d", "c"], ["g", "h"], ["a", "b", "b"], ["d", "c"], ["a", "b", "b"]]], [[["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["apple"], ["ge", "black", "kiwi", "grape"], ["watermelon"], ["cherry", "pineapple"], ["ge", "black", "kiwi", "grape"], ["orange", "mango"], ["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["orange", "mango"]]], [[["kiwi", "grape"], ["apple"], ["orange", "mango"], ["watermelo", "watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["kiwblacki", "grape"], ["apple"], ["kiwblacki", "grape"], ["orange", "mango", "mango"], ["watermelon"], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["aapple"], ["orange", "mango"], ["aapple"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["kiwi", "grape"], ["orange", "mango"], []]], [[["kiwi", "grape"], ["apple"], ["kiwi", "grape"], ["orange", "mango"], [], ["cherry", "pink", "pineapple"]]], [[["kiwi", "grape"], ["apple"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["apple"], ["orange", "mango"], ["watermelo", "wlatermelon", "watermelon"], ["watermelo", "wlatermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["grapeapple", "apple"], ["dEEf", "", "fhiTqBKG", "D", "mankiwio", "fh", "peEkNRSS", "d", "green"], ["orange", "mango"], [], [], ["cherry", "pineapple"], [], [], [], ["dEEf", "", "fhiTqBKG", "D", "mankiwio", "fh", "peEkNRSS", "d", "green"]]], [[["kiwi", "kiwi"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["kiwi", "kiwi"], ["kiwi", "kiwi"], ["kiwi", "kiwi"], ["kiwi", "kiwi"], ["kiwi", "kiwi"], ["kiwi", "kiwi"], ["cherry", "pineapple"], ["watermelon"]]], [[["kiwi", "banana", "grape"], ["orange", "mankiwio"], [], ["cherry", "pineapple"]]], [[["d", "red", "c"], ["g", "h"], ["f", "e"], ["a", "b", "b"], ["d", "c"], ["a", "b", "b"], ["d", "red", "c"]]], [[["kiwi", "grape"], ["apple"], ["orange", "mango"], ["watermelo", "wlatermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["ki", "grape"], ["apple"], ["ki", "grape"], ["ki", "grape"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["orange", "mango"], ["ki", "grape"], ["ki", "grape"], ["apple"]]], [[["TiNPm", "h", "gray", "pineapple"]]], [[["kiwigramankiwiope"], ["apple"], ["kiwigramankiwiope"], ["kiwigramankiwiope"], ["orange", "mango"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["apple"], ["kiwi", "banana", "grape"], [], ["cherry", "pineapple"]]], [[["green", "orange"], ["black", "white", "yellow"], ["red"], ["blue", "pink", "purple", "gray"], ["black", "white", "yellow"]]], [[["green", "gkiwirape", "orange"], ["mango", "white", "yellow", "ybananaellow", "yellow"], ["mango", "white", "yellow", "ybananaellow", "yellow"], ["mango", "white", "yellow", "ybananaellow", "yellow"], ["red"], ["mango", "white", "yellow", "ybananaellow", "yellow"]]], [[["kiwi", "grape"], ["kiwi", "grape"], ["orange", "mango"], ["watermelon"], [], ["cherry", "pineapple"], ["kiwi", "grape"]]], [[["", "b"], ["d", "c", "d"], ["g", "h"], ["d", "c", "d"], ["a", "b", "b"], ["d", "c"], ["a", "b", "b"]]], [[["kiwi", "grape"], ["aapple", "aapple"], ["aapple", "aapple"], ["orange", "mango"], ["aapple", "aapple"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["grapeapple", "apple"], ["gorangkiwblackie", "orange", "mango"], [], [], ["gorangkiwblackie", "orange", "mango"], ["pineappple", "cherry", "pineapple"], [], [], []]], [[["apple"], ["kiwi", "grape"], ["ybananaellow", "mango"], ["watermelon"], [], ["cherry", "pineapple"], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["apple"], ["orange", "mango"], ["watermelo", "wlatermelon", "watermelon"], [], ["cherry", "pineapple", "pineapple"]]], [[["grapeapple", "apple"], ["gorangkiwblackie", "orange", "mango"], [], [], ["blgrapeack", "e", "ETRGKXBvvw", "mankiwio", "grape", "kiwi", "IukhEbw", "grapeapple", "peEkNRSS"], ["gorangkiwblackie", "orange", "mango"], ["pineappple", "cherry", "pineapple"], [], [], [], []]], [[["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["apple"], ["watermelon"], ["cherry", "pineapple"], ["ge", "black", "kiwi", "grape"], ["orange", "mango", "orange"], ["orange", "mango", "orange"], ["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["ge", "black", "kiwi", "grape"], ["orange", "mango", "orange"]]], [[["kiwi", "grape"], ["aapple", "aapple"], ["aapple", "aapple"], ["mango"], ["aapple", "aapple"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"]]], [[["kiwi", "grape"], ["apple"], ["orange", "mango"], ["watermelo", "watermelon", "watermelon"], ["cherry", "pineapple"], ["watermelo", "watermelon", "watermelon"]]], [[["apple"], ["fh", "gkiwirape", "mZFQv", "zAz", "Gpfv", "Tih"], [], ["chcerry", "pineapple"], []]], [[["grapeapple", "apple"], ["orange", "mango"], [], [], ["cherry", "pineapple"], []]], [[["green", "gkiwirape", "orange", "green"], ["black", "white", "yellow", "yellow"], ["red"], ["green", "gkiwirape", "orange", "green"], ["blue", "pink", "purple", "gray"]]], [[["kiwblacki", "green", "grape", "kiwblacki"], ["kiwblacki", "green", "grape", "kiwblacki"], ["apple"], ["kiwblacki", "green", "grape", "kiwblacki"], ["kiwblacki", "green", "grape", "kiwblacki"], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["kiwblacki", "green", "grape", "kiwblacki"]]], [[["kiwi", "grappe"], ["apple"], ["kiwi", "grappe"], ["orange", "mango"], ["watermelon"], [], ["pineapple"]]], [[["kiwi", "banana", "grape"], ["orange", "mankiwio"], ["watermelon"], [], ["cherry", "pineapple"], ["kiwi", "banana", "grape"]]], [[["kiwi", "banana", "grape"], ["cherryy", "cherry", "pineapple"], ["watermelon"], [], ["cherryy", "cherry", "pineapple"]]], [[["kiwi", "grappkiwie", "grappe"], ["apple"], ["kiwi", "grappkiwie", "grappe"], ["orange", "mango"], ["watermelon"], [], ["pineapple"]]], [[["", "b"], ["g", "h"], ["f", "e"], ["a", "b", "b"], ["d", "c"], ["a", "b", "b"]]], [[["kiwi", "grape"], ["e"], ["e"], ["mango"], ["e"], ["watermelon", "watermelon"], [], ["cherry", "pineapple"], ["cherry", "pineapple"]]], [[["ge", "kiwi", "grape"], [], ["orange", "mango"], ["watermelon"], ["cherry", "pineapple"], ["ge", "kiwi", "grape"], ["orange", "mango"], ["ge", "kiwi", "grape"], ["ge", "kiwi", "grape"], ["cherry", "pineapple"]]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for sublist in list1 for x in sublist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n"}
{"task_id": "Mbpp/572", "prompt": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n", "entry_point": "two_unique_nums", "canonical_solution": "\ndef two_unique_nums(nums):\n  return [n for n in nums if nums.count(n)==1]\n", "base_input": [[[1, 2, 3, 2, 3, 4, 5]], [[1, 2, 3, 2, 4, 5]], [[1, 2, 3, 4, 5]]], "atol": 0, "plus_input": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]], [[2, 3, 4, 2, 3, 5, 6, 4, 7, 8, 9, 5, 6, 10, 11, 12, 11, 13, 14, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]], [[]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], [[1]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 8, 9, 5, 6, 2]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 8, 9, 5, 6, 2, 3, 6, 4]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 2, 3, 6, 6, 4]], [[-0.9997483195812293, 8.805625175692413]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 6]], [[-0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, 41.68649670810572, -52.065808653681664]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 3, 2, 5, 6]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 8, 4, 7, 8, 9, 5, 6, 2, 3, 6, 6, 4]], [[1, 1]], [[2, 3, 4, 2, 3, 5, 6, 4, 7, 8, 9, 5, 10, 11, 12, 11, 13, 14, 10]], [[4, 1, 2, 3, 2, 3, 4, 5, 2, 3, 6, 8, 4, 7, 8, 9, 5, 6, 2, 3, 6, 6, 4, 3]], [[2, 3, 4, 2, 3, 10, 6, 4, 7, 8, 9, 5, 6, 10, 11, 12, 11, 13, 14, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]], [[1, 0]], [[4, 2, 3, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 8, 9, 5, 6, 2]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1, 4]], [[1, 2, 3, 2, 4, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1, 4]], [[true, false, true]], [[1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8]], [[1, 8]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4, 3]], [[4, 1, 2, 3, 2, 3, 4, 5, 2, 3, 6, 8, 4, 7, 8, 9, 5, 6, 2, 6, 6, 4, 3, 2]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 2, 3, 6, 4]], [[1, 2, 3, 2, 4, 1, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1, 4]], [[1, 1, 2, 3, 3, 4, 4, 5, 5]], [[1, 2, 3, 2, 4, 1, 3, 6, 8, 4, 7, 8, 9, 5, 6, 4, 1, 4]], [[1, 13, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 3, 2, 4, 5, 6]], [[1, 2, 3, 2, 4, 3, 6, 4, 5, 7, 8, 9, 7, 5, 6, 4, 1, 4, 7]], [[1, 2, 3, 4, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 4, 9, 2, 5, 6, 4]], [[1, 2, 5, 4, 5, 5, 3, 5, 6, 4, 7, 8, 9, 2, 5, 6, 4]], [[-0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 41.68649670810572, -52.065808653681664]], [[1, 1, 8, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]], [[4, 1, 3, 2, 3, 5, 4, 5, 3, 6, 4, 7, 8, 9, 5, 3, 2, 3, 6, 6, 4, 5]], [[4, 1, 2, 2, 3, 4, 5, 3, 6, 4, 7, 8, 8, 9, 5, 6, 2]], [[1, 2, 3, 4, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4, 6, 7]], [[1, 2, 3, 2, 4, 3, 6, 4, 5, 7, 8, 9, 7, 6, 4, 1, 4, 7]], [[10.355737996821157]], [[1, 1, 2, 3, 3, 4, 4, 5, 5, 4]], [[1, 7, 1, 2, 3, 3, 4, 4, 5, 4, 4]], [[true, false, false, false]], [[true, false, false, false, false]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4, 3, 9, 3]], [[1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 3]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1, 4, 6]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 2, 7, 5, 6, 4, 3]], [[-1.651524063439472, -0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 41.68649670810572, -52.065808653681664]], [[4, 1, 2, 3, 2, 3, 4, 5, 2, 3, 6, 8, 4, 7, 8, 9, 5, 12, 6, 2, 6, 6, 4, 3, 2]], [[1, 1, 2, 3, 3, 4, 4, 5, 4, 4]], [[0, 1, 8, 1]], [[8.805625175692413]], [[1, 1, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 6]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 9, 9, 2, 5, 6, 4, 3, 9, 3]], [[4]], [[1, 9, 8]], [[-0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 41.68649670810572, -0.18222326312457193, -52.065808653681664]], [[1, 2, 3, 2, 4, 1, 3, 6, 3, 7, 8, 9, 5, 6, 4, 1, 4]], [[4, 1, 2, 3, 3, 4, 5, 3, 6, 4, 7, 8, 8, 9, 5, 6, 2, 6, 4]], [[0, 8, 2]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 6, 9, 5, 6, 2, 3, 6, 6, 4]], [[0]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1, 4, 6, 1]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 3, 6, 4]], [[1, 2, 2, 4, 3, 6, 4, 7, 8, 4, 9, 2, 5, 6, 4, 2]], [[1, 2, 3, 2, 4, 5, 3, 7, 6, 4, 7, 8, 9, 5, 6]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 4, 7, 8, 8, 9, 5, 6, 2, 3, 6, 4, 4]], [[2, 4, 2, 3, 5, 6, 4, 7, 8, 9, 5, 6, 10, 11, 12, 11, 13, 14, 10]], [[1, 3, 4, 2, 3, 5, 6, 4, 7, 8, 9, 5, 10, 11, 12, 11, 13, 14, 10]], [[-0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 41.68649670810572, -0.18222326312457193, -52.065808653681664, 41.68649670810572]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 8, 9, 2, 3, 6, 4]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 3]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4, 4]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 8, 6, 4, 7, 8, 8, 9, 5, 6, 2]], [[1, 2, 3, 2, 4, 5, 3, 6, 5, 7, 8, 9, 5, 6, 4, 1, 4, 6]], [[4, 1, 2, 3, 3, 4, 5, 3, 6, 5, 4, 7, 8, 8, 9, 5, 6, 2, 6, 4]], [[1, 2, 3, 2, 4, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1]], [[1, 2, 5, 4, 5, 5, 3, 5, 6, 4, 7, 8, 9, 2, 8, 6, 4]], [[10.355737996821157, 47.66683343680117, -0.9997483195812293, -0.9997483195812293, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 10.355737996821157, 41.68649670810572, -52.065808653681664]], [[-0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.3831321228840481, -0.943443387927682, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, 41.68649670810572, -52.065808653681664]], [[1, 1, 2, 3, 3, 4, 5, 5]], [[-0.9997483195812293, 47.66683343680117, -0.9997483195812293, -0.3831321228840481, -0.943443387927682, 8.805625175692413, -0.9997483195812293, -0.9997483195812293, -52.065808653681664]], [[2, 3, 4, 2, 3, 5, 6, 4, 7, 8, 9, 5, 10, 11, 12, 11, 13, 10]], [[1, 1, 2, 3, 3, 4, 4, 5, 5, 5]], [[0, 9, 8, 2]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 3, 2, 5, 6, 2]], [[4, 1, 2, 3, 2, 3, 4, 5, 3, 6, 5, 7, 8, 9, 5, 6, 2, 3, 6, 6, 4]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 2, 5, 6, 4, 3, 9]], [[1, 1, 8, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 4]], [[1, 1, 8, 2, 2, 3, 3, 9, 4, 5, 5, 6, 6, 7, 7, 8]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 9, 10, 6, 4, 4]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 8, 9, 2, 3, 6, 4, 8]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 3, 2, 5, 6, 3]], [[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 6, 2]], [[1, 0, 0, 0]], [[8, 1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]], [[4, 1, 2, 3, 2, 3, 4, 5, 2, 3, 6, 8, 4, 7, 8, 9, 5, 12, 6, 2, 6, 6, 4, 3, 2, 3]], [[1, 2, 3, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6, 4, 1, 4, 6, 1, 1]]], "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n"}
{"task_id": "Mbpp/573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n", "entry_point": "unique_product", "canonical_solution": "\ndef unique_product(list_data):\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n", "base_input": [[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 1]], [[7, 8, 9, 0, 1, 1]]], "atol": 0, "plus_input": [[[1000000, 2000000, 3000000, 2000000, 4000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 4000000]], [[4000000, 2000000, 4000000, 5000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 5000000]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 3999999]], [[1000000, 2000000, 3000000, 2000000, 3000000, 5000000, 1000000]], [[3999999, 3000000, 4000000, 2000000, 3999999, 5000000, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000]], [[1000000, 3000000, 2000000, 3000000, 5000000, 1000001, 1000000, 5000000]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000000]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000000, 4000000, 2000000, 5000000, 4000000, 5000000]], [[1000000, 2000000, 3000000, 1000001, 3000000, 5000000, 1000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000000, 4000000, 2000000, 4000000, 2000001, 5000000, 4000000, 2000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999, 5000000]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000000, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 5000001]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 1999999, 4000000, 5000001]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000]], [[1000000, 999999, 2000000, 3000000, 1000001, 3000000, 5000000, 1000000, 5000000]], [[2000000, 4000000, 4000000, 5000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999, 5000000, 3999999]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000]], [[2000000, 5000000, 4000000, 2000000, 4000000, 5000000, 4000000, 4000000]], [[2000000, 4000000, 2000000, 5000000, 4000000, 5000000, 4000000]], [[4000000, 999999, 2000000, 4000000, 5000001, 5000000, 5000000, 5000001]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000, 2000000]], [[1000000, 2000000, 2000000, 4000000, 5000000]], [[4000000, 4000000, 2000000, 4000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 4000000]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000000, 4000000]], [[2000000, 4000001, 4000000, 2000000, 4000000, 3999999, 4000001, 5000000]], [[1000000, 3000000, 2000000, 3000000, 5000000, 1000000]], [[2000000, 2000000, 2000000, 4000000, 5000000, 5000000, 3999999, 2000000]], [[2000000, 2000000, 2000000, 3999998, 4000000, 5000000, 5000000, 3999999, 2000000]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000001, 4000000]], [[1000001, 4000000, 2000000, 4000000, 4000000]], [[1999999, 1000000, 2000000, 3000000, 2000000, 4000001, 5000000]], [[1000000, 2000000, 3000000, 1000001, 5000000, 1000000, 1000000]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000, 2000000, 4000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 1999999, 4000000, 5000001, 999999, 4000000]], [[1000000, 2000000, 3000000, 2000000, 4000000, 5000000, 4000000]], [[1000000, 2000000, 3000000, 1000001, 5000000, 1000000, 1000000, 1000000]], [[2000000, 3999999, 5000000]], [[2000000, 3999999, 1000001]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 1999999, 4000001, 5000001]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000000, 1000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000, 5000000]], [[1000000, 2000000, 3000000, 1000001, 5000000, 1000000, 1000000, 1000001]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000001, 4000000, 2000000, 5000000]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 4999999, 5000001, 3999999, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 1999999, 4000000, 5000001, 999999, 4000000, 5000000]], [[1000000, 3000000, 2000000, 3000000, 2000000, 4000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 5000000, 2000000]], [[1000000, 5000000, 3000000, 1000001, 5000000, 1000000, 1000000, 1000001]], [[2000000, 4000000, 2000001, 5000000, 2000000, 4000000, 5000000, 4000000, 2000000, 4000001]], [[3999999, 3000000, 4000000, 2000000, 4999999, 3999999, 5000000, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000001, 2000000, 2000000, 3999998, 4000000, 5000000, 5000001, 3999999, 2000000]], [[2000000, 4000000, 2000000, 4000000, 4000000, 4000000]], [[1999999, 2000000, 3999999, 5000000]], [[4000000, 2000000, 999999, 2000000, 4000000, 5000001, 5000000, 5000000, 5000001]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 4999999, 3999999, 5000000]], [[1000000, 2000000, 3000000, 3000000, 2000000, 4000001, 5000000]], [[2000000, 2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000]], [[2000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000001, 4000000]], [[1000000, 3000000, 1000001, 5000000, 1000000, 1000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 3000000, 5000000, 4000000, 2000000]], [[4000000, 999999, 5000001, 4000000, 5000001, 5000000, 5000000, 5000001]], [[1000000, 2000000, 3000000, 1000001, 1000000]], [[2000000, 4000001, 2000000, 5000000, 4000000, 5000000, 4000000]], [[2000000, 4000000, 999999, 4000000, 2000001, 5000000, 4000000, 2000000, 2000001]], [[2000000, 4000001, 4000000, 2000000, 4000000, 3999999, 4000001, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 2000000]], [[4000000, 2000000, 4000000, 5000001, 5000000]], [[2000000, 4000000, 5000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 2000000, 4000000, 5000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 2000001, 3999999, 3999999, 5000000, 3999999]], [[1999999, 1000000, 2000000, 3000000, 2000000, 4000001, 5000000, 5000000]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000001, 1000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 2000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 1999999, 4000000, 5000001, 999999, 4000000, 5000000]], [[3000000, 4000000, 2000000, 3999999, 4000000, 5000000, 4999999, 3999999, 5000000]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 4999999, 4000000, 4000000, 2000000]], [[3999999, 2000000, 1999999, 2000000, 5000001, 4000000, 5000000, 5000000, 4000001, 4000000, 4000000, 4000000]], [[2000001, 3999999, 5000000]], [[1000000, 2000000, 4000000, 5000000]], [[2000000, 2000000, 3999998, 4000000, 5000000, 5000000, 3999999, 2000000]], [[2000000, 2000000, 5000000, 5000000]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000, 2000000, 4000000, 4000000]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000, 2000000, 1999999, 4000000, 4000000]], [[2000000, 4000001, 2000000, 4000000, 4000000, 3999999, 4000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 999999, 2000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 4000000, 4000000, 3999999, 4000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000001]]], "contract": "\n    assert isinstance(list_data, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0\n"}
{"task_id": "Mbpp/574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\n", "entry_point": "surfacearea_cylinder", "canonical_solution": "\nfrom math import pi\ndef surfacearea_cylinder(r,h):\n  return (2*pi*r*r) + (2*pi*r*h)\n", "base_input": [[10, 5], [4, 5], [4, 10]], "atol": 0.0001, "plus_input": [[1, 1], [2, 2], [2, 1], [3, 2], [3, 3], [3, 1], [4, 3], [1, 2], [1, 3], [4, 4], [1, 4], [3, 4], [4, 1], [2, 4], [4, 2], [2, 3], [5, 1], [2, 5], [5, 5], [5, 3], [4, 5], [5, 4], [1, 5], [3, 5], [5, 2], [6, 5], [6, 6], [6, 1], [6, 2], [3, 6], [1, 6], [7, 6], [7, 3], [7, 7], [4, 6], [6, 7], [7, 5], [7, 4], [7, 1], [5, 6], [1, 7], [7, 2], [8, 1], [6, 3], [5, 7], [8, 8], [7, 8], [8, 7], [6, 4], [1, 9], [9, 2], [9, 1], [5, 9], [2, 6], [9, 8], [8, 4], [9, 5], [9, 7], [4, 7], [8, 6], [8, 9], [3, 9], [5, 8], [8, 2], [8, 5], [1, 8], [1, 43], [43, 3], [43, 43], [3, 43], [4, 9], [9, 3], [9, 6], [9, 9], [44, 43], [6, 9], [6, 8], [44, 44], [44, 6], [2, 8], [44, 4], [43, 44], [3, 10], [3, 42], [44, 42], [43, 4], [42, 2], [7, 9], [1, 42], [9, 10], [2, 43], [2, 10], [6, 43], [42, 43], [9, 4], [8, 3], [43, 6], [10, 6], [44, 2], [42, 6], [true, true]], "contract": "\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(surfacearea_cylinder(10,5), 942.45, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4,5), 226.18800000000002, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4,10), 351.848, rel_tol=0.001)\n"}
{"task_id": "Mbpp/576", "prompt": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n", "entry_point": "is_Sub_Array", "canonical_solution": "\ndef is_Sub_Array(A,B): \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)\n", "base_input": [[[1, 4, 3, 5], [1, 2]], [[1, 2, 1], [1, 2, 1]], [[1, 0, 2, 2], [2, 2, 0]]], "atol": 0, "plus_input": [[[], []], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3, 4, 5], [1, 3, 5]], [[1, 2, 3, 4, 5], [1, 2, 3]], [[1, 2, 3, 4, 5], [3, 4, 5]], [[1, 2, 3, 4, 5], [2, 4]], [[1, 2, 4, 3, 2, 1], [4, 3]], [[1, 2, 3, 4, 5], [6, 7, 8]], [[1, 1, 1, 1, 1], [1, 1, 1]], [[true, false, true, true, false, true, true, false], [true, 5, "pKVtiZ", true, true, -66]], [[1, 1, 2, 3, 4, 5], [1, 3, 5]], [[4, 1, 3], [4, 1, 3]], [[true, true, true], []], [[1, 3, 4, 5], [2, 4]], [[1, 1], [1, 1]], [[3, 4, 5, 5], [3, 4, 5, 5]], [[-46.57347103376453, 3.1226647009953297, -30.45147357338469, -82.59243850873601, 48.432211942516204, 75.37283925638667], [3, 2, 2, 3]], [[5, 1, 3, 3], [5, 1, 3, 3]], [[true, "pKVtiZ", true, true, -66], [true, "pKVtiZ", true, true, -66]], [[1, 2, 3, 4, 5, 2], [6, 7, 8]], [[1, 2, 3, 3], [1, 2, 3, 3]], [[1, 3, 4, 5, 5], [1, 3, 4, 5, 5]], [[1, 3, 3, 4, 5, 5], [1, 3, 3, 4, 5, 5]], [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], [[1, 1, 1, 1, 2, 1, 1], [false, 1, 1, 1]], [[-41, -69, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}], [-41, -69, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}]], [[true, "pKVtiZ", true, true, -66, "pKVtiZ"], [true, "pKVtiZ", true, true, -66, "pKVtiZ"]], [[5, 1, 3, 3, 3], [5, 1, 3, 3, 3]], [[1, 2, 3, 4, 5, 2], [1, 2, 3, 4, 5, 2]], [[3, 5], [3, 5]], [[1, 2, 3, 4, 3], [1, 2, 3, 4, 3]], [[1, 2, 3, 4, 3, 2], [1, 2, 3, 4, 3, 2]], [[3], [3]], [[1, 2, 2, 4, 5], [1, 2, 2, 4, 5]], [[false, 4, -99, -84, -69], []], [[3, 4, 5, -41], [3, 4, 5, -41]], [[-41, -69, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}, false], [-41, -69, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}, false]], [[1, 2, 3, 2, 4, 5, 2], [1, 2, 3, 2, 4, 5, 2]], [[3, -69, 5, -41], [3, -69, 5, -41]], [[5], [5]], [[true, false, false, true, false, false, false, false, false, false], [2, 3]], [[-42, -69, true, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}], [-42, -69, true, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}]], [[8, 1, 1, 1, 1, 1, 1], [8, 1, 1, 1, 1, 1, 1]], [[83, false, {"-37": "pKVptiZ", "65": "pKVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, {"-37": "pKVptiZ", "65": "pKVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, -77.86017743246624, false], [83, false, {"-37": "pKVptiZ", "65": "pKVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, {"-37": "pKVptiZ", "65": "pKVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, -77.86017743246624, false]], [[true, false, false, true, false, false, false, false, false, false], [true, false, false, true, false, false, false, false, false, false]], [[], [-41, 5, -27, -81, -41, 7, -56, -66, -98]], [[83, false, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, -77.86017743246624, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, false], [83, false, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, -77.86017743246624, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, false]], [[4, 5, 83, 5], [4, 5, 83, 5]], [[1, 1, 1, 1, 2, 1, 1], [1, 1, 1]], [[2, 4, 1, 3], [2, 4, 1, 3]], [[true, "pKVtiZ", true, true, -66, "pKVtiZ", "pKVtiZ"], [true, "pKVtiZ", true, true, -66, "pKVtiZ", "pKVtiZ"]], [[1, 1, 1, 1, 1], [1, 1, 1, 1]], [[83, false, 4, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, -77.86017743246624, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, false], [83, false, 4, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, -77.86017743246624, {"-37": "pKVptiZ", "65": "pKpVtiZ", "9": "pKVtiZ", "3": "ZWwH", "-12": "pKVtiZ"}, false]], [[1, 2, -41, 4, 3, 2], [1, 2, -41, 4, 3, 2]], [[2], [2]], [[2, 4], [2, 4]], [[-84, 3, 3, 4, 5, 5], [-84, 3, 3, 4, 5, 5]], [[true, "pKVtiZ", true, true, "pKVtiZ", "pKVtiZ"], [true, "pKVtiZ", true, true, "pKVtiZ", "pKVtiZ"]], [["pKVtiZ", true, true, "pKVtiZ"], ["pKVtiZ", true, true, "pKVtiZ"]], [[true, true, true], [true, true, true]], [[-41, -69, false, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}, false], [-41, -69, false, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}, false]], [[1, 2, 3, 4, 5, 1, 2], [1, 2, 3, 4, 5, 1, 2]], [[1, 3, 3], [1, 3, 3]], [[true, "pKVtiZ", true, true, -66, -66, "pKVtiZ"], [true, "pKVtiZ", true, true, -66, -66, "pKVtiZ"]], [[9, 1, 3, 4, 5, 5], [9, 1, 3, 4, 5, 5]], [[1, -99, 2, 3, -69, 2, 4, 5], [1, -99, 2, 3, -69, 2, 4, 5]], [[1, 3, 2, 4, 5], [1, 3, 2, 4, 5]], [[1, 8, 2, 3], []], [[5, 1, 3, 3, 3, 5], [5, 1, 3, 3, 3, 5]], [[1, 2, 3, 4, 5], [3, 5]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[5, -1, 0, 3, 3], [5, -1, 0, 3, 3]], [[2, 4, 1, 3, 3], [2, 4, 1, 3, 3]], [[1, 3, 2, 4, 5, 4], [1, 3, 2, 4, 5, 4]], [[4, 1, 8, 3], [4, 1, 8, 3]], [["kvYsHUDga", "ZWwH", "JKq", "FDmCp", "pKpVtiZ"], []], [[1, 3, 4, 9, 5], [1, 3, 4, 9, 5]], [[-41, -69, true, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}, false], [-41, -69, true, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}, false]], [[true, 5, "pKVtiZ", true, true, -66, -66], [true, 5, "pKVtiZ", true, true, -66, -66]], [[-69, false], [-69, false]], [[2, -42, 4, 4], [2, -42, 4, 4]], [[9, 1, 3, 4, 5, 5, 5], [9, 1, 3, 4, 5, 5, 5]], [[1, 1, 65, 1, 1, 1], [1, 1, 1]], [[2, -69, false], [2, -69, false]], [[false, false, 4, -99, -84, -69], []], [[-69, true, false], [-69, true, false]], [[4, 3], [4, 3]], [[8, 1, 1, 1, 1, 1], [8, 1, 1, 1, 1, 1]], [[-66, 1, 8, 3], [-66, 1, 8, 3]], [[8, 1, 1, -37, -98, 1, 1], [8, 1, 1, -37, -98, 1, 1]], [[true, false, true, true, false, true, false], [true, 5, "pKVtiZ", true, true, -66]], [[8, 83, 1, 1, -37, -98, 1, 1], [8, 83, 1, 1, -37, -98, 1, 1]], [[true, false, false, false, false, false, false, false, false], [true, false, false, false, false, false, false, false, false]], [["kvYsHUDga", "ZWwH", "JKq", "FDmCp", "pKpVtiZ"], [-4.874268149645673, -77.86017743246624, -33.718853590345745, -77.86017743246624, -21.16888114566433, -46.57347103376453, -46.57347103376453, -46.57347103376453, 75.37283925638667, 67.81478209152664]], [[1, 2, -41, 4, 3, 2, 1], [1, 2, -41, 4, 3, 2, 1]], [[1, 1, 65, 1, 1, 1], [1, 1, 65, 1, 1, 1]], [["vbL", "SohtgNm"], []], [[1, 1, 2, 3, 4, 5, 2], [1, 1, 2, 3, 4, 5, 2]], [[8, 1, 1, -85, 1, 1, 1, 1, 1], [8, 1, 1, -85, 1, 1, 1, 1, 1]], [[8, 1, -85, 1, 1, 1, 1, 1], [8, 1, -85, 1, 1, 1, 1, 1]], [[2, false], [2, false]], [[1, 3, 3, 3], [1, 3, 3, 3]], [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], [[true, false, false, true, false, false, false, false, true], []], [[1, 2, 4], [1, 2, 4]], [[-82, -69, -58.58022067422433], [-82, -69, -58.58022067422433]], [[3, 4, 4], [3, 4, 4]], [[1, 2, 0, -41, 4, 3, 2], [1, 2, 0, -41, 4, 3, 2]], [[-82, 5, -66], [-82, 5, -66]]], "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(B, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False\n"}
{"task_id": "Mbpp/577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n", "entry_point": "last_Digit_Factorial", "canonical_solution": "\ndef last_Digit_Factorial(n): \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n", "base_input": [[4], [21], [30]], "atol": 0, "plus_input": [[0], [100], [1000], [2.5], [3.8], [23.074387180674933], [1002], [3.6549340293875163], [1], [1001], [1004], [1005], [2.7450543076525977], [2.984088088976573], [false], [1.5869584267664152], [4.4891610250151395], [3.089056366033627], [5.3027554376354065], [4.028700461024416], [3.3725660528964188], [2.659818066786769], [101], [3.9892249182433384], [43.22021574103846], [1003], [3.4810848948595883], [3.1692815338650804], [1.0650899101182285], [4.8986268408429705], [3.69259942495845], [4.010566044386772], [2.46052609812118], [4.3768561489787015], [3.6713224100924298], [6.935501596893169], [true], [5.576255197840953], [3.1502544356560356], [2], [4.300091801377514], [52], [3.9155933853489917], [1.2988016591670484], [3.1345443196257796], [4.702845843512329], [5.7904698753969095], [5.08429332701897], [2.70011255752315], [4.2559869433188195], [102], [3.406797610867242], [99], [4.435038737799036], [1.4008586626684183], [4.651659050694365], [53.1496871886536], [0.8498008825679926], [4.236748701784517], [3.0176093048380817], [5.133463974586371], [3.393657330126743], [4.344750174563699], [4.837864419812973], [2.6908650361350013], [5.772166921072477], [0.5074731900068552], [69.33184166028241], [3.3762535480187235], [7.243263284188997], [4.974431164462356], [5.469285749841541], [1.5343753447253605], [2.5781387688594126], [3.918207627535553], [0.9205123885721357], [103.48263235407262], [69.56546331692546], [52.786214360228406], [1.1082663739985814], [1.5553181988910334], [3.6259722043628435], [1.512932111354384], [5.427953835612454], [5.301127862149642], [3.101495225095455], [5.053328029880188], [2.827561476523175], [69.55434074938697], [999], [0.3200065092069435], [6.517544303154645], [5.969669418741442], [6.995408755091795], [3.779793140475027], [39.76359690298631], [4.837924418596985], [53.87971805413539], [6.222949720825474], [2.1433527265004884], [2.7823798633471695], [3.315018436042766], [4.0729861275073915], [1.9387560331276734], [2.5216632117725064]], "contract": "\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n"}
{"task_id": "Mbpp/578", "prompt": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n", "entry_point": "interleave_lists", "canonical_solution": "\ndef interleave_lists(list1, list2, list3):\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]], [[10, 20], [15, 2], [5, 10]], [[11, 44], [10, 15], [20, 5]]], "atol": 0, "plus_input": [[[], [], []], [[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6], [10, 20, 30, 40, 50, 60], [100, 200, 300, 400, 500, 600]], [[11, 22, 33], [10, 20, 30], [100, 200, 300]], [[1, 2, 3, 4], [10, 20, 30, 40], [100, 200, 300, 400]], [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17, 18], [19, 20, 21]], [[22, 23, 24], [25, 26, 27], [28, 29, 30]], [[22, 16, 33], [10, 20, 30], [22, 16, 33]], [[5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [10, 11, 12, 13, 14]], [[1, 7, 3], [1, 7, 3], [1, 7, 3]], [[4, 1, 7, 3], [4, 1, 7, 3], [4, 1, 7, 3]], [[16, 17, 18], [19, 20, 21], [19, 20, 21]], [[5, 6, 7, 8, 9], [9, 11, 12, 13, 14], [9, 11, 12, 13, 14]], [[13, 14, 15], [16, 17, 18], [13, 14, 15]], [[1, 30, 7, 3, 1], [1, 30, 7, 3, 1], [1, 30, 7, 3, 1]], [[9, 11, 12, 13], [9, 11, 12, 13], [9, 11, 12, 13]], [[10, 11, 12, 14, 14], [10, 11, 12, 14, 14], [10, 11, 12, 14, 14]], [[10, 11, 12, 15, 14, 15], [10, 11, 12, 15, 14, 15], [10, 11, 12, 15, 14, 15]], [[9, 12, 13], [9, 12, 13], [9, 12, 13]], [[1, 2, 3, 4], [10, 20, 30, 40], [10, 20, 30, 40]], [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]], [[9, 11, 12, 13, 13], [9, 11, 12, 13, 13], [9, 11, 12, 13, 13]], [[16, 17, 18], [19, 21, 21], [19, 21, 21]], [[1, 2, 3, 4, 5, 6, 4], [10, 20, 30, 40, 2, 50, 60], [10, 20, 30, 40, 2, 50, 60]], [[0, 1, 2, 3, 8], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]], [[10, 12, 15, 14, 15], [10, 12, 15, 14, 15], [10, 12, 15, 14, 15]], [[9, 11, 12, 3, 13, 9], [9, 11, 12, 3, 13, 9], [9, 11, 12, 3, 13, 9]], [[17, 17, 18], [19, 20, 21], [19, 20, 21]], [[2, 1, 7, 3, 1], [2, 1, 7, 3, 1], [2, 1, 7, 3, 1]], [[11, 12, 13, 13], [11, 12, 13, 13], [11, 12, 13, 13]], [[2, 1, 7, 1], [2, 1, 7, 1], [2, 1, 7, 1]], [[4, 6, 6], [4, 6, 6], [7, 8, 9]], [[16, 17, 18], [20, 21, 21], [20, 21, 21]], [[2, 29, 7, 1, 29], [2, 29, 7, 1, 29], [2, 29, 7, 1, 29]], [[1, 30, 7, 3, 2], [1, 30, 7, 3, 2], [1, 30, 7, 3, 2]], [[9, 11, 12, 3, 13, 8], [9, 11, 12, 3, 13, 8], [9, 11, 12, 3, 13, 8]], [[2, 29, 7, 0, 29], [2, 29, 7, 0, 29], [2, 29, 7, 0, 29]], [[1, 30, 7, 500, 3, 1, 7, 1], [1, 30, 7, 500, 3, 1, 7, 1], [1, 30, 7, 500, 3, 1, 7, 1]], [[9, 12, 12, 12, 13], [9, 12, 12, 12, 13], [9, 12, 12, 12, 13]], [[1, 30, 7, 7, 500, 3, 1, 7, 1], [1, 30, 7, 7, 500, 3, 1, 7, 1], [1, 30, 7, 7, 500, 3, 1, 7, 1]], [[16, 17, 18, 18], [19, 21, 21, 19], [19, 21, 21, 19]], [[1, 29, 7, 29, 29], [1, 29, 7, 29, 29], [1, 29, 7, 29, 29]], [[4, 1, 30, 7, 3, 2, 4], [4, 1, 30, 7, 3, 2, 4], [4, 1, 30, 7, 3, 2, 4]], [[19, 20, 21, 21], [19, 20, 21, 21], [19, 20, 21, 21]], [[9, 12, 3, 9], [9, 12, 3, 9], [9, 12, 3, 9]], [[1, 30, 11, 7, 500, 3, 1, 7, 1], [1, 30, 11, 7, 500, 3, 1, 7, 1], [1, 30, 11, 7, 500, 3, 1, 7, 1]], [[19, 20, 21, 21, 21], [19, 20, 21, 21, 21], [19, 20, 21, 21, 21]], [[20, 19, 20, 21, 21], [20, 19, 20, 21, 21], [20, 19, 20, 21, 21]], [[9, 8, 13], [9, 8, 13], [9, 8, 13]], [[9, 8, 13, 13], [9, 8, 13, 13], [9, 8, 13, 13]], [[10, 12, 15, 15, 14, 15], [10, 12, 15, 15, 14, 15], [10, 12, 15, 15, 14, 15]], [[1, 30, 7, 7, 500, 3, 1, 7, 1, 1, 500], [1, 30, 7, 7, 500, 3, 1, 7, 1, 1, 500], [1, 30, 7, 7, 500, 3, 1, 7, 1, 1, 500]], [[2, 1, 7, 3, 1, 2, 7, 1], [2, 1, 7, 3, 1, 2, 7, 1], [2, 1, 7, 3, 1, 2, 7, 1]], [[0, 12, 1, 6], [0, 12, 1, 6], [0, 12, 1, 6]], [[9, 11, 12, 3, 13, 9, 9], [9, 11, 12, 3, 13, 9, 9], [9, 11, 12, 3, 13, 9, 9]], [[1, 30, 7, 3, 17, 1], [1, 30, 7, 3, 17, 1], [1, 30, 7, 3, 17, 1]], [[26, 9, 8, 13, 13], [26, 9, 8, 13, 13], [26, 9, 8, 13, 13]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 30, 3, 2], [1, 30, 3, 2], [1, 30, 3, 2]], [[100, 200, 299, 400], [1, 2, 3, 4], [100, 200, 299, 400]], [[12, 13], [12, 13], [12, 13]], [[11, 12, 13, 13, 12], [11, 12, 13, 13, 12], [11, 12, 13, 13, 12]], [[0, 1, 30, 7, 500, 3, 1, 7, 1, 30], [0, 1, 30, 7, 500, 3, 1, 7, 1, 30], [0, 1, 30, 7, 500, 3, 1, 7, 1, 30]], [[11, 12, 12, 13], [11, 12, 12, 13], [11, 12, 12, 13]], [[9, 12, 3, 9, 12], [9, 12, 3, 9, 12], [9, 12, 3, 9, 12]], [[9, 11, 12, 3, 13, 9, 11], [9, 11, 12, 3, 13, 9, 11], [9, 11, 12, 3, 13, 9, 11]], [[11, 12, 13], [11, 12, 13], [11, 12, 13]], [[9, 13, 12, 12, 13, 13], [9, 13, 12, 12, 13, 13], [9, 13, 12, 12, 13, 13]], [[-1, 29, 7, 29, 29], [-1, 29, 7, 29, 29], [-1, 29, 7, 29, 29]], [[12, 13, 13, 12, 13], [12, 13, 13, 12, 13], [12, 13, 13, 12, 13]], [[11, 9, 12, 6], [11, 9, 12, 6], [11, 9, 12, 6]], [[26, 10, 8, 13, 13], [26, 10, 8, 13, 13], [26, 10, 8, 13, 13]], [[19, 20, 21, 8, 21], [19, 20, 21, 8, 21], [19, 20, 21, 8, 21]], [[2, 28, 7, 0, 29, 0], [2, 28, 7, 0, 29, 0], [2, 28, 7, 0, 29, 0]], [[9, 8, 13, 13, 9], [9, 8, 13, 13, 9], [9, 8, 13, 13, 9]], [[1, 31, 30, 7, 3, 1], [1, 31, 30, 7, 3, 1], [1, 31, 30, 7, 3, 1]], [[26, 10, 13, 13], [26, 10, 13, 13], [26, 10, 13, 13]], [[4, 6, 6], [12, 8, 9], [12, 8, 9]], [[11, 12, 12, 13, 11], [11, 12, 12, 13, 11], [11, 12, 12, 13, 11]], [[11, 12, 13, 12], [11, 12, 13, 12], [11, 12, 13, 12]], [[2, 29, 0, 29, 2], [2, 29, 0, 29, 2], [2, 29, 0, 29, 2]], [[10, 12, 15, 33, 15, 33], [10, 12, 15, 33, 15, 33], [10, 12, 15, 33, 15, 33]], [[19, 20, 2, 21], [19, 20, 2, 21], [19, 20, 2, 21]], [[9, 13, 12, 12, 12, 13, 13], [9, 13, 12, 12, 12, 13, 13], [9, 13, 12, 12, 12, 13, 13]], [[-1, 29, 7, 29, 29, 29], [-1, 29, 7, 29, 29, 29], [-1, 29, 7, 29, 29, 29]], [[26, 8, 13, 13], [26, 8, 13, 13], [26, 8, 13, 13]], [[11, 12, 13, 13, 13], [11, 12, 13, 13, 13], [11, 12, 13, 13, 13]], [[10, 11, 12, 14, 14, 11], [10, 11, 12, 14, 14, 11], [10, 11, 12, 14, 14, 11]], [[9, 12, 3, 8, 12, 9], [9, 12, 3, 8, 12, 9], [9, 12, 3, 8, 12, 9]], [[2, 0, 29, 7, 1, 29], [2, 0, 29, 7, 1, 29], [2, 0, 29, 7, 1, 29]], [[11, 12, 13, 13, 12, 12], [11, 12, 13, 13, 12, 12], [11, 12, 13, 13, 12, 12]], [[10, 12, 15, 14, 14, 15], [10, 12, 15, 14, 14, 15], [10, 12, 15, 14, 14, 15]], [[9, 11, 12, 15, 13], [9, 11, 12, 15, 13], [9, 11, 12, 15, 13]], [[9, 11, 12, 13, 13, 13], [9, 11, 12, 13, 13, 13], [9, 11, 12, 13, 13, 13]], [[29, 30, 3, 2], [29, 30, 3, 2], [29, 30, 3, 2]], [[26, 13, 13], [26, 13, 13], [26, 13, 13]], [[9, 10, 11, 12], [9, 10, 11, 12], [9, 10, 11, 12]], [[19, 20, 21, 8, 21, 21, 21], [19, 20, 21, 8, 21, 21, 21], [19, 20, 21, 8, 21, 21, 21]], [[9, 11, 12, 15], [9, 11, 12, 15], [9, 11, 12, 15]], [[19, 20, 21, 8, 500, 21, 21], [19, 20, 21, 8, 500, 21, 21], [19, 20, 21, 8, 500, 21, 21]], [[4, 19, 20, 21], [4, 19, 20, 21], [4, 19, 20, 21]], [[26, 13, 8, 13, 13], [26, 13, 8, 13, 13], [26, 13, 8, 13, 13]], [[10, 11, 12, 14, 11], [10, 11, 12, 14, 11], [10, 11, 12, 14, 11]], [[11, 13, 12, 12, 13, 12], [11, 13, 12, 12, 13, 12], [11, 13, 12, 12, 13, 12]], [[2, 1, 0, 7, 3, 1], [2, 1, 0, 7, 3, 1], [2, 1, 0, 7, 3, 1]], [[10, 11, 9, 9, 14, 14, 10], [10, 11, 9, 9, 14, 14, 10], [10, 11, 9, 9, 14, 14, 10]], [[19, 20, 0, 8, 500, 21, 21], [19, 20, 0, 8, 500, 21, 21], [19, 20, 0, 8, 500, 21, 21]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n"}
{"task_id": "Mbpp/579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n", "entry_point": "find_dissimilar", "canonical_solution": "\ndef find_dissimilar(test_tup1, test_tup2):\n  return tuple(set(test_tup1) ^ set(test_tup2))\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [7, 2, 3, 9]], [[21, 11, 25, 26], [26, 34, 21, 36]]], "atol": 0, "plus_input": [[[3, 4, 5, 6, 7, 8, 9], [5, 7, 4, 10, 12, 14, 16]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [7, 2, 3, 9, 14, 18, 21, 25]], [[21, 11, 25, 26, 30, 35, 40], [26, 34, 21, 36, 40, 45, 50]], [[], []], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 2, 3, 3, 3, 3]], [[1, 2, 3, 4, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [10, 10, 20, 20, 30, 30, 40, 40, 50, 50]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [2, 2, 4, 4, 6, 6, 8, 8, 10, 10]], [["a", "b", "c", "d", "e", "f", "g"], ["h", "i", "j", "k", "l", "m", "n"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [["apple", "banana", "cherry", "durian", "elderberry", "fig"], ["apple", "banana", "cherry", "durian", "elderberry", "fig"]], [["a", "b", "c", "d", "e", "f", "g"], ["c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]], [[1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10, 12, 14, 16]], [[1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14, 16]], [["apple", "banana", "cucumber", "dragonfruit"], ["banana", "dragonfruit", "eggplant", "fig"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 20]], [["apple", "banana", "cherry", "durian", "elderberry", "fig"], ["apple", "banana", "cherry", "guava", "kiwi", "mango"]], [[1, 2, 3, 1], [1, 2, 3, 1]], [["", "apple", "banana"], ["banana", "apple", ""]], [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]], [["a", "b", "c", "d"], ["d", "e", "f", "g"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, "a", "b", "c", "d", "e"], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]], [[1, 2, 3, 1], [1, 16, 3, 1]], [[1, 1, 2, 1, 2, 2, 2, 2, 2, 2], [2, 2, 2, 3, 3, 3, 3]], [["apple", "banana", "cucumber", "dragonfruit"], ["banana", "dragonfruit", "egcherrygplant", "eggplant", "fig", "dragonfruit"]], [[1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10], [1, 2, 3, 4, 30, 6, 7, 9, 10]], [[1, 16, 3, 1], [1, 16, 3, 1]], [[1, 2, 3, 1, 3], [1, 2, 3, 1]], [["", "apple", "elderberry", "banana", ""], ["", "apple", "banana"]], [["", "apple"], ["banana", "apple", ""]], [[21, 11, 25, 26, 30, 35, 40, 40], [26, 34, 21, 36, 40, 45, 50]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 20], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 20]], [[10, 10, 20, 20, 30, 30, 40, 50, 40, 50, 50], [10, 10, 20, 20, 30, 30, 40, 40, 50, 50]], [["apple", "banana", "cucumber", "dragonfruit"], ["banana", "dragonfruit", "fig"]], [[26, 34, 21, 36, 40, 45, 50], [26, 34, 21, 36, 40, 45, 50]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 17, 16, 17, 18, 19, 20]], [[1, 2, 3, 4, 7], [1, 2, 3, 4, 5]], [["", "apple", "banana"], ["", "apple", "banana"]], [[1, 2, 3, 4, 5, 2], [6, 7, 8, 9, 10]], [[21, 11, 25, 26, 30, 35, 40, 40, 21], [26, 34, 21, 36, 40, 45, 50]], [[1, 2, 3, 1, 1], [1, 2, 3, 1]], [["a", "b", "c", "d", "e", "f", "gg"], ["h", "i", "j", "k", "l", "m", "n"]], [["", "apple", "a"], ["", "apple", "apple"]], [[1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 6], [1, 2, 3, 4, 30, 6, 7, 9, 10]], [["", "apple", "banana"], ["egcherrygplant", "a", "banana"]], [[1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5], [1, 2, 15, 3, 4, 5, 1]], [[1, 2, 3, 4, 5, 6, 7, 2], [2, 4, 6, 8, 10, 12, 14, 16]], [[1, 16, 3, 1], [2, 1, 16, 3, 1]], [["a", "b", "c", "d", "e", "f", "g"], ["durian", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]], [[], [32.93260841054931, -74.09499781125828, -54.49719674608351, -59.91254473588992, 66.77507074495682]], [["apple"], ["apple"]], [[10, 9, 21, 8, 7, 6, 5, 4, 3, 2, 1, 11, 16, 17, 18, 19, 20], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 16, 17, 18, 19, 20]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [10, 20, 20, 30, 30, 40, 40, 50, 50]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]], [[5, 60, 18, 10, 11, 8, 26, -35, 2, 34], [5, 60, 18, 10, 11, 8, 26, -35, 2, 34, 18]], [[1, 2, 3, 90, 5, 2, 7, 8, 9, 10, 11, 12], [1, 2, 3, 90, 5, 2, 7, 8, 9, 10, 11, 12]], [["n", "", "cherry"], ["banana", "apple", ""]], [["banana", "apple", "", ""], ["banana", "apple", "", ""]], [[10, 3, 9, 8, 7, 6, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 9, 5], [1, 2, 15, 3, 4, 35, 5, 1]], [[1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2]], [["apple", "banana", "n", "cucumber", "dragonfruit"], ["apple", "banana", "cucumber", "dragonfruit"]], [[1, 2, 3, 4, 5, 2], [1, 2, 3, 4, 5, 2]], [["apple", "banana", "f", "guava", "m", "kiwi", "mango", "guava"], ["banana", "f", "guava", "kiwi", "mango"]], [[1, 2, 3, 4, 80, 5], [2, 15, 35, 3, 60, 4, 5, 1]], [["a", "b", "c", "c", "d", "e", "gg"], ["a", "b", "c", "d", "e", "gg"]], [[false], []], [[21, 11, 25, 26, 30, 35, 40, 40], [21, 11, 25, 26, 30, 35, 40, 40]], [[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]], [["", "appple", "a", "apple"], ["", "apple", "apple"]], [[5, 60, 18, 10, 11, 8, 26, -35, 34], [5, 60, 18, 10, 11, 8, 26, -35, 2, 34, 18]], [["apple", "banana", "cherry", "durian", "elderberry", "eggplant", "fig", "durian"], ["apple", "banana", "cherrappple", "guava", "kiwi", "mango"]], [[5, 5, 5, 5, 6, 6, 6, 6, 5], [5, 5, 5, 5, 6, 6, 6, 6]], [[1, 2, 3, 4, 30, 6, 7, 9, 10, 9], [1, 3, 4, 30, 6, 7, 9, 10, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 18, 19, 20]], [["apple", "guva", "banana", "guava", "kiwi", "mango"], ["apple", "banana", "guava", "kiwi", "mango"]], [["", "apple", ""], ["", "apple"]], [["a", "c", "d", "e", "f", "g", "h", "i", "j"], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]], [[7, 8, 10, 9, 10, 11], [7, 8, 9, 10, 11]], [[5, 5, 5, 5, 6, 5, 6, 6, 5], [5, 5, 5, 5, 6, 6, 6, 6, 5, 5]], [[1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2]], [[21, 11, 25, 26, 30, 35, 40, 40, 21], [26, 34, 21, 36, 50, 40, 45, 50]], [[1, 2, 3, 90, 5, 2, 7, 8, 9, 10, 11, 12], [1, 2, 3, 90, 5, 12, 7, 8, 9, 10, 11, 12]], [["apple", "banana", "egcherrygplant", "guava", "kiwi", "mango", "kiwi"], ["apple", "banana", "egcherrygplant", "guava", "kiwi", "mango"]], [["e", "f", "g"], ["d", "e", "f", "g"]], [[1, 1, 60, 2, 3, 3, 4, 4, 5, 5], [2, 2, 4, 4, 6, 6, 8, 8, 10, 10]], [[1, 2, 3, 4, 5, 2], [1, 2, 3, 4, 5, 2, 1]], [[1, 2, 3, 19, 5], [1, 2, 3, 4, 7]], [[1, 2, 3, 4, 5, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[21, 11, 25, 26, 30, 35, 40], [26, 34, 21, 40, 45, 50]], [["", "apple", "banana"], ["egcherrygplant", "a", "banana", "egcherrygplant"]], [[10, 9, 8, 5, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 20], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15]], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]], [[11, 20, 30, 40, 50, 60, 70, 80, 90, 100], [10, 20, 30, 40, 50, 60, 70, 9, 90, 100]], [[1, 2, 90, 5, 12, 7, 8, 9, 10, 11, 12], [1, 2, 90, 5, 12, 7, 8, 9, 10, 11, 12]], [[10, 20, 15, 40, 50, 60, 70, 9, 90, 100], [10, 20, 15, 40, 50, 60, 70, 9, 90, 100]], [[2, 4, 6, 8, 10, 12, 1, 14, 25, 16], [2, 4, 6, 8, 10, 12, 14, 16]], [[10, 9, 8, 7, 6, 5, 4, 3, 1, 11, 16, 17, 18, 19, 20], [10, 9, 21, 8, 7, 6, 5, 4, 3, 2, 1, 11, 16, 17, 18, 19, 20]], [[1, 2, 3, 1, 3], [1, 2, 1]], [["apple", "banana", "cherry", "guava", "kiwi", "mango"], ["apple", "banana", "cherry", "guava", "kiwi", "mango"]], [[10, 10, 20, 20, 30, 30, 7, 40, 50, 50], [10, 10, 20, 20, 30, 30, 40, 40, 50, 50]], [[1, 2, 3, 90, 5, 2, 7, 8, 9, 10, 11, 12], [1, 2, 3, 90, 5, 2, 7, 8, 9, 60, 10, 11, 12]], [[1, 2, 3, 0, 4, 5, 5, 5, 5, 5], [1, 2, 3, 4, 5, 5, 5, 5, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6]], [["banana", "dragonfruit", "j"], ["banana", "dragonfruit", "fig"]], [["", "banana", "banana"], ["banana", "apple", ""]], [[1, 2, 3, 2, 4, 5, 1, 1], [1, 2, 3, 4, 7]], [["a", "b", "c"], ["d", "e", "f", "g"]], [[1, 2, 3, 4, 30, 6, 7, 9, 10, 9], [1, 3, 4, 30, 6, 7, 9, 10, 9, 4]], [[1, 2, 3, 4, 30, 6, 7, 9, 10], [1, 2, 3, 4, 30, 6, 7, 9, 10]], [[1, 2, 25, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 13, 14, 15]], [[1, 2, 3, 4, 5, 2], [1, 2, 3, 4, 5]], [["apple"], ["kiwi", "pple", "apple"]], [[16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [7, 2, 3, 9, 13, 14, 18, 21, 25]], [["a", "b", "c", "d"], ["a", "b", "c", "d"]], [["egcherrygplantbanana", "apple", ""], ["banana", "apple", ""]], [["apple", "banana", "cherry", "dian", "elderberry", "fig"], ["apple", "banana", "cherry", "daurian", "elderberry", "fig"]], [["a", "b", "c", "d", "e", "f"], ["h", "i", "j", "k", "l", "m", "n"]], [["ebanana", "", "apple", "banana"], ["", "apple", "banana"]], [[26, 34, 21, 36, 50, 40, 45, 50], [26, 34, 21, 36, 50, 40, 45, 50, 45]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n"}
{"task_id": "Mbpp/580", "prompt": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n", "entry_point": "extract_even", "canonical_solution": "\ndef even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\treturn even_ele(test_tuple)\n", "base_input": [[[4, 5, [7, 6, [2, 4]], 6, 8]], [[5, 6, [8, 7, [4, 8]], 7, 9]], [[5, 6, [9, 8, [4, 6]], 8, 10]]], "atol": 0, "plus_input": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[]], [[1, [2, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[1, [[3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]], [2, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[1, 1]], [[15, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[false, false, true, true, true, false, true, false, true]], [[15, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0]], [[5, [2, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0, 1]], [[17, 1]], [[15, 1]], [[66.96634945742454, 84.16107219904362]], [[1, 2, [3, 4, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0]], [[1, 2, 4, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0, 1, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[false, false, true, true, true, true, false, true]], [[-73.88041948495652, 57.63424841759968]], [[15, 14, 1]], [[15, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[17]], [[17, 1, 1]], [[19, 1, [2, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[66.96634945742454, 57.63424841759968]], [[18, 17, 1]], [[0, 17, 1]], [[1, 12, 2, 0, 1, 1]], [[[3, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0, 2]], [[1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[19, 0, 1, [2, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[1, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[2, 1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[31.494961367217638]], [[1, 2]], [[1, 2, 1, 1]], [[1, 0]], [[15, 14, 1, 14]], [[15, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 1]], [[1, 2, 1]], [[2, 15, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[1, 2, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]], [[19, 1]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0, 1, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 9, 1]], [[-73.88041948495652, -74.13986345025306, 57.63424841759968]], [[15, 1, 17, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[-73.88041948495652, 57.63424841759968, 57.63424841759968]], [[-73.88041948495652, 31.494961367217638, 57.63424841759968]], [[15, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 1, 2]], [[1, 2, [3, 4, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], -1, 0]], [[18, 1, 1]], [[1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0, 0]], [[1, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]], [[2]], [[2, 1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [2, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[19, 0, 1]], [[18, 1, 1, 18]], [[2, 15, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 15, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[3, 1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [2, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[1, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 9, 1]], [[18, 1, 1, 1]], [[1, 2, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]], 1]], [[5, 1, 2, 14, 10, 1, 1]], [[-73.88041948495652, 57.63424841759968, 84.16107219904362]], [[3, 1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [2, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 1]], [[2, 1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [2, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 2]], [[1, 12, 2, 0, 1, 1, 12]], [[1, 1, 1]], [[1, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[[3, 4, 21], 17, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0, 1, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[15, 2, [4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[2, 2]], [[2, 2, [3, 4, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 0]], [[18, 1, 1, 1, 1]], [[1, 2, [3, 4, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], -1, 0, [3, 4, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[1, 12, 2, 0, 1, 1, 12, 12]], [[2, 1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[-73.88041948495652, 57.63424841759968, 57.63424841759968, 57.63424841759968]], [[[3, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]], 9, [[3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]], [2, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[15, 16, 14, 1, 14]], [[1, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]], [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]], 2, 1]], [[1, 13, 2, 0, 1, 1]], [[1, 2, 14, 10, 1, 1]], [[15, 14]], [[0, 2]], [[2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[4, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]], [[2, 2, [3, 4, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 13, 0]], [[-73.88041948495652, -74.13986345025306, 57.63424841759968, -74.13986345025306]], [[-73.88041948495652, 57.63424841759968, 84.16107219904362, 84.16107219904362, 84.16107219904362]], [[2, 15, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 22]]], [[1, 15, 2, 0, 1, 1, 1]], [[5, [1, [3, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[15, 1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 1, 1]], [[12, 2, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]], [[17, 1, 17]], [[5, [[3, 15, [4, [5, [6]]]], [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]], [[1, 9, 1]], [[1, 16, 15, 2, 0, 1, 1, 1]], [[1, 2, [8, 3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21], 3, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]], 21]]], [[1, 15, 2, 0, 1, 1]]], "contract": "\n\tdef tuple_check(t): # $_CONTRACT_$\n\t\tif not isinstance(t, tuple): # $_CONTRACT_$\n\t\t\treturn isinstance(t, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(tuple_check(item) for item in t) # $_CONTRACT_$\n\tassert isinstance(test_tuple, tuple) # $_CONTRACT_$\n\tassert tuple_check(test_tuple) # $_CONTRACT_$\n", "assertion": "\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n"}
{"task_id": "Mbpp/581", "prompt": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n", "entry_point": "surface_Area", "canonical_solution": "\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \n", "base_input": [[3, 4], [4, 5], [1, 2]], "atol": 0, "plus_input": [[10, 20], [100, 50], [1000, 200], [100, 49], [200, 49], [100, 100], [1000, 199], [200, 200], [100, 200], [200, 50], [99, 100], [100, 101], [99, 99], [200, 201], [20, 100], [999, 1000], [20, 50], [21, 200], [99, 21], [998, 1000], [50, 51], [999, 100], [21, 100], [201, 199], [100, 998], [21, 21], [50, 50], [49, 200], [199, 199], [1000, 1000], [51, 100], [20, 1000], [201, 200], [20, 51], [10, 1000], [100, 1000], [201, 201], [49, 201], [999, 49], [21, 998], [101, 101], [998, 100], [998, 998], [100, 99], [99, 999], [200, 199], [21, 22], [999, 20], [200, 10], [999, 1001], [true, true], [99, 998], [199, 200], [10, 10], [198, 199], [21, 51], [198, 1000], [998, 999], [101, 100], [20, 10], [19, 20], [100, 21], [20, 20], [102, 102], [48, 201], [20, true], [199, 100], [1000, 102], [199, 50], [1001, 200], [49, 49], [22, 49], [51, 50], [101, 201], [48, 999], [101, 102], [199, 48], [99, true], [20, 201], [21, 9], [18, 19], [100, 11], [998, 49], [197, 197], [1001, 197], [20, 21], [10, 21], [999, 999], [199, 49], [1000, 21], [197, 196], [997, 101], [19, 997], [22, 48], [1000, 999], [200, 198], [1000, 1001], [1001, 101], [197, 201], [200, 8], [997, 997], [200, 196], [1001, 999]], "contract": "\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5\n"}
{"task_id": "Mbpp/582", "prompt": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\n", "entry_point": "my_dict", "canonical_solution": "\ndef my_dict(dict1):\n   assert isinstance(dict1, dict)\n   return dict1 == {}\n", "base_input": [[{"10": 0}], [{"11": 0}], [{}]], "atol": 0, "plus_input": [[{"0": 0}], [{"": ""}], [{"key": "value"}], [{"key": {"nested_key": "nested_value"}}], [{}], [{"0": 0, "1": 0}], [{"0": 7.7065541266922395, "-3": -39.97415234196022, "1": -40.11159601559486}], [{"0": 1, "1": 0}], [{"key": "value", "keyy": "val", "keyyy": "vval"}], [{"key": {}}], [{"0": -1}], [{"eMkLPJvdjC": 19, "nested_key": "val"}], [{"eMkLPJvdjC": false}], [{"0": 7.7065541266922395, "-3": -39.97415234196022, "1": -40.11159601559486, "-1": -42.18886174552073}], [{"": "", "value": "val"}], [{"0": -3, "1": 0, "19": -1}], [{"eMkLPJvdjC": 19, "nested_key": "va"}], [{"key": "value", "keyy": "val", "keyyy": "vval", "value": "valvue"}], [{"eMkLPJvdjC": 19}], [{"-1": -39.97415234196022, "-3": -42.18886174552073, "8": -3.0439534563350747, "0": 34.24285894082212, "-5": -42.18886174552073, "-6": 26.12131328700113}], [{"-1": -39.97415234196022, "-3": -42.18886174552073, "8": 26.12131328700113, "0": 34.24285894082212, "-5": -42.18886174552073, "-6": 26.12131328700113}], [{"eMkLPJvdjC": 19, "nested_key": "va", "nekeyyyey": "vva"}], [{"eMkLPJvdjC": 20, "nested_key": "va"}], [{"key": {}, "kvvaey": {}}], [{"eMkLPJvdjC": 19, "key": 20}], [{"1": 0, "19": -1}], [{"1": 0, "19": 0}], [{"0": -3, "1": -3, "19": -1}], [{"key": {"nested_key": "kvvaey"}}], [{"0": -6}], [{"18": -57, "8": 56}], [{"0": 7.7065541266922395, "-3": -39.97415234196022}], [{"1": -57, "19": 0}], [{"0": 20, "1": 0}], [{"0": 7.7065541266922395, "-3": -40.11159601559486, "1": -40.11159601559486, "-1": -42.18886174552073}], [{"key": "value", "keyy": "val", "keyyy": "vval", "ekey": "l"}], [{"0": 7.7065541266922395, "-3": -39.97415234196022, "1": -40.11159601559486, "-5": -36.7054446431115}], [{"key": {}, "": {}}], [{"key": "value", "keyy": "val", "keyyy": "vval", "nested_value": "valnested_value"}], [{"1": 0, "19": -6}], [{"eMkLPJvdjC": 19, "nested_key": "va", "valnested_value": 19, "ey": "a"}], [{"-1": -3.0439534563350747, "-3": -42.18886174552073, "8": 26.12131328700113, "0": 34.24285894082212, "-5": -42.18886174552073, "-6": 26.12131328700113}], [{"-1": -30.40740359923218, "-3": -42.18886174552073, "8": -3.0439534563350747, "0": 34.24285894082212, "-5": -42.18886174552073, "-6": 26.12131328700113}], [{"": "", "value": "vkeyyyal"}], [{"a": 0, "nested_key": -57}], [{"key": 20}], [{"key": {}, "": {"ekey": "L", "a": "keyy", "val": "ey", "valvue": "", "cAouijqvQ": "BgizPwe", "R": ""}, "keyy": {"-36.7054446431115": -29.06815454175519, "-39.97415234196022": -42.18886174552073, "-30.40740359923218": -36.7054446431115, "74.44715648300132": -42.18886174552073}}], [{"-35": -36.7054446431115, "56": -42.18886174552073, "19": 59.91018658815767, "-95": 65.34810569659618, "0": 34.24285894082212, "18": -30.40740359923218}], [{"": "", "value": "vall"}], [{"": {}}], [{"0": 20, "1": 8}], [{"key": "value", "keyy": "val", "keyyy": "vval", "nested_value": "valnested_value", "nested_vlue": "valnested_value"}], [{"keyy": "val", "keyyy": "vval", "nested_value": "valnested_value", "nested_vlue": "valnested_value"}], [{"65.34810569659618": false, "63.111007485969424": false, "-93.92681853065258": true, "74.44715648300132": true, "-36.7054446431115": true}], [{"": "", "valvue": "vval", "vavalvuelue": "l", "BgizPwe": "ll", "vavalvueluea": "BgizPwe"}], [{"": "", "value": "vkeyyyal", "vval": "kvkeyyyal", "vvavl": "value"}], [{"eMkLPJvdjC": 18, "nested_key": "va", "nekeyyyey": "vva"}], [{"key": "value", "keyy": "val", "keyyy": "vval", "nested_value": "valnested_value", "nested_vlue": "valnested_value", "kvvaey": "valnestekeyed_value"}], [{"key": "value", "keyy": "val", "eMkLPJvdjCkeyyy": "vanested_vluelue"}], [{"key": "vkeyyalue", "keyy": "val", "keyyy": "vval", "keyeMkLPJvdjC": "vl"}], [{"keyy": "val", "keyyy": "vval", "nested_value": "valnelsted_value", "nested_vlue": "valnested_value"}], [{"0": 7.7065541266922395, "-3": -39.97415234196022, "1": -40.11159601559486, "-5": 7.7065541266922395}], [{"1": 56}], [{"-1": 65.34810569659618, "-3": -41.6696594086839, "8": 26.12131328700113, "0": 34.24285894082212, "-5": -42.18886174552073, "-6": 26.12131328700113}], [{"1": 57}], [{"0": -8, "8": -5, "-35": 20}], [{"keyy": "val", "keyyy": "nested_key", "nested_value": "valnested_value", "nested_vlue": "valnested_value", "keeyy": "vlval"}], [{"": "", "value": "nekeyyyeyvkeyyyal"}], [{"": "", "valvue": "vval", "vavalvuelue": "l", "BgizPwe": "ll", "vavalvueluea": "BgizPwe", "eMkLPJvdjCkeyyy": "BgizPwevalnestekeyed_value"}], [{"eMkLPJvdjC": false, "kvkeyyyal": true}], [{"eMkLPJvdjC": 20}], [{"keyy": "val", "keyyy": "vval", "nested_value": "valnested_value"}], [{"0": 7.7065541266922395, "-3": -39.97415234196022, "1": -40.11159601559486, "-2": 5.496208895107118}], [{"1": 0, "19": 56}], [{"0": 0, "19": 0}], [{"1": 56, "-6": 18}], [{"-3": -39.97415234196022, "1": -40.11159601559486, "-5": 7.7065541266922395}], [{"keyy": "val", "keyyy": "vval", "nested_value": "L", "nested_vlue": "valnested_value"}], [{"key": {"nested_key": "vvvaall"}, "eMkLPJvdjC": {"nested_key": "vvvaall"}, "eMkLPJvvdjC": {"nested_key": "vvvaall"}}], [{"keyy": "val", "keyyy": "nested_key", "nested_value": "valnested_value", "nested_vlue": "valnested_value", "keeyy": "vlval", "valnested_value": "vaal"}], [{"key": "value", "keyy": "val", "value": "valvue"}], [{"-35": 65.49184925408, "56": -42.18886174552073, "19": 59.91018658815767, "-95": 65.34810569659618, "0": 34.24285894082212, "18": -30.40740359923218}], [{"eMkLPJvdjC": 19, "nested_key": "a", "eMkLPJvdjCnested_key": "", "eMkLPJkey": ""}], [{"-35": 65.49184925408, "56": -42.18886174552073, "19": 59.91018658815767, "0": 34.24285894082212, "18": -30.40740359923218}], [{"19": 0, "-95": -57}], [{"key": {}, "vlval": {"eMkLPJvdjCkeyyy": "valnested_value", "vavalvuelue": "eMkLPJvdjCkeyyy", "key": "ZRsEzI", "keeyy": "valvue", "ekey": "nested_key", "rGdgVk": "zg", "ysmkoDhR": "H", "BgizPwevalnestekeyed_value": "keyey", "vaal": "mw"}}], [{"keyy": "val", "keyyy": "vval", "nested_value": "valnested_value", "vkeyyyal": "v"}], [{"1": 58, "0": 57, "-57": 56}], [{"key": {}, "": {"ekey": "L", "a": "keyy", "val": "ey", "valvue": "", "cAouijqvQ": "BgizPweL", "R": ""}, "keyy": {"-36.7054446431115": -29.06815454175519, "-39.97415234196022": -42.18886174552073, "-30.40740359923218": -36.7054446431115, "74.44715648300132": -42.18886174552073}, "vkeyyyal": {"ekey": "L", "a": "keyy", "val": "ey", "valvue": "", "cAouijqvQ": "BgizPweL", "R": ""}}], [{"key": {}, "valnestekeyed_value": {"v": false, "vavalvuelue": false, "valnelsted_value": false}}], [{"0": -5, "-3": 57}], [{"1": 56, "19": 0}], [{"keyy": "val", "keyyy": "nested_key", "nested_value": "valnested_value", "nested_vlue": "valnested_value", "keeyy": "vlval", "keeeyy": "BgizPweL", "valnelsted_value": "key"}], [{"keyy": "val", "keyyy": "nested_key", "nested_value": "valnested_value", "nested_vlue": "vlvalkeyeMkLPJvdjC", "keeyy": "vlval", "valnested_value": "vaal", "BgizPwevalnestekeyed_value": "nestede_key", "nested_valvvvaall": "R"}], [{"0": 57, "-57": 55}], [{"-35": 20}], [{"19": 0, "-95": -8}], [{"key": "value", "keyyy": "vval", "value": "valvue"}], [{"": "", "value": "vkeyyyal", "vvlalue": "vkeyyyal"}], [{"keyy": "val", "keyyy": "vval", "nested_value": "valnested_value", "nested_vlue": "valnested_value", "nested_vleue": "key", "ekeykeyy": "valnested_vallue"}], [{"0": 0, "19": -1}], [{"0": -6, "-1": 8}], [{"0": 7.7065541266922395, "-3": -39.97415234196022, "19": 7.7065541266922395}], [{"key": 20, "kenekeyyyeyy": 18}]], "contract": "\n", "assertion": "\nassert my_dict({10: 0})==False\nassert my_dict({11: 0})==False\nassert my_dict({})==True\n"}
{"task_id": "Mbpp/583", "prompt": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n", "entry_point": "catalan_number", "canonical_solution": "\ndef catalan_number(num):\n    if num <= 1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num\n", "base_input": [[10], [9], [7]], "atol": 0, "plus_input": [[0], [1], [2], [3], [true], [4], [false], [5], [6], [7], [8], [9], [10], [11], [12], [13], [15], [14]], "contract": "\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429\n"}
{"task_id": "Mbpp/585", "prompt": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n", "entry_point": "expensive_items", "canonical_solution": "\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\n", "base_input": [[[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 45.09}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 45.09}, {"name": "Item-4", "price": 22.75}], 1]], "atol": 0, "plus_input": [[[], 5], [[], 3], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 2], [[], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 5], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 5], [[{"name": "Item-2", "price": 555.22}], 5], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 5], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "It-em-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 22.75}, {"name": "Item-2", "price": 22.75}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 4], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}], 6], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[], 4], [[{"name": "Item-1", "price": 101.1}, {"name": "IItem-2", "price": 555.22}, {"name": "IItem-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-4", "price": 22.75}], 4], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-4", "price": 22.75, "Item-2name": "IItem-2"}, {"name": "Item-2", "price": 22.75}, {"name": "Item-2", "price": 22.75}, {"name": "Item-3", "price": 555.22, "Item-4": "ItemIteem-4-3"}, {"name": "Item-4", "price": 22.75, "Item-2name": "IItem-2"}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 6], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22, "pricename": "Ittem-3"}, {"name": "Item-3", "price": 555.22, "pricename": "Ittem-3"}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}], 6], [[{"name": "Item-2", "price": 555.22}], 4], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 22.75}, {"name": "Item-2", "price": 22.75}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "It-em-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 4], [[{"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "Item-1": "Ittem-4"}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 4], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}], 4], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709}], 2], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-1", "price": 101.1}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-3", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}], 5], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 22.75}, {"name": "Item-2", "price": 22.75}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-2", "price": 22.75}], 1], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}], 5], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "It-em-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "Item-1": "Ittem-4"}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 101.22951736172081}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 6], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}], 1], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}], 4], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709}], 3], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}, {"name": "Item-4", "price": 22.75}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}], 2], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22, "Item--2": 101.22951736172081}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}], 4], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "It-em-4", "price": 22.75}, {"name": "Item-2", "price": 555.22}], 1], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-4", "price": 25.17252440958781}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 25.17252440958781}], 3], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}], 6], [[{"name": "namme", "price": 100.13437547119709}, {"name": "namme", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "namme", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 5], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 4], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 1], [[{"name": "Item", "price": 100.13437547119709}, {"name": "Item", "price": 100.13437547119709}, {"name": "Item", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item", "price": 100.13437547119709}], 6], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "Item-1": "Ittem-4"}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 5], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}], 2], [[{"name": "Item-1", "price": 100.13437547119709, "nme": "Item-Iteem-41"}, {"name": "Item-1", "price": 100.13437547119709, "nme": "Item-Iteem-41"}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 6], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}], 7], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}], 4], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 11.86233182296112}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 11.86233182296112}, {"name": "Item-1", "price": 100.13437547119709}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 101.1}, {"name": "Item-4", "price": 22.75}], 7], [[{"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}], 5], [[{"name": "Item-1", "price": 101.1}, {"name": "It-em-4", "price": 22.75}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22}], 6], [[{"name": "Item-1", "price": 101.1}, {"name": "IItem-2", "price": 555.22, "nItem--2ame": "IIteprice-2"}, {"name": "IItem-2", "price": 555.22, "nItem--2ame": "IIteprice-2"}, {"name": "Item-3", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}], 2], [[{"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 100.13437547119709, "nname": "name"}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Ittem-3", "price": 100.13437547119709}, {"name": "Ittem-3", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}, {"name": "Ittem-3", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75, "pnnamerice": 555.22}], 4], [[{"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "pricename": "nname"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 3], [[{"name": "Item-1", "price": 25.17252440958781}, {"name": "Item-1", "price": 25.17252440958781}, {"name": "Item-1", "price": 25.17252440958781}, {"name": "Item-4", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22}, {"name": "Item-1", "price": 25.17252440958781}, {"name": "Item-1", "price": 25.17252440958781}], 2], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-2", "price": 555.22, "Item--2": 101.22951736172081}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}], 3], [[{"name": "Ittem-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709, "namme": "Item--2"}, {"name": "Ittem-4", "price": 22.75}, {"name": "Item-1", "price": 101.1}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 100.13437547119709}], 3], [[{"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "namee": 101.1}], 3], [[{"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-4", "price": 555.22, "pricpricee": "Iteem-4"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-1", "price": 100.13437547119709, "Item-4": "Itempricpricee-1"}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 22.75}], 8], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 555.22, "Item-1": "Ittem-4"}, {"name": "Item-4", "price": 22.75}], 1], [[{"name": "Item-3", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-3", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-3", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 100.13437547119709, "namee": 101.1}, {"name": "Item-4", "price": 22.75}, {"name": "Item-3", "price": 100.13437547119709, "namee": 101.1}], 1], [[{"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-1", "price": 100.13437547119709}, {"name": "Item-4", "price": 22.75}, {"name": "Item-4", "price": 555.22, "pricre": "eItem-4"}, {"name": "Item-1", "price": 100.13437547119709}], 2]], "contract": "\n  assert isinstance(items, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, dict) for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('name' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('price' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x['price'], (int, float)) for x in items), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n"}
{"task_id": "Mbpp/586", "prompt": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n", "entry_point": "split_Arr", "canonical_solution": "\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\n", "base_input": [[[12, 10, 5, 6, 52, 36], 2], [[1, 2, 3, 4], 1], [[0, 1, 2, 3, 4, 5, 6, 7], 3]], "atol": 0, "plus_input": [[[], 0], [["apple", "banana", "cherry", "date"], 2], [[1, 2, 3, 1, 2, 3], 3], [[2, 4, 6, 8, 10, 8, 6, 4, 2], 7], [["banana", "cherry", "date"], 2], [["banana", "date"], 2], [[2, 4, 6, 8, 0, 8, 6, 4, 2, 0], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 6, 2], 4], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 2], [["apple", "banana", "date"], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 0], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 4], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0], 1], [[1, 2, 3, 1, 2, 8], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2], 4], [[2, 6, 8, 7, 8, 6, 8, 4, 2, 0, 2, 0], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0], 0], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 6], [[2, 6, 5, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 1, 0, 2, 8], 3], [[4, 6, 8, 10, 8, 6, 4, 2, 8], 7], [[1, 2, 3, 1, 2, 3], 4], [[2, 5, 4, 6, 8, 0, 8, 6, 4, 2, 0], 4], [[7, 1, 2, 3, 1, 2, 3], 3], [[2, 6, 5, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0, 8, 8], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8], 6], [[4, 6, 8, 10, 8, 6, 4, 2, 8], 4], [[2, 4, 6, 8, 10, 8, 6, 4, 2], 4], [[2, 5, 4, 6, 8, 0, 8, 6, 4, 2, 0, 2], 4], [[5, 6, 5, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 1, 0, 2, 8], 4], [[2, 6, 8, 0, 8, 6, 8, 1, 4, 2, 0, 2], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 1, 0, 2, 8], 5], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 10], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8], 4], [["bbanana", "banana", "date"], 1], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 0, 2, 8], 6], [[4, 6, 8, 10, 8, 6, 4, 2, 8], 8], [["apple", "cherry", "date"], 2], [[5, 6, 5, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 3], [[2, 8, 6, 8, 10, 8, 6, 4, 2], 7], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8], 7], [[6, 8, 0, 8, 6, 8, 4, 2, 0, 0, 2, 0, 0], 4], [[2, 4, 5, 6, 8, 10, 8, 6, 4, 2], 7], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 8], 1], [[5, 6, 5, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 6], [[2, 6, 8, 0, 8, 6, 8, 2, 0, 2, 0, 8], 1], [[2, 6, 8, 0, 8, 6, 8, 4, 5, 0, 2, 0], 1], [[7, 1, 2, 3, 1, 2, 3, 3], 1], [[2, 6, 8, 0, 8, 6, 8, 2, 0, 0, 2, 0, 8], 1], [[4, 6, 8, 10, 8, 6, 4, 2, 8, 6], 7], [[2, 6, 8, 0, 8, 6, 8, 7, 1, 4, 2, 0, 2], 3], [[2, 5, 4, 6, 6, 8, 0, 8, 6, 3, 2, 0], 6], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8, 8], 7], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2], 2], [[4, 6, 10, 8, 6, 4, 2, 8], 4], [[2, 8, 7, 8, 6, 8, 4, 2, 0, 2, 0], 2], [[6, 8, 0, 8, 8, 4, 2, 0, 2], 0], [[7, 1, 2, 3, 1, 2, 3, 10, 3], 1], [[2, 6, 8, 0, 8, 6, 8, 0, 0, 2, 0, 8], 1], [["apple", "cherry", "date", "date"], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8, 8, 0], 7], [[2, 4, 6, 8, 0, 8, 6, 4, 2, 0], 1], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8, 8, 0, 6], 7], [[1, 2, 4, 3, 1, 2, 3], 4], [[4, 6, 8, 10, 8, 6, 4, 2, 7, 8], 7], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 0, 2, 8, 2], 6], [[7, 1, 2, 3, 1, 2, 3, 10, 3], 0], [[2, 6, 8, 0, 7, 6, 8, 4, 2, 0, 2, 8, 8, 0, 6], 3], [[2, 6, 8, 4, 0, 8, 6, 8, 4, 2, 0, 2, 0, 8], 1], [[2, 8, 6, 8, 10, 6, 4, 2, 6], 8], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 8, 0, 0, 0], 0], [[0, 0, 75, 4, 5, 3, 58, 8], 0], [[6, 8, 0, 8, 8, 4, 2, 0, 2, 8], 0], [[2, 6, 10, 8, 0, 8, 6, 8, 2, 0, 2, 0, 8], 2], [[2, 6, 8, 0, 8, 6, 8, 1, 4, 2, 0, 2, 8], 3], [[2, 6, 8, 0, 8, 6, 8, 7, 1, 4, 2, 0, 2], 2], [[true, false, true, true, false, true, false, false, false], 0], [[2, 4, 6, 8, 0, 8, 6, 4, 2, 0, 0], 3], [[4, 6, 8, 0, 8, 6, 4, 2, 0], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 5], [["apple", "cherry", "date", "date"], 1], [[6, 8, 0, 8, 6, 8, 4, 2, 0], 3], [[2, 6, 8, 0, 8, 6, 8, 2, 0, 0, 2, 0, 8], 2], [["apple", "cherry", "date"], 1], [[1, 2, 3, 1, 2, 3], 5], [[2, 6, 8, 0, 8, 6, 8, 4, 5, 0, 2, 0], 2], [[2, 6, 5, 8, 0, 8, 6, 8, 4, 0, 2, 0, 0, 8, 8], 2], [[6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 4], [[2, 6, 8, 0, 8, 8, 2, 0, 0, 2, 2, 0, 8], 1], [[2, 6, 8, 0, 8, 6, 8, 4, 1, 0, 2, 8, 6], 10], [[2, 6, 8, 3, 0, 8, 6, 8, 5, 2, 0, 2, 0, 8], 1], [[2, 6, 8, 0, 8, 6, 8, 0, 0, 2, 6, 0, 8], 3], [["banana", "cherry", "cherry", "date"], 2], [[2, 6, 8, 0, 8, 6, 8, 0, 0, 2, 0, 8, 0], 1], [["cherry", "banana", "cherry", "cherry", "date"], 2], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 2, 0, 0], 3], [[2, 6, 8, 0, 8, 6, 8, 4, 2, 0, 8], 7], [[2, 6, 8, 0, 7, 6, 8, 0, 0, 2, 0, 8], 1], [[7, 1, 2, 3, 1, 2, 3], 6]], "contract": "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= len(l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n"}
{"task_id": "Mbpp/587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n", "entry_point": "list_tuple", "canonical_solution": "\ndef list_tuple(listx):\n  return tuple(listx)\n", "base_input": [[[5, 10, 7, 4, 15, 3]], [[2, 4, 5, 6, 2, 3, 4, 4, 7]], [[58, 44, 56]]], "atol": 0, "plus_input": [[[[], [], []]], [[[1, 2], [3, 4], [5, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[{"name": "John", "age": 25}, {"name": "Mary", "age": 30}, {"name": "Bob", "age": 35}]], [[[1, 2, 3], {"name": "John", "age": 25}, [4, 5, 6]]], [["apple", "banana", "cherry", "date"]], [[[1, 2, 3], {"name": "John", "age": 25}, [4, 5, 6], {"key": [7, 8, 9]}, [10, [11, 12], 13]]], [[1, "hello", true, 3.14, [2, 5], {"name": "John"}, [4, 7]]], [[1, 2, 3]], [[[1, 2, [3, [4, 5]], 6], [7, 8]]], [[]], [[[1, [2, 3]], [4, [5, 6]], [7, [8, 9]]]], [[[[1], [2]], [[3], [4]], [[5], [6]]]], [[[7, 7], [7, 7]]], [[[[1], [2]], [[3], [4]], [[5], [6]], [[5], [6]]]], [["key", "banana", "cherry", "date"]], [["key", "kdateey", "banana", "cherry", "date"]], [[[[1], [2]], [[3], [4]], [[8], [8], [6]], [[8], [8], [6]]]], [[1, "hello", true, [8, 7], 3.14, [2, 5], {"name": "John"}, [4, 7]]], [[[1, 2], [5, 6]]], [[[1, 2, 3], [4, 5, 6]]], [[[1, 2, 3], [4, 5, 6]]], [["dRkl", true, "WN", false, "Xyd", "OqBu", "XBFV"]], [[[], [], [], []]], [[[5, 4], [], [], []]], [[[1, [2, 3]], [4, [5, 6]], [1, [2, 3]]]], [["kdateey", "kdateey", "banana", "cherry", "date"]], [["key", "banana", "cherry", "date", "key"]], [[[1, 2, 7, [3, [4, 5]], 6], [7, 8]]], [[[1, 2, 3], {"name": "John", "age": 25}, [4, 5, 6], {"key": [7, 8, 9]}]], [[[1, 12, 2], [3, 4], [5, 6]]], [[true, "WN", false, "banana", "Xyd", "OqBu", "XBFV", "Xyd"]], [[[[1], [2]], [[3], [4]], [[5], [6]], [[5], [6]], [[3], [4]], [[5], [6]]]], [[1, "hello", true, [8, 7], 3.14, [2, 5], {"name": "John"}, [4, 7], [8, 7]]], [[1, "hello", {"name": "kdateey"}, true, [8, 7], 3.14, [2, 5], {"name": "kdateey"}, [4, 7], [8, 7]]], [["kdateey", "kdateey", "banana", "cherry", "date", "kdateey"]], [["hello", true, 3.14, true, [2, 5], {"name": "John"}, [4, 7], [2, 5]]], [[[3, 4], [5, 6]]], [["key", "banana", "cherry", "daatte"]], [["key", "kdateey", "cherry", "date"]], [[1, "hello", {"name": "kdateey"}, true, [8, 7], [2, 5], {"name": "kdateey"}, [4, 7], [8, 7], {"name": "kdateey"}]], [[[7, 6], [7, 6]]], [["kdateey", "date", "kdateey", "banana", "cherry", "date", "kdateey"]], [[[[1], [2]], [[3], [4]]]], [[true, false, "banana", "Xyd", "OqBu", "XBFV", "Xyd"]], [["dRkl", "XBFJohnV", true, true, "WN", false, "Xyd", "OqBu", "XBFV"]], [[[1, 2, 3], {"name": "John", "age": 25}, [4, 5, 6], {"name": "John", "age": 25}]], [["banana", "WN", "cherry", "date"]], [[1, "hello", true, [8, 7], 3.14, [2, 5], {"name": "John"}, [4, 7], "hello"]], [[true, "WN", false, "banana", "Xyd", "OqBu", "XBFV", "nbanana", "Xyd"]], [[1, {"name": "kdateey"}, true, [7], 3.14, [2, 5], {"name": "kdateey"}, [4, 7], [8, 7]]], [["key", "cherry", "dMaryaatte"]], [[1, "hello", true, [2, 6, 4], [2, 6, 4], {"name": "John"}, [4, 7]]], [[[1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [1, 2, [3, [4, 5]], 6, 6, 6], [1, 2, [3, [4, 5]], 6, 6, 6], [7, 8]]], [["kdateey", "kdateedy", "banana", "cherry", "date", "kdateey"]], [[{"name": "John", "age": 25}, {"name": "Mary", "age": 30}, {"name": "John", "age": 25}]], [[[7, 8], [1, 2, 7, [3, [4, 5]], 6]]], [["kdateey", "date", "kdateey", "banana", "cherry", "date", "kdateey", "kdateey"]], [["key", "kdateey", "cherry", "date", "kdateey"]], [[[1, 2], [3, 4], [5, 6], [1, 2]]], [[[1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [1, 2, [3, [4, 5]], 6, 6, 6], [1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [7, 8]]], [["key", "cherry", "dJohnate"]], [[[1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [1, 2, [3, [4, 5]], 6, 6, 6], [1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [7, 8], [1, 2, [3, [4, 5]], 6, 6, 6]]], [[true, true, true]], [[true, true]], [["key", "kdateey", "date", "kdateey"]], [[[1, 2, 7, [3, [4, 5]], 6], [7, 8], [7, 8]]], [["key", "dMaryaatte", "kdateey", "date", "kdateey"]], [["key", "banana", "cherry", "date", "key", "cherry", "key"]], [[[5, 6]]], [[1, {"name": "kdateey"}, true, [7], 2.9949746810892433, 3.14, [2, 5], {"name": "kdateey"}, [4, 7], [8, 7]]], [["dRkl", true, "WN", false, "Xyd", "OqBu"]], [[[], [], [3, 4], []]], [["key", "cherry", "kdayteey", "date"]], [[[1, 2, 7, [3, [4, 5]], 6], [7, 8], [7, 8], [1, 2, 7, [3, [4, 5]], 6]]], [[[1, 2, [3, [4, 5]], 6, 6, 8], [7, 8], [1, 2, [3, [4, 5]], 6, 6, 8], [1, 2, [3, [4, 5]], 6, 6, 8], [7, 8], [7, 8]]], [[{"name": "John", "age": 25, "date": 2}, {"name": "Mary", "age": 30}, {"name": "John", "age": 25, "date": 2}]], [[true]], [[[5, 4], [], [], [], []]], [[{"name": "John", "age": 25}, {"name": "Mary", "age": 30}]], [[{"name": "Mary", "age": 30}]], [[[5, 4], [], []]], [[1, "hello", true, [2, 6, 4, 2], {"name": "John"}, [6, 4, 7]]], [[1, "hello", {"name": "kdateey"}, true, [2, 5], {"name": "kdateey"}, [4, 7], [8, 7], {"name": "kdateey"}]], [[[1, 2, 7, [3, [4, 5]], 6], [7, 8], [7, 8], [1, 2, 7, [3, [4, 5]], 6], [1, 2, 7, [3, [4, 5]], 6]]], [[[1, 2, 2], [1, 2, 2], [5, 6]]], [[1, {"name": "kdateey"}, 3.14, true, [7], 3.14, [2, 5], {"name": "kdateey"}, [4, 7], [8, 7]]], [[[1, 2, 3], {"name": "John", "age": 25}, [5, 5, 6], [4, 5, 6], {"key": [7, 8, 9]}, [4, 5, 6]]], [["kdateey", "cherry", "date"]], [[[1, 2, 3], {"name": "John", "age": 25}, [4, 5, 6], {"key": [7, 8, 9]}, [10, 13]]], [[[1, 2, [3, [4, 5]], 6], [1, 2, [3, [4, 5]], 6], [7, 8], [7, 8], [1, 2, [3, [4, 5]], 6]]], [[1, {"name": "kdateey"}, [7], 2.9949746810892433, 3.14, [2, 5], {"name": "kdateey"}, [4, 7], [8, 7]]], [[["age", "Xyd", "MpyclUujFG", "kdayteey", "key", "daatte", "kdateey", "nbanana"], [], []]], [[[2, [3, [4, 5]], 5], [2, [3, [4, 5]], 5], [2, [3, [4, 5]], 5], [7, 8]]], [[[1, 2, 3], [4, 5, 6], [8, 9], [1, 2, 3]]], [["hello", true, 3.14, [2, 5], {}, {}, [4, 7]]], [["OqBu", "date", "kdateey", "banana", "cherry", "date", "hellodate", "kdateey"]], [[[6], [1, 12, 2], [9, 3, 4], [9, 3, 4], [6]]], [[{"name": "hello", "age": 26}, {"name": "Mary", "age": 30}, {"name": "hello", "age": 26}]], [[true, 3.14, true, [2, 5], {"name": "John"}, [4, 7], [2, 5]]], [[[25, 1, 2, 3], {"name": "John", "age": 25}, [5, 5, 6], [4, 5, 6], {"key": [7, 8, 9]}, [4, 5, 6]]], [[[[1], []], [[3], [4]], [[5], [6]], [[5], [6]]]], [[false]], [[true, 3.14, true, [2, 5], {"name": "Johnbanana"}, {"name": "Johnbanana"}, [4, 7], [2, 5]]], [[false, "banana", "Xyd", "OqBu", "XBFV", "Xyd", "XBFV"]], [[[1, 2, 3], [1, 2, 3], [5, 6]]], [["kkey", "cherry", "kdayteey", "date"]], [[[1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [1, 2, [3, [4, 5]], 6, 6, 6], [7, 8], [7, 8]]], [[["age", "Xyd", "MpyclUujFG", "kdayteey", "key", "daatte", "kdateey", "nbanana"], [], [], []]], [["", "apple", "banana", "cherry", "date"]], [[[7, 6]]], [[[7, 8], [1, 2, 7, [3, [4, 5]], 6], [7, 8]]], [["hello", true, 2.1155785597926853, [2, 5], {}, [4, 7, 4], {}, [4, 7]]]], "contract": "\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)\n"}
{"task_id": "Mbpp/588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n", "entry_point": "big_diff", "canonical_solution": "\ndef big_diff(nums):\n     return max(nums) - min(nums)\n", "base_input": [[[1, 2, 3, 4]], [[4, 5, 12]], [[9, 2, 3]]], "atol": 0, "plus_input": [[[9, 5, 3, 8, 1, 2, 4, 7, 6]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 8]], [[9, 5, 3, 8, 1, 2, 7, 6]], [[9, 5, 3, 8, 1, 2, 7, 9, 6, 8, 7, 6]], [[9, 5, 3, 8, 5, 1, 2, 4, 7, 6]], [[9, 5, 2, 3, 8, 1, 2, 7, 6, 1]], [[9, 5, 3, 8, 1, 2, 4, 6]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 8]], [[9, 5, 3, 8, 0, 2, 7, 7, 6, 8]], [[9, 5, 3, 8, 1, 4, 4, 7, 6]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 8, 2]], [[9, 5, 3, 8, 0, 7, 7, 6, 8]], [[9, 3, 5, 2, 3, 8, 1, 2, 7, 6, 1]], [[9, 5, 3, 8, 1, 2, 7, 5]], [[9, 3, 5, 8, 2, 3, 7, 8, 1, 2, 7, 6, 1]], [[9, 3, 8, 1, 2, 4, 7, 6, 8]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 8, 1]], [[9, 3, 8, 0, 7, 7, 6, 8]], [[9, 5, 3, 8, 1, 4, 4, 7, 6, 8]], [[9, 5, 1, 3, 8, 1, 2, 7, 6]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 8, 8]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 8, 5]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 9, 2]], [[9, 10, 5, 3, 8, 1, 2, 4, 6]], [[9, 5, 3, 8, 1, 6, 4, 5, 6, 8]], [[9, 5, 3, 8, 2, 2, 4, 6]], [[9, 5, 3, 8, 4, 4, 7, 6]], [[9, 5, 3, 8, 4, 4, 7, 6, 5]], [[9, 5, 2, 3, 8, 1, 2, 7, 6, 1, 2]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 9]], [[9, 5, 2, 3, 8, 1, 4, 4, 8, 6]], [[9, 3, 5, 8, 2, 3, 7, 8, 1, 2, 7, 5, 1]], [[9, 5, 3, 8, 0, 7, 7, 6, 8, 6]], [[9, 5, 3, 1, 8, 1, 2, 4, 2]], [[9, 3, 8, 10, 2, 4, 7, 6, 9, 8]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 8, 2]], [[9, 3, 3, 8, 2, 2, 4, 6]], [[9, 1, 5, 3, 8, 1, 2, 2, 7, 6, 8, 2]], [[9, 5, 1, 3, 8, 1, 2, 7, 6, 3]], [[9, 5, 3, 8, 1, 6, 4, 5, 6, 8, 3]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 8, 9, 1]], [[9, 3, 8, 8, 1, 2, 4, 7, 8, 8]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 8, 8, 9]], [[9, 5, 4, 8, 1, 2, 4, 7, 6, 8, 1]], [[2, 9, 5, 3, 8, 6, 4, 5, 6, 8]], [[9, 5, 2, 8, 1, 4, 4, 8]], [[8, 1, 3, 8, 1, 2, 7, 6]], [[9, 6, 3, 9, 8, 1, 2, 2, 7, 6, 8, 5]], [[9, 5, 2, 8, 4, 4, 8]], [[9, 10, 5, 3, 8, 1, 4, 6, 6]], [[9, 5, 3, 3, 8, 1, 4, 4, 7, 6, 8, 5]], [[9, 5, 3, 9, 8, 1, 2, 2, 7, 6, 8, 9, 1]], [[10, 7, 3, 8, 2, 4, 6]], [[9, 3, 4, 8, 2, 2, 4, 7, 6, 8, 1]], [[9, 6, 3, 9, 8, 1, 2, 2, 8, 7, 6, 8, 5]], [[9, 5, 3, 8, 1, 3, 4, 4, 6, 8, 1]], [[9, 3, 3, 8, 2, 2, 6]], [[9, 3, 3, 8, 2, 2, 3, 6]], [[9, 2, 5, 2, 3, 8, 1, 2, 7, 6, 1, 2]], [[9, 5, 1, 8, 3, 8, 1, 2, 7, 6]], [[1, 9, 5, 3, 8, 1, 2, 4, 6]], [[9, 5, 1, 3, 8, 1, 2, 7, 6, 1, 2]], [[9, 8, 8, 1, 2, 4, 2, 7, 8, 8, 7]], [[9, 1, 5, 4, 8, 1, 2, 2, 7, 6, 8, 2]], [[9, 5, 3, 8, 1, 2, 7, 9, 6, 6, 8, 7, 6]], [[9, 5, 2, 3, 8, 1, 4, 4, 8, 6, 8]], [[9, 5, 8, 2, 7, 9, 6, 8, 7, 6, 6]], [[10, 5, 3, 8, 5, 1, 2, 4, 7, 6]], [[9, 5, 3, 8, 1, 2, 4, 7, 6, 6, 9]], [[9, 5, 1, 8, 1, 5, 2, 4, 2]], [[9, 3, 8, 10, 2, 8, 7, 6, 8]], [[9, 9, 5, 3, 8, 4, 4, 7, 6]], [[9, 3, 5, 0, 8, 1, 2, 7, 5]], [[9, 5, 3, 8, 1, 4, 4, 7, 6, 8, 6]], [[9, 5, 3, 8, 1, 4, 4, 7, 6, 4]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 9, 2, 9]], [[9, 3, 4, 2, 2, 2, 4, 7, 6, 8, 1, 9]], [[9, 5, 3, 2, 1, 2, 2, 7, 8, 9, 1]], [[9, 5, 8, 2, 3, 7, 8, 1, 2, 7, 6, 1]], [[9, 5, 8, 1, 2, 4, 6]], [[7, 3, 8, 2, 4, 6]], [[9, 5, 2, 4, 8, 1, 3, 2, 7, 6, 1]], [[9, 5, 3, 8, 2, 1, 2, 2, 7, 6, 8, 5]], [[7, 3, 7, 2, 4]], [[9, 5, 3, 8, 1, 2, 2, 7, 6, 8, 9, 1, 1]], [[9, 5, 3, 8, 2, 2, 7, 6, 8, 10, 1, 1]], [[9, 5, 3, 8, 4, 4, 7, 6, 7]], [[9, 3, 5, 7, 8, 2, 3, 7, 8, 1, 2, 7, 5, 1]], [[9, 5, 3, 8, 1, 2, 1, 7, 8, 1]], [[9, 5, 3, 8, 2, 2, 4, 6, 2]], [[9, 3, 8, 1, 2, 5, 7, 6, 8]], [[9, 5, 2, 4, 1, 8, 10, 2, 4, 2]], [[9, 5, 3, 8, 0, 7, 7, 6, 8, 8]], [[9, 3, 5, 0, 8, 2, 3, 7, 8, 1, 2, 7, 6, 1]], [[9, 5, 3, 8, 1, 4, 7, 6, 8, 6]], [[10, 7, 3, 8, 2, 4, 5]], [[9, 5, 3, 8, 1, 2, 2, 6, 8, 9, 1, 1]], [[9, 5, 3, 8, 1, 2, 2, 6, 0, 9, 1, 1]], [[9, 5, 2, 8, 1, 9, 4, 4, 8]], [[9, 3, 8, 0, 7, 7, 6]], [[10, 9, 5, 3, 9, 8, 1, 2, 2, 7, 6, 8, 9, 1]]], "contract": "\n     assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7\n"}
{"task_id": "Mbpp/589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n", "entry_point": "perfect_squares", "canonical_solution": "\nimport math\ndef perfect_squares(a, b):\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n", "base_input": [[1, 30], [50, 100], [100, 200]], "atol": 0, "plus_input": [[-10, -1], [1, 1000000], [-1000, -1], [1, 0], [-1, -1000], [1, 1], [0, -1], [true, true], [false, false], [-1000, -1000], [-2, -1], [true, false], [-999, -2], [-1, 1], [1000000, -1], [-999, -1000], [-10, 1000000], [-999, -999], [-999, 0], [1000000, -10], [-2, -2], [-10, 1], [-1, -3], [1000001, 1000001], [-2, 1], [1000001, -2], [-2, -10], [-1001, -1001], [1, 2], [0, -1000], [-2, -999], [-1, -999], [0, -999], [1000000, 0], [-3, -1], [-1000, -1001], [-2, -998], [-3, -1001], [-1001, 1], [1000000, 2], [-999, -998], [-998, -1], [2, 1000000], [-1001, -999], [1000000, 1000000], [-1000, -2], [-999, -1001], [0, 1], [-999, -3], [-3, 2], [-3, -3], [-3, -2], [-1000, -10], [-10, -1000], [-2, -1000], [-1000, -999], [-998, -1000], [-1000, -3], [-4, 0], [-3, 1000000], [-11, -10], [-998, -998], [-10, -10], [999999, 0], [-1, -1], [-998, -999], [999999, -1], [2, 2], [-1, 1000001], [-1000, 0], [1000001, 1000000], [-998, 2], [0, 0], [999999, -10], [-998, -997], [1, -1002], [-998, -996], [-10, -9], [1000000, 1000001], [-997, -997], [1, -999], [-8, -996], [-9, 0], [-1001, 0], [-3, -997], [-3, 3], [-997, 0], [-11, -11], [1, 1000001], [-1, -2], [-2, -3], [-1002, -9], [1000002, 1000001], [false, true], [3, -1000], [-11, -1], [-8, -9], [-8, -997], [-1001, -8], [999999, 1000001], [4, -1000], [4, 1000000], [-1000, 1000001]], "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n"}
{"task_id": "Mbpp/590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n", "entry_point": "polar_rect", "canonical_solution": "\nimport cmath\ndef polar_rect(x,y):\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)\n", "base_input": [[3, 4], [4, 7], [15, 17]], "atol": 0, "plus_input": [[0, 0], [-1, 0], [-2, 0], [-1, -1], [0, -1], [-2, -1], [-3, -2], [-1, -2], [-2, -2], [-3, -3], [-1, -3], [0, -2], [0, -43], [-3, -43], [-3, 0], [-2, -42], [-3, -1], [-42, -2], [false, true], [-4, -3], [-4, 0], [-1, -5], [-43, -1], [-4, -4], [-1, true], [-44, -1], [-44, 0], [-44, -43], [0, -3], [-4, -6], [-3, true], [-1, -44], [true, true], [-17.125672842110614, -29.061245837454592], [-6, -1], [-6, -4], [-30.014161875705714, -29.844058340125226], [true, false], [-4, -42], [true, -1], [-5, -1], [-2, true], [-6, -6], [0, -4], [true, -6], [-6, -2], [-2, -44], [-17.125672842110614, -29.844058340125226], [true, 0], [-43, -43], [-42, -42], [-44, -6], [0, -44], [-30.48490733916856, -30.014161875705714], [-41, -41], [-45, -1], [-17.125672842110614, -17.125672842110614], [-42, -3], [-5, -4], [-5, -42], [15, -1], [-3, -42], [-2, -58], [-30.014161875705714, -30.48490733916856], [-5, false], [-45, -42], [-6, -42], [-43, -3], [-2, -3], [2, 1], [-29.061245837454592, -29.061245837454592], [true, -3], [-43, 0], [-30.48490733916856, -29.844058340125226], [-6, true], [0, -58], [-29.424172857337535, -29.844058340125226], [-30.014161875705714, -30.014161875705714], [-24.538402342109205, -30.124577805743012], [-3, -40], [-2, -57], [1, 0], [-45, -41], [-30.66985191236388, -30.69188534995813], [-4, -43], [-3, -58], [-34.537090470985355, -34.537090470985355], [-44, -44], [-23.70834416493064, -29.061245837454592], [2, 0], [-17.125672842110614, -11.063242818653714], [-25.188937667492283, -29.844058340125226], [-6, -57], [-25.188937667492283, -40.47027277921793], [-43, -42], [1, -5], [-43, -44], [-40, -3], [-45, 0], [-6, -58], [-5, 0]], "contract": "\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n"}
{"task_id": "Mbpp/591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n", "entry_point": "swap_List", "canonical_solution": "\ndef swap_List(newList): \n    return newList[-1:] + newList[1:-1] + newList[:1]\n", "base_input": [[[12, 35, 9, 56, 24]], [[1, 2, 3]], [[4, 5, 6]]], "atol": 0, "plus_input": [[[4, "apple", 6.5, true, ["a", "b", "c"]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana"]]], [[["a", "b"], {"name": "John", "age": 30}, ["c", "a", "b"], [[1, 2, 3], [4, 5, 6]], "hello world"]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "banana", "apple"], 123.456, [false, true]]], [[{"a": [1, 2, 3], "b": [4, 5, 6]}, {"x": "apple", "y": "banana"}, [true, false, false, true], [1, 2, 3, 4, 5], "hello"]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true], [false, true]]], [[4, "apple", 6.5, true, ["a", "b", "c"], 6.5]], [[{"a": [1, 2, 3], "b": [4, 5, 6]}, [true, false, false, true], [1, 2, 3, 4, 5], "hello"]], [[4, "apple", 6.5, true]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true, true], [false, true, true]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana"], [true, false]]], [[{"name": "Alice", "age": 25, "city": "New York"}, ["cherry", "apple", "banana"], 123.456, [false, true], [false, true]]], [[4, "apple", 6.5, true, ["a", "b", "c"], 6.5, ["a", "b", "c"]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana"], [true, false], "hello"]], [[{"a": [1, true, 2, 3, 3], "b": [4, 5, 6], "world": [1, true, 2, 3, 3], "York": [1, true, 2, 3, 3]}, {"a": [1, true, 2, 3, 3], "b": [4, 5, 6], "world": [1, true, 2, 3, 3], "York": [1, true, 2, 3, 3]}, [true, false, true, false, true], [true, false, true, false, true], [1, 2, 3, 4, 5], "hello", [true, false, true, false, true], {"a": [1, true, 2, 3, 3], "b": [4, 5, 6], "world": [1, true, 2, 3, 3], "York": [1, true, 2, 3, 3]}]], [[["a", "aa", "b"], {"name": "John", "age": 30}, ["a", "b", "c"], [[1, 2, 3], [4, 5, 6]], "hello world"]], [[{"a": [1, true, 2, 3, 3], "b": [4, 5, 6], "world": [1, true, 2, 3, 3], "York": [1, true, 2, 3, 3]}, {"a": [1, true, 2, 3, 3], "b": [4, 5, 6], "world": [1, true, 2, 3, 3], "York": [1, true, 2, 3, 3]}, [true, false, true, false, true], [true, false, true, false, true], [1, 2, 3, 4, 5], "hello", [true, false, true, false, true], {"a": [1, true, 2, 3, 3], "b": [4, 5, 6], "world": [1, true, 2, 3, 3], "York": [1, true, 2, 3, 3]}, [true, false, true, false, true]]], [[{"a": [1, true, 2, 3], "b": [4, 5, 6], "world": [1, true, 2, 3], "York": [1, true, 2, 3], "Alice": [1, true, 2, 3]}, {"a": [1, true, 2, 3], "b": [4, 5, 6], "world": [1, true, 2, 3], "York": [1, true, 2, 3], "Alice": [1, true, 2, 3]}, [true, false, true, false, true], [true, false, true, false, true], [1, 2, 3, 4, 5], "hello", [true, false, true, false, true], {"a": [1, true, 2, 3], "b": [4, 5, 6], "world": [1, true, 2, 3], "York": [1, true, 2, 3], "Alice": [1, true, 2, 3]}, [true, false, true, false, true]]], [[4, "apple", 6.5, ["a", "b", "c"], 6.5]], [[{"name": "Alice", "age": 25, "city": "New York"}, ["cherry", "apple", "banana"], 123.456, [false, true], ["banana", "apple"], [false, true]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true], [true], ["apple", "banana"], [true]]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, false]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana"], [true, false], "hello", "hello"]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana", "banana"], [true, false], "hello"]], [[null, "hello", {"1": "a", "2": "bb"}, 3.14, [true], {"1": "a", "2": "bb"}, [true], ["apple", "banana"], [true]]], [[4, "aJohnple", 6.5, true, ["a", "b", "c"]]], [[null, "hello", {"1": "a", "2": "bb"}, 3.14, [true], {"1": "a", "2": "bb"}, [true], ["apple", "banana"], [true], [true]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false, false], ["apple", "banana"], [true, false, false]]], [[4, false, "aJohnple", false, 6.5, true, ["a", "b", "c"]]], [[["cherry", "apple", "banana"], 123.456, [false, true], ["cheraay", "cherry", "apple", "banana"], [false, true], 123.456]], [[false, 4, 123.456, 2, "aJohnple", 6.5, true, ["a", "x", "c"]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, ["apple", "banana"], [true, false], "hello"]], [[4, false, "aJohnple", false, 6.5, true, ["a", "b", "c"], "aJohnple"]], [[4, 3, "apple", 6.5, ["a", "b", "c"], 6.5]], [[null, "hellho", {"1": "a", "2": "aa"}, "hello", {"1": "a", "2": "aa"}, 3.14, ["apple", "banana"], [true, false], "hello"]], [[{"a": [1, 2, 3], "b": [4, 5, 6]}, {"x": "apple", "y": "banana"}, [true, false, false, true], "hello", {"x": "apple", "y": "banana"}]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false], 3.14]], [[null, {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana"]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true], [true], ["apple", "banana"], [true], 3.14]], [[4, "apple", 6.5, true, ["a", "b", "c"], ["a", "b", "c"]]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, ["apple", "bnanana"], [true, false], "hello"]], [["hello", {"1": "a", "2": "bb"}, 3.14, [true], {"1": "a", "2": "bb"}, [true], ["apple", "banana"], [true], [true]]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true, false, true], [false, true, false, true]]], [["aJohnple", 6.5, true, ["a", "b", "c"]]], [["hello", {"1": "a", "2": "bb"}, 3.14, [true], {"1": "a", "2": "bb"}, [true], ["apple", "banana"], [true], [true], {"1": "a", "2": "bb"}]], [[[1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true], ["John", "cherry", "banana"]]], [[["cherry", "apple", "banana"], 123.456, [false, true], ["cheraay", "cherry", "apple", "banana"], [false, true], 123.456, [false, true]]], [[{"name": "Alice", "age": 25, "city": "New York"}, 91.09602532263384, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true, true], [false, true, true]]], [[[1, 2, 3, 5], [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true, false, true], {"name": "Alice", "age": 25, "city": "New York", "agge": "Ne w York"}, [false, true, false, true]]], [[false, 4, ["agge", "aa", "a", "x", "c"], 123.456, 3.14, 2, "aJohnple", 6.5, true, ["agge", "aa", "a", "x", "c"], true]], [[4, "aJohnple", 6.5, true, ["a", "b", "c"], 6.5]], [[null, "hello", {"1": "a", "2": "bb"}, 3.14, [true], {"1": "a", "2": "bb"}, [true], ["apple", "banana"], [true], [true], 3.14]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 91.09602532263384, [false, true]]], [["hello", {"1": "a"}, 3.14, [true], {"1": "a"}, [true], ["apple", "banana"], {"1": "a"}, [true], [true], [true], {"1": "a"}]], [[null, ["helloapple", "apple", "banana"], "hello", {"1": "a", "2": "b"}, 3.14, [true, false, false], ["apple", "banana"], [true, false, false]]], [[123.456, {"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false], 3.14]], [[null, "hello", {"1": "a"}, 3.14, ["apple", "banana"], [true, false, true], "hello"]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 3, 4, 5], ["cherry", "chapplerry", "apple", "banana"], ["cherry", "apple", "banana"], 123.456, [false, false]]], [["apple", 6.5]], [[null, "hello", {"1": "a"}, 3.14, [true, false, true], "hello"]], [[false, "aJohnple", false, 6.5, true, ["a", "b", "c"], "aJohnple"]], [[4, "apple", 6.5, "nameapple", true, ["a", "b", "c"], ["a", "b", "c"]]], [["hello", {"1": "a", "2": "bb"}, 3.14, [], [], {"1": "a", "2": "bb"}, [], ["apple", "banana"], [], [], {"1": "a", "2": "bb"}]], [[{"name": "Alice", "age": 25, "city": "New York"}, ["cherry", "apple", "banana"], 123.456, [false, true, true], [false, true, true], [false, true, true]]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, [false, true], [false, true], 123.456]], [[["a", "cherry", "apple", "banana"], {"name": "Alice", "age": 25, "city": "New York"}, ["cherry", "apple", "banana"], 123.456, [false, true, true], [false, true, true]]], [[false, "aJohnple", false, 6.5, true, ["a", "b", "c"], "aJohnple", "aJohnple"]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], 90.44632212554903, ["cherry", "apple", "banana"], 91.09602532263384, [false, true]]], [[null, {"1": "a", "2": "b"}, 3.14, [true, false], null, ["apple", "banana"]]], [[4, "apple", 6.5, true, ["a", "b", "c", "c"], true, 6.5, ["a", "b", "c", "c"], ["a", "b", "c", "c"]]], [[null, "hello", {"1": "a"}, 3.14, [true, false, true], "hello", null]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false, true], ["apple", "banana", "banana"], [true, false, true], "hello"]], [["hello", {"1": "a"}, 3.14, [true, false, true], "hello", null]], [[{"name": "Alice", "age": 25, "city": "New York"}, ["cherry", "apple", "banana"], 99.02323667903467, 123.456, [false, true], ["apple"], [false, true]]], [[null, "hello", "hebllo", {"1": "a", "2": "b"}, ["apple", "bnanana"], [true, false], "hello"]], [[123.456, {"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], 123.456, [false], 3.14]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 124.87654535111933, [false, true], [false, true], 123.456]], [[null, "hellho", {"1": "a", "2": "aa"}, "hello", {"1": "a", "2": "aa"}, 3.14, [true, false], "hello"]], [[null, ["helloapple", "apple", "banana"], "hello", {"1": "a", "2": "b"}, 3.14, [true, false, false], ["apple", "banana"]]], [["aJohnple", 6.5, true, false, ["a", "b", "c"]]], [[null, "hello", {"1": "a", "2": "bb"}, 3.14, {"1": "a", "2": "bb"}, [true], ["apple", "banana"], [true], ["apple", "banana"]]], [[4, "apple", 6.5, 6.5, 8.707176323319572, true, ["a", "b", "c"], "apple", 6.5]], [["hell", "hello", {"1": "a"}, 3.14, [true, false, true], "hello", null]], [["hello", {"1": "a"}, 3.14, [true], {"1": "a"}, [true], ["apple", "banana"], {"1": "a"}, [true], [true], [true], {"1": "a"}, "hello"]], [[[1, 2, 3, 4], ["cherry", "apple", "banana"], 123.456, [false, true], ["John", "cherry", "banana"]]], [[[1, 2, 3, 4, 5], ["cherry", "apple", "banana"], 123.456, 8.707176323319572, [false], ["John", "cherry", "banana"]]], [["hello", {"1": "a"}, 6.5, 3.14, [true, true], {"1": "a"}, [true, true], ["apple", "banana"], [true, true], {"1": "a"}, [true, true]]], [[["cherry", "apple", "banana"], 123.456, [false, true], ["cheraay", "cherry", "apple", "banana"], [false, true], ["cherry", "banana"], 122.59910668667563]], [[["a", "b", "c", "a"], 4, false, "w", false, 6.5, true, ["a", "b", "c", "a"]]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], 90.44632212554903, ["cherry", "apple", "banana"], 91.09602532263384, [false, true], ["cherry", "apple", "banana"]]], [[["a", "b"], {"name": "John", "age": 30}, ["c", "a", "b"], [[1, 2, 3], [4, 5, 6]], "hello world", "hello world"]], [[["cherry", "apple", "banana"], ["cheraay", "cherry", "apple", "banana"], 123.456, [false, true], ["cheraay", "cherry", "apple", "banana"], [false, true], 123.456]], [[null, {"1": "a", "2": "b"}, 3.14, 124.87654535111933, [true, false, true], ["apple", "banana"]]], [[["cherry", "apple", "banana"], 123.456, [true], [true], ["cheraay", "cherry", "apple", "banana"], [true], 123.456, [true]]], [[4, false, "aJohnple", false, 6.5, true, ["a", "b", "c"], false]], [[4, ["bbc", "a", "b", "c", "hell", "c"], "apple", 6.5, ["bbc", "a", "b", "c", "hell", "c"], true, ["bbc", "a", "b", "c", "hell", "c"], true, 6.5, ["bbc", "a", "b", "c", "hell", "c"], ["bbc", "a", "b", "c", "hell", "c"]]], [["hello", {"1": "a"}, 3.14, [true], {"1": "a"}, [true], ["apple", "banana"], {"1": "a"}, [true], [true], [true], {"1": "a"}, [true]]], [[null, "world", {"1": "a", "2": "b"}, 3.14, [true, false, false], ["apple", "banana"], [true, false, false], null]], [["aJohnple", 6.5, true, 122.59910668667563, ["a", "b", "c"]]], [[4, "apple", false, 6.5, true, ["a", "b", "c"], ["a", "b", "c"]]], [[["a", "cherry", "apple", "banana"], {"name": "Alice", "age": 25, "city": "New York"}, ["cherry", "apple", "banana"], 123.456, [false, true, true], [false, true, true], [false, true, true]]], [["aJohnple", 6.5, true, ["a", "b"], "aJohnple"]], [[null, "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana", "banana"], [true, false], "hello", ["apple", "banana", "banana"]]], [[null, ["helloapple", "apple", "banana"], [true, false], "hello", {"1": "a", "2": "b"}, 3.14, [true, false], ["apple", "banana"], [true, false]]], [[{"name": "Alice", "age": 25, "city": "New York"}, [1, 2, 3, 4, 5], 90.44632212554903, ["cherry", "apple", "banana"], 91.09602532263384, [false, true], ["cherry", "apple", "banana"], [1, 2, 3, 4, 5]]]], "contract": "\n    assert isinstance(newList, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newList) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]\n"}
{"task_id": "Mbpp/592", "prompt": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n", "entry_point": "sum_Of_product", "canonical_solution": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n, n - 1); \n", "base_input": [[3], [4], [1]], "atol": 0, "plus_input": [[10], [100], [1000], [true], [999], [99], [998], [997], [97], [98], [9], [1001], [8], [101], [1002], [7], [102], [11], [103], [996], [995], [12], [83], [84], [96], [95], [82], [994], [993], [13], [94], [93], [6], [81], [5], [991], [992], [80], [1003], [104], [92], [990], [85], [86], [59], [989], [60], [1004], [62], [14], [15], [63], [58], [87], [4], [28], [17], [27], [79], [64], [61], [3], [105], [78], [91], [77], [25], [90], [26], [2], [24], [88], [16], [18], [89], [65], [66], [23], [76], [39], [57], [106], [54], [22], [38], [1], [67], [75], [56], [36], [37], [55], [40], [74], [988], [41], [42], [43], [29], [21], [44], [987], [53]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1\n"}
{"task_id": "Mbpp/593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n", "entry_point": "removezero_ip", "canonical_solution": "\nimport re\ndef removezero_ip(ip):\n return re.sub('\\.[0]*', '.', ip)\n", "base_input": [["216.08.094.196"], ["12.01.024"], ["216.08.094.0196"]], "atol": 0, "plus_input": [["0.0.0.0"], ["0.0.00.0.0.0.0"], ["0.0.0.00"], ["0.00.0.00.0.0.0.0.0.00"], ["00.0.0.0.0.0.00"], ["0.00.0.00.0.00.00.0.00.0.0.0.0.0.00.0.0.0.00"], ["0.0.00.0.0.0"], ["ogsr"], ["0.00.0.00.0.0.0.0.0ogsr00"], ["0.0.0.0.0.00.0.0.0.000"], ["0.00.0.00.0.000.00"], ["0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0.0.0.000"], ["ogs0.00.0.00.0.000.00r"], ["0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.000"], ["0.0.00.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.000.00"], ["0.0.0.0.0.00.0.0.0.0.0.00.0.0.0000"], ["oggsr"], ["0.0.0.0.00.00.0.0.0.000"], ["0.0.00.0.0.0.00.0.00.0..00.000.0.00.0.0.0.0.0.00.0..0.0.000.00"], ["0.00.0.00.0.00.0.00.0.0.0.00.0.00.0..00.000.0.00.0.0.0.0.0.00.0..0.0.000.00.0.0.0.00"], ["0.0.00.0.0.0.00.0.00.0..00.000.0.00.0.0.0.0.0.00.0..0.00.000.00"], ["0.0.0.0.00.0.00.0.00.0000.0.00.0.0.0.0.0.00.0.0.0.000"], ["0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.000.0.00.0.0.0.0.0.00.0.0.0.000"], ["0.00.0.000.0.0.0.00.00.0.0.0.00000.00"], ["0.0.0.0.0.0.00.0.0.0.000"], ["0.0.00.0.0.0.00.0.000.0..00.000.0.00.0.0.0.0.0.00.0..0.0.000.00"], ["0.00.0.000.0.00.0.0.0.0.00.0.0.0.0.0.00.0.0.00000.00"], ["00.0.0.00"], ["0.0.0.0.00..00.0.0.0.000"], ["0.0.0.0.00.0.00.0.000"], ["0.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.000"], ["0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.00"], ["0.0.0.0..00..00.0.0.0.000"], ["00.0.0.0.00.0.0.0.00.0.00.0..00.000.0.00.0.0.0.0.0.00.0..0.00.000.000.00"], ["00.0.0..0.0.0.00"], ["0.0.0.0.0..0.0.0000"], ["0.00.0.000.00.0.000.0.00.0.0.0.0.00.0.0.0.0.0.00.0.0.00000.00.0.0.0.0.0.00"], ["0.0.00.0.0.0.00.0.000.0..00.000.0.00.0.0.0.0.0.00.0..0.0.000.000.0.0.0.0.00..0.0.0.000"], ["0.0.0.0.0.0.00.00.0.0.000"], ["0.00.0.00.0.0.00.0.0ogsr00"], ["0.00.0.000.0.00.0.0.0.0.0.0.0.0.0.00.0.0.00000.00"], ["00.0.0.000.0.0.0.0..0.0.0000"], ["ogs00.0.0..0.0.0.00r"], ["0.000.0.000"], ["0.0.000.0.0"], ["0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.00000.00.0000.00"], ["0..0.0.00.00.00.0.0.000"], ["oggosr"], ["0.00.0.00.0.00.00.0.00.0.0.0.00.0.00.0.00.0000.0.00.0.0.0.0.0.00.0.0.0.0000.0.0.0.0.0.00.0.0.0.00"], ["00.0.0.0.00.0.0.0.00.0.00.0..00.000.0.00.0.0.0.00.0.0.0.0..0.0.0000.000.000.00"], ["ogs0.00.0.00.0.000.00.0.000.0.00r0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.00"], ["0.0.00.0.0.0.00.00.0.0.000"], [".0.0.0.0.00..00.0.0.0.000"], ["00.0.00.0.00.0.0.0.00.0.000.0..00.000.0.00.0.0.0.0.0.00.0..0.0.000.00..0.00"], ["0.00.0.00..0"], ["0.00.0.00.0.00.0.00.0.0.00.00.0.00.0..00.000.0.00.0.0.0.0.0.00.0..0.0.000.00.0.0.0.00"], ["0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.000.0.0.0.0.0.00.0..0.0.00000.00.0000.00"], ["0.00.0.0000.0.00.0.0.0.0.00.0.0.0.0.0.00.0.0.00000.00"], ["0.0.0.0.00.0.00.0.00.ogs0.00.0.00.0.000.00.0.000.0.00r0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.00000.0.00.0.0.0.0.0.00.0..0.0.000"], ["0.0.0.0.00.0.00.0.00.0000.0.0.0.0.0.0.0.0.00.0..0.0.000"], ["0.0.00.00"], ["0.0.0.0.00.000.0.0.0.000"], ["0.0.0.0.00..00.0..0.0.000"], ["0.0.00.0.0.0.000"], ["0.0.0.0.00.000.0.0ogs00.0.0..0.0.0.00r.0.000"], ["0.00.0.0.00.0.00.0.00.0000.0.00.0.0.0.0.0.00.0.0.0.000"], ["00.0.00.0.00.0.0.0.00.0.000.0..00.000.0.00.0.0.0.0.0.00.0..0.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.0.000.00..0.00"], ["0.0.00.0.0.0.000.00"], ["0.0.0.0.000.0.000"], ["00.0.0"], ["0.00.00.00.0.00.00.0.00.0.0.0.0.0.00.0.0.0.00"], ["0.0.0.0.0.00.0.0.0.0.0.00.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.000"], ["0.0.0.0.00.0.00.0.00.ogs0.00.0.00.0.000.00.0.000.0.00r0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.00000.0.00.0.0.0.0.0.00.0.0.0.00..00.0..0.0.0000.0..0.0.000"], ["0.00.0.00.0.00.00.0.00.0.0.0.00.0.00.0.00.0000.0.00.0.0.0.0.0.00.0.0.0.0000.0.0.0.0.00.000.0.000.00.0.0.0.00"], ["0.0.000.00.0.00.0.000.0.00.0.0.0.0.00.0.0.0.0.0.00.0.0.00000.00"], ["0.00.0.00.0.00.00.0.00.0.0.0.0.0.0.0.0.0.0.00"], ["0.000.0.000.000.0.00.0.0.0.0.0.00.0.0.00000.00.0.0.0.0.0.00"], ["0..0.0.00.00.00.0.0.00000.0.0.0.00.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.000.0.00"], ["0.0.0.0.000.00.0.0.00.0.00.0.00.0000.0.00.0.0.0.0.0.00.0.0.0.000.00.0.0.0.000"], ["0.0.00.0.0.0.00.00.0.0.0.000000.0.00.0.0.0.0.0.00.0..0.0.000.00"], ["00.00.0.00.0.0.0.0.0ogsr00.00.0.00.0.0.0.0.0.00"], ["Q"], ["00.0."], ["0.00.0.00.0.00.00.0.00.0.0.0.00.0.00.0.00.0000.0.00.0..0.0.0.0.00.0.0.0.0000.0.0.0.0.0.00.0.0.0.00"], ["0.0.0.0.00.0.0.0.00.00.0.0.0.000000.0.00.0.0.0.0.0.00.0..0.0.000.000.000"], ["0.0.0.0.00.0.00.0.00.ogs0.00.0.00.0.000.00..0.000.0.00r0.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.00000.0.00.0.0.0.0.0.00.0.0.0.00..00.0..0.0.0000.0..0.0.000"], ["Q0.0000.0.000"], ["g00.00.0.00.0.0.0.0.0ogsr00.00.0.00.0.0.0.0.0.00"], ["0.000.0.0.0.00.0.00.0.00.000.0.00.0.0.0.000.0.00.0.0.0.0.0.00.0.0.0.000.0.00.0.00.00.0.00.0.0.0.00.0.00.0.00.0000.0.00.0..0.0.0.0.00.0.0.00.0.0.0.0000.0.0.0.0.0.00.0.0.0.00"], ["0.00.0.0.00.0.00.0.00.0000.00.00.0.0.0.0.0.00.0.0.0.000"], ["ogs0.ogsr0.0.000.00r"], ["0.00.0.0000.0.0.0.0..0.0.0000.0.0.0.00.00.0.0.0.00000.0.0"], ["0.0.0.0.00.000.0.0ogs00.0.0..0.000.0.000.000.0.00.0.0.0.0.0.00.0.0.00000.00.0.0.0.0.0.000.0.0.00r.0.000"], ["0.00.0.0.0..00"], [".0.0.0.0.00.0.00.0.000"], ["0.00.0.0.00.0.00.0.00.0000.00.0.0.000.0.0.0.0..0.0.000000.00.0.0.0.0.0.00.0.0.0.000"], ["o0.00.0.00.0.00.00.0.00.0.0.0.0.0.00.0.0.0.00ggsr"], ["0.00.00.00.0.00.00.0.000.0.0.0.0.0.00.0.0.0.00"], ["0.0.00.0.00.0.0.0.000.00.0.00..00.0.0.0.000"], ["0..0.0.00.00.00.0.0.00000.0.0.0.00.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.00.00.0.00.00.0.00.0.0.0.000.0.0.0.0.00.0.0.0.0.0.00.0.00.0.00.000.0.00.0.0.0.0.0.00.0..0.0.0000.00.0000.00.000.0.00"], ["000.0."]], "contract": "\n assert isinstance(ip, str), \"invalid inputs\" # $_CONTRACT_$\n assert len(ip) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')\n"}
{"task_id": "Mbpp/594", "prompt": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n", "entry_point": "diff_even_odd", "canonical_solution": "\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), -1)\n    first_odd = next((el for el in list1 if el%2!=0), -1)\n    return (first_even - first_odd)\n", "base_input": [[[1, 3, 5, 7, 4, 1, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 5, 7, 9, 10]]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], [[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20]], [[2, 5, 3, 6, 1, 4, 9, 8, 7]], [[13, 12, 15, 11, 10, 19, 16, 14, 18, 17]], [[22, 23, 27, 24, 26, 25, 32, 31, 29, 30, 28]], [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], [[22, 23, 27, 24, 26, 25, 32, 31, 29, 30, 28, 25]], [[1, 6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [[1, 6, 2, 3, 4, 5, 7, 8, 8, 10, 11, 12]], [[30, 2, 3, 4, 5, 6, 7, 8, 31, 10, 11, 12, 11]], [[30, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 11, 4]], [[22, 23, 27, 24, 26, 25, 32, 29, 30, 28, 25]], [[30, 1, 3, 4, 5, 6, 7, 31, 10, 11, 12, 11]], [[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20, 16]], [[30, 2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 11]], [[13, 12, 15, 11, 10, 19, 16, 18, 17]], [[1, 3, 7, 5, 2, 4, 6, 8, 7, 9, 11, 19, 13, 15, 16, 18, 20, 16, 19]], [[13, 12, 12, 15, 13, 10, 19, 16, 14, 18, 17, 13]], [[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20, 16, 6]], [[30, 2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30]], [[28, 22, 23, 27, 24, 26, 25, 32, 31, 29, 30, 28, 25]], [[13, 12, 15, 11, 19, 16, 18, 18, 17]], [[30, 2, 3, 4, 5, 6, 7, 4, 31, 10, 10, 11, 12, 11, 30]], [[20, 7, 7, 7, 7, 7, 26, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], [[22, 23, 27, 24, 26, 25, 32, 31, 29, 30, 27, 25]], [[1, 3, 5, 2, 4, 8, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20]], [[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 2, 20]], [[1, 3, 5, 2, 4, 8, 6, 8, 7, 6, 9, 11, 13, 15, 16, 18, 20]], [[30, 2, 3, 15, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30]], [[1, 2, 3, 4, 5, 6, 28, 8, 9, 10, 11, 12]], [[2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30, 7]], [[2, 3, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30, 7]], [[13, 12, 12, 15, 13, 10, 19, 16, 14, 18, 17]], [[28, 22, 23, 27, 24, 26, 25, 31, 29, 30, 28, 27, 25]], [[23, 27, 24, 26, 25, 32, 31, 29, 30, 27, 25]], [[12, 30, 1, 3, 4, 5, 6, 7, 31, 10, 11, 16, 12, 11]], [[22, 23, 27, 24, 26, 25, 32, 31, 29, 30, 28, 25, 25]], [[30, 2, 3, 5, 6, 7, 4, 31, 10, 11, 12, 11]], [[22, 23, 24, 26, 25, 32, 31, 29, 33, 30, 28, 25, 25]], [[4, 6, 2, 3, 4, 5, 7, 8, 8, 10, 11, 12]], [[1, 27, 3, 7, 5, 2, 4, 6, 8, 8, 9, 11, 19, 13, 15, 17, 16, 18, 20, 16, 19]], [[1, 3, 5, 2, 4, 6, 8, 7, 6, 18, 9, 11, 13, 15, 16, 2, 20, 16]], [[1, 3, 7, 5, 2, 4, 6, 8, 7, 9, 11, 19, 13, 15, 16, 18, 20, 16, 19, 2]], [[1, 2, 3, 4, 5, 28, 8, 9, 10, 11, 12]], [[1, 6, 2, 3, 4, 5, 7, 8, 8, 10, 11, 12, 8, 1]], [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], [[7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7]], [[1, 5, 2, 3, 4, 5, 28, 8, 9, 10, 11, 12, 28]], [[30, 8, 2, 3, 5, 6, 7, 4, 31, 10, 11, 12, 11]], [[1, 6, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12]], [[14, 22, 23, 24, 26, 25, 32, 31, 29, 33, 30, 28, 25, 25]], [[13, 31, 12, 15, 13, 10, 19, 16, 14, 18, 17, 13]], [[22, 23, 24, 25, 32, 31, 29, 33, 30, 28, 25, 15]], [[1, 5, 2, 3, 4, 5, 28, 8, 9, 10, 11, 12, 28, 5]], [[30, 2, 9, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30]], [[1, 3, 5, 2, 4, 8, 6, 8, 7, 9, 32, 11, 13, 15, 16, 18, 20]], [[20, 7, 7, 7, 7, 7, 26, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8]], [[13, 12, 13, 8, 13, 10, 19, 16, 14, 18, 17, 13]], [[30, 2, 3, 4, 5, 6, 7, 8, 31, 3, 10, 11, 12, 12]], [[1, 6, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 12]], [[1, 6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]], [[1, 5, 2, 3, 4, 5, 28, 8, 9, 10, 25, 11, 12, 28]], [[4, 6, 2, 3, 10, 4, 5, 7, 8, 8, 10, 11, 12]], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 6, 10]], [[23, 27, 24, 9, 25, 32, 31, 29, 30, 27, 25]], [[20, 7, 7, 7, 7, 26, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7]], [[28, 22, 23, 27, 24, 26, 25, 31, 29, 30, 28, 27, 25, 22]], [[20, 7, 7, 7, 7, 26, 7, 30, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8]], [[4, 2, 3, 4, 5, 7, 8, 8, 10, 11, 12]], [[20, 7, 24, 7, 7, 26, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7]], [[23, 30, 2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30]], [[20, 7, 24, 7, 7, 26, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 7]], [[2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 12, 9, 7, 4]], [[1, 6, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 12, 7]], [[30, 3, 4, 5, 6, 7, 8, 31, 10, 11, 12, 11]], [[13, 25, 12, 15, 11, 19, 16, 18, 18, 17]], [[22, 23, 27, 24, 26, 25, 32, 31, 29, 30]], [[23, 27, 24, 9, 30, 25, 32, 31, 29, 30, 27, 25]], [[20, 7, 7, 7, 7, 7, 26, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7]], [[13, 31, 12, 15, 13, 10, 19, 16, 18, 17, 13]], [[7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7]], [[17, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20, 11, 4]], [[23, 27, 24, 9, 25, 17, 32, 31, 29, 30, 27, 25]], [[30, 2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 4]], [[2, 3, 4, 6, 7, 4, 31, 10, 11, 12, 12, 9, 7, 4, 7]], [[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20, 3]], [[22, 23, 27, 24, 26, 25, 31, 29, 30, 28, 27, 25]], [[13, 12, 12, 14, 13, 10, 19, 16, 14, 18, 17]], [[1, 6, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 7]], [[30, 3, 4, 5, 6, 7, 8, 31, 10, 11, 12, 11, 4]], [[30, 3, 4, 5, 6, 7, 8, 10, 11, 12, 11]], [[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 4, 12, 2, 20, 13, 2]], [[23, 24, 9, 25, 32, 31, 29, 30, 27, 23]], [[20, 7, 24, 7, 7, 26, 7, 7, 7, 7, 9, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7]], [[1, 17, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12]], [[1, 6, 2, 3, 4, 6, 7, 8, 9, 10, 11, 11]], [[30, 2, 3, 4, 5, 6, 7, 8, 10, 11, 33, 11, 4]], [[7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8]], [[2, 3, 5, 6, 7, 4, 31, 10, 11, 12, 11, 30, 7, 7]], [[1, 8, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 7]], [[30, 1, 3, 4, 5, 6, 7, 31, 10, 11, 16, 12, 11]], [[2, 3, 4, 5, 6, 7, 4, 31, 10, 11, 12, 12, 9, 7, 4, 9]], [[30, 3, 4, 5, 6, 7, 8, 10, 11, 12, 11, 12]], [[31, 30, 1, 3, 4, 5, 6, 7, 31, 10, 11, 16, 12, 11]], [[30, 8, 2, 3, 5, 7, 7, 4, 31, 10, 11, 12, 11]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2==0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2!=0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9\n"}
{"task_id": "Mbpp/595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\n", "entry_point": "min_Swaps", "canonical_solution": "\ndef min_Swaps(str1,str2) : \n    diff_bit = sum(str1[i] != str2[i] for i in range(len(str1)))\n    if diff_bit % 2 == 0 : \n        return diff_bit // 2\n    else : \n        return None\n", "base_input": [["1101", "1110"], ["111", "000"], ["111", "110"]], "atol": 0, "plus_input": [["", ""], ["1010101010101010101010101010101010101010101010101010101010101010", "0101010101010101010101010101010101010101010101010101010101010101"], ["1111111111111111111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000000000000000000"], ["1111111111111111111101110111111001111100111111110111111111111001", "0000111111111111111111001111111111111111111111101111111001111000"], ["1100110011001100110011001100110011001100110011001100110011001100", "0011001100110011001100110011001100110011001100110011001100110011"], ["111111", "000000"], ["0000000000000000000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111111111111111111"], ["0011001100110011001100110011001100110011001100110011001100110011", "0011001100110011001100110011001100110011001100110011001100110011"], ["0011001100110011001100110011001100110011001100110011001100110011", "0000000000000000000000000000000000000000000000000000000000000000"], ["00110011001100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011", "00110011010101010101010101010101010101010101010101010101010101010101010100110011001100110011001100110011001100110011001100110011"], ["0000111111111111111111001111111111111111111111101111111001111000", "0000111111111111111111001111111111111111111111101111111001111000"], ["0000000000000000000000000000000000000000000000000000000000000000", "0101010101010101010101010101010101010101010101010101010101010101"], ["0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"], ["1100110011001100110011001100110011001100110011001100110011001100", "1111111111111111111111111111111111111111111111111111111111111111"], ["00110011010101010101010101010101010101010101010101010101010101010101010100110011001100110011001100110011001100110011001100110011", "00110011010101010101010101010101010101010101010101010101010101010101010100110011001100110011001100110011001100110011001100110011"], ["00110011001100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011", "00110011001100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011"], ["1111111111111111111101110111111001111100111111110111111111111001", "1100110011001100110011001100110011001100110011001100110011001100"], ["00110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011", "00110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011"], ["0000000000000000000000000000000000000000000000000000000000000000", "0011001100110011001100110011001100110011001100110011001100110011"], ["0000000000000000000000000000000000000000000000000000000000000000", "1100110011001100110011001100110011001100110011001100110011001100"], ["1111111111111111111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111111111111111111"], ["1100110011001100110011001100110011001100110011001100110011001100", "1100110011001100110011001100110011001100110011001100110011001100"], ["000000000000111111111111111111110111011111100111110011111111011111111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111000000000000000000000000", "000000000000111111111111111111110111011111100111110011111111011111111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111000000000000000000000000"], ["111111", "111111"], ["001100110011001100110011001100110011000110011", "001100110011001100110011001100110011000110011"], ["000000", "000000"], ["001100110011001100110011001100110011001100000000000001111111111111111111101110111111001111100111111110111111111111001000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000110011001100110011", "001100110011001100110011001100110011001100000000000001111111111111111111101110111111001111100111111110111111111111001000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000110011001100110011"], ["1100110011001100110011001100110011001100110011001100110011001100", "1111111111111111111101110111111001111100111111110111111111111001"], ["110011001100110011001100110011001100110010011001100110011001100110011111111111111111111111111111111111111111111111111111111111111111100110011001100110011001100110011001110011001100110011000011111111111111111100111111111111111111111110111111100111100001100", "110011001100110011001100110011001100110010011001100110011001100110011111111111111111111111111111111111111111111111111111111111111111100110011001100110011001100110011001110011001100110011000011111111111111111100111111111111111111111110111111100111100001100"], ["11001100110011001100110011001100111001100110011001100110011001100", "11001100110011010110011001100110011001100110011001100110011001100"], ["0000000000000000000000000000000000000000000000000000000000000000", "1010101010101010101010101010101010101010101010101010101010101010"], ["1100110011001100110011001100110011001100110011001100110011001100", "0000000000000000000000000000000000000000000000000000000000000000"], ["0000111111111111111111001111111111111111111111101111111001111000", "0011001100110011001100110011001100110011001100110011001100110011"], ["110011001100111100110011001101011001100110011001100110011001100110011001100110000110011001100110011001100110011001100110011001100", "110011001100111100110011001101011001100110011001100110011001100110011001100110000110011001100110011001100110011001100110011001100"], ["0011001100110011001001100110011", "0011001100110011001001100110011"], ["0101010101010101010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010101010101010101"], ["1100110011001100110011001100110011001100110011001100111111110011001100", "1100110011001100110011001100110011001100110011001100111111110011001100"], ["00110011001100110010001100110011", "00110011001100110010001100110011"], ["0000000000000000000000000000000000000000000000000000000000000000", "0000111111111111111111001111111111111111111111101111111001111000"], ["0011001100110011001100110011001100110011001100110011001100110011", "1100110011001100110011001100110011001100110011001100110011001100"], ["00001111111111111111111001111111111111111111111101111111001111000", "00001111111111111111111001111111111111111111111101111111001111000"], ["1100110011001100110011001100110011001100110011001100110011001100", "0101010101010101010101010101010101010101010101010101010101010101"], ["1100110011001100110011001100110011001100110100110011001100", "1100110011001100110011001100110011001100110100110011001100"], ["11001100110011010110011001100110011001100110011001100110011001100", "00000000000000000000000000000000000000000000000000000000000000000"], ["0000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000"], ["11001100110011001100110011001100111001100110011001100110011001100", "00000000000000000000000000000000000000000000000000000000000000000"], ["11111111111111111111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111111111111111111"], ["1010101010101010101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101010101010101010"], ["1111111111111111111101110111111001111100111111110111111111111001", "1111111111111111111101110111111001111100111111110111111111111001"], ["11111001100110011001100100110011001111111111111111111111111111111111111111111111111111111111111", "11111001100110011001100100110011001111111111111111111111111111111111111111111111111111111111111"], ["0000111111111111111111001111111111111111111111101111111001111000", "1100110011001100110011001100110011001100110011001100110011001100"], ["1100110011001100110011001100110011001100110011001100110011001100", "0000111111111111111111001111111111111111111111101111111001111000"], ["111111111111111111111111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111111111111111111111111"], ["11001100110011001100110011000110011001100110011001100110011001100", "11001100110011001100110011000110011001100110011001100110011001100"], ["00000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000"], ["11001100110011001100110011001100110001100110011001100110011001100", "00000000000000000000000000000000000000000000000000000000000000000"], ["001100110011100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011", "001100110011001100110011001111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011"], ["1010101010101010101010101010101010101010101010101010101010101010", "0011001100110011001100110011001100110011001100110011001100110011"], ["1111111111111111111111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111111111111111111111"], ["00110011001100110011001100110011001100110011001100110011001100", "00110011001100110011001100110011001100110011001100110011001100"], ["1100110011001111001100110011010110011001100110011001100110011001100110011001100001100110011001100110011010110011001100110011001100", "1100110011001111001100110011010110011001100110011001010011001100110011001100110000110011001100110011001100110011001100110011001100"], ["001100110101010101010101010101010101010100110011001100110011001100110011001100110011001100110011", "001100110101010101010101010101010101010100110011001100110011001100110011001100110011001100110011"], ["00000000000011111111111111111111011101111110011111001111111101111111111110010000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111100000000000000000000000", "00000000000011111111111111111111011101111110011111001111111101111100110011001100110011001100011001100110011001100110011001100110011111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111000000000000000000000000"], ["000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000", "000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000"], ["11001100110011001100110011001100110011000011001100110011001100110011001100110011001100110011001100110011110011001100110011001100", "11001100110011001100110011001100110011000011001100110011001100110011001100110011001100110011001100110011110011001100110011001100"], ["110011001100111100110011001101011001100110011110011001100110011001100110011001100110010011001100110011001100110011111111111111111111111111111111111111111111111111111111111111111100110011001100110011001100110011001110011001100110011000011111111111111111100111111111111111111111110111111100111100001100011001100110000110011001100110011001100110011001100110011001100", "110011001100111100110011001101011001100110011110011001100110011001100110011001100110010011001100110011001100110011111111111111111111111111111111111111111111111111111111111111111100110011001100110011001100110011001110011001100110011000011111111111111111100111111111111111111111110111111100111100001100011001100110000110011001100110011001100110011001100110011001100"], ["001100110011100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011", "110011001100111100110011001101011001100110011001100110011001100110011001100110000110011001100110011001100110011001100110011001100"], ["11001100110011001100110011001100110001100110011001100110011001100", "11001100110011001100110011001100110001100110011001100110011001100"], ["1100110011001101011001100110011001100110011001101111110011001100", "1100110011001101011001100110011001100110011001101111110011001100"], ["00000000000011111111111111111111011101111110011111001111111101111111111110010000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111100000000000000000000000", "00000000000011111111111111111111011101111110011111001111111101111111111110010000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111100000000000000000000000"], ["11001100110011001100110011001100111001100110011001100110011001100", "11001100110011001100110011001100111001100110011001100110011001100"], ["0000111111111111111111001111111111111111111111101111111001111000", "0000000000000000000000000000000000000000000000000000000000000000"], ["101010101010101010101010101010101010101010101010101010101010", "101010101010101010101010101010101010101010101010101010101010"], ["00000000000011111111111111111111011101111110011111001111111101111100110011001100110011001100011001100110011001100110011001100110011111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111000000000000000000000000", "00000000000011111111111111111111011101111110011111001111111101111100110011001100110011001100011001100110011001100110011001100110011111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111000000000000000000000000"], ["00000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000"], ["11001100110011001100110011000110011001100110011001100110011001100", "00000000000000000000000000000000000000000000000000000000000000000"], ["1100110011001100110011011001100110011010110011001100110011001100110011001100110011001100011001100110011001100110011001100110001100", "1100110011001100110011011001100110011010110011001100110011100110011001100110011001100110001100110011001100110011001100110011001100"], ["0011001100110011001100110011001110011000110011", "0011001100110011001100110011001110011000110011"], ["1100110011001111001100110011010110011001100110011001100110011001100011001100110000110011001100110011001100110011001100110011001100", "1100110011001111001100110011010011001100110011001100110011001100110011001100110000110011001100110011001100110011001100110011001100"], ["000000", "111111"], ["110011001100110011001100110011001100110000110011001100110011100110011001100110011001100110011001100110011110011001100110011001100", "110011001100110011001100110011001100110000110011001100110011100110011001100110011001100110011001100110011110011001100110011001100"], ["11001100110011010110011001100110011001100110011001100110011001100", "11001100110011010110011001100110011001100110011001100110011001100"], ["11111111111111111111111111111111111111111111111111111111111111111", "11001100110011001100110011000110011001100110011001100110011001100"], ["00110011001100110011001100110011001100110011001100110011011001100110011001100110110011001100110101100110011001100110011001100110011001100110011000110011001100110011001100110011001100011000110011", "00110011001100110011001100110011001100110011001100110011011001100110011001100110110011001100110101100110011001100110011001100110011001100110011000110011001100110011001100110011001100011000110011"], ["110011001100110101100110011001100110011100110011001100110011001100110011001100001100110011001100110011001100110011001100110011001100110011001111001100110011001100110010011001101111110011001100", "110011001100110101100110011001100110011100110011001100110011001100110011001100001100110011001100110011001100110011001100110011001100110011001111001100110011001100110010011001101111110011001100"], ["001001100110011001100110011001110011000110011", "001001100110011001100110011001110011000110011"], ["1100110011001100110011011001100110011010110011001100110011001100110011001100110011001100011001100110011001100110011001100110001100", "1100110011001100110011011001100110011010110011001100110011001100110011001100110011001100011001100110011001100110011001100110001100"], ["001100110001100110010001100110011", "001100110001100110010001100110011"], ["11001100110011001100110011001100110001100110011001100110011001100", "11001100110011010110011001100110011001100110011001100110011001100"], ["1100110011001100110011001100011001100110011001100110011001100110001100110110011001100110100110011001100", "1100110011001100110011001100011001100110011001100110011001100110001100110110011001100110100110011001100"], ["1010101010101010101010101010110101010101010101010101010101010", "1010101010101010101010101010101010101010101010101010101001010"], ["000000110011010101010101010101010101010101010101010101010101010101010101010100110011001100110011001100110011001100110011001100110011111111111111111111001111111111111111111111101111111001111000", "000000110011010101010101010101010101010101010101010101010101010101010101010100110011001100110011001100110011001100110011001100110011111111111111111111001111111111111111111111101111111001111000"], ["110011001100110011001100110011001110011001100110001100110011001100", "110011001100110011001100110011001110011001100110001100110011001100"], ["1100110011001100110011001100110011001100110011001100110011001100001001100110011001100110011001110011000110011", "1100110011001100110011001100110011001100110011001100110011001100001001100110011001100110011001110011000110011"], ["1100110011001111001100110011010110011001100110011001010011001100110011001100110000110011001100110011001100110011001100110011001100", "1100110011001111001100110011010110011001100110011001010011001100110011001100110000110011001100110011001100110011001100110011001100"], ["0011001100110011000110011001100110011001100110011001100110011001100110011001100010100110011001110011000110011001100110011110011001100110101100110011001111001100110011001100110011001100110011001001100110011001100110011001111111111111111111111111111111111111111111111111111111111111111110011001100110011001100110011001100111001100110011001100001111111111111111110011111111111111111111111011111110011110000110001100110011000011001100110011001100110011001100110011001100110011", "0011001100110011000110011001100110011001100110011001100110011001100110011001100010100110011001110011000110011001100110011110011001100110101100110011001111001100110011001100110011001100110011001001100110011001100110011001111111111111111111111111111111111111111111111111111111111111111110011001100110011001100110011001100111001100110011001100001111111111111111110011111111111111111111111011111110011110000110001100110011000011001100110011001100110011001100110011001100110011"], ["0011001100110011001100011", "0011001100110011001100011"], ["1111111111111111111101110111111001111100111111110111111111111001", "0000000000000000000000000000000000000000000000000000000000000000"], ["110011001100110010110011001100110011001100110011001100110011001100", "110011001100110010110011001100110011001100110011001100110011001100"], ["0011001100110011001100110011001100110011000000000000011111111111111111111011101111110011111001111111101111111111110010000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000110011001100110011", "0011001100110011001100110011001100110011000000000000011111111111111111111011101111110011111001111111101111111111110010000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000110011001100110011"], ["1100110011001100110011001100110011001100100110011001100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001110011001110011001100110011000011111111111111111100111111111111111111111110111111100111100001100", "1100110011001100110011001100110011001100100110011001100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001110011001110011001100110011000011111111111111111100111111111111111111111110111111100111100001100"], ["00110011010101010101010101010101010101010101010101010101010101010101010100110011001100110011001100110011001100110011001100110011", "00110011001100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011"], ["10101010101010101010101010101010101001010", "10101010101010101010101010101010101001010"], ["000000000000111111111111111111110111011111100111110011111111011111111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111100001111111111111111110011111111111111111111111011111110011110001111111111111111111111111111111111100000000000000000000000", "000000000000111111111111111111110111011111100111110011111111011111111111100100000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111100001111111111111111110011111111111111111111111011111110011110001111111111111111111111111111111111100000000000000000000000"], ["11001110011001111001100110011010110011001100110011001100110011001100011001100110000110011001100110011001100110011001100110011001100", "11001110011001111001100110011010110011001100110011001100110011001100011001100110000110011001100110011001100110011001100110011001100"], ["01010110011001100110010110011001100110011001100110011001100110011001100101010101010101010101010101010101100110011001100110011001100110011001100001100110011001100110011001100110011001100110011001100110011001111001100110011001100110001010101010101010101", "01010110011001100110010110011001100110011001100110011001100110011001100101010101010101010101010101010101100110011001100110011001100110011001100001100110011001100110011001100110011001100110011001100110011001111001100110011001100110001010101010101010101"], ["001100110011100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011", "001100110011100110011001100111111111111111111111111111111111111111111111111111111111111111111001100110011001100110011001100110011"]], "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(str2, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in str1]), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in str2]), \"invalid inputs\" # $_CONTRACT_$\n    assert len(str1) == len(str2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == None\nassert min_Swaps(\"111\",\"110\") == None\n"}
{"task_id": "Mbpp/596", "prompt": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n", "entry_point": "tuple_size", "canonical_solution": "\nimport sys \ndef tuple_size(tuple_list):\n  return sys.getsizeof(tuple_list)\n", "base_input": [[["A", 1, "B", 2, "C", 3]], [[1, "Raju", 2, "Nikhil", 3, "Deepanshu"]], [[[1, "Lion"], [2, "Tiger"], [3, "Fox"], [4, "Wolf"]]]], "atol": 0, "plus_input": [[[[1, "Raju"], [2, "Nikhil"], [3, "Deepanshu"]]], [[[1, "A"], [2, "B"], [3, "C"]]], [[[[1, "Lion"], [2, "Tiger"]], [[3, "Fox"], [4, "Wolf"]]]], [[]], [[[[1, [2, 3], 4], [5, [6, 7], 8]], [[9, [10, 11], 12], [13, [14, 15], 16]]]], [[["A", 1, "B", 2, "C", 3], ["D", 4, "E", 5, "F", 6], ["G", 7, "H", 8, "I", 9]]], [[[1, 2], {"3": "A", "4": "B"}, [5, 6, 7], ["z", "y", "x"]]], [[[[1, "A"], [2, "B"]], {"C": [3, "D"], "E": [4, "F"]}]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], {"A": {"B": {"C": "D"}}}]], [[[1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[[[1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]], [[[[]], []]], [[[["a", "b", "c"]], [["d", "e", "f"], ["g", "h", "i"]]]], [[["Hello", 123, [1, 2, 3]], [true, false], ["A", "B", "C"]]], [[[["apple", "banana"], ["cat", "dog"]], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {"x": 1, "y": 2, "z": 3}]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["j", "k", "l"], ["m", "n", "o"], ["p", "q", "r"], ["s", "t", "u"], ["v", "w", "x"], ["y", "z"]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"]], [[4, "Giraffe"], [5, "Zebra"]]]], [[["Apple", 1], [[2, 3, 4], {"a": "A", "b": "B"}], [5.5, true]]], [[[1, 2, 3], ["a", "b", "c"], {"x": 10, "y": 20}, [[1, 2], [3, 4], [5, 6]]]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]]]], [[[]]], [[[["d", "e", "f"], ["g", "h", "i"], ["d", "e", "f"]], [["d", "e", "I"], ["g", "h", "i"]], [["d", "e", "f"], ["g", "h", "i"]]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [3, "Elephant"]]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]]]], [[[[4, "Giraffe", ["G", "H"]]]]], [[[["d", "e", "f"], ["g", "h", "i"], ["d", "e", "f"]], [["d", "e", "I"], ["g", "h", "i"]], [["g", "h", "i"]]]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]], [[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]]]], [[[2, "Nikhil"], [3, "Deepanshu"]]], [[["Hello", 122, [1, 2, 3]], [true, false], ["A", "B", "C"]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [3, "applelephant", "Elephant"], [2, "Tiger"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]]]], [[[[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}, 5]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}, 5]], [[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}, 5]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}, 5]]]], [[[1, 2], {"3": "A", "4": "B"}, [5, 6, 7], ["z", "y", "x"], {"3": "A", "4": "B"}]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[3, "Elephant", ["E", "F"]], [2, "Giraffe", ["G", "H"]], [4, "Giraffe", ["G", "H"]]]]], [[[{"7": [8, "D"], "9": "E"}, [10, "F"], {"7": [8, "D"], "9": "E"}], [{"7": [8, "D"], "9": "E"}, [10, "F"], {"7": [8, "D"], "9": "E"}]]], [[[1, 3], ["a", "b", "c"], {"x": 10, "y": 20}, [[1, 2], [3, 4], [5, 6]], {"x": 10, "y": 20}]], [[["A", 1, "B", 2, "C", 3], ["D", 4, "E", 5, "F", 6], ["G", 7, "H", 8, "I", 9], ["G", 7, "H", 8, "I", 9]]], [[[true, false], ["A", "B", "C"]]], [[[[1, 2, 3], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]], {"A": {"B": {"C": "D", "d": "l"}, "": {"C": "D", "d": "l"}}}]], [[[1, 3], ["a", "b", "c"], {"y": 20}, {"y": 20}]], [[[[2, 3, 4], {"a": "A", "b": "B"}], [5.5, true]]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]], [[1, "Lion", ["A", "B"]]]]], [[["G", 7, "H", 8, "I", 9]]], [[[[3, "Elephant", ["E", "F"]], [4, "k", ["G", "H"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]]]], [[["a", "b", "c"], ["d", "e", "f"], ["j", "k", "l"], ["m", "n", "o"], ["p", "q", "r"], ["s", "t", "u"], ["v", "w", "x"], ["y", "z"]]], [[[1, 4], ["a", "b", "c"], {}, {}, {}, {}]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[0, 1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]]]], [[["A", 1, "B", 2, "C", 3], ["D", 4, "E", 5, "F", 6], ["G", 7, "H", 8, "I", 9], ["A", 1, "B", 2, "C", 3], ["A", 1, "B", 2, "C", 3]]], [[[2, "Nikhil"], [3, "Deepanshu"], [3, "Deepanshu"]]], [[[1, 2], {"3": "A", "4": "B", "2": ""}, [5, 6, 7], {"3": "A", "4": "B", "2": ""}, ["z", "x", "y"], {"3": "A", "4": "B", "2": ""}]], [[[3, "Deepanshu"], [3, "Deepanshu", 3], [3, "Deepanshu"]]], [[["a", "b", "c"], ["d", "e", "f"], ["g", "h", "ii"], ["j", "k", "l"], ["m", "n", "o"], ["p", "q", "r"], ["s", "t", "u"], ["v", "w", "x"]]], [[[{"7": [8, "D"], "9": "E"}, [10, "F"]], [{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[[1, 3], ["a", "b", "c"], {"x": 10, "y": 20}, [[1, 2], [3, 4], [5, 6]], {"x": 10, "y": 20}, ["a", "b", "c"]]], [[[[1, "Lion"], [2, "Tiger"]]]], [[[1, 2], {"3": "H", "4": "B", "2": ""}, [5, 6, 7], {"3": "H", "4": "B", "2": ""}, ["z", "x", "y"], {"3": "H", "4": "B", "2": ""}, {"3": "H", "4": "B", "2": ""}]], [[["Apple", 2], [[2, 3, 4], {"a": "A", "b": "B"}], [5.5, true]]], [[[1, 2], {"3": "A", "4": "B", "2": ""}, [5, 6, 7], {"3": "A", "4": "B", "2": ""}, {"3": "A", "4": "B", "2": ""}, {"3": "A", "4": "B", "2": ""}, {"3": "A", "4": "B", "2": ""}]], [[[["apple", "banana"], ["cat", "dog"], ["cat", "dog"]], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {"x": 1, "y": 2, "z": 3}]], [[[["d", "e", "I"], ["g", "h", "i"]], [["d", "e", "f"], ["g", "h", "i"]]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [3, "Elephant"]], [[1, "Lion"], [2, "Tiger"], [1, "Lion", 1], [3, "Elephant"], [3, "Elephant"]]]], [[[["d", "e", "f"], ["g", "h", "i"], ["d", "e", "f"]], [["d", "e", "I", "I"], ["g", "h", "i"]], [["g", "h", "i"]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]]]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]], [[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]]]], [[[{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [{"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [{"6": "C", "D": [7, "E"]}]], [[0, 1, {"2": [3, "A"], "4": "B"}], [{"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1], [1, {"2": [3, "A"], "4": "B"}], [{"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]]]], [[[true, true], [true, false], ["A", "B", "C"]]], [[[1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]], [[10, "F"]], [[10, "F"]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]]]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]], [[1, "Lion", ["A", "B"]]], [[1, "Lion", ["A", "B"]]]]], [[[1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"]], [1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]]]], [[[[1, "Lion", ["A", "B"]], [2, "Tiger", ["C", "D"]]], [[1, "Lion", ["A", "B"]]], [[3, "Elephant", ["E", "F"]], [4, "Giraffe", ["G", "H"]]]]], [[[1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]], [5, [6, "C"]]], [1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]], [5, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[[1, "A"], [2, "B"], [3, "C"], [2, "B"]]], [[[true, true], [true, false], ["A", "B", "C"], [true, false]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}], [11, {"12": "I", "J": [13, "K"]}]]]], [[[1, {"2": [3, "A"], "4": "B"}, [5, 2, [6, "C"]]], [1, {"2": [3, "A"], "4": "B"}, [5, 2, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"]], [1, {"2": [3, "A"], "4": "B"}, [5, 2, [6, "C"]]], [1, {"2": [3, "A"], "4": "B"}, [5, 2, [6, "C"]]]]], [[[1, 2, 3], ["a", "b", "c"], {"x": 10, "y": 20}, [[1, 2], [3, 4], [5, 6], [3, 4]]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]]]], [[[["apple", "banana"], ["cat", "dog"]], [[1, 2, 3], [4, 5, 6]], {"x": 1, "y": 2, "z": 3}]], [[[-73, 5, false, 1, -73, -82, 122, 33, 13], []]], [[[1, 3], ["a", "b", "c"], {"y": 20}, [[1, 2], [3, 4], [5, 6]], {"y": 20}, ["a", "b", "c"]]], [[[1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]], {"2": [3, "A"], "4": "B"}], [{"7": [8, "D"], "9": "E"}, [10, "F"]], [1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]], {"2": [3, "A"], "4": "B"}]]], [[[1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"], {"7": [8, "D"], "9": "E"}], [{"7": [8, "D"], "9": "E"}, [10, "F"], {"7": [8, "D"], "9": "E"}], [1, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]]]], [[{"A": {"B": {"C": "D"}, "": {"C": "D"}, "t": {"C": "D"}}, "dog": {"B": {"C": "D"}, "": {"C": "D"}, "t": {"C": "D"}}}]], [[true, true, true, true, true, false, true, false]], [[["a", "b", "c"], ["d", "e", "f"], ["j", "l"], ["m", "n", "o"], ["p", "q", "r"], ["s", "t", "u"], ["v", "w", "x"], ["m", "n", "o"]]], [[[[1, "Lion"], [2, "Tiger"], [1, 6, "Lion"], [3, "Elephant"], [3, "Elephant"]]]], [[{"4": "B", "2": ""}, [1, 2], {"4": "B", "2": ""}, [5, 6, 7], {"4": "B", "2": ""}, {"4": "B", "2": ""}, {"4": "B", "2": ""}, {"4": "B", "2": ""}]], [[[1, {"2": [3, "A"], "4": "B", "20": "I"}, [5, [6, "C"]], {"2": [3, "A"], "4": "B", "20": "I"}], [{"7": [8, "D"], "9": "E"}], [1, {"2": [3, "A"], "4": "B", "20": "I"}, [5, [6, "C"]], {"2": [3, "A"], "4": "B", "20": "I"}], [{"7": [8, "D"], "9": "E"}], [1, {"2": [3, "A"], "4": "B", "20": "I"}, [5, [6, "C"]], {"2": [3, "A"], "4": "B", "20": "I"}], [{"7": [8, "D"], "9": "E"}]]], [[[1, 2, 3], ["a", "b", "c"], {"x": 10, "y": 20}, [[1, 2], [3, 4], [5, 6], [3, 4]], [1, 2, 3]]], [[[["d", "e", "f"], ["g", "h", "i"], ["d", "e", "f"]], [["d", "e", "I"], ["g", "h", "i"]], [["d", "e", "f"], ["g", "h", "i"]], [["d", "e", "f"], ["g", "h", "i"], ["d", "e", "f"]]]], [[[1, {"2": [3, "A", 3], "4": "B", "3": [3, "A", 3]}, [5, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"]], [{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[{"x": 1, "y": 1, "z": 3}, [["apple", "banana"], ["cat", "dog"], ["cat", "dog"]], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {"x": 1, "y": 1, "z": 3}]], [[[[1, "Lion"], [2]], [[3, "Fox"], [4, "Wolf"]]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[11, {"12": [13], "J": [13]}], {"8": [9, "F"], "G": [10, "H"]}, [11, {"12": [13], "J": [13]}]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]]]], [[["A", 1, "B", 2, 3], ["D", 4, "E", 5, "F", 6], ["G", 7, "H", 8, "I", 9]]], [[[1, 1, 3], ["a", "b", "c"], [1, 1, 3], {"y": 20}, [[1, 2], [3, 4], [5, 6]], {"y": 20}, ["a", "b", "c", "c"], ["a", "b", "c"]]], [[[[]], [], [[]]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [3, "applelephant", "Elephant"], [2, "Tiger"]], [[1, "Lion"], [2, "Tiger"], [2, "Tiger"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"]], [[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [2, "Tiger"]]]], [[[[1, "Lion"], [2, "Tiger"], [3, "Elephant"], [3, "Elephant"]], [[1, "Lion"], [2, "Tiger"], [1, "Lion", 1], [3, "Elephant"], [3, "Elephant"]], [[1, "Lion"], [2, "Tiger"], [1, "Lion", 1], [3, "Elephant"], [3, "Elephant"]]]], [[{"x": 1, "y": 1, "z": 4}, [["apple", "banana"], ["cat", "dog"], ["cat", "dog"]], {"x": 1, "y": 1, "z": 4}, [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {"x": 1, "y": 1, "z": 4}]], [[[[1, "Lion"], [2]], [[3, "Fox"], [4, "Wolf"]], [[3, "Fox"], [4, "Wolf"]]]], [[[[2, 3, 4], {"a": "A", "b": "B"}]]], [[[1, {"2": [3, "A"], "4": "B"}], [1, {"2": [3, "A"], "4": "B"}], [{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[[[1, 2, 3], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]], {"A": {"B": {"C": "D", "d": "l"}, "": {"C": "D", "d": "l"}}}, [[1, 2, 3], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]]]], [[[[false, 5, {"6": "C", "D": [7, "E"]}], [1, {"2": [3, "A"], "4": "B"}], [false, 5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}], [false, 5, {"6": "C", "D": [7, "E"]}]], [{"8": [9, "F"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}], [11, {"12": "I", "J": [13, "K"]}]]]], [[[8, {"2": [3, "A"], "4": "B"}, [5, [6, "C"]]], [{"7": [8, "D"], "9": "E"}, [10, "F"]]]], [[{"3": "A", "4": "B"}, [5, 6, 7], ["z", "x", "y"], {"3": "A", "4": "B"}]], [[[{"a": "A", "b": "B"}]]], [[["a", "b", "c"], {"x": 10, "y": 20}, [[1, 2], [3, 4], [5, 6], [3, 4]], [1, 2, 3]]], [[{"x": 1, "y": 1, "z": 3}, [["apple", "banana"], ["cat", "dog"], ["cat", "dog"]], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {"x": 1, "y": 1, "z": 3}, [["apple", "banana"], ["cat", "dog"], ["cat", "dog"]]]], [[[true, true]]], [[[{"8": [2, "H"], "G": [10, "H"]}, {"8": [2, "H"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [{"8": [2, "H"], "G": [10, "H"]}, [11, {"12": "I", "J": [13, "K"]}]], [[1, {"2": [3, "A"], "4": "B"}, 1, 1], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]]]], [[[{"a": "A", "b": "B"}, {"a": "A", "b": "B"}]]], [[[{"a": "AA", "b": "B"}, [2, 3, 4], {"a": "AA", "b": "B"}], ["Apple", 1], [[2, 3, 4], {"a": "AA", "b": "B"}], [5.5, true], ["Apple", 1]]], [[[[1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]], [[{"2": [3, "A"], "4": "B"}], [1, {"2": [3, "A"], "4": "B"}], [5, {"6": "C", "D": [7, "E"]}]]]]], "contract": "\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n"}
{"task_id": "Mbpp/597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n", "entry_point": "find_kth", "canonical_solution": "\ndef find_kth(arr1, arr2, k):\n\treturn sorted(arr1 + arr2)[k - 1]\n", "base_input": [[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5], [[100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7], [[3, 4, 7, 8, 10], [2, 5, 9, 11], 6]], "atol": 0, "plus_input": [[[1, 2, 3], [], 1], [[], [1, 2, 3], 2], [[], [1], 1], [[1], [], 1], [[1, 2, 3], [], 3], [[1, 1, 1], [], 2], [[1, 2, 3], [true, true, false], 3], [[1, 2, 3, 1], [], 3], [[false, -64, 27, -83, 3, -39], [1], 1], [[false, -64, 27, -83, 3, -39], [1, 1], 1], [[96, false, 3, 50], [1, 2, 3, 3], 2], [[1, 2, 3, 2], [], 3], [[true, true, false, true], [true, true, false, true], 3], [[false, -64, 27, 3, -39], [false, -64, 27, 3, -39], 2], [[1, 2, 3, 1], [], 2], [[1, 50], [1, 50], 1], [[1, 1], [], 2], [[false, true, false, true], [false, true, false, true], 3], [[1, 2, 3, 2, 3], [], 3], [[1, 2, 3], [-39.319443006981004, -57.39432084514247, -76.34186082848302, -70.39547602882918, 5.979370667934944, -70.11319095554586, -77.67992498473315, -35.264606501444845, 53.4388130843717, -2.8800159179744185], 3], [[1, 2], [1, 2], 2], [[1, 2, 3, 1], [6.592840281996914, false], 3], [[false, 97, 96, 27, -83, 3, -39], [1, 1], 1], [[false, -64, 27, -83, 3], [false, -64, 27, -83, 3], 1], [[false, 28, -64, 27, 29, -83, 3], [false, 28, -64, 27, 29, -83, 3], 1], [[1, 2, 3, 2], [1, 2, 3, 2], 2], [[2], [2], 2], [[false, 4, -64, 27, -83, 3, -39], [1, 1], 1], [[false, 97, 96, 27, -83, 3, -39], [0, 1], 1], [[false, -64, 27, -83, 3, -39], [1, 1, 1], 1], [[1, 2, 28, 2], [], 3], [[1, 2, 3, 2], [1, 2, 3, 2], 4], [[1, 28, 2, 3, 2], [1, 28, 2, 3, 2], 2], [[96, false, 3], [1, 2, 3, 3], 2], [[false, 97, 96, 27, -83, 3, -39], [0, 1, 1], 1], [[false, -64, 27, -83, 3, -39], [3, 1], 1], [[false, 1, 1, 1], [], 2], [[1, 2, 29, 3, 2, 3], [], 3], [["r", "zJBCERjzbi", "dAeIcPYLJw"], [], 2], [[1, 28, 4, 3, 2], [1, 28, 4, 3, 2], 1], [[true, true, false, true, true], [true, true, false, true, true], 3], [[true, true, false], [true, true, false], 3], [[1, 1, 1], [false, false, false, true, false, true], 3], [[false, true, true, true], [false, true, true, true], 3], [[false, -64, 27, -83, 3, -39], [2], 1], [[false, -64, 27, -83, 3, false], [false, -64, 27, -83, 3, false], 1], [[1, 28, 2, 3, 3], [1, 28, 2, 3, 3], 2], [[1, 2, 3], [true, false], 3], [[96, -39, 3], [1, 2, 3, 3], 2], [[1, 1], [1, 1], 1], [[1, 2, 4, 3, 3], [96, -39, 3], 2], [[false, -64, 27, -83, 3, -39], [1, 1, 1], 2], [[96, false, 3, 50, false], [1, 2, 3, 3], 2], [[1, -39, 2, 3], [true, false, true], 3], [[-39, 2, 29, 4, -18, -31, 28, 3, -68, 43], [1, 2, 3], 2], [[false, 97, 96, 27, -83, 3, -39], [0, -31, 1], 1], [["r", "zJBCERjzbi", "dAeIcPYLrJw"], [], 3], [[1, 1, 1, 1], [1, 1, 1, 1], 1], [[false, 97, 96, 27, -83, 3, -39], [0, 1], 2], [[-64, 3, -83, 3, -39, 3], [3, 1], 1], [[2, 3], [2, 3], 1], [[1, 2, 3], [-39.319443006981004, -57.39432084514247, -76.34186082848302, -70.39547602882918, 5.979370667934944, -70.11319095554586, -77.67992498473315, -35.264606501444845, 53.4388130843717, -2.8800159179744185], 4], [[4, false, -64, 27, -83, 3, -39, -39, 3], [4, false, -64, 27, -83, 3, -39, -39, 3], 1], [[false, 28, -64, 27, 29, -83, -64, 3, 29], [false, 28, -64, 27, 29, -83, -64, 3, 29], 1], [[], [25.76844865917127, 5.979370667934944, 34.20953059107049, 73.57245412264768, 19.02562370256588, -57.39432084514247, 5.979370667934944, -39.319443006981004], 2], [[false, false, false], [false, false, false], 3], [[1, 1, 2, 3, 2], [1, 1, 2, 3, 2], 4], [[true, false, true, false, true, true], [true, false, true, false, true, true], 3], [[1, 28, 2, 3, 3, 2], [1, 28, 2, 3, 3, 2], 2], [[1, 2, 3, 2, 2], [1, 2, 3, 2, 2], 2], [[false, 96, 96, 27, -83, 3, -39], [false, 96, 96, 27, -83, 3, -39], 1], [["r", "r", "zJBCERjzbi", "dAeIcPYLJw"], [], 2], [[false, 27, -83, 3, -39], [1, 1], 1], [[1, 2, 4, 3, 3, 3], [96, -39, 3], 2], [[1, 1, 1, 1], [1, 1, 1, 1], 3], [[1, 2, 2, 1], [6.592840281996914, false], 3], [[false, 27, -83, 3, -39], [1, 2, 1], 1], [[-64, 3, -83, 3, -39, 3], [3, -39, 1], 1], [[false, false, true], [false, false, true], 3], [[false, -64, 27, -83, 3, -38], [1, 1], 1], [[1, 2, 3], [true], 3], [[false, 27, -83, 3, -39], [1, 1, 1], 1], [[1, 2, 3, 43], [], 2], [[false, -64, false, 27, -83, 3, -83], [false, -64, false, 27, -83, 3, -83], 1], [[-64, 3, -83, 3, -39, 3], [4], 1], [[3, 1, 3], [3, 1, 3], 1], [[-39, 2, 29, -31, 4, -18, -31, 28, -68, 43], [-39, 2, 29, -31, 4, -18, -31, 28, -68, 43], 2], [[1, 2, 3, 3, 3, 3], [96, -31, 3], 2], [[3, false, 27, -83, 3, 3, -39], [3, false, 27, -83, 3, 3, -39], 1], [[4, 1, 2, 3, 1], [6.592840281996914, false], 4], [[false, -64, 27, -83, 3, -39], [3], 1], [[1, 3, 2, 3, 3, 2], [1, 3, 2, 3, 3, 2], 2], [[2, 1], [2, 1], 1], [[1, 2, 3, 2, 2], [1, 2, 3, 2, 2], 1], [[-68, 1, 1, 1, 1], [-68, 1, 1, 1, 1], 1], [[false, false], [false, false], 3], [[96, false, 3, 50], [1, 43, 2, 3, 3], 2], [[1, 2, 1], [], 3], [[50, 2, 3, 2, 2], [50, 2, 3, 2, 2], 1], [[false, true, true, false], [false, true, true, false], 4], [[43, -68, 1, 1, 1], [43, -68, 1, 1, 1], 1], [[false], [false], 1], [[1, 2, -83, 3], [-39.319443006981004, -57.39432084514247, -35.264606501444845, -76.34186082848302, -70.39547602882918, 5.979370667934944, -70.11319095554586, -77.67992498473315, -35.264606501444845, 53.4388130843717, -2.8800159179744185], 5], [[2, 1, 1], [2, 1, 1], 1]], "contract": "\n\tassert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 < k <= len(arr1) + len(arr2), \"invalid inputs\" # $_CONTRACT_$j\n", "assertion": "\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n"}
{"task_id": "Mbpp/598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n", "entry_point": "armstrong_number", "canonical_solution": "\ndef armstrong_number(number):\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n", "base_input": [[153], [259], [4458]], "atol": 0, "plus_input": [[12345678901234567890], [12345678901234567889], [12345678901234567891], [12345678901234567892], [12345678901234567888], [12345678901234567893], [12345678901234567887], [12345678901234567886], [12345678901234567894], [12345678901234567885], [3], [12345678901234567895], [72], [71], [2], [1], [12345678901234567896], [73], [12345678901234567884], [4], [74], [70], [68], [12345678901234567883], [21], [22], [12345678901234567882], [75], [67], [20], [12345678901234567881], [12345678901234567897], [44], [69], [12345678901234567880], [12345678901234567879], [64], [76], [12345678901234567878], [12345678901234567898], [66], [5], [12345678901234567899], [19], [65], [12345678901234567901], [45], [43], [83], [63], [42], [18], [23], [41], [12345678901234567900], [12345678901234567902], [62], [53], [17], [82], [84], [12345678901234567905], [52], [51], [46], [24], [50], [16], [6], [61], [12345678901234567903], [49], [85], [86], [7], [25], [87], [60], [54], [40], [47], [12345678901234567906], [8], [48], [89], [26], [9], [12345678901234567907], [77], [59], [55], [10], [78], [15], [88], [90], [12345678901234567904], [14], [56], [12345678901234567908], [11]], "contract": "\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False\n"}
{"task_id": "Mbpp/599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n", "entry_point": "sum_average", "canonical_solution": "\ndef sum_average(number):\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n", "base_input": [[10], [15], [20]], "atol": 0, "plus_input": [[1000000], [100000000], [1000001], [53], [54], [true], [99999999], [999999], [52], [100000001], [55], [999998], [1000002], [100000002], [1000003], [100000003], [100000004], [56], [99999998], [100000005], [100000006], [99999997], [57], [99999996], [29], [28], [58], [999996], [999997], [59], [27], [51], [99999995], [60], [99999994], [999995], [50], [61], [999994], [99999993], [5], [4], [62], [85], [63], [64], [3], [30], [999993], [86], [100000007], [2], [83], [6], [31], [26], [32], [7], [1], [1000004], [25], [65], [66], [9], [33], [84], [68], [1000005], [87], [1000006], [99999992], [67], [82], [1000007], [35], [88], [49], [81], [93], [69], [48], [92], [34], [80], [10], [8], [999992], [1000008]], "contract": "\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)\n"}
{"task_id": "Mbpp/600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n", "entry_point": "is_Even", "canonical_solution": "\ndef is_Even(n) : \n    return n % 2 == 0\n", "base_input": [[1], [2], [3]], "atol": 0, "plus_input": [[-10], [-283], [-1000], [1000000000], [-999], [999999999], [-284], [-9], [false], [-282], [true], [999999998], [999999997], [-281], [-73], [-279], [-74], [94], [-280], [-72], [-278], [93], [-276], [999999995], [-285], [-277], [95], [-11], [-75], [-76], [1000000001], [-286], [-71], [92], [91], [-12], [-8], [1000000002], [90], [999999994], [89], [-1001], [1000000003], [-13], [-14], [-94], [999999996], [-95], [-98], [999999993], [-15], [76], [74], [40], [-96], [-70], [-97], [75], [41], [-99], [-19], [96], [88], [73], [39], [-16], [59], [16], [-69], [-77], [-43], [-44], [999999992], [77], [87], [-78], [18], [45], [8], [-100], [14], [-68], [-101], [13], [-79], [-287], [-102], [58], [-17], [38], [98], [-1002], [15], [1000000004], [57], [-288], [-1003], [60], [-20], [-998], [-7], [1000000005], [-18], [-1005]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\n"}
{"task_id": "Mbpp/602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n", "entry_point": "first_repeated_char", "canonical_solution": "\ndef first_repeated_char(str1):\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n", "base_input": [["abcabc"], ["abc"], ["123123"]], "atol": 0, "plus_input": [[""], ["abcdefghijklmnopqrstuvwxyz"], ["abcabcxyz"], ["ABCaBC"], ["a"], ["aaa"], ["aaaabcabcxyz"], ["aaaaaaabcabcxyzz"], ["abcdefghinjklmnopqrstuvwxyz"], ["aaaa"], ["aaaaaaabcabcxyzzaaaa"], ["aaaaa"], ["aa"], ["aaaaaaaabcabcxyzzaaaa"], ["aaaaaaaabcabcxyzzaaaaABCaaBC"], ["aaaaaaaabcabaaaaaaabcabcxyzzcxyzzaaaa"], ["aaaabcabcabcdefghinjklmnopqrstuvwxyzxyz"], ["aaaaaaabcabcxyzzaaaaa"], ["aaaabcabcabcdABCaBCeafghinjklmnopqrstuvwxyzxyz"], ["abcdefgxhinjklmnopqrstuvwxyz"], ["aaaaaaabcabaaacxyzzaaaa"], ["aaaaaaabcabacxyzzaaaa"], ["aaaaaaaaa"], ["aaaabcabcabcdABCaBaCeafghinjklmnopqrstuvwxyzxyz"], ["aaaaaaabaaaaaaaa"], ["abccdefghinjzklabcdefghijklmnopqrstuvwxyzmnopxyz"], ["aaaaaaabcabcABCaBCxyzzaaaa"], ["aaaaaaabcabcABCaBCzaaaa"], ["aaaaazcxyzzaaaa"], ["abcdefgxaahinjklmnopqrsaaaaaaabcabaaacxyzzaaaatuvwxyz"], ["ababcdefghinjklmnopqrstuvwxyzcdefghinjklmnopqrstuvwxyz"], ["abcdefghijklmnopqrstuvwvz"], ["abcdefgxhzinjklmnopqrstuvwxyz"], ["aaaaaabcabcxyz"], ["abcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyz"], ["aaaaaaaabaaaaaaaa"], ["aaaabcabcABCaBCabcdABCaBCeafghinjklmnopqrstuvwxyzxyz"], ["abcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyz"], ["aaaaaaaaaa"], ["aaaaaaabcabcxyza"], ["MJ"], ["abcdefghijkvlmnopqrstuvwvz"], ["aaaaaaabcabcdefghijklmnopqrstuvwxyzabcABCaBCzaaaa"], ["abcxyza"], ["aabcdefghijklmnopqrstuvwvz"], ["aaaaaa"], ["aaaaaaaaaaaaaaaabcabcxyzza"], ["aaaabcxyzzaaaa"], ["aabcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzaaaaa"], ["JF"], ["abcdefgxaahinjklmnopaaaaaabcabcxyznqrsaaaaaaabcabaaacxyzzaaaatuvwxyz"], ["aabcdefgxaahinjklmcnopaaaaaaabcdefgxhzinjklmnopqrstuvwxyzbcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzaaaaa"], ["aaaaaaaaaaaaabcabcxyz"], ["aaaaaaaaabcxyzabcabcxyzzaaaaABCaaBC"], ["aaaabaaabcabcxyzz"], ["abcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaaaaaabcabacxaaaatuvwxyz"], ["abcdefghiuvwvz"], ["aaaaaaabcabcdefghijklmnaaaaaaabcabcABCaBCzaaaaopqrstuvwxyzabcABCaBCzaaaa"], ["abcdefgxhlmnopqrstuvwxyz"], ["aaaaaaabcabcxaaaaaaabcabcxyzzaaaaayzzaaaabmcabcabcdefghinjklmnopqrstuvwxyzxyzaaaaaaaaaaaaaaaabcabcxyzza"], ["abcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzABCaBCzaaaaaaaabcazbacxaaaatuvwxyz"], ["aaaaaaabcaaaaaaabcabcABCaBCzaaaazzaaaaa"], ["aaaaaaaaabcabcxyzzaaaa"], ["JJF"], ["abcaaaaaaabcabcxyzzaaaaaabcxyz"], ["aabcdefgxaahinjklmcnopaaaaaaabcdefgxhzinjklmnopqrstuvwxyzbcabcxyzqrsaaaaaaabcabaaacxyzzaaabcdefgxaahinjklmnopqrsaaaaaaabcabaaacxyzzaaaatuvwxyzxyzaaaaa"], ["aabcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzaaeaaa"], ["aaaaaaaaaaaaaabcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaaaaaabcabacxaaaatuvwxyzbcabcxyz"], ["aaaaaaa"], ["abcdefgxaahabcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzinjklmnopaaaaaabcabcxyznqrsaaaaaaabcabaaacxyzzaaaatuvwxyz"], ["aaaaaaaaJJFaa"], ["aaaaaaabcabcxyzaaa"], ["aaabcdefghijklmnopqrstuvwxyzaabcabcxyz"], ["aacaaaaaaabcxyzabcabcxyzzaaaaABCaaBC"], ["aaaaaaabcabcxyzaaaaaaa"], ["abcxayza"], ["aabcdefgxaahinjklmmcnopaaaaaaabcdefgxhzinjklmnopqrstuvwxyzbcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzaaaaa"], ["Mlszaaabcdefghijklmnopqrstuvwxyzaabcabcxyzvopvu"], ["MMJ"], ["aaaaaaabcabcdefghiyzabcABCaBCzaaaa"], ["aabcaaaaaaabacabcxyzzaaaaaabcxyz"], ["aaaabcabcabcdefghjklmnopqrstuvwxyzxyz"], ["aabcabcxyz"], ["aaaaklmnopqrstuvwxyzxyz"], ["aaaaaaaabcabcxyzz"], ["aabcdefgxaahinjklmcnopaaaaaaabcdefgxhzinjklmnopqraaaaaaabcabcxaaaaaaabcabcxyzzaaaaayzzaaaabmcabcabcdefghinaaaaaaabcabcxyzajklmnopqrstuvwxyzxyzaaaaaaaabcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzaaaaa"], ["MMJaaaaaaabcabcxyzaaa"], ["abcaaaaaaabcabcxyzzaaaaaabcxbyz"], ["aaaabcabcablmnopqrstuvwxyzxyz"], ["abcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaabcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyzxyzABCaBCzaaaaaavwxyz"], ["abcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaaaaaabcabacxaaaatuvwzxyz"], ["aaaaaaabaaaaxyzaaa"], ["aabcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaababcdefghinjklmnopqrstuvwxyzcdefghinjklmnopqrstuvwxyzaaacxyzzaaaatuvwxyzaaaaa"], ["JJJFaaaabcabcabcdefghjklmnopqrstuvwxyzxyz"], ["BCaaaabcabcABCaBCabcdABCaBCeafghinjklmnopqrstuvwxyzxyzaBC"], ["abcdefgxaahabcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatuvwxyabcdefghinjklmnopqrstuvwxyzzinjklmnopaaaaaabcabcxyznqrsaaaaaaabcabaaacxyzzaaaatuvwxyz"], ["aacaaaaaabcdefghijklmnopqrstuvwvzaaaaABCaaBC"], ["aaaaaaabcaMMJaaaaaaabcabcxyzaaabcABCaBCxyzzaaa"], ["aaaabcabcabcdABCaBCeafghinjklmnopqrstuvwxyzaaaaaaaaJJFaaxyz"], ["aaaabcabcabcdABCaBaCeafghinjklmnaaaaaaabcabcdefghiyzabcABCaBCzaaaa"], ["aaaacaaaaaaabcxyzabcabcxyzzaaaaABCaaBCaaaaabcabacxyzzaaaa"], ["abcdefgxaahinjklmnopaaaaaabcabcxyzqrsaaabcdefgxaahinjklmcnopaaaaaabcabcxyzqrsaaaaaaabcabaaacxyzzaaaatugvwxyzxyzABCaBCzaaaaaavwxyz"], ["MaaaaaaabaaaaxyzaaaMJ"], ["aaaaaaabcabcdefghijklamnaaaaaaabcabcABCaBCzaaaaopqrstuvwxyzabcABCaBCzaaaa"], ["abcdefgxhlmnopqrstutvwxyz"]], "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n", "assertion": "\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"\n"}
{"task_id": "Mbpp/603", "prompt": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n", "entry_point": "get_ludic", "canonical_solution": "\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n", "base_input": [[10], [25], [45]], "atol": 0, "plus_input": [[100], [1000], [10000], [999], [9999], [true], [9998], [101], [102], [998], [9997], [997], [99], [10001], [1001], [103], [10002], [104], [996], [995], [9996], [61], [31], [60], [32], [106], [9995], [9994], [9993], [105], [1002], [62], [33], [1003], [59], [107], [58], [15], [57], [30], [81], [16], [69], [34], [70], [27], [51], [29], [71], [35], [50], [79], [108], [56], [10003], [72], [63], [17], [49], [9992], [10004], [10005], [68], [80], [36], [64], [109], [88], [82], [47], [66], [10006], [55], [78], [28], [1004], [67], [41], [91], [87], [48], [18], [9991], [5], [54], [76], [110], [85], [97], [52], [84], [96], [90], [86], [994], [9990], [6], [83], [77], [95], [89], [19], [42]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n"}
{"task_id": "Mbpp/604", "prompt": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n", "entry_point": "reverse_words", "canonical_solution": "\ndef reverse_words(s):\n\treturn ' '.join(reversed(s.split()))\n", "base_input": [["python program"], ["java language"], ["indian man"]], "atol": 0, "plus_input": [[""], [" "], ["   "], ["word"], ["a"], ["ab"], ["   word   "], [" a a a a a a  "], ["word1   word2   word3"], ["word1  word2  word3"], ["    a a a a a a"], ["  java language  "], ["word1         word2         word3"], ["abb"], ["java"], ["word1"], ["word1         word2         word3java"], ["language"], ["    a a a a a "], [" a a a a a a a"], ["u  java language  "], ["wordword11"], ["word    a a  a a a "], [" j java language  "], ["word11"], ["  word3java "], ["word1   wo rd2   word3"], ["rwordword11"], ["worword1         word2         word3javad1"], ["    a a a a a  "], ["worword1"], ["u  java langu  java language   "], ["    word   j java language  "], ["u  java languageword1  "], ["    a   a a a a  "], ["javaabb"], ["javvaabb"], ["abword"], ["jaaabb"], ["javaabbwordword11"], ["aorbword"], ["word1           a   a a a a    word2         word3"], [" worword1   a "], ["Ml"], ["languageword1"], ["rwoordword11"], ["wordword11word"], ["  word3langu java "], ["javabwordword11"], ["wword2  word3"], ["word3langu"], ["    "], ["wordwordword11word1"], ["langueage"], ["  java lwordword11anguage  "], ["la     a a a a a anguageword1"], ["aorbwordangueage"], ["    word   j java langjavaabbwordword11uage  "], ["  "], ["rd11"], ["wvord1         word2         word3java"], ["aorbwor  java lwordword11anguag"], ["    a a a"], ["worjavaabbwordword11d    a a  a a a "], ["word1   wo rd2 word1         word2         word3  word3"], ["rdd11"], ["D"], ["wor d1   wo rd2  "], ["wor11wdord"], ["jaavaabb"], ["worworwd1"], ["jaa"], ["    word   j java language  worword1"], ["u  java language  bb"], ["awoor"], ["d1"], ["ja"], ["javbaabb"], ["    word  worworwd1java lwordword11anguage  uage  worword1"], ["worlaenguage1"], ["la     a a a a a anguagejaword1"], ["    a a"], ["abwor  java lwordword11anguag"], ["wordwordword11rword1"], ["javabwoardword11"], ["Db"], ["awoorr"], [" a a a    word  worworwd1java lwordword11anguage  uage   "], ["dabword"], ["javaabbwordword1wonguage1"], ["  wu  java language  ord3langu java "], ["worwword1"], [" j java language  vaabb"], ["la     a a a a a anguagejaaword1"], ["laguageword1"], ["lwordword11anguag"], ["word    a a a3langu"], ["u  java languagewoord1  "], ["lwordword11abwor  java lwordword11anguaganguag"], ["    aa a a a a "], ["lwordword11anguagang a a a a a a  uag"], ["wword3oord1         word2         word3"], ["abwor"], ["uag"], ["anguageword1"], ["iQnak"], ["javbaajbb"], [" a a a a   wu  java language  ord3langu java a a a"], ["wo"], ["word2"], ["u  java languwword2agewoord1  "], ["word     a  a a a "], ["languageweord1"]], "contract": "\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")\n"}
{"task_id": "Mbpp/605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n", "entry_point": "prime_num", "canonical_solution": "\nimport math\ndef prime_num(num):\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n", "base_input": [[13], [7], [-1010]], "atol": 0, "plus_input": [[0], [999999999989], [1572869], [982451653], [9999999967], [false], [9999999966], [1], [true], [999999999988], [999999999990], [9999999968], [982451652], [999999999991], [999999999987], [982451651], [9999999969], [2], [1572868], [982451650], [3], [64], [-1], [1572870], [31], [1572871], [982451654], [9999999970], [32], [33], [74], [982451649], [30], [4], [65], [999999999986], [34], [72], [5], [73], [70], [25], [24], [6], [26], [-71], [999999999992], [1572872], [9999999971], [-70], [71], [27], [66], [999999999993], [9999999972], [999999999994], [17], [1572873], [-55], [63], [-72], [18], [29], [35], [67], [1572874], [982451648], [9999999965], [-56], [999999999995], [68], [61], [75], [23], [19], [8], [999999999985], [-69], [62], [60], [9999999973], [999999999996], [22], [-62], [37], [999999999984], [999999999983], [999999999982], [36], [28], [999999999997], [39], [-45], [69], [-16], [38], [-63], [9999999964], [-68], [-67], [-44], [16], [9], [59], [40]], "contract": "\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False\n"}
{"task_id": "Mbpp/606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n", "entry_point": "radian_degree", "canonical_solution": "\nimport math\ndef radian_degree(degree):\n    return degree * math.pi / 180\n", "base_input": [[90], [60], [120]], "atol": 0, "plus_input": [[0], [-90], [-180], [-270], [-91], [-92], [-181], [false], [true], [-89], [-269], [-268], [-267], [-93], [-182], [-88], [-179], [-178], [-177], [-266], [-1], [-176], [-80], [-87], [-81], [-86], [-183], [-79], [-184], [-271], [1], [87], [-78], [-185], [-175], [-264], [-28], [-263], [-262], [-265], [32], [-16], [-2], [-272], [-3], [-174], [-4], [-273], [-29], [88], [-17], [-173], [-5], [-274], [-261], [31], [-77], [-61], [-30], [-85], [86], [-172], [89], [-186], [-171], [-27], [-8], [-170], [85], [43], [-36], [-169], [-15], [90], [18], [-76], [-82], [-84], [-18], [-9], [-26], [-7], [29], [42], [-35], [-83], [-14], [-168], [-75], [9], [-187], [-10], [28], [-94], [-167], [63], [-62], [-63], [-95], [91], [-64], [62], [17], [44]], "contract": "\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953\n"}
{"task_id": "Mbpp/607", "prompt": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n", "entry_point": "find_literals", "canonical_solution": "\nimport re\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n", "base_input": [["The quick brown fox jumps over the lazy dog.", "fox"], ["Its been a very crazy procedure right", "crazy"], ["Hardest choices required strongest will", "will"]], "atol": 0, "plus_input": [["", ""], ["rfvPtELLC", ""], ["", "rfvPtELLC"], ["LC", "rfvPtELLC"], ["rfvPLCtELLC", "rfvPtELLC"], ["rfvPtELLC", "rfvPLCtELLC"], ["LC", ""], ["rfvPLtELLC", "rfvPtELLC"], ["rfvPtELLC", "rfvPtELLC"], ["rfvPLCtELLC", "rfvPLtE"], ["rfvrfvPLtELLCPtELLC", "rfvPtELLC"], ["", "rfvPLtELLC"], ["rfvPLCtELLC", "rfvPLCtEC"], ["rfvPLtE", "rfvPLttELLC"], ["rfvPLCtELC", "rfvPLCtELLC"], ["rfvPLttELLC", "rfvvPtELLC"], ["rfvPrfvPtELLCLtE", "rfvPLttELLC"], ["rfvrfvPLtELLCPtELLC", "rfvvPtELLC"], ["rfLCELLC", "rfvPLCtELLC"], ["rfvPrfvPtELLCLtE", "rfvPLtELLCLC"], ["rfvPLCtELC", ""], ["rfvvPtELLC", ""], ["rfvPLttELLC", "rfvPLttELLC"], ["rfvPtELLC", "rfvvPtELLC"], ["rfvPtELLCLC", "rfvPtELLC"], ["rfvPLtE", "rfvPLtE"], ["rfvrfvPLtELLCPtELLC", "rfrfvPLttELLCPtELLC"], ["rfvPLttELLC", "rfvPLtELLC"], ["rfvvPEtELLC", "rfvvPtELLrfvPrfvPtELLCLtEC"], ["rfvPtELLC", "rfvvPtELLrfvPrfvPtELLCLtEC"], ["rfvvPtELLC", "rfvvPtELLC"], ["rfvPLtELLCLC", "rfvPtELLC"], ["rfvvPtELLrfvPrfvPtELLCLtEC", "LC"], ["rfvrfvPLtELLCPtELLC", ""], ["rfv", "rfvPLtELLCLC"], ["rfvPLttELLC", "rfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC"], ["rfvvPtCELLC", "rfvvPtELLC"], ["rfvPLttELLC", "rfvPLCtELEC"], ["", "rfvPLtELLCLC"], ["rfvPLttELLC", "rfvrfrfvPLCtELLCCLCLC"], ["rfvPLCtELEC", "rfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC"], ["rfvPLtELLtC", "rfvtELLC"], ["rfvPLCtELLC", "rfvPLCtELLC"], ["rfvrPrLtE", "rfvPLtE"], ["LCrfvPLtE", "rfvPtELLC"], ["rfvPLtrfvtELLCC", "rfvPLtrfvtELLCC"], ["rfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC", "rfvPLCtELLC"], ["rfvPLttELrfvtELLCC", "rfvPLttELLC"], ["rfvPLtE", "rfvPLtrfvPrfvPtELLCLtEE"], ["rfvvPtELLC", "rfvvPtfELLC"], ["rfvPLtrfvtELLCC", "rfvvPtrfvPLCtELCELLC"], ["rfvPLttrfvvPEtELLC", "rfvPLCtELEC"], ["rfv", "rfv"], ["LCrfvPLtE", "rfvvPtELLrfvPrfvPtELLCLtEC"], ["rfvvPtELLrfvPrfvvPEtELLCrfvrPtELLCLtEC", "rfvvPtELLrfvPrfvvPEtELLCrfvPtELLCLtEC"], ["rfvPLtC", "rfvPLttELLC"], ["rfvPLttELLC", "rfvvrfvvPtELLrfvPrfvPtvELLCLrfvvPtELLCtECPtELLrvPrfvPtELELCLtEC"], ["rfvPLCtrfvPLttELrfvtELLCCELEC", "rfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC"], ["rfv", "rffv"], ["rfvPLCtELLC", "CrfvPLtC"], ["rfvvPtELLrfvPrfvPtELLCLtEC", "rfvPtELLC"], ["rfvvPtELLrfvPrfvvPEtELLCrfvrPtELLCLtEC", "rfvPLtELLtC"], ["rfvPLttELLC", "rfvvPtELLrfvPrfvPtELLCLtEC"], ["rfvPLtttELLC", "rfvvrfvvPtELLrfvPrfvPtvELLCLrfvvPtELLCtECPtELLrvPrfvPtELELCLtEC"], ["rfvvPtELLC", "rfvvPtfELCLLC"], ["rfvPLtC", "rfvPLtrfvvPtELLrfvPrfvvPEtELLCrfvPtELLCLtECtELLC"], ["rfvrfvrfrfvPLttELLCPtELLCtELLC", "rfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC"], ["rfvrfvPLtELLCPtELLC", "rfvrfvPLtELLCPtELLC"], ["rfvvPtELLrfvPrfvvPEtELLCrfvrPtELLCLtEC", "rfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC"], ["rfvPrfvPtELLCLtE", "rfrfvvrfvvPtELLrfvPrfvPtvELLCLrfvvPtELLCtECPtELLrvPrfvPtELELCLtECLtELLCLC"], ["rfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtECrfvvPtELLC", "rfvPLttELLC"], ["rfvPLtC", "rfCLtEC"], ["rfCLtECLLC", "rfvPLtELLC"], ["rfvPLtELLC", "rfvvPtfELLC"], ["rfvPLtELLC", "rfvtELLC"], ["rfvvPEtELLC", "rfCLtEC"], ["rfvPLtC", "rfvPLtrfvvPtEPLLrfvPrfvvPEtELLCrfvPtELLCLtECtELLC"], ["rfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPrfvrfrfvPLCtELLCCLCLCtELLrvPrfvPtELLCLtEC", "rfCLtECLLC"], ["rrfvvPEtELLCfvPLttELLC", "rfvvrfvvPtELLrfvPrfvPtvELLCLrfvvPtELLCtECPtELLrvPrfvPtELELCLtEC"], ["rfrfvPLCtELLCvvPtELLrfvPrfvPtELLCLtEC", "rfvvPtELLrfvPrfvPtELLCLtEC"], ["rfrfvPLttELLCPtELLCrfvPLtELLtC", "rfrfvPLttELLCPtELLC"], ["rfvPLtELLrfvPLCtECC", "rfvtELLC"], ["rrfvvPEtELLCfvPLttELLC", "rfvPLtE"], ["rfrfvPLttELLCPtELLCrfvPLtELLtC", "rfrfvPLttECLLCPtELLC"], ["rfvPLttELLLC", "rfvvPtELLrfvPrfvPtELLCrfvPLCtECLtEC"], ["frffv", "frffv"], ["rfv", "rfvPLCtELC"], ["rfvrfvPLtELLCPtELLC", "rfrLCrfvPLtEfvPLttELLCPtELLC"], ["rfvvPtELLC", "rfvPLCtECrfvvEPtfELLC"], ["rfvvPtfELLC", "rfvPLtELLC"], ["rfvvPtELLrfvPrfvvPEtELLCrfvrPtELLCLtEC", "rfvPLCtELEC"], ["rfvrrfvPLCtECrfvrfvvPtELLrfvPrfvvPEtELLCrfvrPtELLCLtECvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPrfvrfrfvPLCtELLCCLCLCtELLrvPrfvPtELLCLtECfrfvPLCtELLCCLCtLC", "rfvrrfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPrfvrfrfvPLCtELLCCLCLCtELLrvPrfvPtELLCLtECfrfvPLCtELLCCLCtLC"], ["rLfrfrfvPLttELLCPtELLCvPLttELLC", "rLfvPLttELLC"], ["rfvPLtrfvvPtELLrfvPrfvvPEtELLCrfvPtELLCLtECtELLC", "rfvPtELLC"], ["rfvPLtE", "rfvvPLtE"], ["rfvrPrLtE", "rfvPLCtECrfvvrfvvPtELLrfvPrfvPtELLCLrfvvPtELLCtECPtELLrvPrfvPtELLCLtEC"], ["rfvvPvEtELLC", "rfvvPtELLrfPrfvPtELLCLtEC"], ["rfvPrfvPtELLCLtE", "rfvPrfvvPLtELtELLCLC"], ["rLrfvrPrLtEfrfrfvPLttELtELLCvPLttELLC", "rLfvPLttELLC"], ["rfrfvPLCtELLCvvPtELLrfvPrfvPtELLCLtEC", "rfvPLrfrLCrfvPLtEfvPLttELLCPtELLC"], ["rfvPrfvPtELLCLtE", "rfCLtECLLC"]], "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n"}
{"task_id": "Mbpp/608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n", "entry_point": "bell_Number", "canonical_solution": "\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n", "base_input": [[2], [3], [4]], "atol": 0, "plus_input": [[10], [20], [30], [50], [100], [9], [29], [31], [32], [11], [101], [12], [98], [82], [49], [81], [19], [99], [83], [true], [8], [13], [28], [false], [21], [15], [22], [23], [24], [27], [14], [102], [97], [80], [16], [7], [103], [18], [6], [33], [25], [34], [5], [35], [17], [73], [36], [84], [51], [52], [4], [53], [26], [96], [3], [72], [48], [68], [57], [2], [74], [93], [58], [54], [67], [95], [79], [78], [92], [55], [104], [0], [46], [47], [39], [75], [71], [56], [70], [37], [105], [42], [85], [45], [91], [38], [1], [66], [43], [40], [41], [44], [106], [69], [94], [65], [90], [59], [107], [86], [76], [64], [87], [108], [88]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n"}
{"task_id": "Mbpp/610", "prompt": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n", "entry_point": "remove_kth_element", "canonical_solution": "\ndef remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]\n", "base_input": [[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[1, 1, 1, 2, 2, 3, 3, 3], 4], [[10, 20, 30, 40, 50, 60], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7], [[1, 1, 1, 2, 2, 40, 3, 3], 4], [[1, 1, 1, 2, 39, 2, 40, 50, 3, 3], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6], [[1, 1, 1, 2, 39, 2, 40, 3, 3, 3], 4], [[2, 1, 1, 1, 2, 2, 40, 3, 3], 4], [[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50, 60], 5], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1], [[2, 1, 1, 1, 2, 2, 40, 3, 3], 1], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 3, 4], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 10], 9], [[1, 1, 1, 2, 2, 3, 3], 4], [[1, 4, 3, 4, 3, 4], 6], [[2, 1, 1, 2, 2, 40, 3, 3], 1], [[1, 1, 1, 39, 39, 2, 40, 3, 3, 3], 1], [[10, 20, 30, 40, 50, 60], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8], 5], [[10, 20, 40, 50, 60, 40], 3], [[1, 4, 3, 4, 3, 4], 5], [[1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 10, 8], 5], [[1, 2, 3, 4, 4], 1], [[1, 2, 3, 2, 4, 5, 7, 7, 8, 9, 10, 8], 5], [[50, 2, 3, 4, 5], 5], [[3, 1, 2, 3, 4, 5], 3], [[1, 1, 1, 2, 39, 2, 40, 3, 3, 3], 1], [[1, 1, 1, 39, 2, 40, 3, 3, 3, 3], 2], [[2, 1, 1, 2, 2, 2, 40, 3, 3], 1], [[1, 1, 1, 4, 39, 2, 40, 7, 3, 3, 3, 4], 1], [[1, 40, 2, 3, 1, 4, 4], 2], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8], 5], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8], 4], [[2, 1, 1, 2, 2, 40, 3, 3], 2], [[10, 20, 30, 40, 50, 60], 4], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10], 5], [[1, 40, 2, 3, 1, 4, 4, 1], 2], [[1, 1, 1, 39, 39, 2, 40, 3, 3, 3, 3], 1], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 3, 1], 2], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 7], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 3, 4, 3, 4], 3], [[1, 40, 2, 3, 1, 4, 4, 1, 40], 2], [[1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 8], 5], [[1, 1, 1, 2, 2, 40, 3, 0], 4], [[1, 2, 3, 0, 4, 5, 6, 6, 8, 9, 10, 8, 0], 5], [[2, 1, 1, 2, 2, 3, 3], 1], [[2, 1, 1, 2, 2, 40, 3, 3], 4], [[1, 1, 2, 2, 3, 3, 3], 4], [[2, 1, 1, 0, 2, 2, 40, 3, 3, 2], 1], [[2, 1, 1, 2, 2, 40, 40, 3, 3], 1], [[1, 40, 2, 3, 1, 4, 4, 1], 3], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3], 1], [[1, 1, 1, 39, 39, 8, 30, 2, 40, 3, 3, 3], 1], [[10, 20, 40, 50, 60, 40, 50], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], 1], [[3, 1, 2, 3, 1, 4, 5], 3], [[2, 1, 1, 2, 2, 2, 40, 3, 3, 3], 1], [[10, 0, 30, 40, 50, 4], 6], [[2, 6, 1, 2, 2, 40, 3, 3], 2], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5], 6], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 7], 7], [[1, 40, 2, 3, 1, 4, 4, 1, 40], 1], [[1, 1, 7, 1, 2, 39, 2, 40, 3, 3, 3], 2], [[2, 7, 1, 1, 2, 2, 40, 3, 3], 1], [[1, 1, 1, 39, 39, 8, 30, 2, 40, 3, 3, 3], 9], [[1, 4, 3, 4, 3, 4, 4], 6], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5, 10], 6], [[1, 1, 1, 2, 39, 2, 40, 3, 3, 3], 5], [[10, 20, 40, 50, 60, 7, 40, 50, 50], 2], [[1, 8, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8, 30], 5], [[3, 10, 0, 30, 40, 50, 4], 6], [[2, 1, 1, 1, 2, 40, 3, 3], 4], [[10, 20, 40, 50, 60, 40, 50], 2], [[1, 2, 3, 10, 4, 5], 5], [[1, 1, 1, 2, 2, 40, 3, 0], 7], [[2, 1, 1, 2, 2, 40, 40, 3, 3, 3], 7], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 7], 8], [[2, 1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3, 1], 1], [[1, 2, 3, 4, 4, 1], 1], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8, 8], 5], [[1, 2, 3, 2, 2, 30, 7, 5, 6, 7, 8, 9, 10, 8, 2], 5], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5, 3, 10], 6], [[2, 1, 1, 2, 2, 40, 40, 3, 3], 9], [[1, 40, 2, 3, 1, 4, 5, 1], 2], [[2, 60, 1, 1, 2, 2, 2, 40, 3, 3, 3], 1], [[50, 2, 4, 5], 2], [[10, 10, 20, 40, 50, 60, 40, 50], 2], [[10, 20, 40, 50, 60, 19, 40, 50], 2], [[1, 1, 7, 1, 2, 39, 2, 40, 3, 3, 3], 3], [[1, 2, 3, 2, 2, 30, 7, 5, 6, 6, 8, 9, 10, 8, 2], 5], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], 7], [[2, 1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 1], 8], [[1, 1, 1, 39, 39, 30, 60, 2, 40, 3, 3, 3], 1], [[50, 4, 5], 2], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5, 10], 10], [[1, 1, 1, 4, 39, 2, 40, 3, 3, 3, 4], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 < k <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n"}
{"task_id": "Mbpp/611", "prompt": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n", "entry_point": "max_of_nth", "canonical_solution": "\ndef max_of_nth(test_list, N):\n  return max([sub[N] for sub in test_list])\n", "base_input": [[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1], [[[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1]], "atol": 0, "plus_input": [[[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2], [[[-5, -2, -10], [-8, -3, -7]], 2], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 1], [[[-5, -2, -10], [-6, -9, -4], [-6, -9, -4]], 1], [[[-5, -2, -10], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10]], 1], [[[-6, -8, -4], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -8, -4]], 1], [[[-6, -8, -4], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -8, -4], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 0], [[[-5, -2, -10], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-6, -9, -4]], 1], [[[-5, -2, -10], [-6, -9, -4]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10]], 2], [[[-5, -2, -10], [-8, -3, -7]], 0], [[[-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], 1], [[[-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-8, -3, -7], [-4, -2, -10], [-4, -2, -10]], 1], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-6, -9, -4], [-5, -1, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 0], [[[-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], -1], [[[-5, -2, -10], [-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 0], [[[-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10]], 0], [[[-8, -3, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 2], [[[-6, -8, -4], [0, -2, -10], [0, -2, -10], [-8, -3, -7], [-6, -8, -4], [-8, -3, -7]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -2], [[[-5, -2, -10], [-8, -3, -7]], -2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7]], -1], [[[-6, -9, -4], [-5, -2, -10]], -1], [[[-5, -2, -10], [-5, -2, -10]], -3], [[[-6, -8, -4], [0, -2, -10], [0, -2, -10], [-8, -3, -7], [-6, -8, -4], [-8, -3, -7]], 0], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-6, -9, -4], [-5, -1, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 1], [[[-3, -7, -7], [-3, -7, -7], [-3, -7, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 0], [[[-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-8, -3, -7], [-4, -2, -10], [-4, -2, -10]], -1], [[[-3, -6, -7], [-3, -6, -7], [-3, -6, -7], [-3, -6, -7], [-3, -6, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-8, -3, -7]], 0], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-6, -9, -4], [-5, -1, -10], [-6, -9, -4]], 2], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 2], [[[-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2]], -1], [[[-5, -2, -10], [-5, -2, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-8, -3, -7]], 1], [[[-5, -2, -1, -10, -2, -2], [-5, -2, -1, -10, -2, -2], [-5, -2, -1, -10, -2, -2], [-5, -2, -1, -10, -2, -2]], -1], [[[-6, -9, -4]], 1], [[[-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 2], [[[-8, -3, -7]], -2], [[[-5, -8, -10], [-6, -9, -4]], 1], [[[-5, -8, -10]], 1], [[[-6, -8, -4], [-5, -3, -10], [-5, -3, -10], [-6, -8, -4], [-8, -3, -7], [-5, -3, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -10], [-6, -9, -10]], 1], [[[-6, -9, -4, -4], [-6, -9, -4, -4]], 2], [[[-5, -2, -10]], 1], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-5, -1, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-5, -2, -10]], 0], [[[-8, -3, -7]], -3], [[[-5, -2, -10, -2], [-5, -2, -10, -2], [-5, -2, -10, -2]], -3], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10]], 2], [[[-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2]], -3], [[[-5, -1, -10], [-5, -1, -10], [-6, -9, -4], [-6, -9, -4]], 0], [[[-6, -8, -4], [-5, -3, -10], [-5, -3, -10], [-6, -8, -4], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10]], -1], [[[-5, -1, -10], [-8, -3, -6], [-5, -1, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-8, -3, -7]], 0], [[[-4, -2, -9], [-4, -2, -9], [-4, -2, -9], [-8, -3, -7], [-4, -2, -9], [-4, -2, -9], [-4, -2, -9]], -1], [[[-5, -2, -10], [-8, -3, 1], [-6, -9, -4]], -2], [[[-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-6, -9, -4]], 1], [[[-8, -3, -5]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -7, -4], [-6, -7, -4], [-5, -2, -10], [-5, -2, -10]], 1], [[[-8, -3, -7]], 2], [[[-5, -1, -10], [-5, -1, -10], [-6, -9, -4], [-5, -1, -10], [-6, -9, -4]], 2], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], -1], [[[-5, -1, -10], [-5, -1, -10], [-6, -9, -4], [-5, -1, -10], [-6, -9, -4]], 1], [[[-4, -2, -10], [-8, -3, -7], [-6, -9, -4], [-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-8, -3, -7], [-4, -2, -10]], 0], [[[-5, -2, -10]], -2], [[[-2, -2, -10], [-8, -3, -7], [-6, -9, -4], [-2, -2, -10], [-2, -2, -10], [-2, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10]], -1], [[[-8, -8, -7], [-6, -9, -4], [-4, -2, -10], [-4, -2, -10], [-8, -8, -7], [-4, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-8, -3, -7]], -1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 0], [[[-8, -8, -5]], 2], [[[-5, -8, -10]], 0], [[[-5, -2, -10, -2, -2, -10], [-5, -2, -10, -2, -2, -10], [-5, -2, -10, -2, -2, -10], [-5, -2, -10, -2, -2, -10]], -1]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(row, list) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(row) == len(test_list[0]) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for row in test_list for item in row), \"invalid inputs\" # $_CONTRACT_$\n  assert N < len(test_list[0]), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n"}
{"task_id": "Mbpp/612", "prompt": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n", "entry_point": "merge", "canonical_solution": "\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \n", "base_input": [[[["x", "y"], ["a", "b"], ["m", "n"]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]]], "atol": 0, "plus_input": [[[["x", 1], ["y", 2], [true, "z"]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]]]], [[[["hello", "world"], ["foo", "bar"]], [["baz", "qux"], ["python", "programming"]]]], [[["y", 2], [true, "z"]]], [[[["a", "b", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]]]], [[[["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[["y", 2], ["y", 2]]], [[[["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["a", "b"], [1, 2]]]], [[["y", 2]]], [[[["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]], [["c", "d"], [3, 4]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["a", "b"], [1, 2]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4, 4]], [["c", "d"], [3, 4, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[[["a", "b", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["c", "d"], [3, 4]]]], [[["y", 2], [true, "z"], [true, "z"]]], [[[["hello", "world"], ["foo", "bar"]], [["baz", "qux"], ["python", "programming"]], [["hello", "world"], ["foo", "bar"]]]], [[[["hello", "world"], ["foo", "bar"]], [["hello", "world"], ["foo", "bar"]]]], [[[["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]]]], [[[["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["a", "b"], [1, 6, 2]]]], [[["y", 1], ["y", 1]]], [[["y", 2], ["y", 2], ["y", 2]]], [[[["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["hello", "world"], ["foo", "bbar"]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["a", "b"], [1, 2]], [["a", "b"], [1, 2]]]], [[[true, "z"], [true, "z"]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[[["c", "d"], [3, 4]], [["e", "ff", "f"], ["e", "ff", "f"]], [["e", "ff", "f"], ["e", "ff", "f"]], [["c", "d"], [3, 4]]]], [[[["a", "b", "b"], [1]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1]]]], [[[["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar"], ["foo", "bbar"]]]], [[[["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]]]], [[[["hello", "world"], ["foo", "bar"]], [["hello", "world"], ["foo", "bar"]], [["hello", "world"], ["foo", "bar"]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [[5, 6], [5, 6]], [[5, 6], [5, 6]], [[5, 6], [5, 6]], [["a", "b"], [1, 2]], [["a", "b"], [1, 2]]]], [[["yy", 1], ["yy", 1]]], [[["z", 2]]], [[[["e", ""], [5, 6]], [["a", "b", "b"], [1, 2]], [["e", ""], [5, 6]]]], [[["x", 1], [true, "z"]]], [[[["c", "d"], [3, 4]], [["c", "d"], [3, 4]]]], [[["y", 2], ["y", 2], ["y", 2], ["y", 2]]], [[[["a", "b", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]]]], [[[["e", "f"], [5, 6, 6]], [["a", "b", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6, 6]], [["e", "f"], [5, 6, 6]]]], [[["x", 1], [true, "z"], ["x", 1]]], [[[["hello", "world"], ["foo", "bar"]], [["hello", "world"], ["foo", "bar"]], [["hello", "world"], ["foo", "bar"]], [["hello", "world"], ["foo", "bar"]]]], [[[["baz", "qux"], ["python", "python", "programming"]], [["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["baz", "qux"], ["python", "python", "programming"]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4, 4]], [["c", "d"], [3, 4, 4]], [[5, 6], ["e", "f"]], [[5, 6], ["e", "f"]]]], [[[["e", "f"], [5, 6, 6]], [["a", "b", "b"], [1, 2]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6, 6]]]], [[["z", 2], ["z", 2]]], [[["y", 1], ["y", 1], ["y", 1]]], [[[["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar"], ["foo", "bbar"]]]], [[[["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[[["c", "d"], [3, 4, 4]], [["c", "d"], [3, 4, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[[["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]]]], [[["y", 2], [true, "z"], [true, "z"], ["y", 2]]], [[[["a", "b", "b"], [1]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1]], [["a", "b", "b"], [1]]]], [[[["a", "b", "b"], [1, 2]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]]]], [[[["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4, 4]], [["c", "d"], [3, 4, 4]], [[5, 6], ["e", "f"]], [[5, 6], ["e", "f"]], [["c", "d"], [3, 4, 4]]]], [[[["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]]]], [[[["c", "d"], [3, 4]], [["e", "f"], [5, 5, 6]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b"], [1, 2]]]], [[[["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]]]], [[[["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["baz", "qux"], ["python", "programming", "programming"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]]]], [[[["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]]]], [[["y", 2], [true, "z"], ["y", 2]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 10]], [["e", "f"], [5, 10]], [["e", "f"], [5, 10]], [["e", "f"], [5, 10]], [["e", "f"], [5, 10]]]], [[[["e", "f"], [5, 6, 6]], [["a", "b", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6, 6]], [["e", "f"], [5, 6, 6]], [["a", "b", "b"], [1, 2]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b"], [1, 2]], [["a", "b"], [1, 2]]]], [[[["e", ""], [5, 6]], [["a", "b", "b"], [1, 2]], [["e", ""], [5, 6]], [["e", ""], [5, 6]]]], [[[["a", "b"], [1, 2]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[[["c", "d"], [3, 4]], [["a", "b", "b"], [8, 2]], [["a", "b", "b"], [8, 2]], [["e", "f"], [5, 6]]]], [[["y", 2], [true, "yy"], [true, "yy"], ["y", 2], ["y", 2]]], [[[["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["c", "d"], [3, 4]]]], [[[["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["baz", "qux"], ["python", "programming", "programming"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]]]], [[[["e"], [5, 6]], [["a", "b", "b"], [1, 2]], [["e"], [5, 6]], [["e"], [5, 6]]]], [[[["hello", "world"], ["foo", "bar"]]]], [[[["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar", "bbar"], ["foo", "bbar", "bbar"]]]], [[[["a", "b"], [1, 2]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]]]], [[["x", 1], [true, "z"], ["x", 1], [true, "z"]]], [[[["a", "b"], [1, 2, 1]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["e", "f"], [5, 6]], [["a", "b"], [1, 2, 1]], [["a", "b"], [1, 2, 1]], [["a", "b"], [1, 2, 1]]]], [[[["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["hello", "world", "hello"], ["foo", "bbar"]]]], [[[["e", "f"], [5, 6, 6]], [["a", "b", "b"], [1, 2]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6, 6]], [["a", "b", "b"], [1, 2]]]], [[[["hello", "world"], ["foo", "bbar"]], [["hello", "world"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["hello", "world"], ["foo", "bbar"]]]], [[[["c", "d"], [3, 4]]]], [[[["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]], [["c", "d"], [3, 4]], [["e", "f"], [5, 6]], [["a", "b"], [1, 6, 2]], [["c", "d"], [3, 4]]]], [[[["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["hello", "world", "hello"], ["foo", "bbar"]], [["hello", "world", "hello"], ["foo", "bbar"]]]], [[[["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["baz", "qux"], ["python", "programming", "programming"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]], [["foo", "bbar", "foo"], ["foo", "bbar", "foo"]]]], [[[["e", ""], [5, 6]], [["a", "b", "b"], [1, 2]]]], [[[["e"], [5, 6]], [["a", "b", "b"], [1, 2]], [["e"], [5, 6]], [["e"], [5, 6]], [["e"], [5, 6]]]], [[[["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar"], ["foo", "bbar"]]]], [[["y", 2], [true, "z"], [true, "z"], [true, "z"]]], [[[["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar"], ["foo", "bbar"]], [["baz", "qux"], ["python", "programming"]], [["foo", "bbar"], ["foo", "bbar"]], [["foo", "bbar"], ["foo", "bbar"]]]], [[[["a", "b"], [1, 2]], [["e", "f"], [5, 6]], [["a", "b"], [1, 2]]]], [[[["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]], [["d"], [3, 4]], [["e", "f"], [5, 6]], [["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]], [["a", "b"], [1, 6, 2]]]], [[["e", 2], ["e", 2], [true, "z"], [true, "z"], [true, "z"]]], [[[["a", "b", "b"], [1, 2]], [["c", "d"], [3, 4]], [["a", "b", "b"], [1, 2]], [["e", "f"], [5, 6]], [["c", "d"], [3, 4]]]], [[[["e", ""], [5, 6]], [["a", "b", "b"], [1, 2]], [["a", "b", "b"], [1, 2]]]], [[[[1, 2, 3], [4, 5, 6]]]], [[[["c", "d"], [3, 4]], [["c", "d"], [3, 4]], [["c", "d"], [3, 4]]]], [[[["a", "b"], [1, 2]], [["c", "d"], [3, 4, 4, 4]], [["c", "d"], [3, 4, 4, 4]], [[5, 6], ["e", "f"]], [[5, 6], ["e", "f"]], [["c", "d"], [3, 4, 4, 4]], [["c", "d"], [3, 4, 4, 4]]]], [[["yy", 1]]], [[["y", 8], ["y", 8], ["y", 8], ["y", 8]]], [[[["e"], [5, 7]], [["a", "b", "b"], [1, 2]], [["e"], [5, 7]], [["e"], [5, 7]], [["e"], [5, 7]]]], [[[["a", "b"], [1, 2]], [["e", "f"], [5, 6]]]]], "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n"}
{"task_id": "Mbpp/614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n", "entry_point": "cummulative_sum", "canonical_solution": "\ndef cummulative_sum(test_list):\n  return sum(map(sum, test_list))\n", "base_input": [[[[1, 3], [5, 6, 7], [2, 6]]], [[[2, 4], [6, 7, 8], [3, 7]]], [[[3, 5], [7, 8, 9], [4, 8]]]], "atol": 0, "plus_input": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[3, 5, -2, -4, 6], [-1, 2, -3]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0]]], [[[10, -5], [-3, -8, 2], [7, -2]]], [[[10, 100, 1000], [10000, 100000, 1000000], [-1, -10, -100, -1000]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [160, 170, 180]]], [[]], [[[1000000, 2000000, 3000000]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[10, -5], [7, -2]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[180, 7, -2]]], [[[10, -5, -5], [10, -5], [7, -2]]], [[[1, 2, 3, 3, 5, 6, 7, 8, 9, 10]]], [[[10, -5, -5], [10, -4], [7, -2]]], [[[1000000, 1999999], [1000000, 2000000, 3000000]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 1, 0]]], [[[10, -4], [7, -2, 7]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]], [[[10, -4], [7, -2, 7], [7, -2, 7]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 9]]], [[[7, 9, 9], [1, 2, 3, 1], [7, 8, 9, 9]]], [[[10, -5, -5], [10, -5], [7, -2], [10, -5]]], [[[1, 2, 3], [4, 5, 6], [170, 7, 8, 9], [7, 8, 140, 9]]], [[[10, -5]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [18, 12], [13, 14], [15, 16], [17, 18], [19, 20]]], [[[3, 5, -2, -4, 6, -4], [3, 5, -2, -4, 6], [-1, 2, -3]]], [[[1, 2, 3, 1], [7, 9, 9, 9], [7, 8, 9, 9]]], [[[1, 2, 3], [7, 80, 8, 9], [5, 6], [7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [70, 80, 90], [100, 110, 120], [130, 140, 150], [160, 170, 180]]], [[[10, -5], [7, 140], [7, -2], [10, -5]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0]]], [[[7, 9, 9, 9, 9], [7, 8, 9, 9]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [70, 80, 90], [100, 110, 119], [130, 140, 150], [160, 170, 180, 160]]], [[[10, -4], [7, -2, 7], [-2, 7], [-2, 7]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [18, 17, 18], [19, 20]]], [[[10, -5, -5], [9, -6, -5], [7, -2]]], [[[10, -5, -5], [10, -4], [-1, 7, 8, -2], [-1, 7, 8, -2]]], [[[1, 2, 3], [170, 7, 8, 9], [7, 8, 140, 9]]], [[[160, 2000001, 1000000, 2000000, 3000000], [2000001, 1000000, 120, 3000000], [2000001, 1000000, 2000000, 3000000], [2000000, 3000000]]], [[[0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[10, -5], [7, -2], [7, -2]]], [[[10, -5, -5], [10, -5], [7, -2, 6, -2], [7, -2, -2], [10, -5], [10, -5, -5], [10, -5, -5]]], [[[3, 5, -2, -4, 6], [-1, 3000000, -3]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0, 0]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[10, -5, -5], [10, -5], [7, -2], [10, -5], [-5, -5]]], [[[3, 5, -2, -4, 6], [3, 5, -2, -4, 6]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 9, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[10, -5], [7, 140], [10, -5]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [18, 17, 18], [19, 20], [3, 4]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 11], [13, 14], [15, 16], [17, 18], [19, 20], [11]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4]]], [[[-1, 7, 8, -2], [-1, 7, 8, -2]]], [[[1, 2, 3], [1, 3], [4, 5, 6], [7, 8, 9, 9]]], [[[0, 0, 0], [0, 0, 20, 0, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]], [[[1, 2, 3, 4, 5, 6, 8, 9, 10], [2, 1, 2, 3, 4, 5, 6, 8, 9, 10], [1, 2, 3, 4, 5, 6, 8, 9, 10]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10, 9], [1, 3, 4, 5, 6, 7, 8, 9, 10, 9], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4]]], [[[10, -5, -5], [9, -6, -5], [9, -7, -5], [7, -2]]], [[[1, 2, 3], [7, 8, 140, 9], [7, 8, 140, 9]]], [[[1, 2, 3], [7, 80, 8, 9], [100000, 6]]], [[[10, -4], [10], [7, -2, 7]]], [[[10, 20, 30], [40, 50, 60], [160, 170], [70, 80, 90], [100, 110, 120], [130, 140, 150], [160, 170, 180]]], [[[1, 2, 3, 4, 6, 7, 8, 9, 10, 4], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0]]], [[[3, 5, -2, -4, 6]]], [[[3, 5, -2, -4, 6, -4]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 18, 9, 10]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10, 9], [1, 3, 4, 5, 6, 7, 8, 9, 10, 9], [1, 3, 4, 5, 160, 6, 7, 8, 9, 40, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], [1, 3, 4, 5, 6, 7, 8, 9, 10, 9]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[0, 0, 0, 0], [0, 0, 0, 0, 0]]], [[[3, 5, -2, -4, 6, 3], [3, 5, -4, 6], [3, 5, -2, -4, 6]]], [[[1, 2, 3], [1, 3], [4, 5, 6], [3], [7, 8, 9, 9], [4, 5, 6]]], [[[10, -4], [10], [7, -2, 7], [10]]], [[[10, -4], [7, -2, 7], [7, 7], [10, -4]]], [[[180, -2]]], [[[180, -2], [180, -2]]], [[[0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]], [[[0, 0, 0], [0, 20, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0]]], [[[10, -5, -5], [10, -5], [9, 10, -5, -5], [7, -2], [10, -5]]], [[[10, -5, -5], [10, -4], [-1, 7, 8, -2]]], [[[7, 9, 9], [1, 2, 3, 1]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 9, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]]], [[[1, 2, 3, 1], [7, 9, 9, 9, 9], [7, 8, 9, 9]]], [[[10, -5, -5], [9, -6, -5], [9, -7, -5], [6, -2], [9, -6, -5]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]], [[[4, 5, 6], [7, 8, 9, 9]]], [[[-1, 7, 8, -2], [-1, 13, 7, 8, -2], [-1, 7, 8, -2]]], [[[1, 2, 3]]], [[[-1, 7, 8, -2], [-1, 13, 7, 8, -2], [-1, 7, 8, -2, 8], [-1, 7, 8, -2]]], [[[0, 0, 0], [0, 0, 20, 0, 0], [0, 0, 0, 40, 0], [0, 0, 20, 0], [0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0]]], [[[3, 5, -2, -4, 6, -4], [3, 5, -2, -4, 6], [-1, 2, -3], [3, 5, -2, -4, 6, -4], [3, 5, -2, -4, 6]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150]]], [[[10, -4], [], [7, -2, 7], [10]]], [[[0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 18, 9, 10]]], [[[0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 180, 20, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]], [[[180, -2], [180, -2], [180, -2]]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 4]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, tuple) for el in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in sum(test_list, ())), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n"}
{"task_id": "Mbpp/615", "prompt": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n", "entry_point": "average_tuple", "canonical_solution": "\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n", "base_input": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]], [[[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]], [[[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]]], "atol": 0, "plus_input": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]], [[[-10, 10], [2, -2], [-5, 5], [-1, 1]]], [[[1000, 2000, 3000, 4000], [500, 1000, 1500, 2000], [-100, -200, -300, -400]]], [[[-7, 14], [-9, 18], [0, 0]]], [[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]], [[[2, 4], [8, 10, 12], [14, 16, 18], [20, 22, 24]]], [[[1000], [500, 1000, 1500, 2000], [-100, -200, -300, -400]]], [[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, -39, 32], [1, 2, 3, -4]]], [[[-1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]], [[[7], [-2, -4, -6], [0, 20, 30]]], [[[-10, 10, -5], [2, -2, 3], [-5, 5, -10], [-1, 1, -3]]], [[[2, 4, 6], [-8, 10], [14, -16, 18, -20], [22, 24]]], [[[-2, 4, 8, -6], [-10, 12, -7], [14, -16, 18, -12], [20, -22, 24]]], [[[10, -10, -10, 12, -5], [30, -45, 56], [-81, 80, -39], [32, -1, 2, 3, -4]]], [[[7, -9, -1], [-2, -4, -6], [0], [20, 30, -40]]], [[]], [[[1], [2, 3, 4]]], [[[-1, -2, -3, -4], [5, 10, 15]]], [[[0, 0, 0, 0], [100, -100, 100, -100], [-100, 100, -100, 100]]], [[[-10, -20, -30, -40], [50, 60, 70], [80, 90]]], [[[1, 2, 3, 4, 5], [-5, -4, -3, -2, -1], [0, 0, 0, 0]]], [[[1, 2, 3, 4, 5, 6, 7], [0, 10, 20, 30, 40, 50], [-9, -6, -3, 0, 3, 6, 9]]], [[[-1, 3, -5, 7, -9], [2, -4, 6, -8, 10], [-3, 5, -7, 9, -11]]], [[[10, 20, 30], [-10, -20, -30], [100, 200, 300], [-100, -200, -300]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]], [[[1], [2, 3, 4], [5, 6], [7, 8, 9]]], [[[1, 2, 3, 4], [5], [6, 7, 8], [9, 10, 11, 12]]], [[[-7, 5, 13], [1, 2, 3, 4], [-10, -15]]], [[[100, 200], [-500, 1000], [0, 0], [10, 20, 30]]], [[[11, 22], [33, 44], [55, 66], [77, 88], [99, 110]]], [[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9, -10]]], [[[-1, 2, 3, 4], [-5, -6], [0, 0, 0, 0]]], [[[1], [2], [3], [4]]], [[[-1, -2, -3, -4, -5, -6], [1, 2, 3, 4, 5, 6]]], [[[0], [0], [0], [0]]], [[[-1, -2, -3, -4, -5], [1, 2, 3, 4, 5], [-1, -2, -3, -4, -5]]], [[[1, 2, 3, 4, 5], [-5, -4, -3, -2, -1], [0, 0, 0, 0], [10, 20, 30]]], [[[-1, -2, -3, -4], [-5, -6, -7, -8], [-9, -10, -11, -12], [-13, -14, -15, -16]]], [[[1, 3, 5], [2, 4, 6], [10, 20, 30], [100, 200, 300]]], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3, 3]]], [[[-5, 10, -15], [20, -25, 30], [-35, 40, -45]]], [[[-1, -2, -3, -4, -5], [-5, -4, -3, -2, -1]]], [[[-10, -5, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1.5, 2.5, 3.5, 4.5], [5.5, 6.5, 7.5, 8.5], [9.5, 10.5, 11.5, 12.5], [13.5, 14.5, 15.5, 16.5]]], [[[3, 3, 3, 3, 3]]], [[[100, 200], [100, 1000], [0, 0], [10, 20, 30]]], [[[1000, 2000, 3000, 4000], [500, 1000, 1500, 2000]]], [[[2, 4], [8, 10, 12], [8, 10, 12, 10], [20, 22, 24]]], [[[501, 1000, 1500, 2000], [1000], [500, 1000, 1500, 2000], [-100, -200, -300, -400]]], [[[1], [], [3], [4]]], [[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [20, 22, 24]]], [[[1, 2, 3, 4], [5], [6, 7, 8], [9, 10, 11, 12], [9, 10, 11, 12]]], [[[2, 4, 6], [2, 4, 90, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [20, 22, 24]]], [[[1000], [-100, -200, -300, -400, -400], [500, 1000, 1500, 2000], [-100, -200, -300, -400], [-100, -200, -300, -400]]], [[[10, 20, 30], [-10, -20, -30], [-10, -400, -30], [10, -39, 30], [100, 200, 300], [-100, -200, -300], [-10, -20, -30]]], [[[-10, 10, -5], [2, -2, 3], [-5, 5, -10], [-1, 1, -3], [-10, 10, -5], [-1, 1, -3]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [4, 5]]], [[[7, 8, 9], [-2, -4, -6], [0, 20, 30], [7, 8, 9]]], [[[14, -16, 18, -20], [22, 24]]], [[[2, 2, 2, 2], [3, 3, 3, 3, 3]]], [[[2, 2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 1, 2], [3, 3, 3, 3, 3]]], [[[10, -10, -10, 12, -5], [30, -45, 56], [32, -1, 2, 3, -4]]], [[[-1, 1, -5], [81, -60, -39], [-10, 2, 3]]], [[[1, 3, 5], [2, 4, 6], [100, 300, 200, 300]]], [[[-10, 10, -5], [2, -2, 3], [-1, 1, -3], [-1, 1, -3]]], [[[-2, 4, 8, -6, 8], [14, -16, 18, -12], [20, -22]]], [[[2, 4, 6], [-8, 10], [2, -3, 4, 6], [14, -16, 18, -20], [22, 24]]], [[[2], [3], [4]]], [[[-5, 10, -15], [20, -25], [20, -25, 30], [-35, 40, -45]]], [[[-10, -20, -30, -40], [50, 60, 70]]], [[[-10, -5], [-10, -5, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[-2, 4, 8, -6], [-10, 12, -7], [14, -16, 18, -12], [20, -22, 24], [20, -22, 24]]], [[[501, 1000, 1500, 2000], [501, 12, 1500, 2000], [1000], [500, 1000, 1500, 2000], [-100, -200, -300, -400]]], [[[-10, 10, -5], [2, -2, 3], [-5, 5, -10], [-1, 1, -3], [-10, 10, -5], [-1, 1, -3], [-10, 10, -5]]], [[[0, 0, 0, 3000], [-5], [0, 0, 0, 0]]], [[[-4, -1, -2, -3], [-4, -5, -6], [-7, -8, -9, -10]]], [[[-1, -2, -3, -4, -5], [1, 2, 3, 4, 5, 4], [88, -2, -3, -4, -5]]], [[[1, 2, 3, 4, 5, 6, 7], [0, 10, 20, 30, 40, 50], [-9, -6, -3, 0, 3, 6, 9, 0]]], [[[2], [4]]], [[[1], [2, 3, 4], [5, 6], [5, 6]]], [[[2, 2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 1, 2], [3, 3, 3, 3, 3], [2, 2, 2, 1, 2]]], [[[-10, 10], [2, -2, -2], [-5, 5], [-1, 1]]], [[[7, 8, 9], [-2, -4, -6], [0, 20, 30, 20], [7, 8, 9], [-2, -4, -6]]], [[[88, -2, -3, -4, -5], [-1, -2, -3, -4, -5, -1], [-1, -2, -3, -4, -5], [30, 1, 2, 3, 4, 5, 4], [88, -2, -3, -4, -5]]], [[[1, 2, 3], [4, 5], [1000, 1, 2, 3], [6, 7, 8, 9], [10, 11, 12, 13, 14], [4, 5]]], [[[3, 3, 3, 3, 3, 3]]], [[[7, 8, 9], [-4, -6], [0, 20, 30], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]], [[[2, 4, 6], [8, 10, 12], [20, 22, -12], [14, 16, 18], [20, 22, 24]]], [[[500, 1000, 1500, 2000], [-100, -200, -300, -400], [500, 1000, 1500, 2000]]], [[[1], [6], [2, 3, 4], [5, 6], [7, 8, 9]]], [[[7, 8, 9], [1, 20, 30], [-2, -4, -6], [1500, -4, -6], [-2, 77, -6], [0, 20, 30]]], [[[11, 22, 11], [78, 88], [33, 44], [55, 66], [77, 88], [99, 110], [33, 44]]], [[[-10, -200, -5], [2, -2, 3], [-5, 5, -10], [-1, 1, -3], [-10, 10, -5], [-1, 1, -3]]], [[[0, 0, 0, 3000], [-5]]], [[[10, 20, 30], [-10, -20, -30], [100, 200, 300], [-100, -200, -300], [-10, -20, -30]]], [[[-4, -5, -6], [-7, -8, -9, -10]]], [[[-1, 1, -5], [81, -60], [-10, 2, 3, -10], [-10, 2, 3], [-10, 2, 3]]], [[[-5, 10, -15], [20, -25, 30], [-35, 40, -45], [-35, 40, -45]]], [[[2, 4, 6], [8, 10, 12], [14, 16, 18, 16], [20, 22, 24], [20, 22, 24]]], [[[24]]], [[[1, 2, 3], [4, 5], [1000, 1, 2, 3], [6, 7, 8, 9], [4, 5]]], [[[-100, -200, -300, -400, -400], [500, 1000, 1500, 2000], [-100, -200, -300, -400], [-100, -200, -300, -400]]], [[[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [0, 10, 20, 30, 40, 50], [-9, -6, -3, 0, 3, 6, 9, 0]]], [[[2, 2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2], [2, 2, 2, 2, 2, 2], [2, 2, 2, 1, 2], [3, 3, 3, 3, 3]]], [[[-10, 10, -5, -5], [2, -2, 3], [-5, 5, -10], [-1, 1, -3], [-10, 10, -5], [-1, 1, -3], [-10, 10, -5]]], [[[-1, -2, -3, -4], [-5, -5, -7, -8], [-9, -10, -11, -12], [-13, -14, -15, -16]]], [[[7, 8, 9], [-4, -6], [-12, 20, 30], [7, 8, 9], [-12, 20, 30]]], [[[-1, 1, -5, 1], [81, -60], [-10, 2, 3, -10, -10], [-10, 2, 3], [-10, 2, 3]]], [[[11, 22, 11], [78, 77, 88], [78, 88], [33, 44], [55, 66], [77, 88], [99, 110], [33, 44]]], [[[-1, -2, -3, -4], [5, 10, 15], [5, 10], [-1, -2, -3, -4]]], [[[10, -10, -10, 12, -5], [30, -45, 56], [1000, 80, -39], [32, -1, 2, 3, -4]]], [[[1, 2, 3], [4, 5, 5], [7, 8, 9], [1, 2, 3], [1, 2, 3]]], [[[0, 0, 0, 3000], [-5], [], [0, 0, 0, 0], [0, 0, 0, 3000]]], [[[1], [2, 3, 4], [5, 6], [7, 8, 9], [1]]], [[[1, 2, 3, 4, 5], [-5, -4, -3, -2, -1], [0, 0, 0, 0], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]], [[[-1, -2, -3, -4, -5], [-5, -4, -2, -2, -1]]], [[[1, 2, 3, 4, 5], [0, 0, 0, 0], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9]]], [[[2, 4], [8, 10, 12], [8, 10, 12, 10], [20, 24]]], [[[1, 2, 3, 4, 5], [-5, -4, -3, -2, -1], [0, 0, 0, 0], [10, 20, 30], [1, 2, 3, 4, 5]]], [[[1000], [500, 1000, 1500, 2000], [-100, -200, -300, -400], [-100, -200, -300, -400]]], [[[-1, -2, -3, -4, -5, -6], [-1, -3, -4, -5, -6], [1, 2, 3, 4, 5, 6]]], [[[-1, -2, -3, -4, -5], [1, 2, 3, 4, 5], [-1, -2, -3, -4, -5], [-1, -2, -3, -4, -5]]], [[[14, -16, 18, -20], [88, 24]]], [[[-1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3], [30, -15, 56]]], [[[-1, -2, -3, -4], [-5, -6, -7, -8], [-13, -14, -16], [-9, -10, -11, -12], [-13, -14, -15, -16]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [4, 5], [6, 7, 8, 9]]], [[[88, -2, -3, -4, -5], [-1, -2, -3, -4, -5, -1], [-1, -2, -3, -4, -5], [88, -2, -3, -4, -5]]], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3]]], [[[14, 13, 18, -20], [2, 4, 6], [-8, 10], [14, -16, 18, -20], [23, 22, 24], [22, 24]]], [[[100, 200], [100, 1000], [0, 0], [10, 20, 30], [10, 20, 30]]], [[[1, 3, 5], [3, 2, 4, 6], [10, 20, 30], [100, 200, 300]]], [[[88, -2, -3, -4, -5], [-1, -2, -3, 1500, -4, -5, -1], [-1, -2, -3, -4, -5], [88, -2, -3, -4, -5]]], [[[-1, -2, -3], [-5, -6, -7, -8], [-13, -14, -16], [-9, -10, -11, -12, -12], [-13, -14, -15, -16]]], [[[1, 2, 3, 4], [5], [6, 7, 8], [9, 10, 11, 12], [9, 10, 11, 12], [1, 2, 3, 4]]], [[[1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]], [[[2], [3], [4], [3]]], [[[2, 2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2], [2, 2, 2, 2, 2, 2], [2, 2, 2, 1, 2], [3, 3, 3, 3, 3], [2, 2, 2, 1, 2], [3, 3, 3, 3, 3]]], [[[1.5, 2.5, 3.5, 4.5], [5.5, 8.285192165167475, 7.5, 5.4466803900799565, 8.5], [5.5, 6.5, 7.5, 8.5], [9.5, 10.5, 11.5, 12.5], [5.5, 6.5, 7.5, 5.4466803900799565, 8.5], [13.5, 14.5, 15.5, 16.5]]], [[[2, 4, 6, 2], [8, 10, 12], [14, 16, 18, 16], [20, 22, 24], [20, 22, 24]]], [[[-1, -2, -3, -4, -5, -6], [1, 2, 3, 4, 5, 6, 6]]], [[[-1, -2, -3, -4]]], [[[1], [6], [2, 3, 4], [5, 6], [6, 6], [7, 8, 9], [2, 3, 4]]]], "contract": "\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in sum(nums, ())), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n"}
{"task_id": "Mbpp/616", "prompt": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n", "entry_point": "tuple_modulo", "canonical_solution": "\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \n", "base_input": [[[10, 4, 5, 6], [5, 6, 7, 5]], [[11, 5, 6, 7], [6, 7, 8, 6]], [[12, 6, 7, 8], [7, 8, 9, 7]]], "atol": 0, "plus_input": [[[], []], [[0, 0, 0], [1, 1, 1]], [[1000000000, 1000000000], [999999999, 999999999]], [[2, 5, 8, 11], [2, 3, 4, 5]], [[10, 20, 30, 40, 50], [5, 10, 15, 20, 25]], [[2, 5, 8, 11], [2, 5, 8, 11]], [[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]], [[10, 20, 30, 40, 49], [10, 20, 30, 40, 50]], [[5, 10, 15, 20, 25], [5, 11, 15, 20, 25]], [[6, 11, 5, 20, 25], [5, 11, 15, 20, 25]], [[1000000001, 1000000000, 1000000000], [1000000000, 1000000000, 1000000000]], [[0, 0, 0], [1, 4, 1]], [[5, 10, 15, 20, 24], [5, 11, 15, 20, 25]], [[5, 10, 15, 20, 24], [5, 11, 15, 20, 50]], [[2, 5, 8, 20], [2, 5, 8, 11]], [[5, 11, 10, 20, 25], [5, 11, 10, 20, 25]], [[5, 10, 15, 20, 24], [5, 11, 50, 20, 50]], [[1000000001, 1000000000, 1000000000], [1000000001, 1000000000, 1000000000]], [[2, 3, 1000000001, 4, 5], [2, 3, 1000000001, 4, 5]], [[5, 10, 15, 20, 24], [5, 10, 15, 20, 24]], [[1, 0, 1], [1, 1, 1]], [[11, 5, 20, 25, 25], [5, 11, 15, 20, 25]], [[5, 11, 10, 1000000001, 25], [5, 11, 10, 20, 25]], [[1, 4, 1], [1, 4, 1]], [[10, 20, 30, 40], [10, 20, 30, 40]], [[11, 5, 20, 25, 25, 5], [5, 11, 15, 2, 20, 25]], [[2, 5, 8, 11], [1000000001, 5, 8, 11]], [[10, 30, 30, 40, 49], [10, 20, 30, 40, 50]], [[2, 8, 11, 5], [2, 3, 4, 5]], [[5, 11, 15, 20, 50], [5, 11, 15, 20, 50]], [[11, 5, 20, 25, 25, 5], [5, 12, 11, 15, 2, 20]], [[6, 11, 5, 20, 25], [6, 11, 5, 20, 25]], [[5, 11, 15, 2, 20, 25, 11], [5, 11, 15, 2, 20, 25, 11]], [[0, 0, 0, 0], [1, 4, 2, 1]], [[10, 20, 30, 40, 50], [5, 10, 15, 12, 25]], [[5, 10, 15, 20, 24], [5, 10, 15, 20, 30]], [[5, 10, 15, 20, 25], [10, 20, 30, 40, 50]], [[5, 1, 4, 4, 1], [5, 1, 4, 4, 1]], [[2, 3, 4, 5, 3], [2, 3, 4, 5, 3]], [[1000000001, 1000000000, 1000000000, 1000000000], [1000000001, 1000000000, 1000000000, 1000000000]], [[10, 30, 30, 40, 49], [10, 30, 30, 40, 49]], [[5, 11, 50, 20, 50], [5, 11, 50, 20, 50]], [[11, 5, 20, 25, 25, 5, 5], [11, 5, 20, 25, 25, 5, 5]], [[1000000001, 1000000001, 1000000000, 1000000000], [1000000001, 1000000000, 1000000000, 1000000000]], [[10, 2, 19, 30, 40, 50], [10, 2, 20, 30, 40, 50]], [[6, 5, 11, 15, 5, 2, 20, 25, 11], [6, 5, 11, 15, 5, 2, 20, 25, 11]], [[10, 2, 19, 30, 40, 50], [10, 2, 19, 30, 40, 50]], [[5, 11, 10, 1000000001, 25], [5, 11, 9, 20, 25]], [[8, 5, 8, 11], [2, 5, 8, 11]], [[10, 20, 31, 40], [10, 20, 30, 40]], [[9, 5, 8, 11], [2, 5, 8, 11]], [[2, 8, 11, 5, 8], [2, 3, 3, 4, 5]], [[10, 50, 2, 18, 40, 50], [10, 2, 20, 30, 40, 50]], [[10, 20, 30, 40], [9, 20, 30, 40]], [[6, 5, 20, 25, 20], [5, 11, 15, 20, 25]], [[5, 11, 15, 20, 25], [5, 11, 15, 20, 25]], [[5, 11, 10, 1000000001, 25], [11, 10, 20, 25, 20]], [[1, 4, 1], [1, 5, 30]], [[10, 2, 20, 30, 40, 50], [10, 50, 2, 18, 40, 50]], [[0, 1, 0, 0], [1, 1, 20, 1]], [[1, 3, 1], [1, 5, 30]], [[11, 5, 20, 25, 25, 5, 5], [11, 5, 20, 25, 9, 5, 5]], [[2, 11, 5], [2, 11, 5]], [[10, 40, 10], [10, 30, 40]], [[5, 10, 15, 12, 25], [5, 10, 15, 12, 25]], [[5, 11, 15, 11, 50], [5, 11, 15, 20, 50]], [[10, 20, 30, 50], [10, 20, 31, 40]], [[2, 3, 4, 5], [2, 5, 8, 11]], [[2, 5, 8, 20], [2, 5, 8, 20]], [[1000000000, 1000000000], [1000000000, 1000000000]], [[5, 11, 15, 20, 50, 11], [5, 11, 15, 20, 50, 11]], [[1, 5, 30], [1, 5, 30]], [[10, 2, 19, 30, 40, 50, 2], [10, 2, 20, 30, 50, 40, 40]], [[10, 20, 30, 40, 20], [10, 20, 30, 40, 50]], [[5, 11, 15, 20, 25, 20], [5, 11, 15, 20, 25, 20]], [[9, 2, 3, 4, 5], [2, 5, 8, 11, 5]], [[2, 3, 4, 24], [2, 3, 4, 5]], [[2, 3, 4, 5, 3], [1, 3, 4, 5, 3]], [[2, 3, 4, 5], [2, 3, 4, 5]], [[2, 3, 1000000001, 18, 5], [2, 3, 1000000001, 4, 5]], [[10, 20, 30, 40, 49], [10, 20, 30, 40, 49]], [[9, 20, 30, 40], [9, 20, 30, 40]], [[5, 11, 15, 20, 50, 11], [6, 11, 15, 20, 50, 11]], [[5, 11, 10, 1000000002, 25], [5, 11, 10, 1000000002, 25]], [[11], [10]], [[6, 5, 11, 15, 5, 2, 20, 11], [6, 5, 11, 15, 5, 2, 20, 11]], [[1000000000, 1000000000], [1000000000, 40]], [[2, 3, 4, 5, 4], [2, 3, 4, 5, 4]], [[10, 2, 19, 30, 40, 2, 50], [10, 2, 20, 30, 50, 40, 40]], [[10, 20, 8, 40], [10, 20, 31, 40]], [[11, 5, 20, 25, 25], [3, 11, 15, 20, 25]], [[1000000002, 1000000000, 1000000000], [1000000001, 1000000000, 1000000000]], [[11, 15, 5, 20, 25, 25], [11, 15, 5, 20, 25, 25]], [[5, 11, 10, 20, 25], [5, 10, 10, 20, 25]], [[5, 11, 15, 20, 25, 25], [5, 11, 15, 20, 25, 25]], [[9, 2, 4, 4, 5], [9, 2, 3, 4, 5]], [[10, 2, 19, 25, 40, 50], [10, 2, 20, 30, 40, 50]], [[5, 11, 15, 20, 25, 20], [5, 11, 15, 31, 25, 20]], [[1, 5, 30], [1, 6, 30]], [[2, 3, 4, 24], [31, 3, 4, 5]], [[10, 2, 19, 25, 40, 50], [10, 2, 19, 25, 40, 50]], [[10, 30, 40], [10, 40, 10]], [[2, 1000000001, 4, 5], [2, 1000000001, 4, 5]], [[1000000000, 1000000000, 1000000000], [1000000000, 1000000000, 1000000000]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1 + test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x > 0 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n"}
{"task_id": "Mbpp/618", "prompt": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n", "entry_point": "div_list", "canonical_solution": "\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n", "base_input": [[[4, 5, 6], [1, 2, 3]], [[3, 2], [1, 4]], [[90, 120], [50, 70]]], "atol": 0, "plus_input": [[[0, 0], [50, 70]], [[-10, 10], [5, -2]], [[-5, -8, 12], [2, -4, 3]], [[50, 70], [50, 70]], [[50, 10, 70], [50, 10, 70]], [[50, 70, 70], [50, 70, 70]], [[50, 70, 70, 70, 50, 70], [50, 70, 70, 70, 50, 70]], [[2, -5, -8, 12, -8], [2, -5, -8, 12, -8]], [[-4, 5, 70], [-4, 5, 70]], [[50, 70, 50], [50, 70, 50]], [[5, 70], [5, 70]], [[2, -5, -8, 12, -7, -8], [2, -5, -8, 12, -7, -8]], [[0, 1], [50, 70]], [[51, 70, 50], [51, 70, 50]], [[51, 70, -8], [51, 70, -8]], [[5, 51, 50], [5, 51, 50]], [[51, 70, 50, 50], [51, 70, 50, 50]], [[50, 10, 70, 70], [50, 10, 70, 70]], [[2, -5, -8, -5, 12, -8], [2, -5, -8, -5, 12, -8]], [[50, 10], [50, 10]], [[5], [5]], [[50, 70, 50, 50], [50, 70, 50, 50]], [[5, 51, 51], [5, 51, 51]], [[5, 70, 70], [5, 70, 70]], [[10, 70, 70], [10, 70, 70]], [[51, -4, -7, 50], [51, -4, -7, 50]], [[5, 51, 49], [5, 51, 49]], [[5, 4, 51, 49], [5, 4, 51, 49]], [[2, -5, -8, -5, 12, -8, -8], [2, -5, -8, -5, 12, -8, -8]], [[11], [11]], [[50, 70, 70, 70], [50, 70, 70, 70]], [[50, -7, 70, 50, 70], [50, -7, 70, 50, 70]], [[5, 70, 70, 70], [5, 70, 70, 70]], [[5, -2], [5, -2]], [[12], [12]], [[1, 1], [1, 1]], [[11, 11], [11, 11]], [[50, 70, 70, 70, 70, 50, 70, 50], [50, 70, 70, 70, 70, 50, 70, 50]], [[-2, -2], [-2, -2]], [[11, 11, 11], [11, 11, 11]], [[1, 50, 50], [1, 50, 50]], [[-8, 12], [-8, 12]], [[-2], [-2]], [[3, -8, 12], [3, -8, 12]], [[12, 12], [12, 12]], [[51, -4, -7, 50, 50], [51, -4, -7, 50, 50]], [[5, 5, 51, 49], [5, 5, 51, 49]], [[2, -8, 12, -8], [2, -8, 12, -8]], [[5, 51, 51, 51], [5, 51, 51, 51]], [[3, -7, 12], [3, -7, 12]], [[5, 71, 70, 70], [5, 71, 70, 70]], [[3, -7, 12, 2, 3], [3, -7, 12, 2, 3]], [[-2, 4], [-2, 4]], [[50, 70, 70, 70, 70], [50, 70, 70, 70, 70]], [[-3], [-3]], [[5, 51, 51, 50, 50], [5, 51, 51, 50, 50]], [[51, -4, -6, -4, 50, 51], [51, -4, -6, -4, 50, 51]], [[50, 70, 70, 70, 50, 70, 70, 70], [50, 70, 70, 70, 50, 70, 70, 70]], [[-10, 10], [51, -2]], [[50, 10, 70, 70, 50], [50, 10, 70, 70, 50]], [[10, 1], [10, 1]], [[50, -7, 70, 70], [50, -7, 70, 70]], [[10, 70], [10, 70]], [[4, 4], [4, 4]], [[5, 5, 51, 51, 5], [5, 5, 51, 51, 5]], [[-2, 4, 4], [-2, 4, 4]], [[51, 70, 4], [51, 70, 4]], [[50, -7, 70, 70, -7], [50, -7, 70, 70, -7]], [[51, -4, 1, 50, 50], [51, -4, 1, 50, 50]], [[1, 5, 51, 51, 5, 51, 5], [1, 5, 51, 51, 5, 51, 5]], [[-10, 2, 10], [-10, 2, 10]], [[3], [3]], [[1], [1]], [[5, 51, 51, 51, 5], [5, 51, 51, 51, 5]], [[3, -6, -5, 11, -8, 12, -7, -8], [3, -6, -5, 11, -8, 12, -7, -8]], [[1, 0, 1], [71, 50, 70]], [[3, -6, 71, 11, -8, 12, 70, -7, -8], [3, -6, 71, 11, -8, 12, 70, -7, -8]], [[10, 70, 12, 70, 70], [10, 70, 12, 70, 70]], [[71, 50, 50, 70], [71, 50, 50, 70]], [[3, 51, 49], [3, 51, 49]], [[70], [70]], [[1, 49, 50, 1], [1, 49, 50, 1]], [[2, -5, -8, -5, 12, -8, -5], [2, -5, -8, -5, 12, -8, -5]], [[4, 4, 4], [4, 4, 4]], [[-2, -2, -2], [-2, -2, -2]], [[4, 4, 4, 4, 4], [4, 4, 4, 4, 4]], [[69, 10, 70, 70, 70], [69, 10, 70, 70, 70]], [[51, -4, -6, -4, 50, 51, 50], [51, -4, -6, -4, 50, 51, 50]], [[5, -6, -4, 51, 51], [5, -6, -4, 51, 51]], [[70, 50, 70, 50], [70, 50, 70, 50]], [[2, -5, -8, 12, -7, -8, -7], [2, -5, -8, 12, -7, -8, -7]], [[-7, 12, -7], [-7, 12, -7]], [[-7, 51, 70, 69, -8], [-7, 51, 70, 69, -8]], [[69, 10, 70, 70, 70, 69, 69], [69, 10, 70, 70, 70, 69, 69]], [[-2, 70, 12, 69, 70], [-2, 70, 12, 69, 70]], [[51, 70, 50, 50, 50, 50], [51, 70, 50, 50, 50, 50]], [[2, 11, 11], [2, 11, 11]], [[5, 4, 51, 49, 5], [5, 4, 51, 49, 5]], [[50, 70, 70, 70, 50, 70, 70], [50, 70, 70, 70, 50, 70, 70]], [[71, 50, 50, 71], [71, 50, 50, 71]], [[70, 71, 50, 10, 70, 70], [70, 71, 50, 10, 70, 70]], [[51, 50, -6, -4, 50, 51, 50], [51, 50, -6, -4, 50, 51, 50]], [[2, -5, -8, -5, 12, -8, -8, -8], [2, -5, -8, -5, 12, -8, -8, -8]]], "contract": "\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x != 0 for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n"}
{"task_id": "Mbpp/619", "prompt": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n", "entry_point": "move_num", "canonical_solution": "\ndef move_num(test_str):\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str\n", "base_input": [["I1love143you55three3000thousand"], ["Avengers124Assemble"], ["Its11our12path13to14see15things16do17things"]], "atol": 0, "plus_input": [["Hello! My age is 28. I was born on the 1st of January, 1992."], [""], ["1234567890"], ["Hello! This string contains no numbers"], ["Hello! My age is 28. I was borln on the 1st of January, 1992."], ["was"], ["Hello! My age is 28.. I was borln on the 1st of January 1992."], ["Hello!  on the 1st of January 1992."], ["Helloa! My age is 22."], ["Helloa!."], ["waws"], ["Hellorn on the 1st of January, 1992."], ["wawMys"], ["1992."], ["brorln"], ["Hello! My age is 28. I was born on the 1st of 28.January, 1992."], ["string"], ["Hellorn on onry, 1992."], ["199Hello! My age is 28.. I was borln on the 1st of January 1992.2."], ["Hello! My age is 28. I was born on the 1st of JanuaHello!ry, 1992."], ["TThis"], ["numbers"], ["199Hello! My age iln on the 1st of January 1992.2."], ["199Hello! My age is 28.. I was borln on the 1st of JanuarHellorn on the 1st of January, 1992.y 1992.2."], ["swawsing"], ["Hello! My age is 28. I was born on the 1st of anuary, 1992."], ["stnumbersring"], ["I"], ["Hello! 28.My agei is 28.. I was borln wawson the 1st of January 1992."], ["Hello! My age is 28. , 1992."], ["Hello! My age is 28a. , 1992.brorln"], ["Hellorn on the 1sHellorn on onry, 1992.t of January, 1992."], ["Hellorn on the 1lst of January, 1992."], ["January,"], ["He."], ["Hello! 2f January 1992."], ["19912."], ["num1sHers"], ["age"], ["1992.y"], ["He.H"], ["Hel My age is 28. I was born yon the 1st of January, 1 992."], ["28a."], ["Hello! This strings"], ["MMy"], ["TThiHello! My age is 28.. I was borln on the 1st of January 1992.s"], ["TThiHellothe e1st of January 1992.s"], ["1st"], ["Hello! This string contains no numbersHello! 2f January 1992."], ["1992.Hellorn on the 1sHellorn on onry, 1992.t of January, 1992.y"], ["28.My"], ["1992.brorln"], ["anuary,"], ["Hello! My age is 28. I was borln on the 1st of January, 19born92."], ["II199Hello! My age is 28.. I was borln on the 1st of January 1992.2."], ["1"], ["199Hello! My age is 28.. I was borln on9 the 1st of January 1992.2."], ["1992.t"], ["TThiHellolthe e1st of January 1992.s"], ["January"], ["strin1g"], ["Hello! My age is 28.. hI was borln on the 1st of January 1992January."], ["Hellorn on the 1lst of Januaory, 1992."], ["yon"], ["anu,ary,"], ["1Hellorn on the 1lst of Januaory, 1992.st"], ["199Hello! My age is 28.. I was borln on the 1st of JanuarHellorn on the 1st of Ja"], ["1992January."], ["1sHello! My age is 28. I was born on the 1st of JanuaHello!ry, 1992.t"], ["borln"], ["b992.orln"], ["199Hel"], ["HeHellorn on the 1lst of January, 1992.lloa!."], ["Hello! My age is 28. I was bo rn on the 1st of anuary, 1992."], ["He.Hb992.orln"], ["TThiHelonlolthe e1st of January 1992.s1992.TThiHello!brorln"], ["Hello! My age is 28. I was born on the 1st o f 28.January, 1992."], ["sHello! My age is 28. I was born on the 1st of 28.January, 1992.tring"], ["Hello! My age is 28. I wlas born on the 1st of JanuaHello!ry, 1992."], ["onstnumbersring9"], ["Helloaa!."], ["no"], ["stsrin1g"], ["Hellorn on onry, 91992n."], ["992."], ["wlas"], ["11992.tring992."], ["Helloa!"], ["sn1g"], ["JanuarHellorn"], ["1sHello!"], ["waJas"], ["199Hello! My age is 28.. I was borln on the 1st ofTThiHello! My age i28.January,s 28.. I was borln on the 1st of January 1992.s JanuarHellorn on the 1st of Ja"], ["yHello! This string contains no numbers"], ["anu,ary,1"], ["born"], ["anuabornry,"], ["199Hello!"], ["b9922.orln"], ["TThis992."], ["ofTThiHello!"], ["9992no."], ["oof"], ["1992January.y"]], "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n"}
{"task_id": "Mbpp/620", "prompt": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n", "entry_point": "largest_subset", "canonical_solution": "\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for _ in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\n", "base_input": [[[1, 3, 6, 13, 17, 18]], [[10, 5, 3, 15, 20]], [[18, 1, 3, 6, 13, 17]]], "atol": 0, "plus_input": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]], [[11, 22, 33, 44, 55, 66, 77, 88, 99, 110]], [[9, 4, 12, 7, 16, 3, 11, 8, 5, 13]], [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]], [[2, 99, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 79, 83, 89, 97]], [[11, 22, 44, 33, 44, 55, 66, 77, 88, 99, 110, 22, 44]], [[2, 31, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 30, 79, 83, 89, 97]], [[2, 99, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 5, 79, 83, 89, 97]], [[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 987]], [[2, 3, 4, 5, 6, 7, 8, 29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [[2, 3, 4, 5, 6, 8, 29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 23]], [[2, 99, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97]], [[2, 31, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 30, 79, 83, 89, 16]], [[2, 3, 5, 7, 11, 13, 18, 19, 16, 23, 29, 31, 22, 37, 23, 7]], [[9, 4, 12, 9, 7, 16, 3, 10, 8, 5, 13]], [[2, 5, 7, 11, 13, 17, 19, 29, 31, 37]], [[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2583]], [[11, 22, 33, 44, 55, 66, 77, 15, 99, 110]], [[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 987, 2584]], [[2, 99, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 7]], [[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]], [[2, 99, 19, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97]], [[11, 21, 33, 44, 55, 66, 77, 88, 99, 110]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 7, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 2]], [[47, 4, 12, 9, 7, 16, 3, 10, 8, 5, 13]], [[34, 55, 35, 89, 144, 233, 377, 610, 987, 1597, 2584, 987, 987]], [[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 987, 2584, 2584]], [[9, 3, 12, 3, 7, 16, 3, 11, 8, 8, 4, 13, 13]], [[2, 3, 4, 5, 6, 8, 29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 21]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 7, 43, 47, 53, 59, 61, 67, 71, 73, 83, 89, 97, 2]], [[2583, 9, 4, 12, 9, 7, 16, 3, 10, 8, 5, 13]], [[2, 5, 7, 11, 13, 17, 3, 19, 29, 31, 37]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]], [[83, 34, 55, 89, 144, 377, 610, 987, 1597, 2584, 987]], [[2, 5, 7, 11, 13, 17, 19, 18, 29, 31, 37]], [[2, 3, 2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 23]], [[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13, 7]], [[2, 3, 5, 7, 11, 13, 17, 12, 19, 23, 29, 31, 37, 23]], [[9, 4, 12, 9, 7, 16, 3, 10, 8, 8, 5, 13, 9, 16]], [[11, 21, 44, 55, 66, 77, 88, 99, 110]], [[2, 3, 5, 7, 11, 13, 18, 19, 16, 23, 29, 31, 22, 37, 23, 7, 7]], [[2, 3, 4, 5, 6, 8, 29, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 21]], [[11, 21, 44, 55, 66, 77, 88, 99, 110, 66]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 43, 47, 53, 47, 61, 67, 71, 73, 79, 83, 89, 97, 5]], [[2, 5, 7, 11, 13, 18, 19, 18, 29, 31, 37]], [[2, 99, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 79]], [[9, 3, 12, 3, 7, 16, 3, 3, 11, 8, 8, 4, 13, 13]], [[83, 34, 55, 89, 144, 377, 610, 987, 1597, 2584, 89, 34, 987]], [[2583, 9, 4, 33, 12, 9, 7, 16, 3, 10, 8, 5, 13]], [[2, 3, 5, 7, 11, 13, 18, 19, 16, 23, 29, 31, 22, 35, 37, 23, 7]], [[47, 4, 6, 12, 9, 7, 16, 3, 10, 8, 5, 13]], [[2, 3, 4, 5, 6, 8, 29, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 20, 26, 27, 28, 29, 30, 21]], [[9, 4, 12, 8, 7, 16, 3, 10, 8, 8, 5, 13, 9, 16]], [[2, 99, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 79, 59]], [[11, 21, 33, 44, 55, 66, 77, 99, 110]], [[9, 4, 12, 7, 7, 16, 3, 11, 8, 5, 13, 3, 5, 9]], [[2, 3, 4, 5, 6, 8, 29, 20, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 20, 26, 27, 28, 29, 30, 21]], [[2, 99, 5, 7, 11, 17, 19, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97]], [[2, 99, 19, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 47]], [[7, 21, 33, 44, 55, 66, 77, 99]], [[2, 31, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 74, 30, 83, 89, 16]], [[11, 21, 33, 28, 44, 55, 66, 77, 99, 110]], [[9, 10, 8, 7, 16, 3, 10, 8, 8, 5, 13, 9, 16, 3]], [[2, 99, 19, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 18, 67, 71, 5, 79, 83, 89, 97]], [[2583, 9, 4, 9, 33, 12, 9, 7, 16, 3, 10, 8, 5, 13]], [[2, 31, 3, 89, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 30, 79, 83, 89, 97]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 7, 43, 47, 53, 59, 61, 67, 71, 73, 83, 89, 97, 2]], [[2583, 9, 4, 33, 12, 9, 7, 66, 3, 10, 8, 5, 13]], [[2, 3, 4, 5, 6, 7, 8, 29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 19]], [[3, 12, 3, 7, 16, 3, 3, 11, 8, 8, 4, 13, 13]], [[2, 99, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 79, 83, 89, 97, 61]], [[2, 31, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 30, 79, 83, 89, 16, 3]], [[83, 34, 55, 89, 89, 144, 377, 610, 987, 1597, 2584, 89, 34, 987]], [[13, 11, 21, 44, 55, 66, 77, 88, 99, 56, 110]], [[2, 3, 5, 7, 11, 17, 19, 23, 29, 31, 37]], [[9, 3, 12, 3, 7, 16, 3, 11, 8, 8, 4, 13, 13, 7, 3]], [[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 233]], [[2, 3, 4, 5, 6, 8, 29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 21]], [[2, 3, 4, 5, 6, 7, 8, 29, 9, 25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 19, 20]], [[2, 99, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 5, 79, 83, 89, 97, 53]], [[2, 99, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 79, 6, 59]], [[3, 12, 7, 16, 3, 3, 11, 8, 8, 4, 13, 13]], [[2, 99, 5, 7, 11, 17, 19, 23, 42, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 5]], [[2, 3, 5, 7, 13, 17, 19, 23, 29, 31, 37, 7, 43, 47, 53, 59, 61, 67, 71, 73, 83, 89, 97, 2]], [[16, 11, 21, 33, 44, 13, 66, 77, 99, 110]], [[11, 22, 44, 33, 44, 55, 66, 77, 88, 99, 110, 22, 44, 44]], [[2, 3, 4, 5, 6, 8, 29, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 27, 28, 29, 30, 21]], [[2, 99, 19, 5, 7, 11, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 67, 71, 5, 79, 83, 89, 97, 47, 31]], [[2, 3, 5, 7, 11, 17, 34, 23, 29, 31, 37, 5, 5]], [[11, 21, 33, 44, 55, 77, 88, 99, 110]], [[11, 21, 44, 55, 66, 77, 42, 88, 99, 110, 66]], [[2583, 9, 4, 33, 12, 9, 7, 66, 3, 10, 8, 5, 13, 9]], [[2, 31, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 30, 79, 83, 89, 96]], [[11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 22, 44]], [[2583, 9, 4, 33, 12, 9, 7, 16, 3, 8, 10, 8, 5, 13]], [[11, 21, 33, 44, 55, 77, 88, 99, 110, 110]], [[2, 3, 5, 7, 11, 13, 17, 19, 22, 29, 31, 37, 7, 43, 47, 54, 59, 67, 71, 73, 79, 83, 89, 97, 2]], [[2, 3, 5, 7, 11, 17, 19, 23, 29, 31, 37, 37]], [[47, 4, 12, 9, 9, 16, 3, 10, 8, 5, 13]], [[11, 21, 44, 55, 41, 66, 77, 88, 99, 66, 110, 66, 66]], [[2, 99, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 79, 24, 83, 89, 97]], [[7, 21, 33, 44, 66, 55, 66, 77, 99]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 7, 43, 47, 53, 59, 61, 67, 13, 73, 83, 89, 97, 2]]], "contract": "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) >= 2, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(el, (int, float)) for el in a), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n"}
{"task_id": "Mbpp/622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n", "entry_point": "get_median", "canonical_solution": "\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n", "base_input": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[2, 4, 8, 9], [7, 13, 19, 28], 4], [[3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6]], "atol": 0, "plus_input": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10], [[1], [2], 1], [[1, 2], [3, 4], 2], [[1, 1, 2, 2, 3], [2, 3, 4, 4, 5], 5], [[3, 6, 14, 23], [2, 18, 27, 39, 49, 55], 4], [[3], [5], 1], [[7], [2], 1], [[2, 3], [4, 5], 2], [[6, 7], [1, 8], 2], [[1, 1, 2, 3], [3, 3, 4, 5], 4], [[5, 6, 6, 7], [3, 4, 7, 7], 4], [[4, 6, 6, 7], [3, 4, 7, 7], 4], [[1], [2], 0], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 8], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 26, 29], 8], [[1], [2, 2], 1], [[2, 1], [2], 1], [[1, 4, 7, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 8], [[3, 3, 4, 5], [3, 3, 4, 5], 4], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 9], [[6, 7], [0, 8], 2], [[1, 1, 2, 3, 3], [3, 3, 4, 5], 4], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 14, 17, 20, 23, 26, 29], 8], [[3, 3, 4, 5, 5], [3, 3, 4, 5, 5], 4], [[1, 4, 7, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 5], [[3, 3, 4, 4, 5], [3, 3, 4, 4, 5], 4], [[6, 26, 7], [0, 8], 2], [[3, 3, 4, 4, 5, 3], [3, 3, 4, 4, 5, 3], 4], [[3, 3, 4, 4, 5, 4], [3, 3, 4, 4, 5, 4], 4], [[3, 3, 4, 4, 5, 3, 3], [3, 3, 4, 4, 5, 3, 3], 4], [[1, 1, 2, 3], [3, 3, 4, 5], 1], [[8], [8], 1], [[4, 6, 6, 7, 6], [3, 4, 7, 7], 3], [[1, 1, 2, 3, 3], [3, 3, 4], 1], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 11, 14, 17, 20, 23, 29], 4], [[3, 3, 4, 5, 5, 5, 3], [3, 3, 4, 5, 5, 5, 3], 4], [[2, 5, 8, 11, 14, 17, 20, 29], [1, 4, 7, 10, 13, 16, 19, 22, 22, 25, 28], 8], [[1, 4, 7, 13, 16, 3, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 5], 5], [[1, 1], [2, 2], 1], [[1, 4, 7, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 4], [[1, 1, 2, 4], [3, 3, 4, 5], 1], [[49, 7], [22, 2], 1], [[3, 3, 4, 4, 5, 4, 3], [3, 3, 4, 4, 5, 4, 3], 4], [[2, 5, 7, 11, 14, 17, 20, 23, 26, 29], [2, 5, 7, 11, 14, 17, 20, 23, 26, 29], 5], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4], 10], [[1, 4, 7, 10, 13, 17, 19, 22, 25, 28, 1, 16], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10], [[7, 26, 7], [0, 8], 2], [[2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2], [2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2], 5], [[1, 2, 2], [3, 4], 2], [[2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], [2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], 5], [[2, 18, 27, 39, 49, 55, 55], [3, 6, 14, 23], 4], [[3, 3, 4, 3, 4, 5], [3, 3, 4, 3, 4, 5], 3], [[2, 4, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], [2, 4, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], 5], [[8, 8], [8, 8], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], 10], [[1], [3], 1], [[1, 1, 2, 4], [3, 3, 4, 5], 2], [[2, 4, 7, 11, 14, 17, 20, 23, 26, 29], [2, 4, 7, 11, 14, 17, 20, 23, 26, 29], 5], [[1, 2, 2], [3, 9, 4], 2], [[14, 7], [2], 1], [[8, 8, 8, 8], [8, 8, 8, 8], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], 10], [[0, 7], [0, 7], 2], [[0, 1, 2, 2, 1], [3, 9, 4], 2], [[7, 26, 7], [0, 8, 8], 2], [[1, 4, 7, 10, 13, 16, 19, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 9], [[5, 5], [3], 1], [[1, 1, 2, 3, 3], [3, 3, 4, 5], 3], [[5, 7], [1, 8], 2], [[26, 1], [2], 1], [[1, 2, 2], [3, 3, 9, 4], 2], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 11, 14, 20, 23, 29], 4], [[3, 3, 4, 49, 4, 5, 3], [3, 3, 4, 49, 4, 5, 3], 4], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 4], [2, 5, 8, 11, 14, 17, 20, 23, 26, 14, 29, 29], 8], [[2, 7], [2, 7], 2], [[19, 0, 1, 2, 27, 4], [19, 0, 1, 2, 27, 4], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], 9], [[14, 17, 7], [14, 17, 7], 2], [[3, 18, 27, 39, 49, 55, 55], [3, 6, 14, 23], 4], [[4, 3], [4, 3], 1], [[1, 4, 13, 16, 29, 19, 22, 25, 28], [2, 8, 11, 11, 14, 17, 20, 23, 29], 4], [[13, 5, 5], [4, 3], 1], [[3, 3, 4, 5, 3], [3, 3, 4, 5, 3], 4], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], 9], [[1, 2, 17, 1], [2], 1], [[2, 1], [3, 2], 1], [[3, 9, 4, 4], [3, 9, 4, 4], 2], [[2, 2, 2], [3, 3, 9, 4], 2], [[1, 9], [1, 9], 2], [[7, 8], [7, 8], 1], [[19, 0, 2, 27, 4], [19, 0, 2, 27, 4], 1], [[1, 4, 7, 10, 13, 17, 19, 22, 25, 28, 1, 16], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 9], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 2], [[6, 7], [-1, 0, 8], 2], [[1, 1, 2, 3, 3], [3, 3, 4, 5, 3], 3], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 17], 10], [[13, 5, 5, 13], [4, 3], 1], [[2, 2], [2, 2], 1], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 14, 17, 25, 23, 29], 4], [[13, 5], [4, 4, 3], 1], [[2, 4, 7, 11, 14, 17, 20, 23, 29], [2, 4, 7, 11, 14, 17, 20, 23, 29], 5], [[13, 5, 5], [4, 3, 4], 1], [[1, 4, 7, 10, 13, 16, 19, 25, 28], [2, 5, 8, 11, 14, 16, 17, 20, 23, 26, 29], 9], [[5, 5], [5, 5], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 3, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 3, 4], 10], [[2], [5, 5], 1], [[3, 3, 4, 5, 3, 3], [3, 3, 4, 5, 3, 3], 4], [[3, 3, 3, 5, 4, 3], [3, 3, 3, 5, 4, 3], 4], [[1, 2], [3, 3, 9, 4], 2], [[49, 49], [49, 49], 1]], "contract": "\n  assert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= min(len(arr1), len(arr2)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr1 + arr2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr1[0:n], arr1[1:n])), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr2[0:n], arr2[1:n])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n"}
{"task_id": "Mbpp/623", "prompt": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "entry_point": "nth_nums", "canonical_solution": "\ndef nth_nums(nums, n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[10, 20, 30], 3], [[12, 15], 5]], "atol": 0, "plus_input": [[[], 3], [[-2, 0, 2, -4, 6], 4], [[0.5, 1.5, 2.5, 3.5], 2], [[-10, -5, 0, 5, 10], 1], [[-3.14, 0, 3.14], 3], [[-100, -50, 0, 50, 100], 0], [[], 2], [[-50, 0, 50, 100], 0], [[-5, 1, 18, 85, 0, 18], 3], [[-100, -50, 0, 50, 100], 1], [[-100, -49, 0, 50, 100], 0], [[-100, -50, 0, 10, 50, 100], 0], [[-10, -5, 0, 5, 10], 2], [[-10, -5, 0, 6, 10], 2], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13], 3], [[-3.14, 0, 3.14], 2], [[50, -100, -49, 0, 50, 100], 0], [[-3.14, -3.14, 0, 3.14], 3], [[-50, 0, 50, 100, 0], 1], [[0.5, 1.5, 2.5, 3.5], 1], [[-10, -5, 0, 5, 10], 0], [[-50, 0, 50, 100, -4, 0], 1], [[-100, -50, 0, 10, 77, 50, 100, -100], 77], [[0.5, 0.5718434373181378, 2.5, 3.5], 2], [[0.5, 2.5, 3.5], 2], [[-100, -50, 0, 50, 1], 0], [[1.405118970978401, 3.5], 2], [[-100, -50, 0, 100, 100], 0], [[1.405118970978401], 2], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100], 9], [[-3.14, -3.14, 0], 4], [[-3.14, -3.14, 0, -3.14], 77], [[-3.14, -3.14, 0, 3.14], 5], [[-10, -5, 0, 5, 10], 85], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 9], [[1.405118970978401, 1.405118970978401], 2], [[-10, -5, 0, 5, 5, 10], 85], [[-100, -49, 0, 50, 100], 1], [[2.176651852460075, 1.405118970978401], 1], [[1.405118970978401, 3.5], 18], [[0.9876346699284253, 1.405118970978401], 2], [[50, -5, -100, -49, 0, 50, 100], 0], [[-10, -5, 77, 0, 5, 10], 1], [[2.176651852460075, 0.9876346699284253, 1.405118970978401], 2], [[10, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 9], [[-5, 1, 18, 85, 0, 18], 4], [[-10, -5, 0, 5, 10, 5], 0], [[-10, -5, 0, 5, 10, 5], 1], [[-2, 0, 2, -4, 6], 5], [[1.405118970978401, 3.5], 9], [[0.5718434373181378], 2], [[1.5, 2.5, 3.5], 1], [[-10, -5, 77, 0, 5, 10, -10], 1], [[-100, -50, 0, -99, 10, 50, 100], 0], [[-3.14, -3.14, 0, 0], 4], [[-49, 0, 50, 100], 1], [[50, -100, -49, 50, 100], 0], [[1.405118970978401, 1.405118970978401, 1.405118970978401], 2], [[10, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77, 6, 50], 9], [[-100, -50, 0, 50, 1, 49], 0], [[1.405118970978401, 3.5, 1.405118970978401], 2], [[0.5718434373181378, 0.5718434373181378], 2], [[0.5, 1.9139785942066323], 2], [[-10, -5, 0, 5, 10], 50], [[0.9876346699284253, 1.405118970978401], -50], [[-10, -5, 0, 5, 5, 10, 5], 85], [[5, 0, 50, 100], 1], [[-100, -49, 0, 50, 100], 18], [[1.405118970978401, 1.405118970978401, 1.405118970978401], 77], [[-98, 88, 22, 71, 28, -10, 77], 3], [[-100, -50, 0, 50, 1, -100], 71], [[50, -100, 100, 0, 50, 100], 1], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 6], [[0.5718434373181378], 0], [[2.176651852460075, 0.9876346699284253, 2.176651852460075], 2], [[-3.14, 0, 3.244354968184857, 3.14], 3], [[0.5, 1.9139785942066323], 1], [[-5, 1, 18, 85, 0, 18], 5], [[5, 0, 50, 99, 100], 1], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 10], [[10, 77, -100, 50, 6, 5, 50, -98, 0, 4, -100, 77], 0], [[-3.14, 1.1966863312771978, 0.5, 1.9139785942066323, 0], 4], [[-50, 0, 50, 0], 1], [[0.5, 1.5, 3.2473110594071946, 3.5], 1], [[-3.14, -3.14, 0, 0, -3.14], 3], [[0.9876346699284253], -51], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13], 4], [[-98, 88, 22, 78, 71, 28, -10, 77], 3], [[0.5, 2.5], 2], [[-10, -5, 0, 6, 10], 3], [[1.5, 2.5, 3.5], 2], [[1.5, 0.9876346699284253], -51], [[-3.14, -3.14, 0], 77], [[1.405118970978401, 1.405118970978401], 9], [[-10, -5, 0, 5, 5, 5, 10], 9], [[-10, 88, -5, 77, 0, 5, 10], 1], [[1.405118970978401, -3.14, 1.405118970978401, 1.405118970978401], 78], [[-3.14, -3.14, 0, 0, 0], 4], [[0.9876346699284253, 1.405118970978401], 3], [[50, -100, 100, 0, 50, 100], 22], [[3.5], 2], [[1.5, 2.5, 3.5], -2], [[-10, 0, 5, 9, 5], 1], [[1.405118970978401, 1.405118970978401, 1.405118970978401], 78], [[0.5, 2.5], 99], [[0.5718434373181378, -3.14, -3.14, 0], 2], [[-3.14, -3.2570960136732894, 0, 0], 4]], "contract": "\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])\n"}
{"task_id": "Mbpp/624", "prompt": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n", "entry_point": "is_upper", "canonical_solution": "\ndef is_upper(string):\n  return string.upper()\n", "base_input": [["person"], ["final"], ["Valid"]], "atol": 0, "plus_input": [[""], ["abcdefghijklmnopqrstuvwxyz"], ["He11o W0r1d!"], ["Thi5 is @ complex 1nput!"], ["Test1ng fUtur3"], ["I l0v3 c0d1ng!!"], ["H@ppy New Year 2022"], ["Th3 Qu1ck Br0wn F0x Jumps 0ver the L@zy D0g!"], ["@!$"], ["Thi5 is lnput!"], ["D0g!"], ["W0r1d!"], ["Thi5 is lnput!!"], ["l03"], ["l003"], ["Th3 Qu1ck Br0wn F0x Jumps 0veD0g!he L@zy D0g!"], ["YearHe1is1o We0r1d!"], ["cBr0wn0d1ng!!"], ["Thi5 @is @ complex 1nput!"], ["Thi5 @is @ comnplex 1nput!"], ["H@ppy New Yea0verr 2022"], ["F0x"], ["complelx"], ["lnput!F0x"], ["Qu1ck"], ["Thi5"], ["l00@is3"], ["@isQu1ck"], ["Th3 Qu1ck Br0wn F0xNew Jumps 0ver the L@zy D0g!"], ["c0d1ngg!!"], ["Thi5 lnput!!is lnput!!"], ["@!$Th3 Qu1ck Br0wn F0xNew Jumps 0ver the L@zy D0g!"], ["YearHe1is1oa We0r1d!"], ["Thi5 @is @ lnput!comnplex 1nput!"], ["D0g!cBr0wn0d1ng!!"], ["YearHe1is1o"], ["Yea0verr"], ["lnput!!"], ["c0d1ngg!!@is"], ["l0v3"], ["0ver"], ["YearHe1is1oa"], ["F0Thi5"], ["1nput!"], ["Th3 Qu1ck Br0wn F0xNew Jumps 0ver the L@zy D0g!Thi5"], ["D0g!Thi5"], ["c0d1Thi5Thi5 is lnput!! @is @ complex 1nput!ngg!!@is"], ["c0d1Thi5Tt!ngg!!@is"], ["compelx"], ["rrr"], ["I l0v3 c0Th3d1ng!!"], ["1nnput!"], ["Year"], ["2022"], ["abcdhijklmnopqrstuvwxyz"], ["YYea0verr"], ["New"], ["0W0r1d!"], ["Thi5 @is @ comnplrrrex 1nput!"], ["D0gTest1ng!cBr0wn0d1ng!!"], ["Test1ng efUtur"], ["@isQH@ppyu1ck"], ["Thi5 @is @ F0Thi5comnplrrresx 1nput!"], ["l0YearHe1is1oa We0r1d!0@is3"], ["c0d1Thiput!ngg!!@is"], ["Dg!g!"], ["Ye1nput!ngg!!@isarHYearHe1is1oae1is1o"], ["YearH1e1is1o We0r1d!"], ["Th3 Qu1ck Br0wn F0xNew Jumps 0ver the L@zy 0g!"], ["0W0r1d!0complelx"], ["Testur"], ["I l0veD0g!hed1ng!!"], ["Thi5 @is @ lnput!ccomnplrrrexomnplex 1nput!"], ["He11o"], ["YearHe1is1oa WeH0r1d!"], ["lnput!Fn0x"], ["Dc0d1ngg!!g!!g!"], ["1npu!"], ["He11o Wr0r1d!"], ["c0d1!ngg!!@is"], ["H@ppy New Year 2l0veD0g!hed1ng!!022"], ["YearHe1ioa"], ["abcdhijklmnopqrstuvwxyzYearHe1is1oa WeH0r1d!"], ["l0@is3"], ["YearHe1is1io"], ["l0v03"], ["D0Tg!Thi5"], ["0g!"], ["@isQcH@ppyu1ck"], ["Thi5 @is @ comt!"], ["YearH1e1is1o!"], ["OOoPGHemh"], ["lnp!!"], ["D0WeH0r1d!gTest1ng!cBr0wn0d1ng!!"], ["00veer"], ["rrrr"], ["Th3 Qu1ck He11oBr0wn F0xNew Jumps 0ver the L@zy D0g!"], ["r0Qu1cklx"], ["I"], ["fUtur3"], ["abcstuxvwxxyz"], ["T h3 Qu1ck Br0wn F0xNew Jumps 0ver the L@zy D0g!Thi5"], ["@!$Th3 Qu1ck Br0wn F0xNew Ju0g!"], ["@isQH@Yea0verrppyu1ck"], ["He11o Wr0r1Testur0W0r1d!d!"], ["NoCsH"], ["He1111o"], ["D0WHD0g!cBr0wn0d1ng!!0r1d!gTest1ng!cBr0wn0d1ng!!"], ["He11111o"]], "contract": "\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n"}
{"task_id": "Mbpp/626", "prompt": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n", "entry_point": "triangle_area", "canonical_solution": "\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \n", "base_input": [[-1], [0], [2]], "atol": 0, "plus_input": [[-0.5], [0.5], [1], [1000000000], [-1000000000], [0], [0.2072611874375927], [false], [true], [0.16809162682757048], [0.6844411299243851], [0.35683551430663585], [0.33946897052245506], [0.6521612813427807], [999999999], [0.17112184563336552], [19], [2], [-65.63179010691987], [-0.01895300889853002], [-0.2255496597911223], [0.25992055122366875], [-1000000001], [-0.2386542836217336], [0.0886668365313565], [-0.6124370845097739], [1.554047854781877], [-65.03547673997947], [2.3994387471541216], [-35.74281783110325], [0.09528268647223326], [0.3232568533333865], [0.2242711558968573], [-0.9709905734457034], [-0.6546455374650706], [-0.06234286415868906], [1.3977482675936928], [0.29784236090387306], [0.33836539173549723], [-31.610835992989255], [-0.27669689852371004], [84], [-1000000002], [0.6223298065417987], [-999999999], [8], [0.6754515039898535], [1.071880421647353], [0.7544257017505951], [-26.27081423640981], [-999999998], [86], [-13.889508087517811], [2.600031963946284], [3.0652858255362965], [0.8998367814282604], [0.8309457774079265], [0.44818675801257646], [-0.30367725300317], [1.2411900876071214], [18], [0.2729798323779066], [0.3285339976213698], [-36.146603050653454], [-27], [-26], [-0.9874223750138421], [1.5476233443397687], [-86.6551056172488], [1.6060546715294721], [2.1601728022044884], [2.285060680697282], [2.8260615578768196], [0.14266165000955092], [-0.017934287764720593], [-84.95845096222169], [1.0974614491570875], [1.898333123797264], [-0.23800544092412548], [0.8789431902277999], [0.4102883538841385], [-0.2581929508402424], [4.5143460754522735], [1.1277670988949333], [-19.946636688004762], [-999999997], [-0.011164351123219007], [-87.64997072807174], [-0.6132302083082929], [-0.23140740618272113], [0.20870583419763342], [0.21493934798744777], [999999998], [-0.15646745414267438], [-0.37347281880381433], [-0.17536906835796195], [-0.12875962601096258], [0.7562408647560114], [-88.39828615224197], [0.4785284183694467], [0.29728651261782624], [1.0367180826599893], [-0.3475613031240767], [-0.38928230557291527], [1.3746888786897695]], "contract": "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4\n"}
{"task_id": "Mbpp/628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n", "entry_point": "replace_spaces", "canonical_solution": "\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\n", "base_input": [["My Name is Dawood"], ["I am a Programmer"], ["I love Coding"]], "atol": 0, "plus_input": [[""], ["I love Coding     "], ["My Name is Dawood     "], ["I am a Programmer     "], ["     "], ["I love\tCoding\n "], ["Hello\tWorld\n"], ["This is a test\tfor\tmultiple\nspaces."], ["One space\tbetween each\tword."], ["Multiple spaces\tat the\tend."], ["Test\tfor\ttabs\tand\tspaces."], ["No spaces\tin\tthis\tinput."], ["A mix of\tspaces,\ttabs,\nand\nnewlines."], ["   I love Coding   "], ["Hello    World"], ["   H@llo     W0r!d   "], ["Hello         World"], ["word."], ["I love\tCAoding\n "], ["A mix of\tspaces,\ttabs,\nand\nnewlineWorld."], ["One"], ["wordmultiple."], ["I love\tCoOne space\tbetween each\tword.ding\n "], ["Multiple"], ["    Multiple  "], ["This"], ["I love oCoding     "], ["I log\nTest"], ["No spaces\tin\tthis\tinputis."], ["   I log   "], ["tehe"], ["Name"], ["Hello    WorlMy Name is Dawood     d"], ["I love oCodi  "], ["word.ding"], ["am"], ["I love oCodi  s"], ["teh     e"], ["Test"], ["tabs"], ["A mix of\tspaces,s\ttabs,\nand\nnewlines."], ["Hello"], ["Hello    Wo"], [" H  H@llo     W0r!d   "], ["between"], ["Wo"], ["MultiNo spaces\tin\tthis\tinputis.ple spaces\tat the\tend."], ["My Naawood     "], ["MultiN\to spaces\tin\tthis\tinputis.ple spaces\tat the\tend."], ["spaces."], ["woinputis.rd."], ["HelOnelo    World"], ["No spaces\t in\tthis\tinput."], ["Coding"], ["My Nameinputis.wood     "], ["HelOnetabs   World"], ["teforhe"], ["A mix of\tspaces,\ttabs,\nand\nnDawoodewlines."], ["   H@llo     W0r!dI love oCodi  s    "], ["tehhe"], ["A mix of\tspaces,sd\ttabs,\nand\nnewlines."], ["Multiptle spaces\tt the\tend."], ["MultiNN"], ["MultiN"], ["A mix of\tspaces,\ttabs,\nandam\nnDawoodewlines."], ["Hello    I love oCoding     WorlMy Name is Dawood     d"], ["aat"], ["tehheWorld"], ["A mix of\tspaces,\tbMultiptle spaces\tt the\tend.tabs,\nand\nnDawoodewlines."], ["A mix of\tspaced\nnewlineWorld."], ["teheTest\tfor\ttabs\tand\tspaces.he"], ["spaces,s"], ["in.putis."], ["newlineWorld."], ["A mix nes."], ["   H@llo  @   W0r!dI love oCodi  s    "], ["I love C oding     "], ["I lovding\n "], ["tetehhhe"], ["end."], ["My"], ["sTest"], ["ses"], ["teforhee"], ["HelOOnelo"], ["A mix of\tspaces,\ttabs,\nand\nnDawoodewelinesnewlines.."], ["A mix of\tspaces,\ttabs,\nand\nnDawoodewelinesnewolines.."], ["oI love\tCoding\n "], ["odig"], ["WHello    Wo"], ["Codding"], ["My Nameinputis.d     "], ["love"], ["I love MultiNo "], ["Hello\tWo\nrld\n"], ["A s,s\ttabs,\nand\nnewlines."], ["Nameinputis.wood"], ["I love oCoding bMultiptle I love\tCAoding\n  end.tabs, "], ["teefrhe"], ["No spaces\tin\tthis\tispaces,nput."], ["tetethhhe"], ["word.diNong"], ["W0r!dI"], ["A mix of\tspaces,sd\ttabs,\nand\ntetethhhenewlines."], ["MultiN\to spaces\tin\tthis\tinputis.    Multiple  ple spaces\tat the\tend."], ["A mix of\tspaces,s\ttabs,\nands\nnewlines."], ["eThis"], ["I love MultiNoCodingo "], ["Hello\tWold\n"], ["My Nameinputis.wood     aat"], ["Hello    A mix of\tspaces,\ttabs,\nandam\nnDawoodewlines.Wo"], ["I lovMe MultiNo "], ["A s,s\ttabas,\nand\nnewlines."], ["A mix of\tspaces,s\ttaabs,\nand\nnewlines."], ["tetethhhenewlines."], ["this"], ["No spaces\tinh\tthis\tinput."]], "contract": "\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n"}
{"task_id": "Mbpp/629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n", "entry_point": "Split", "canonical_solution": "\ndef Split(l): \n    return [num for num in l if num % 2 == 0]\n", "base_input": [[[1, 2, 3, 4, 5]], [[4, 5, 6, 7, 8, 0, 1]], [[8, 12, 15, 19]]], "atol": 0, "plus_input": [[[-3, -1, 0, 2, 4, -6, -8]], [[]], [[-10, -8, -6, -4, -2]], [[-3, -1, 0, 2, 4, -6, -8, -10, 2]], [[-3, 0, 2, 4, -6, -8, 0, 0]], [[-3, -1, 2, 4, -6, -8, 0, 0, 2]], [[6]], [[-10, -8, -2, -6, -4, -2]], [[-3, -1, 3, 2, 4, -6, -8, 0, 0, 2]], [[-3, -1, 3, 2, 4, -6, -8, 0, 0, 2, -8]], [[-10, -8, -6, -4, -2, -10]], [[-3, 0, 2, 4, -6, -8, 0, 0, 4]], [[-10, -7, -6, -4, -2, -10]], [[-10, -8, -4, -2, -10]], [[-10, -6, -4, -2, -9]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, 2, -8]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, -7, 2, -8]], [[-3, -1, 0, -7, 2, 4, -6, -8]], [[-3, 0, 2, -4, -6, -5, -8, 0, 0, 2, -4]], [[-10, -4, -2, -9]], [[-10, -7, -6, -4, -2, -10, -4]], [[-10, -7, -6, -4, -2, -10, -4, -6]], [[-2, -3, -1, 0, -3, -7, 2, -6, -8]], [[-10, -6, -4, -3, -9]], [[-3, -1, 3, 2, 4, -6, -8, 0, 0, 2, -8, -3]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, 2, -8, 0, 0]], [[-10, -6, -4, -2, -10]], [[-3, 0, 1, 2, -4, -6, -5, -8, 0, 0, -4]], [[-3, -1, 0, 1, 2, 4, -6, -8, -10, 2, -1]], [[-3, 2, -6, 4, -6, -8, 0, 0, 2, -8, 0, 0]], [[-3, -1, 2, 4, -6, -8, -10, 2]], [[-10, -8, -8, -4, -2]], [[-10, -7, -6, -6, -4, -2, -10, -4]], [[-3, -1, 3, -6, 4, -6, -8, 0, -7, 2, -8]], [[-3, 0, 2, 2, 4, -6, -8, 0, 0, 4]], [[-3, 0, -4, -6, -5, -8, 0, 0, 2, -4]], [[-9, -7, -6, -4, -2, -10, -4]], [[-3, 0, 2, 2, 4, -6, -8, 0, 0, 4, 0]], [[-10, -8, -8, -4, -2, -8]], [[-1, 2, 4, -6, -8, 0, 0, -1, -1]], [[-3, -2, 3, 2, 4, -6, -8, 0, 0, 2, -8, -3, 4]], [[-2, -3, -1, 0, -3, -7, 2, -6, -8, 0]], [[-3, 0, 2, 2, -6, -8, 0, 0, 0]], [[-10, -10, -8, -6, -2, -10, -2]], [[-3, 0, 2, 2, 4, -6, -8, 0, 4]], [[-10, -8, -4, -6, -4, -2]], [[-4, -3, -9]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, -7, 3, -8]], [[-3, 0, 2, -4, -6, -6, -8, 0, 0, 2, -4]], [[-3, 0, 2, 2, 4, -6, -8, 0]], [[-3, 2, -6, 4, -1, -8, 0, 0, 2, -8, 0, 0]], [[-5, -8, -6, -4, -10]], [[-3, 0, 2, 4, -6, -8, 0, 0, 4, -3]], [[-3, 0, 2, -4, -6, -5, -8, 0, 0, 0, 2, -4]], [[-3, -1, 3, -6, 4, -6, -8, 0, -1, 0, -8]], [[-3, -1, 3, -6, 4, -6, -9, 0, -7, 2, -8]], [[-3, -1, 3, -6, 2, 4, -6, -9, 0, -7, 2, -8]], [[-3, -1, 3, 2, 4, -4, -6, -8, 0, 0, 2, -8]], [[-10, -8, -9, -4, -2, -10]], [[-10, -8, -4, 2, -1, -4, -2]], [[-3, 0, 2, 2, 4, -7, -6, -8, 0, 0, 0]], [[-3, 3, 2, 4, -6, -8, 0, 0, 2, -3]], [[-3, -1, 3, 2, 4, -4, -2, -6, -8, 0, 0, 2, -8]], [[-3, 0, 2, 2, -6, -8, 0, 0, 0, 0, 0, 2]], [[-10, -8, -9, -2, -10]], [[-2, -3, -2, -1, 0, -3, -7, 2, -6, -8, 0]], [[-10, -8, -4, -10, 2, -1, -4, -2]], [[-10, -7, -6, -4, -2, -10, -4, -6, -10]], [[-3, 0, 2, -4, -6, -6, -8, 0, 0, 2, -4, -3]], [[-10, -8, -8, -4, -6, -8]], [[-3, 2, -6, 4, -8, 0, 0, 2, -8, 0, 0]], [[-3, 3, 2, 4, -7, -8, 0, 0, 2, -3]], [[-10, -6, -4, -2]], [[-3, 0, 2, 4, -6, -8, 0]], [[-10, -7, -6, -4, -4, -2, -10, -4]], [[-3, -1, 3, 0, -7, -9, 2, -9, -6, -8]], [[-3, -1, 0, -7, 2, 3, -6, -8]], [[-10, -8, -6, -10, -4, -2, -8]], [[-3, 0, 2, -4, -6, -5, -8, 0, 0, -4, 2, -4]], [[-3, -1, 0, 2, 4, -7, -8]], [[-3, -1, 2, 4, -6, -8, -10, -3, 2]], [[-3, 0, 2, 2, 4, -7, -6, -8, 0, 0, 0, 0]], [[-10, -6, -3, -4, -2, -10]], [[-3, -1, 3, 2, 4, -4, -2, -6, -8, 0, 0, 2, -8, 2]], [[-3, 0, 2, 2, 1, 4, -6, -8, 0, 0, 4, 0, 4, 4, 4]], [[4, -1, 3, 2, 4, -6, -4, -8, 0, 0, 2, -8, -3]], [[-3, -1, 0, 2, -1, 4, -7, -8, -1]], [[-10, -8, -8, -4, -2, -8, -4]], [[-10, -10, -8, -8, -4, -6, -8]], [[-10, -6, -4, -2, -10, -4, -6, -10]], [[-3, -1, 0, 1, 2, 4, -8, -10, 2, -1]], [[-2, -3, -1, 0, -3, 0, -3, -7, 2, -6, -8, 0]], [[-10, -8, -4, 2, -1, -4, -2, -1]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, -7, 3, -8, 3]], [[-3, -1, -6, 4, -6, -9, 0, -7, 2, -8]], [[-3, -1, 3, 2, 4, -4, -5, -6, -3, -8, 0, 0, 2, -8]], [[-3, 0, 2, -4, -6, -6, -8, 0, 2, -4, -3]], [[-3, 0, 2, 5, -6, -8, 0, 0, 4]], [[-3, 2, -1, 4, -1, -8, 0, 0, 2, -8, 0, 0, -1]], [[-10, -6, -3, -4, -5, -2, -10]], [[-10, -8, -6, -4, -2, 6, -10]], [[-3, 0, 2, 4, -6, -8, 0, 4]], [[-10, -8, -6, -4, 2, -2, 2]]], "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]\n"}
{"task_id": "Mbpp/630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n", "entry_point": "get_coordinates", "canonical_solution": "\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\n", "base_input": [[[3, 4]], [[4, 5]], [[5, 6]]], "atol": 0, "plus_input": [[[1, 1, 1]], [[0, 0, 0]], [[-3, -2, -1]], [[10, 20, 30]], [[-5, 0, 5]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[0, 1, 0, -1]], [[2, 2, 2, 2]], [[-2, -2, -2, -2]], [[0, 0, 0, 0]], [[-1, -1, -1, -1]], [[3, 5, 2, 4]], [[0, 0, 1, 1]], [[2, 3, 4, 5]], [[4, 5, 6, 7, 8]], [[-10, 0, 10, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[-1, -2, -3, -4, -5, -6, -7]], [[0, 0, 0, 1, 1, 1, 2, 2, 2]], [[2, 2, 2, 2, 2]], [[-10, 10, 10, 20]], [[20, -10, 0, 10, 2]], [[0, 0, 1, 2, 1, 0]], [[0, 1, 0, 0]], [[9, 0, 1, 2, 1, 0]], [[1, 2, 3, 4, 5, 6, 7, 9]], [[1, 2, 2, 3, 4]], [[-3, -2, -1, -2]], [[2, 2, 2, 2, 2, 2]], [[0, 6, 0, 0]], [[-10, 1, 0, 10, 20, -10]], [[1, 2, 2, 3, 4, 1]], [[20, 2, 3, 4]], [[3, 5, 6, 4]], [[-10, 6, 10, 20]], [[-3, -2, 5]], [[-3, 0, 0]], [[1, -1, 1, 2, 2, 8, 4]], [[1, 0, 1, 2, 2, 8, 4]], [[-3, -1, -2, -3, -4]], [[-1, 4, 1, 0]], [[-3, -2, -1, -1]], [[1, 0, 1, 2, 1, 9, 4]], [[2, 3, 4, 5, 5, 4]], [[0, 0, 0, 0, -10, 0]], [[3, 5, 6, -6, 4, 5]], [[4, 5, 7, 6, 7, 8]], [[1, 2, 2, 3, 4, 1, 2]], [[3, 5, 6, -6, 4, 5, 6]], [[2, 3, 4, 3, 4]], [[0, 0, 0, 0, -10, 0, 0]], [[-3, -2, -2, -1]], [[-1, -1, -1]], [[-3, 3, 5, -6, 4, 5]], [[1, 2, 3, 1, 2]], [[20, -10, 0, 10, 2, 0]], [[-10, 1, 0, 10, -5, 20, -10]], [[-10, 1, 0, 10, -5, 20, -4, -10]], [[2, 3, 5, 6, 5, 4]], [[3, 5, 5, 6, -6, 4, 5, 6]], [[20, -10, 0, 10, 2, 0, 10]], [[2, 2, 3, 4, 1, 2]], [[2, -2, 2, 2, 2, 2]], [[4, 5, 7, 7, 8]], [[10, 21, 30, 10]], [[0, 0, 20, 0, 0, 0]], [[30, 20, 30, 20]], [[0, 0, 0, 0, -10, 0, -10]], [[-3, 0, 0, 0]], [[3, -2, 2, 2, 2, 2, 2]], [[-10, -6, 7, 10, 20]], [[3, 5, 6, 8, 4, 5, 0, 5]], [[3, 3, 5, 5, 6, -6, 4, 5, 10]], [[-7, -1, 4, 1, 0]], [[-10, 1, 0, 10, -5, 20, -4, -10, -10]], [[1, 1, 2, 2, 8, 4]], [[-3, -2, -5, -5, 5]], [[-3, -2, -1, 0, -1]], [[1, 6, 0, 0]], [[3, 3, 5, 5, 6, -6, 4, 5, 10, 5]], [[-10, -6, 7, 11, 20]], [[4, 7, 6, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 9, 4]], [[-3, -3, -2, -1, -2]], [[0, 0, 0, 1, 1, 1, 2, 2, 2, 1]], [[1, 9, 0, 1, 2, 1, 0]], [[1, 2, 3]], [[0, 0, 0, 0, 0]], [[2, 2, 3, 1, 2]], [[3, -2, 2, 2, 2, 2]], [[2, 3, 4, 3, 4, 4]], [[1, 2, 3, 5, 6, 5, 4]], [[-3, -2, 0, -2]], [[2, 2, 3, 2, 1, 2]], [[10, 11, -10, 6, 10, 20]], [[-3, -1, -2, -3, -4, -4]], [[0, 1, 6, 0, 0]], [[2, 10, 4, 3, 4, -4, 10]], [[2, 2, 2, 1, 2]], [[1, 2, 3, 4, 5, 6, 7, 9, 7]], [[1, 2, 2, 20, 4, 1]], [[2, 10, 3, 4, -4, 10]], [[1, 1, 2, 3, 5, 5, 5, 4]], [[3, 5, 5, 6, -6, 4, 3, 5, 6]], [[3, 5, -6, 4, 5, 6]], [[2, 10, 3, 4, -4, 5]], [[1, 2, 2, 21, 3, 4, 1]], [[2, 3, 5, 6, 5, 4, 3]], [[3, 6, -6, 4, 5, 6]], [[-7, -1, 4, 1, 0, 0]], [[-7, -1, 4, -4, 1, 0]], [[9, 0, 1, 1, 0]], [[3, 5, -6, 5, 4, 5, 6]], [[-10, 1, 0, 0, 10, -5, 20, -4, -10]], [[-3, -1, 0, -2, -3, -4]], [[2, 2, 4, 1, 6]], [[20, 20, 2, 20, 3, 4]], [[0, 0]], [[20, -10, 0, 19, 2]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n"}
{"task_id": "Mbpp/631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n", "entry_point": "replace_spaces", "canonical_solution": "\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n", "base_input": [["Jumanji The Jungle"], ["The_Avengers"], ["Fast and Furious"]], "atol": 0, "plus_input": [[""], ["abcdefg"], ["  Jumanji The Jungle  "], ["        "], ["Hello, world!"], ["12345"], ["world!"], ["HelloThe, wolrld!"], ["BeWEijdkI"], ["BeWEidkI"], ["  Jumanji The JungJunglele  "], ["BeWEijkdkI"], ["abcdecfg"], ["abcdecfgJungle"], ["  Jumanji The JungJgunglele  "], ["BeWEijkdkIHeoThe,"], ["HelloThe, ,wolrld!"], ["HlelloThe, ,wolrld!"], ["HelloThe, Hwolrld!"], ["bRZaAd"], ["Hello,"], ["41234"], ["BeTheWEijkdkIHeoThe,"], ["JungJgunglele"], ["BeWEijkdhe,"], ["JungJgwolrld!unglele"], ["kHi"], ["BkeTheWEijkdkIHeoThe,"], ["BeWEijkdhBeTheWEijkdkIHeoThe,e,"], ["HlTelloThe,"], ["B,wolrld!jkdhBeTheWEEijkdkIHeoThe,e,"], ["jBeWEijkdhe,"], ["BJungJgunglele  Jumanji The JungJgunglele  eWEijkdhe,"], ["  Jumanji The JungJgunglele  abcdefg"], ["worl!"], ["BeWEijkdhBeTheWEijkdabcdefgkIHeoThe,e,"], ["world!bRZaAd"], ["BeTheWEijkdkIHeoThee,"], ["BBeWEijkdhBeTheWEijkdabcdefgkIHeoThe,e,eWEijkdhe,"], ["BeTheWEijdkIHeoThee,kHi"], ["d  Jumanji The JungJgunglele  abcdefg"], ["  JuBeWEijkdhBeTheWEijkdabcdefgkIHeoThe,e,lelle  "], ["BeWE  Jumanji The Jungle  ijjkdhe,"], ["afg"], ["  Jumanji The JuJungJunglelengJunglele  "], ["eWEijkdhe,"], ["wBeWEijkdkIHeoThe,orl!"], ["Theijkdhe,"], ["JungJgBkeTheWEijkdkIHeoThe,wolrld!unglele"], ["wBeWEijkdkIwBeWEijHelloThe, ,wolrld!e,orl!HeoThe,orl!"], ["  Jumanji The JungJung  Jumanji The JungJunglele  lele  "], ["HlelloThe,"], ["B,wolrld!jkdhBeTheWEEijkdkIHJungJgBkeTheWEijkdkIHeoThe,wolrld!ungleleThe,e,"], ["  Jumanji  "], ["BeBTheWEijkdkIHeoThe,"], ["  JuBeWEijkdhBeTheWEiijkdabce e "], ["JuBeWEijkdhBeTheWEiijkdabce"], ["BeWEijkdhBeTheWEij  Jumanji The Jungle  kdkIHeoThe,e,"], ["HelloThe,"], ["BeWEihjkdhBeTheWEijkdkIHeoThe,e,"], ["JJungJgwolJumanjinglele"], ["JungBeWE  Jumanji The Jungle  ijjkdhe,Jgunglele"], ["dBeWEijdkI"], ["ijjkdhe,"], ["4123afg4"], ["Hello,abcdecfg world!"], ["JuJukHingJunglHello,elengJunglele"], ["w!BeWEijkdkIwBeWEijHelloThe, ,wolrld!e,orl!HeoThe,orl!"], ["ijjkdheJ,JgunglelJungJung"], ["HelloThe, ,wwolrld!"], ["JungJgHello, world!unglele"], ["kkHi"], ["4123afg4BeWEijkdhe,"], ["JungJung"], ["wBeWEijkdkIwBeWEijHellooThe,"], ["JuJungJunglelengJunglele"], ["JuJungJafgunglelengJunglele"], ["JuBeWEabcdefgijkdhBeTheWEiijkdabce"], ["kHHelloThe, Hwolrld!i"], ["BeTheTheee,"], ["JuBeWEabcdefgijkdhBeTheWEiijkdabceBxSULfV"], ["BeTheTheeekHHelloThe,"], ["wBeWEijkdkIwBeWEijBHellooThe,"], ["Bele"], ["Ju  Jumanji The JungJung  Jumanji The JungJunglele  lele  JungJunglelengJunglele"], ["B,wolrld!jkdhBeTheWEEijkd,kIHeoThe,e,"], ["wworAd"], ["uYzKuQBHee"], ["w!BeWEijkEijHeolloTjhe,"], ["BeWEijkdhBeTheWEijkdabcdefgkIHeoworld!bRZaAdThe,e,"], ["  Jumanji The JungJgunglele cdefg"], ["  Jumanji The JungJu Jumanji The JungJunglele  lele  "], ["BBeTheWEijkdkIHeoThe,eWEijkdhBeTheWEij"], ["lHlelleoThe,"], ["BeTheWEijdkIHeoTheeJungJungllelengJunglele,kHi"], ["BeWhEijikdhBeTheWEijkdabcdefgkIHeoworld!bRZaAdThe,de,"], ["wwBeTheWEijdkIHeoThee,kHiirAd"], ["kk"], ["HelloThe,JuJungJunglelengJunglele"], ["HelloTBeWhEijikdhBeTheWEijkdabcdefgkIHeoworld!bRZaAdThe,de,,wolrld!"], ["  Jumanji The JungabcdecfgJung  Jumanji The JungJunglele  lele  "], ["JuBeWEijkjdhBeTheWEiijkdabce"], ["BeWEiijdkI"], ["  Jumanji The JungJgunglele "], ["  JuBeWEijkdhBeTheWEijkdabcdefgkIHeoThe,e,lell "], ["HelloThe,JuJungJunglelengJukkHiele"]], "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n"}
{"task_id": "Mbpp/632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n", "entry_point": "move_zero", "canonical_solution": "\ndef move_zero(num_list):\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n", "base_input": [[[1, 0, 2, 0, 3, 4]], [[2, 3, 2, 0, 0, 4, 0, 5, 0]], [[0, 1, 0, 1, 1]]], "atol": 0, "plus_input": [[[]], [[2, 3, 4, 0, 0, 7, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0]], [[0, 4, 2, 0, 9, 0, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10]], [[5, 0, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 0]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 7]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 2, 0]], [[5, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 3]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 7, 0]], [[5, 0, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 4, 2, 0, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0]], [[5, 0, 9, 0, 3, 5, 2, 8, 6, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10]], [[2, 3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 3, 7]], [[2, 3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0, 0]], [[5, 9, 0, 3, 0, 2, 8, 8, 7, 0, 7, 0, 3, 7, 0]], [[61, -7, 42, -5, 90, 97]], [[0, 9, 0, 3, 5, 8, 6, 0, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 9, 0, 3, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 9, 0, 3, 0, 7, 0, 0, 0]], [[3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0, 0]], [[0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 6, 3, 4, 5, 6, 7, 8, 9, 10]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10]], [[-5, 0, 9, 0, 3, 5, 2, 8, 6, 12, 7, 0, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 6, 3, 4, 5, 5, 7, 8, 9, 10]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 6, 0]], [[2, 3, 4, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 6, 0, -1]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 1, 7, 1]], [[5, 0, 1, 0, 3, 0, 8, 6, 0, 7, 0, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 0]], [[3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 0, 0]], [[0, 4, 2, 0, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 3, 0]], [[2, 3, 4, 0, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[0, 9, 0, 3, 8, 6, 0, 0, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 12, 0, 0]], [[5, 0, 1, 0, 3, 0, 8, 6, 0, 7, 0, 0, 8]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 7, 0, 2, 0, 0]], [[5, 0, 1, 9, 0, 3, -1, 2, -5, 6, 0, 7, 11, 0, 0]], [[5, 0, 1, 0, 3, 0, 8, 6, 0, 6, 0, 0]], [[2, 3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0, 9]], [[5, 0, 1, 9, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0, 9]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0]], [[0, 4, 2, 0, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0, 3]], [[90, 9, 0, 3, 8, 6, 0, 0, 0]], [[0, 4, 2, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0, 3]], [[2, 3, 4, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0, 5]], [[5, 0, 1, 0, 5, 3, 0, 8, 6, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 61, 3, 4, 5, 6, 7, 9, 7, 6]], [[false, false, true, true, true, true]], [[5, 0, 5, 1, 0, 3, 0, 8, 6, 0, 7, 0, 0, 8]], [[2, 3, 4, 0, 0, 9, 2, 5, 6, 0, 0, 9, 0, 8, 11, 0, 0, 12, 13, 14, 0]], [[1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[2, 3, 4, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 9, 14, 6, 0, -1, 0]], [[5, 11, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 12, 0, 0, 1]], [[5, 1, 9, 0, 3, 0, 8, 6, -1, 7, 0, 5, 5]], [[5, 0, 1, 0, 3, 0, 8, 6, 7, -1, 0, 8]], [[0, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 0, 0, 0, 0, 5, 1, 9, 0, 3, 0, 7, 0, 0, 0, 0]], [[0, 0, -5, 0, 0, 0, 5, 1, 0, 9, 0, 4, 0, 7, 0, 2, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 5, 8, 6, 0, 7, 0, 7, 0, 6]], [[5, 0, 9, 9, 0, 0, 8, 6, 0, -1, 7, 0, 9]], [[false, false, true, false, true, true]], [[5, 0, 1, 9, 0, 3, 0, -1, 2, 8, 6, 0, 7, 11, 0, 0]], [[0, 1, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, -1, 7, 0, 5, 5, 3]], [[5, 9, 0, 3, 3, 0, 2, 8, 6, 0, 7, 0, 3, 7]], [[5, 0, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0, 0]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 12, 13, 15, 0]], [[1, 8, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[8, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 4, 2, 9, 0, 8, 3, 7, 1, 9, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0, 3]], [[0, 1, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 0, 0]], [[0, 4, 2, 0, 0, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0]], [[5, 1, 9, 0, 3, 0, 9, 6, 0, 7, 5]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 7, 0, 1, 0, 1]], [[5, 9, 0, 3, 0, 8, 8, 7, 0, 7, 0, 3, 7, 0]], [[61, -7, 42, -5, 97]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0, -1]], [[27, 27]], [[5, 1, 9, 0, 3, 0, 8, 6, -2, 7, 0, 5, 5]], [[0, 1, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 7, 0, 0]], [[90, 1, 9, 0, 3, 0, 8, 6, -2, 7, 0, 5, 5]], [[2, 9, 4, 0, 0, 9, 2, 5, 5, 6, 0, 9, 0, 8, 11, 0, 0, 12, 13, 14, 0]], [[0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 6, 4, 4, 5, 5, 7, 8, 9, 10]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 1, 2, 3, 4, 5, 27, 6, 7, 9, 10]], [[5, 0, 1, 9, 0, 0, 2, 8, 6, 0, 7, 0, 0]], [[5, 0, 1, 9, 0, 3, 0, 8, 6, 0, 6, 0, 0, 0]], [[0, 0, 0, 0, 5, 0, 9, 0, 3, 7, 0, 2, 0, 0]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 6, 11, 0, 0]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 6, 11, 0, 0, 2]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 11, 0, 0, -1]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 0, 8, 10, 0, 12, 13, 15, 0]], [[5, 9, 3, 0, 2, 8, 8, 7, 0, 7, 0, 3, 0]], [[5, -1, 1, 9, -1, 3, 0, 2, 8, 6, 0, 6, 11, 0, 0, 6]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 0, 1, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, 0, 0, 7, 0]], [[0, 4, 2, 0, 0, 3, 7, 0, 1, 0, 5, 1, 6, 0, 8, 0, 0, 0]]], "contract": "\n    assert isinstance(num_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n"}
{"task_id": "Mbpp/633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n", "entry_point": "pair_xor_Sum", "canonical_solution": "\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \n", "base_input": [[[5, 9, 7, 6], 4], [[7, 3, 5], 3], [[7, 3], 2]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5], 11], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5], 10], [[1, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 5], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 4, 5], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 10], [[1, 2, 3, 2, 1, 2, 3, 2, 4, 5, 4, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 6], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 7], [[1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14], 16], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 16], [[1, 2, 2, 1, 2, 3, 4, 5, 4, 4, 5], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 18], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 2, 1, 2, 3, 17, 4, 5, 4, 5], 1], [[1, 2, 3, 4, 5, 6, 7, 2, 9, 10, 11, 12, 14, 14, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 4, 5], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14, 19], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 15], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 15], [[1, 2, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 1], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 5], [[1, 2, 3, 4, 5, 6, 7, 16, 20, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 16], [[1, 2, 3, 4, 5, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 7, 2], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 1], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 12], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 15], [[1, 2, 4, 5, 6, 7, 8, 9, 10], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 2, 3, 4, 5, 6, 8, 9, 10, 6], 3], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16], 16], [[2, 3, 2, 4, 2, 3, 2, 4, 5, 4, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 6], 6], [[0, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 5], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], 8], [[1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16], 17], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 8], 8], [[1, 2, 2, 1, 2, 3, 4, 5, 4, 3, 5], 8], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15], 20], [[1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15, 1], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 1], 20], [[1, 2, 3, 4, 5, 6, 7, 2, 8, 9, 10, 19, 6], 6], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 17, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 21], [[1, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20], [[1, 4, 2, 3, 4, 5, 6, 7, 8, 2, 9, 10], 11], [[1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6], 3], [[1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 6], 1], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16], 8], [[1, 2, 3, 4, 5, 6, 9, 7, 8, 9, 2, 10], 4], [[1, 2, 3, 4, 5, 6, 13, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 8], 6], [[1, 2, 3, 4, 5, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 7, 2], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 2, 8, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 5, 3, 9, 3, 1, 2, 4, 3, 17, 4, 5, 4, 5], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 10, 12, 13, 14, 15, 16, 17, 5, 19, 10, 20, 15], 2], [[1, 2, 3, 5, 6, 7, 16, 20, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 5, 19, 20, 15, 1], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 3], [[2, 3, 2, 4, 2, 3, 2, 4, 5, 4, 5, 3, 5], 11], [[17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 2, 9, 10, 5], 11], [[1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 7], [[1, 2, 5, 3, 9, 3, 1, 2, 4, 3, 17, 4, 5, 4, 5, 9], 0], [[14, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 6], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16, 16], 15], [[1, 2, 2, 1, 2, 3, 4, 5, 4, 3, 5], 9], [[1, 2, 3, 3, 1, 2, 3, 17, 4, 5, 4, 5], 1], [[1, 4, 2, 3, 4, 5, 6, 4, 8, 9], 3], [[21, 1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 7], [[1, 2, 4, 4, 5, 6, 7, 8, 9, 6, 10, 12, 13, 14, 15, 16, 17, 5, 19, 10, 20, 15], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 16], [[1, 2, 3, 3, 1, 2, 9, 3, 17, 4, 5, 4, 5], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 8], 3], [[1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5], 10], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 2], 11], [[2, 3, 2, 4, 2, 3, 2, 4, 5, 4, 5, 3, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4], [[1, 2, 3, 3, 1, 2, 3, 17, 4, 5, 5], 9], [[1, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 5], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14, 19], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 8], 4], [[17, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4\n"}
{"task_id": "Mbpp/635", "prompt": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n", "entry_point": "heap_sort", "canonical_solution": "\nimport heapq as hq\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n", "base_input": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[25, 35, 22, 85, 14, 65, 75, 25, 58]], [[7, 1, 9, 5]]], "atol": 0, "plus_inputcontract": "\n    assert isinstance(iterable, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n"}
{"task_id": "Mbpp/637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n", "entry_point": "noprofit_noloss", "canonical_solution": "\ndef noprofit_noloss(actual_cost, sale_amount): \n  return actual_cost == sale_amount\n", "base_input": [[1500, 1200], [100, 100], [2000, 5000]], "atol": 0, "plus_input": [[-2000, -5000], [-1500, -1200], [-100, -100], [-5000, -1501], [-1501, -5000], [-5000, -5000], [-1501, -1501], [-2001, -2001], [-1501, -4999], [-2001, -4999], [-2000, -2001], [-2000, -4999], [-101, -100], [-1499, -1501], [-5000, -1500], [-2000, -2000], [-2001, -1501], [-1499, -100], [-100, -2000], [-5000, -4999], [-1501, -100], [-5000, -1499], [-1499, -1499], [-5000, -2001], [-100, -5000], [-1502, -1501], [-1500, -2002], [-2002, -1499], [-5000, -100], [-1200, -1200], [-2002, -2003], [-1500, -2000], [-5001, -5000], [-2002, -1500], [-2001, -2000], [-2000, -102], [-1502, -5001], [-1500, -1501], [-2001, -102], [-2002, -1501], [-100, -1499], [-1502, -2002], [-101, -101], [-1500, -4999], [-2000, -100], [-5001, -5001], [-99, -2003], [-101, -1200], [-1200, -1502], [-98, -2003], [-1500, -2001], [-2001, -2002], [-99, -2004], [-4999, -1501], [-100, -99], [-98, -100], [-99, -2000], [-5000, -1502], [-1199, -1199], [-1200, -5000], [-1501, -1499], [-1499, -99], [-101, -1501], [-2002, -4999], [66.25586492562002, 36.64907257918932], [-1502, -2001], [-102, -2003], [-1502, -1502], [-100, -103], [-98, -98], [-4999, -5000], [-101, -1502], [-1500, -101], [false, true], [-1200, -1199], [-101, -2000], [-2003, -2003], [-1500, false], [-2000, -101], [-101, -1499], [-99, -100], [-101, -1500], [-1500, -1500], [-99, -4999], [-100, -101], [-1201, -5000], [-2001, -4998], [-4999, -2000], [true, -2003], [-1999, -4999], [-1503, -1502], [-4999, -4998], [-4999, -4999], [-99, -99], [-5000, -5001], [-1498, -1498], [-98, -99], [-5000, -2000], [-99, -101], [-1201, false], [34, 34], [-1999, -1999], [-1502, -5000]], "contract": "\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False\n"}
{"task_id": "Mbpp/638", "prompt": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n", "entry_point": "wind_chill", "canonical_solution": "\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\n", "base_input": [[120, 35], [40, 20], [10, 8]], "atol": 0, "plus_input": [[0, 0], [500, -50], [500, 0], [0, 500], [1, 0], [1, 1], [500, 500], [0, 501], [1, -1], [501, -50], [500, 1], [true, false], [501, 501], [false, true], [501, 0], [false, false], [501, 500], [0, 1], [500, 2], [502, 501], [1, 501], [1, 500], [1, -50], [2, 0], [1, -2], [2, 1], [502, -50], [2, -50], [503, 502], [73.15589926015126, 73.15589926015126], [503, 501], [73.15589926015126, 37.688172821388065], [2, -52], [504, 504], [501, 69], [503, 0], [69, 501], [504, 505], [0, 2], [502, 0], [2, 2], [502, 503], [500, 501], [73.99361665758236, 73.15589926015126], [504, 506], [37.688172821388065, 73.15589926015126], [3, -1], [504, 501], [502, 504], [506, 506], [502, 2], [38.526128276032885, 37.688172821388065], [54.35980990509703, 54.35980990509703], [503, 2], [503, -2], [506, 505], [2, 3], [3, -2], [503, 503], [502, 1], [1, 2], [69, 3], [0, 504], [504, 503], [502, 502], [501, -52], [504, 0], [73.99361665758236, 54.35980990509703], [4, -52], [507, 503], [507, 502], [505, 0], [5, -52], [507, 507], [507, 506], [505, 500], [1, 4], [0, 3], [69, -1], [501, 5], [69, 69], [38.526128276032885, 38.526128276032885], [4, -51], [54.35980990509703, 37.688172821388065], [0, -1], [507, 501], [506, 504], [true, true], [504, 2], [74.55187136846823, 73.99361665758236], [500, 505], [507, -52], [3, 501], [499, 500], [500, 502], [3, 500], [501, 499], [503, 4], [5, 5], [504, 5], [73.99361665758236, 73.99361665758236], [499, 1]], "contract": "\n assert isinstance(v, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(t, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6\n"}
{"task_id": "Mbpp/639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n", "entry_point": "sample_nam", "canonical_solution": "\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n", "base_input": [[["sally", "Dylan", "rebecca", "Diana", "Joanne", "keith"]], [["php", "res", "Python", "abcd", "Java", "aaa"]], [["abcd", "Python", "abba", "aba"]]], "atol": 0, "plus_input": [[[]], [["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]], [["Python"]], [["John", "dylan", "!Rebecca", "Diana!", "-", "_"]], [["John", "D@ve", "MarY", "Linda", "Zach!", "@lex"]], [["Elephant", "l!ly", "&bbie", "T@ger", "D@lion", "Rh!no"]], [["%lice", "^ob", "&arl", "*andy", "$ugene", "Oscar"]], [["@my", "B@ob", "$ara", "Mike", "S!mon", "L!sa"]], [["Oscar", "$ugene", "D@ve!", "%lice", "^ob"]], [["T@ger", "Elephant", "l!ly", "$ugene", "Rh!no"]], [["John", "!Rebecca", "@lex", "Zach!", "&bbie"]], [["John", "dylan", "L!sa", "!Rebecca", "Diana!", "-", "_"]], [["John", "dylan", "*andy", "!Rebecca", "Diana!", "-", "_"]], [["John", "dylan", "*andy", "!Rebecca", "Diana!", "-", "__", "Joh*andyn", "_"]], [["John", "dylan", "L!sa", "!Rebecca", "Diana!", "_", "John"]], [["&bbie", "H", "tTftc", "IJKLMnOp", "IJKLMnOp", "HYAOjA"]], [["!Rebecca", "dylan", "!Rebecca", "Diana!", "-", "_"]], [["John", "D@ve", "Linda", "Zach!", "@lex"]], [["D@v@e!", "Oscar", "$ug$ene", "D@ve!", "%lice", "^ob", "%lice"]], [["Oscar", "$ugene", "D@ve!", "%lice", "^ob", "Oscar"]], [["John", "D@ve", "MarY", "D@veZach!", "Linda", "Zach!", "@lex"]], [["John", "dylan", "Diana!", "-", "_"]], [["John", "xyz", "Diana!", "-", "_"]], [["!Rebecca", "dylan", "Diana!", "-"]], [["$ugene", "D@ve!", "^ob"]], [["John", "dylan", "*andy", "Joh*andJyn", "!Rebecca", "Diana!", "-", "__", "Joh*andyn", "_"]], [["dylan", "!Rebecca", "&arl", "DianaDiana!!", "-", "_"]], [["John", "dylan", "*anPythondy", "Joh*andJyn", "!Rebecca", "Diana!", "-", "__", "DianaDiana!!", "Joh*andyn", "_"]], [["T@ger", "Elephant", "$ugene", "Rh!no", "_"]], [["John", "L!sa", "!Rebecca", "Diana!", "__", "John"]], [["D@v@e!", "Oscrar", "$ug$ene", "D@ve!", "%lice", "^ob", "%lice"]], [["D@veZach!", "Python", "jdps", "Zach!"]], [["John", "dylan", "!RebeccJohna", "L!sa", "!Rebecca", "Diana!", "-", "_"]], [["l!ly", "&bbie", "T@ger", "D@lion", "Rh!no"]], [["John", "dylan", "!RebeccJohna", "L!sa", "&arl", "!Rebecca", "Diana!", "-", "_"]], [["Oscar", "$ugene", "D@ve!", "%lice", "D@veZach!", "^ob", "Oscar", "D@veZach!"]], [["!Rebecca", "dylan", "Diana!", "-", "dylan"]], [["fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]], [["!Rebecca", "dylan", "Diana!", "$ugene", "-"]], [["John", "xyz", "Diana!", "-", "_", "Diana!"]], [["&bbie", "H", "tTftc", "IJKLMnOp", "IJKLMnOp", "HYAAOjA"]], [["John", "Johon", "dylan", "Diana!", "-", "_"]], [["xyz", "Diana!", "-", "_", "Diana!", "Diana!"]], [["Elephant", "l!ly", "&bbie", "T@ger", "D@lion", "Oscrar", "Rh!no"]], [["dylan", "L!sa", "!Rebecca", "Diana!", "!!Rebecca", "-", "_", "-"]], [["Oscar", "D@ve!!", "$ugene", "D@ve!", "%lice", "^ob"]], [["!Rebecca", "dylan", "Diana!", "-", "-"]], [["fGH", "IJKLMnOp", "qrs", "TUVW", "xyz", "TUVW"]], [["!!Rebe!cca", "!Rebecca", "dylan", "Diana!", "$ugene", "%lice"]], [["S!mon", "Diana!", "-", "_", "Diana!", "Diana!"]], [["John", "@lex", "Zach!", "Linda"]], [["Oscar", "D@ve!", "%lice", "D@veZach!", "^ob", "%liD@vevZach!ce", "Oscar", "%liD@veZach!ce", "D@veZach!"]], [["%lice", "^ob", "&arl", "OscD@veZach!ar", "*andy", "$ugene", "Oscar"]], [["John", "L!sa", "!Rebecca", "Zach!", "__", "John"]], [["%lice", "^ob", "&arl", "OscD@veZach!ar", "*andy", "$ugHene", "Oscar"]], [["John", "xyz", "Diana!", "-", "_", "xyz", "John"]], [["John", "@lex", "MarY", "Zach!", "Linda"]], [["John", "D@ve", "MarY", "D@veZach!", "-", "Linda", "Zach!", "@lex"]], [["dylan", "!Rebecca", "&arl", "-", "!!Rebecca", "_"]], [["Oscar", "D@ve!!", "$ugene", "D@ve!", "%lice", "^ob", "$ugene"]], [["^ob", "&arl", "OscD@vtTftceZach!ar", "*andy", "$ugene", "Oscar", "Oscar"]], [["$ugene", "D@ve!", "H^ob"]], [["!Rebecca", "Oscrar", "dylan", "Diana!", "-"]], [["dylan", "L!sa", "!Rebecca", "S!mon", "Diana!", "!!Rebecca", "-", "_", "-"]], [["Oscar", "D@ve!!", "$ugene", "D@ve!", "%lice", "^ob", "^ob"]], [["xyz", "Diana!", "-", "_", "Diana!", "D@ve!", "Diana!"]], [["Elephant", "l!ly", "&bbiMikee", "T@ger", "D@lion", "Rh!no"]], [["John", "D@ve", "MarY", "Linda", "Zach!", "@lex", "D@ve"]], [["John", "D@ve", "Linda", "aZach!", "@lex", "D@ve"]], [["John", "D@ve", "MarY", "Linda", "Zach!", "@lex", "D@ve", "D@ve"]], [["MarY", "!Rebecca", "&arl", "-", "!!Rebecca", "_", "&arl"]], [["John", "dylan", "*andy", "Joh*andJyn", "!Rebecca", "Diana!", "-", "__", "Joh*andyn", "Rh!no-", "_"]], [["Oscar", "$ugene", "%lice", "^ob", "Oscar"]], [["John", "L!sa", "!Rebecca", "Diana!", "__", "John", "John"]], [["dylan", "!Rebecca", "&arl", "DianaDiana!!", "TUVW-", "_"]], [["D@v@e!", "Oscar", "$ug$ene", "D@ve!", "%lice", "^ob", "%lice", "D@ve!"]], [["D@v@e!", "HYAAOjA", "Oscar", "$ug$ene", "D@ve!", "%lice", "^ob", "%lice", "D@ve!"]], [["!Rebecca", "dylan", "Diana!", "dyla*andyn", "-", "dylan"]], [["T@ger", "Elephant", "$ugene", "Rh!no", "_", "$ugene"]], [["$ugene", "D@ve!", "%lice", "$$ugene", "^ob", "%lice"]], [["John", "D@ve", "Linda", "H", "@lex", "D@ve"]], [["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz", "qrs"]], [["!Rebecca", "&arl", "-", "!!Rebecca", "_", "&arl"]], [["OOscar", "Oscar", "$uegene", "D@ve!", "%lice", "^ob", "Oscar"]], [["John", "D@ve", "Linda", "H", "@lex"]], [["John", "!Rebecca", "Zach!", "&bbie"]], [["n$ugene", "T@ger", "Elephant", "l!ly", "$ugene"]], [["John", "dylan", "!RebeccJohna", "L!sa", "&arl", "!Rebecca", "-", "_"]], [["xyz", "Diana!", "-", "_", "Diana!", "H^ob", "Diana!"]], [["John", "dylan", "L!sa", "!Rebecca", "Diana!", "__", "John"]], [["!Rebecca", "dylan", "Diana!", "dylan"]], [["$ara", "Oscar", "$ugene", "%lice", "^ob", "Oscar", "$ugene"]], [["John", "dylan", "*andy", "!Rebecca", "Diana!", "-", "_", "dylan"]], [["John", "Johon", "dylan", "Diana!", "-", "_", "_", "-"]], [["^ob", "&arl", "OscD@vtTftceZach!ar", "*andy", "$ugene", "Oscar", "D@lion"]], [["John", "dylan", "*andy", "!Rebecca", "Diana!", "__", "-", "_", "dylan"]], [["John", "dylan", "*andy", "y*andy", "!Rebecca", "Diana!", "-", "_", "__", "dylan", "-"]], [["fGH", "IJKLMnOp", "qrs", "Pythonxyz", "Mike", "xyz", "TUVW"]], [["&bbie", "!Rebecca", "@lex", "Zach!", "&bbie", "!Rebecca"]], [["John", "L!sa", "!Rebecca", "L!s", "Zach!", "__", "John"]], [["^ob", "&arl", "OscD@veZach!ar", "*andy", "$ugene", "Oscar"]], [["John", "dylan", "!RebeccJohna", "LL!sa", "&arl", "!Rebecca", "Diana!", "-", "_"]], [["MarY", "!Rebecca", "&arl", "-", "!!Rebecca", "_", "&arl", "_"]], [["AbCdE", "fGH", "IJKLMnOp", "Zach!", "qrs", "TUVW", "xyz"]], [["John", "Johon", "dylan", "Diana!", "-", "_", "_", "-", "_", "Diana!"]], [["John", "dylan", "!Rebecca", "-", "_"]], [["fGH", "IJKLMnOp", "Pythonxyz", "Mike", "dyla*andyn", "TUVW"]], [["Pythonxyz", "John", "D@ve", "MarY", "D@veZach!", "Linda", "Zach!", "@lex"]], [["Elephant", "l!ly", "&bbie", "Elephalnt", "T@ger", "D@lion", "D@Dlion", "Rh!no"]], [["fGH", "IaZach!JKLMnOp", "qrs", "TUVW", "xyz"]], [["John", "dylan", "!Rebecca", "Diana!", "-", "Pythonxyz", "!Rebecca"]]], "contract": "\n  assert isinstance(sample_names, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n"}
{"task_id": "Mbpp/640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\n", "entry_point": "remove_parenthesis", "canonical_solution": "\nimport re\ndef remove_parenthesis(string):\n    return re.sub(r\"\\([^)]+\\)\", \"\", string)\n", "base_input": [["python (chrome)"], ["string(.abc)"], ["alpha(num)"]], "atol": 0, "plus_input": [[""], ["no parentheses"], ["no"], ["nnoo"], ["parentheses"], ["no pno parenthesesarnoentheses"], ["no pno nparenthesesarnoentheses"], ["no pno parenthesesaernoentheses"], ["nparenthesesarnoentheses"], ["nes"], ["parenthesesarnoenthenparenthesesarnoenthesesses"], ["no pno paparenthesesarnoenthenparenthesesarnoenthesessesrenthesesaernoentheses"], ["parenthesesaernoentheses"], ["ono"], ["parenthesesarnoenthenparenthesesarnoenthesess"], ["paparenthesesarnoenthesesntshpnoeseparenthesesarnoenthenparenthesesarnoenthesessess"], ["no psno nparenthesesarnoentheses"], ["parenthesesarnoenthenparenthesesarnoenthesparenthesesaernoenthesesesses"], ["no pno parenthesesarnoenthehses"], ["paparenthesesarnoenthesesntshpnoeseparenthonoesesarnoenthenparenthesesarnoenthesessess"], ["no pno parenthesno parenthesesesarnoentheses"], ["no pno parenthesesarnoenthehsno pno nparenthesesarnoentheseses"], ["nparenthesesarnoenno psno npasrenthess"], ["parenthesesarnoentheses"], ["FDChd"], ["nesnparenthesesarnoentheses"], ["paparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenparenthesesarnoenthesessess"], ["nesnparenthesesarnoentheparenthesesesarnoentheses"], ["paparenthesesarnoenthesesntshpnoeseparno psno nparenthesesarnoenthesesenthonoesesarnoenthenparenthesesarnoenthesessess"], ["parenthesesarnoenthenpnarenthesesarnoenthesess"], ["no pno parenthesesarnoenthehsno pno nparenthenparenthesesarnoenno psno npasrenthesssesarnoentheseses"], ["nparenthesesarnoenno"], ["paparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenparentno pno parenthesesarnoenthehseshesesarnoenthesessess"], ["nparenthesesno parenthesesarnoentheses"], ["paparenthesesarnoenthenparenthesesarnoenthesessesrenthesesaernoentheses"], ["no pno paparenthesesarnoenthenparenthesesarnoenthesessesrenthesesaernoeno psno nparenthesesarnoenthesesnteheses"], ["pearentheses"], ["nparenthesetheses"], ["parenthesesaernoesntheses"], ["npasrenthess"], ["paparenthesesarnoenthesesntshpnoeseparrenthonoesesarnoenthenparenthesesarnoenthesessess"], ["parenthesesaernoenno pno parenthesno parenthesesesarnoenthesesheses"], ["nesnparenthesesarnoentheparentheseseesarnoentheses"], ["nparenthesesarnoennno"], ["no pno parenthesesarnoenthehsnop pno nparenthenparenthesesarnoenno psno npasrenthesssesarnoentheseses"], ["no pno parenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpanthesessessarnoenthehses"], ["parenthesesaernoenno pnos parenthesno parenthesesesarnoenthesesheses"], ["pno"], ["no pno npasrenthessthehses"], ["no pno parenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpantheshessessarnoenthehses"], ["parenthesesaernoentheparenthesesarnoenthenparenthesesarnoenthesess"], ["npares"], ["parenthesesaernoentheparenthesesarnoenthenparnesnparenthesesarnoentheparentheseseesarnoenthesesenthesesarnoenthesess"], ["no pno parenthesesanpasrenthesssesarnoenthesesesrnoenthehses"], ["no pno parenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesas"], ["parenthesesarnoenthenparenthesesarnoentheses"], ["nparenthesesarnoenthenpasrenthessses"], ["nparenthenparenthesesarnoenno"], ["paparenthesesarnonparenthesesarnoenthesesntehesesenthesesntshpnoeseparenthesesarnoenthenparenthesesarnoenthesessess"], ["parenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpanthesessessarnoenthehses"], ["parenrthesesaerparenthesesesarnoentheseshesesnoesntheses"], ["paparenthesesarnonparenthesesarnoenthesesntehesesenthesesntshpnoeseparenthesesarnoenthenparenthesesarnoentheessess"], ["no pno parenthoenthesesesrnparenthesesesarnoenthesesheseshehses"], ["pno pno nparenthesesarnoenthesesno"], ["nparenthenparenthesesarnno psno nparenthesesarnoenthesesoenno"], ["parenthesno"], ["no pno npasparenthesesarnoentheses"], ["paparenthesesarnonparenthesenesnparenthesesarnoentheparenthesesesarnoenthesessarnoenthesesntehesesenthesesntshpnoeseparenthesesarnoenthenparenthesesarnoenthesessess"], ["onparenthesesesarnoentheseso"], ["no pno parenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpanthesessessarnoenthhses"], ["nparenthesesarnoenthesesoenno"], ["parenthesesaernoentheparenthesesarnoenthenparenthesesarnoenthes"], ["paparenthesesarnonparenthesenesnparenthesesarnoerntheparenthesesesarnoenthesessarnoenthesesntehesnesenthesesntshpnoeseparenthesesarnoenthenparenthesesarnoenthesessess"], ["parenthesesaernoentheparenthesesarnoenthenesnparenthesesarnoentheparenthesesesarnoenthesesnparenthesesarnoenthesess"], ["paparenthesoparenthesesesarnoentheseshesesesarnoenthesesntshpnoeseparenthonoesesarnoenthenparentno pno parenthesesarnoenthehseshesesarnoenthesessess"], ["nparenthesesarnoenno psno npnparenthesesarnoenthenpasrenthesssesasrenthess"], ["nparenthenpar enthesesarnno psno nparenthesesarnoenthesesoenno"], ["no pno npasparpaparenthesesarnoenthenparenthesesarnoenthesessesrenthesesaernoentheseses"], ["paparenthesesarnoenthesesntshpnoeseparenthonono pno parenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpanthesessessarnoenthehsesesesarnoenthenparenthesesarnoenthesessess"], ["uxFxpE"], ["nparentahesesarnoenno"], ["parenthesespapearenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthrenpanthesessessarnoenthehses"], ["nparenthesesarnoenno psno npnparenthesesarnoenthenpasrenthesspaparenthesesarnoenthesesntshpnoeseparenthonoesesarnoenthenparenthesesarnoenthesessesssesasrenthess"], ["parennparenthesesarnoenthesesntehesesthesesarnoentheses"], ["parenthesespaparethesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpanthesessessarnoenthehses"], ["nnparenthenpar enthesesarnno psno nparenthesesarnoenthesesoenno"], ["no parentheeses"], ["nparenthesesarnoenthesesenthonoesesarnoenthenparenthesesarnoenthesessess"], ["enthesesarnno"], ["nparenthesesaparenthesesanpasrenthesssesarnoenthesesesrnoenthehsesrnoentheses"], ["n"], ["paparenthesesarnonrparenthesenesnparenthesesarnoerntheparenthesesesarnoenthesessarnoenthesesntehesnesenthesesntshpnoeseparenthesesarnoenthenparenthesesarnoenthesessess"], ["naesnparenthespaparenthesesarnoenthesesntshpnoeseparno psno nparenthesesarnoenthesesenthonoesesarnoenthenparenthesesarnoenthesessessesarnoentheses"], ["nnooo"], ["parenthesesarnoenthenparennparenthesesno parenthesesarnoenthesesthesesarnoenthesparenthesesaernoenthesesesses"], ["npao"], ["sBZKydidJ"], ["dsBZKydidJ"], ["nparenthesesarnoenthesesoenparenthesesarnoenthehsnono"], ["parenthesparenthesespaparenthesoesarnoenthesesntshpnoeseparenthonoesesarnoenthenpanthesessessarnoenthehsesesesarnoenthenparenthesesarnoenthesessessesaernoentheses"], ["nnparenthesesaernoenthesesoo"], ["parenthesesanpasrenthesssesarnoenthesesesrnoenthehses"]], "contract": "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_parenthesis(\"python (chrome)\")==\"python \"\nassert remove_parenthesis(\"string(.abc)\")==\"string\"\nassert remove_parenthesis(\"alpha(num)\")==\"alpha\"\n"}
{"task_id": "Mbpp/641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n", "entry_point": "is_nonagonal", "canonical_solution": "\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \n", "base_input": [[10], [15], [18]], "atol": 0, "plus_input": [[1000000], [0], [999999], [1000001], [1], [999998], [999997], [2], [1000002], [false], [true], [80], [3], [81], [999996], [1000003], [1000004], [79], [82], [1000005], [78], [999995], [68], [1000006], [83], [84], [67], [77], [999994], [4], [999993], [1000007], [999992], [61], [1000008], [99], [69], [98], [60], [999991], [85], [66], [100], [1000009], [86], [53], [87], [88], [97], [54], [89], [23], [76], [90], [64], [5], [62], [999990], [22], [51], [999989], [65], [12], [70], [71], [52], [63], [91], [50], [11], [55], [74], [56], [101], [57], [20], [27], [73], [26], [28], [25], [21], [13], [10], [29], [58], [30], [1000010], [14], [19], [9], [49], [31], [48], [18], [1000011], [6], [24], [92], [59], [75], [72]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089\n"}
{"task_id": "Mbpp/643", "prompt": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n", "entry_point": "text_match_wordz_middle", "canonical_solution": "\nimport re\ndef text_match_wordz_middle(text):\n\treturn re.search(r'\\Bz\\B',  text) is not None\n", "base_input": [["pythonzabc."], ["zxyabc."], ["  lang  ."]], "atol": 0, "plus_input": [["zzzxyabczzz"], ["zzzxyabczzz xxzzxxyz zzzz abczyz baaz azzbzz"], [""], ["baaz"], ["zzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzz"], ["zzzz"], ["zzzzzzzxyabczzz"], ["zzzzbaaz"], ["xxzzxxyz"], ["zzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyyz baaz azzbzz"], ["zzzzzzzxyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzz"], ["azzbzzz"], ["baabaazz"], ["yabczyyz"], ["gfzzzzzzzxyabczzzzzxyabczzz"], ["zzzzzabczyz"], ["yz"], ["baabazazz"], ["zzzzzzzxyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczyz baaz azzbzzz"], ["zzzzxzzxyabczyz"], ["zzzxyabczzz xxzzxxyz zzzzczxyabczzzzz abczyz baaz azzbzz"], ["zzzxyabczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzz"], ["zzzxyabczzz xxzzxxyz zzzzzxyabzzzzzzzxzyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzczzzzz abczyz baaz azzbzz"], ["azazzbzzzczzzzzzbzzz"], ["azabzzz"], ["abczyyz"], ["yabczyyzzzxyabczzzz"], ["zzzzzzzxyabczyyzzzxyabczzzzyabczzz"], ["zzzzzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczzzxyabczyyzzzxyabczzzzyabczzz"], ["xxzzxxyzzzzzzxyabczzzzz"], ["yabczyyzzzxyxabczzzz"], ["yabczyyzzxxzzxxyzzxyabczzzz"], ["gfzzzzzzz"], ["yabczyyabczzzz"], ["yabczzxxyzzxyabczz"], ["zzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzz"], ["zzzzazzbzzzczzzzz"], ["azbczyyz"], ["zzzzzzz"], ["zzzzzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczzzxyzabczyyzzzxyabczzzzyabczzz"], ["zzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzz"], ["azzbzzzzzxyabczzz xxzzxxyz zzzzzxyabzzzzzzzxzyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzczzzzz abczyz baaz azzbzzz"], ["yabczzzzczxyabczzzzzzzxyabczzzzyyzzxxzzxxyzzxyabczzzz"], ["zzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczzz abczyz baaz azzbzz"], ["azzbzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczzz"], ["zzzxyabczzz xxzzxxyz zzzz xxzzxxyzzzzzzxyabczzzzzabczyz baaz azzbzz"], ["zzzz zzzxyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzz"], ["yzz"], ["zzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyyz baaxz azzbzz"], ["azzbzzzzzxyabczzz xxzzxxyz zzzzzxyabzzzzzzzxzyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzczzzzz abczyz baaz azzbzzzaabaazz"], ["zzzz zzzxyabczzzzzxyabczzabczzzzz abczyz baaz azzbzzz"], ["zzzxyabczzz xxzzxxyz zzzzczxyzzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzzabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zyzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzz"], ["azzbzzzzzxyabczzz xxzzxxyz zzzzzxyabzazzzzzzxzyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzczzzzz abczyz baaz azzbzzzaabaazz"], ["yabczyyzzzxybxabczzzz"], ["zzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczzz abczyz baaz azzbzz"], ["zzzzazzbzzzczzzzzzzzz"], ["yabczzxxyzzxy"], ["azbczzzzxzzxyabczyzyz"], ["zzzzazzbzbaazzzczzzzz"], ["zzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxzyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzz"], ["zzzxyabczzz xxzzxxyz zzzzczxyazzbzzzzzxyabczzzabczzzzz abczyz baaz azzbzz"], ["azazzbzzzczzzzzzbzzzzzzczxyabczzzzzzzxyabxczzz"], ["zzzzz zzzxyabczzzxyabczzzzzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzz"], ["zzzz zzzxyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzaaz azzbzzz"], ["zzzzzzzzzzzxyabczzzzzxyabczzz zzzxyabczzzzzxyazabzzzabczzz xxzzxxyz zzzzzxyabczzzaaz azzbzzz"], ["azazzbzzzczzzzazzbzzzzzzczxyazzzzzzzxyabczzzzzzzxyabxczzz"], ["gfzzzzzzzzxyabczzz xxzzxxyz zzzzczxyzzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzzabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zyzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzzzz"], ["yabczyyabczzzzxxzzxxyz"], ["yabczzzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzczxyabczzzzzzzxyabczzzzyyzzxxzzxxyzzxyabczzzz"], ["zzzzzzxyabczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz"], ["yabczzxxxyzzxy"], ["zzzzzzzz"], ["zzzxyazzzzzzzzbczzz"], ["zzzzzxyabczzzzz"], ["zzzxyabczzz xxzzxxzzzxyabczzz xxzzxxyz zzzzczxyzzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzzabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zyzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzzxyabczzzzz abczyyz baaxz azzbzz"], ["zzzxyabczzz xxzzxxyz zzzzczzzzzczxyabczzzzzzzxyabczzzxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczzz abczyz baaz azzbzz"], ["azazzbzzzczzzzazzbzzzzzzzzzzzxyabczzzzzxyabczzz zzzxyabczzzzzxyazabzzzabczzz xxzzxxyz zzzzzxyabczzzaaz azzbzzzzzzzzzczxyazzzzzzzxyabczzzzzzzxyabxzzz"], ["zzzzz zzzxyabczzzxyabczzzzzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzz"], ["azzbzzzzzzzzxyabzzzzzzzxzyabczzzzzxyabczyzzzxyabczzzyzzxxzzxxyzzxyabczzzzyabczzz"], ["yabczzzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzczxyabczzzzzzzxyayabczyyzxyzzxyabczzzz"], ["zzzzzzzzzzzzzxyabczzzzz"], ["yyzzz"], ["xxzzzxzxyz"], ["zzzzazzbzzzczzzzzzzz"], ["zzzzazzbzzzxyabczzz xxzzxxyz zzzzczxyabczzzzzzzxyabxczzz xxzzxxyzzzzzzxyabczzzzz zzzzczxyabczzzzz abczyz baaz azzbzzz abczyz baaz azzbzzzzzczzzzzzzzz"], ["azzbzzzzzxyabczzz xxzzxxyz zzzzzxyabzzzzzzzxzyabczzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzzbzzzczzzzz abczyz baaz azzbzzzaabaazz"], ["zzzzzxyabczzzaaz"], ["zzzzazzbzzzxyabczzz"], ["yyzzzzzzazzbzzzczzzzzz"], ["gfzzzzczxyzzzxyabczzzzzzzzzz"], ["azzzzzz zzzxyabczzzxyabczzzzzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzz"], ["azazzbzzzczzzzazzbzzzzzzzczxyazzzzzzzxyabczzzzzzzxyabxczzz"], ["yyzzzzzzzzabczyz"], ["zzzzzz"], ["yyyzzz"], ["zzzzzxyabczyz"], ["zzzzz"], ["azzbzzzaabaazz"], ["azazzbzzzczzzzazzbzzzzzzzzzzzxyabczzzzzxyabczzz"], ["yabczzzzz zzzxyabczzzxyabczzzzzzzzxyabczzz xxzzxxyz zzzzzxyabczzzzz abczyz baaz azzbzzzxy"], ["zzzzzzzzzzxyabczzzaaz"], ["yabyabczyyzzzxyxabczzzzczyyzzzxybxabczzzz"], ["zzzzzxzzxyabczyz"]], "contract": "\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False\n"}
{"task_id": "Mbpp/644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n", "entry_point": "reverse_Array_Upto_K", "canonical_solution": "\ndef reverse_Array_Upto_K(input, k): \n  return input[k-1::-1] + input[k:]\n", "base_input": [[[1, 2, 3, 4, 5, 6], 4], [[4, 5, 6, 7], 2], [[9, 8, 7, 6, 5], 3]], "atol": 0, "plus_input": [[[6, 9, 2, 1, 5, 3], 4], [["apple", "banana", "cherry", "date"], 3], [[6, 9, 2, 1, 5, 3], 5], [["apple", "cherry", "date"], 3], [["apple", "banana", "cherry", "date"], 4], [["apple", "banana", "cherry", "cherry", "date"], 4], [[6, 9, 2, 1, 5, 3, 2], 4], [[9, 2, 1, 5, 3], 4], [[6, 9, 2, 5, 3], 5], [[9, 2, 9, 1, 5, 3], 4], [["apple", "banana", "cherry", "date"], 1], [[9, 2, 9, 1, 5, 3], 1], [["apple", "cherry", "deate"], 3], [[6, 9, 2, 1, 5, 3], 3], [["apple", "cherrry", "banana", "cherry", "date"], 4], [[6, 9, 2, 1, 5, 3], 2], [[6, 9, 2, 5, 1, 5, 3, 2], 4], [[9, 2, 9, 1, 5, 3, 9], 1], [[6, 9, 2, 1, 5, 3], 1], [[9, 2, 1, 5, 3], 1], [["apple", "cherry", "deate"], 2], [["apple", "cherry", "date"], 1], [["applpe", "apple", "cherrry", "banana", "cherry", "date", "applpe"], 4], [["apple", "cherry", "cherry"], 3], [["apple", "cherry", "cherry", "cherry"], 3], [["apple", "cherrry", "banana", "date"], 4], [[9, 2, 9, 1, 5, 3, 9, 5], 1], [[9, 2, 9, 1, 1, 3, 9, 5], 1], [["apple", "cherry", "cherry", "date"], 1], [["apple", "cherry", "cherry", "cherry"], 4], [[9, 2, 10, 3, 9, 1, 5, 3, 9], 1], [["cherry", "cherry", "cherry"], 3], [[6, 2, 1, 5, 3], 4], [["apple", "banana", "cherrry", "cherry", "date"], 4], [[6, 9, 2, 5, 3], 2], [[9, 2, 9, 1, 1, 3, 9], 1], [[9, 2, 1, 5, 3, 2], 1], [[6, 9, 2, 5, 4, 1, 5, 3, 2], 4], [[6, 2, 1, 6, 5, 3], 4], [[9, 2, 9, 1, 5, 3, 9, 5], 3], [[9, 2, 9, 1, 1, 3, 9], 2], [[9, 2, 10, 3, 9, 1, 5, 3, 9], 2], [[6, 9, 2, 1, 3, 5, 3], 5], [[4, 6, 9, 2, 1, 3, 5, 3], 5], [["apple", "banana", "cherry", "date"], 2], [[5, 2, 1, 6, 5, 3], 5], [[6, 9, 2, 1, 5, 3, 2], 3], [[9, 2, 10, 3, 9, 1, 5, 4, 9], 2], [["apple", "banana", "cherry", "date", "date"], 3], [[9, 2, 9, 1, 1, 4, 9], 1], [[9, 2, 9, 1, 5, 3], 3], [["apple", "banana", "cherry", "date", "date"], 4], [[9, 2, 2, 9, 1, 5, 3], 1], [[5, 2, 1, 5, 3], 5], [[9, 2, 1, 5, 3], 3], [[6, 2, 1, 5, 3, 2], 4], [[9, 2, 9, 1, 1, 1, 4, 9], 1], [[9, 3, 2, 9, 1, 1, 3, 9], 2], [["apple", "banana", "cherrry", "cherry", "date"], 1], [["cdatey", "apple", "cherry", "deate"], 3], [["apple", "cherrry", "banana", "cherry", "date"], 1], [[9, 2, 10, 3, 9, 1, 5, 4, 9], 3], [[9, 2, 2, 9, 3, 1, 5, 3], 1], [[6, 2, 1, 5, 9, 3], 5], [[6, 9, 2, 1, 5, 3, 2], 6], [["apple", "cherrry", "banana", "ccdateyherry", "date"], 4], [["applpe", "apple", "cherrry", "banana", "cherry", "date", "applpe", "applpe"], 4], [["cdatey", "banana", "cherry", "date"], 4], [[6, 2, 5, 3, 2], 4], [[6, 9, 2, 5, 3], 1], [[6, 9, 7, 2, 1, 5, 3, 7], 4], [["apple", "cherry", "cherry", "aepple", "date"], 1], [[6, 5, 3, 2], 4], [[9, 4, 2, 6, 1, 5, 3, 2], 3], [[9, 2, 1, 5, 3, 9], 4], [["apple", "banana", "cherry", "date", "banana"], 1], [["cdatey", "apple", "cherry", "deate"], 4], [[1, 2, 9, 1, 1, 4, 9], 1], [[6, 9, 2, 1, 5, 3], 6], [[1, 2, 5, 9, 1, 1, 4, 9], 1], [["aepple", "apple", "banana", "cherrry", "cherry", "date"], 1], [[9, 2, 9, 1, 5, 3], 5], [[10, 2, 9, 1, 5, 3, 9], 1], [[9, 2, 5, 3], 3], [[1, 2, 5, 9, 1, 1, 4, 9, 9, 1], 1], [[3, 6, 9, 2, 1, 5, 3], 4], [[2, 9, 1, 5, 3, 9, 5], 3], [[3, 9, 2, 10, 3, 9, 1, 5, 3, 9], 2], [["appple", "cdatey", "apple", "cherry", "deate"], 3], [[2, 1, 9, 1, 1, 4, 9], 1], [[2, 9, 1, 5, 3, 9, 2], 3], [["apple", "banana", "cherry", "ddate"], 1], [[9, 2, 10, 3, 9, 1, 5, 4, 9], 4], [[2, 1, 9, 1, 1, 4, 9], 5], [[4, 6, 9, 2, 1, 3, 5, 3, 2], 5], [["cherry", "cherry", "y", "cherrry"], 3], [[2, 1, 9, 10, 1, 1, 4, 9], 1], [[6, 9, 1, 5, 3, 2], 3], [["apple", "banana", "cherry", "date", "date"], 1], [[6, 1, 6, 5, 3], 4], [[6, 2, 1, 5, 9, 3, 3], 5], [[9, 2, 1, 5, 3], 2]], "contract": "\n  assert isinstance(input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 < k <= len(input), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n"}
{"task_id": "Mbpp/720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n", "entry_point": "add_dict_to_tuple", "canonical_solution": "\ndef add_dict_to_tuple(test_tup, test_dict):\n  return test_tup + (test_dict, )\n", "base_input": [[[4, 5, 6], {"MSAM": 1, "is": 2, "best": 3}], [[1, 2, 3], {"UTS": 2, "is": 3, "Worst": 4}], [[8, 9, 10], {"POS": 3, "is": 4, "Okay": 5}]], "atol": 0, "plus_input": [[[], {}], [[1, "abc", [1, 2, 3]], {"key": "value"}], [[1, "abc", [1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 5, 6]}}], [[7, {"a": 1, "b": 2}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}}], [[10, {"nested_dict": {"inner_key": [1, 2, 3]}}, [4, "def"]], {"key": "value"}], [[10, {"nested_dict": {"inner_key": [1, 2, 3]}}, [4, "def"]], {}], [[1, [1, 2, 3]], {"key": "value"}], [["ceof", "SQQ", "quQcknOYU", "inner_key", "inner_key", "cYnIa", "AFTEHcLG", "ORUcTd"], {}], [[7, {"a": 1, "b": 2}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[10, {}], {"key": "value"}], [[10, {"2": false, "31": true, "3": false, "-11": true, "10": true}, {"5": "AFTEHcLG", "-13": "ORUcTd", "4": "EDVGrA", "-83": ""}, {}], {}], [[1, "abc", "aabc", [1, 2, 3]], {"key": "value"}], [[1, [1, 2, 3]], {}], [[1, "abc", [1, 2, 3], [1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 5, 6]}, "kekeyy": "key"}], [[1, "abc", [1, 2, 3]], {}], [[10, {"2": false, "31": true, "3": false, "-11": true, "10": true}, {"5": "AFTEHcLG", "-13": "ORUcTd", "4": "EDVGrA", "-83": ""}, {}], {"-62": -83, "0": 96}], [[7, {"a": 1, "b": 2}, 6, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[1, [1, 2, 3]], {"-57.46866221421249": "cAEX", "91.49834284610671": -48.93563897978312, "99.0567328929331": "a", "-31.270276764825923": "xyz", "-62.470824790640236": -98.59549206630514, "-99.78882063540917": {"-13": 31, "80": -76, "6": 8, "10": -23, "32": -13, "4": 96}, "33.71452942222891": [-13, 31, -11, 83, -47, 96, -73], "86.29685027502393": 3, "-56.87579256561883": 85}], [[10, {}, {}], {"key": "value", "kaabcey": "vaabclue", "kaab": "cYnIa", "kaabcenested_dicty": "cYnnIa"}], [[1, "abc", [1, 2, 3], [1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 5, 6]}, "kekeyy": "key", "keyy": "cAEX"}], [[10, {"2": false, "31": true, "3": false, "-11": true, "10": true}, {"5": "AFTEHcLG", "-13": "ORUcTd", "4": "EDVGrA", "-83": ""}, {}, 10], {"-51": -26.064919618292407, "5": -62.470824790640236, "82": -43.880983848693766, "3": -57.46866221421249, "8": -98.59549206630514, "4": -13.677001976012122, "-9": -56.87579256561883, "63": 22.6104424104727}], [["ceof", "SQQ", "quQcknOYU", "inner_key", "inner_key", "cYnIa", "AFTEHcLG", "ORUcTd"], {"a": false, "aa": false}], [[7, {"a": 1, "b": 2}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}, "cYnIa": "vSQQue"}], [[82, [2, 1, 2, 3]], {}], [[1, [1, 2, 3, 1], [1, 2, 3, 1]], {"-57.46866221421249": "cAEX", "91.49834284610671": -48.93563897978312, "99.0567328929331": "a", "-31.270276764825923": "xyz", "-62.470824790640236": -98.59549206630514, "-99.78882063540917": {"-13": 31, "80": -76, "6": 8, "10": -23, "32": -13, "4": 96}, "33.71452942222891": [-13, 31, -11, 83, -47, 96, -73], "86.29685027502393": 3, "-56.87579256561883": 85}], [["ceof", "SQQ", "quQcknOYU", "inner_key", "cYnIa", "AFTEHcLG", "ORUcTd"], {"a": false, "aa": false, "adefa": false}], [[7, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "neseted_value"}, "SQQ": {"nested_key": "neseted_value"}}}], [[82, [2, 1, 2, 3]], {"-73": null, "-16": -48.93563897978312}], [["ceof", "SQQ", "quQcknOYU", "inner_key", "cYnIa", "AFTEHcLG", "ORUcTd"], {}], [[82, 82], {"-73": null, "-16": -48.93563897978312}], [[7, {"b": 2}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}, "cYnIa": "vSQQue"}], [[1, [1, 2, 3], [1, 2, 3]], {"-57.46866221421249": "cAEX", "99.0567328929331": "a", "-31.270276764825923": "xyz", "-62.470824790640236": -98.59549206630514, "-99.78882063540917": {"-13": 31, "80": -76, "6": 8, "10": -23, "32": -13, "4": 96}, "33.71452942222891": [-13, 31, -11, 83, -47, 96, -73], "86.29685027502393": 3, "-56.87579256561883": 85}], [[1, "abc", "inner_key", "aabc", [1, 2, 3]], {"key": "value"}], [[7, {"a": 1}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[7, {"a": 1, "b": 2}, 6, [3, "xyz"]], {"nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[82, [2, 1, 2, 3]], {"kaab": "cAEX", "kekeyy": "b", "aa": "bnested_key"}], [[-76, 1, [1, 2, 3]], {"18.21087688747103": false, "-43.880983848693766": false, "-81.59221120935743": true, "-37.25422566711521": true, "-44.45585276563992": false}], [[7, {"a": 1, "b": 2, "nested_dict": 3}, [3, "xyz"], [3, "xyz"]], {"key": "value", "nested_dict": {}, "nesvalued_dict": {}, "nesvalued_dic": {}}], [[10, {}], {}], [[10, {"2": false, "31": true, "3": false, "-11": true, "10": true}, {"5": "AFTEHcLG", "-13": "ORUcTd", "4": "EDVGrA", "-83": ""}, {}, 10], {"-51": -26.064919618292407, "82": -43.880983848693766, "3": -57.46866221421249, "8": -98.59549206630514, "4": -13.677001976012122, "-9": -56.87579256561883, "63": 22.6104424104727}], [[7, {"a": 1, "b": 2, "cYnnIa": 3}, 6, [3, "xyz"], 6], {"nested_dict": {"inner_key": {}, "inner_rkey": {"-77": -56.87579256561883, "10": 99.0567328929331, "-11": -83.31276966362807, "3": 40.50854089052089, "46": 3.776276522383597, "-62": 71.89522254668083, "-38": -43.880983848693766, "38": 99.0567328929331, "-52": -13.677001976012122, "91": -17.960081004247954}, "inner_cYnnIakey": {"80": 2.239775811724769, "5": 91.49834284610671, "8": -31.270276764825923, "86": -91.79712960897837, "-62": 99.0567328929331, "11": -44.45585276563992, "19": -80.57371109397377}}, "nesvalued_dict": {"inner_key": {}, "inner_rkey": {"-77": -56.87579256561883, "10": 99.0567328929331, "-11": -83.31276966362807, "3": 40.50854089052089, "46": 3.776276522383597, "-62": 71.89522254668083, "-38": -43.880983848693766, "38": 99.0567328929331, "-52": -13.677001976012122, "91": -17.960081004247954}, "inner_cYnnIakey": {"80": 2.239775811724769, "5": 91.49834284610671, "8": -31.270276764825923, "86": -91.79712960897837, "-62": 99.0567328929331, "11": -44.45585276563992, "19": -80.57371109397377}}, "enested_dict": {"inner_key": {}, "inner_rkey": {"-77": -56.87579256561883, "10": 99.0567328929331, "-11": -83.31276966362807, "3": 40.50854089052089, "46": 3.776276522383597, "-62": 71.89522254668083, "-38": -43.880983848693766, "38": 99.0567328929331, "-52": -13.677001976012122, "91": -17.960081004247954}, "inner_cYnnIakey": {"80": 2.239775811724769, "5": 91.49834284610671, "8": -31.270276764825923, "86": -91.79712960897837, "-62": 99.0567328929331, "11": -44.45585276563992, "19": -80.57371109397377}}}], [[7, {"a": 1, "b": 2, "nested_dict": 3}, [3, "xyz"], [3, "xyz"], {"a": 1, "b": 2, "nested_dict": 3}], {"key": "value", "nested_dict": {}, "nesvalued_dic": {}}], [[7, {"a": 1, "b": 2, "nested_dict": 3}, [3, "xyz"], [3, "xyz"]], {"key": "value", "nested_dict": {}, "nesvalued_dic": {}}], [[10, {"nested_dict": {"inner_key": [1, 2, 3]}}, [4, "def"]], {"key": "value", "value": "valuee"}], [[2, [2, 1, 2, 3]], {}], [[7, {"a": 1, "b": 2, "cYnnIa": 3}, 6, [3, "xyz"], 6, 7], {"nested_dict": {"inner_key": {}, "inner_rkey": {"-77": -56.87579256561883, "10": 99.0567328929331, "-11": -83.31276966362807, "3": 40.50854089052089, "46": 3.776276522383597, "-62": 71.89522254668083, "-38": -43.880983848693766, "38": 99.0567328929331, "-52": -13.677001976012122, "91": -17.960081004247954}, "inner_cYnnIakey": {"80": 2.239775811724769, "5": 91.49834284610671, "8": -31.270276764825923, "86": -91.79712960897837, "-62": 99.0567328929331, "11": -44.45585276563992, "19": -80.57371109397377}}, "nesvalued_dict": {"inner_key": {}, "inner_rkey": {"-77": -56.87579256561883, "10": 99.0567328929331, "-11": -83.31276966362807, "3": 40.50854089052089, "46": 3.776276522383597, "-62": 71.89522254668083, "-38": -43.880983848693766, "38": 99.0567328929331, "-52": -13.677001976012122, "91": -17.960081004247954}, "inner_cYnnIakey": {"80": 2.239775811724769, "5": 91.49834284610671, "8": -31.270276764825923, "86": -91.79712960897837, "-62": 99.0567328929331, "11": -44.45585276563992, "19": -80.57371109397377}}, "enested_dict": {"inner_key": {}, "inner_rkey": {"-77": -56.87579256561883, "10": 99.0567328929331, "-11": -83.31276966362807, "3": 40.50854089052089, "46": 3.776276522383597, "-62": 71.89522254668083, "-38": -43.880983848693766, "38": 99.0567328929331, "-52": -13.677001976012122, "91": -17.960081004247954}, "inner_cYnnIakey": {"80": 2.239775811724769, "5": 91.49834284610671, "8": -31.270276764825923, "86": -91.79712960897837, "-62": 99.0567328929331, "11": -44.45585276563992, "19": -80.57371109397377}}}], [[10, {}, {}], {"key": "value", "kaabcey": "vaabclue", "kaab": "cYnIa", "kaabcenested_dicty": "cYnnIa", "kxyzey": "vaelue"}], [[1, [1, 1, 3, 1], [1, 1, 3, 1]], {"-57.46866221421249": "cAEX", "91.49834284610671": -48.93563897978312, "99.0567328929331": "a", "-31.270276764825923": "xyz", "-62.470824790640236": -98.59549206630514, "-99.78882063540917": {"-13": 31, "80": -76, "6": 8, "10": -23, "32": -13, "4": 96}, "33.71452942222891": [-13, 31, -11, 83, -47, 96, -73], "86.29685027502393": 3, "-56.87579256561883": 85}], [[{"a": 1, "b": 2}], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[1, [1, 1, 2, 3], "abc", [1, 1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 5, 6]}}], [[], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[32, {}], {"key": "value"}], [[10, {}], {"key": "value", "kaabcey": "vaabclue", "kaab": "cYnIa", "kaabcenested_dicty": "cYnnIa", "kxyzey": "vaelue"}], [[7, 6, {"a": 1, "b": 2}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[1, 0, "abc"], {}], [[82, [2, 1, 2, 3]], {"inner_cYnnIakey": "neseted_value", "i": "FYypOF"}], [[10, {"nested_dict": {"inner_key": [1, 2, 3]}}, [4, "def"]], {"key": "value", "value": "valuee", "kaabcey": "valvSQQueue"}], [[10, {}, {}], {"key": "value", "kaabcey": "vaabclue", "kaab": "cYnIa", "kxyzey": "vaelue"}], [[-76, 1, [1, 2, 3]], {"18.21087688747103": false, "-43.880983848693766": false, "-81.59221120935743": true, "-37.25422566711521": false, "-44.45585276563992": false, "-48.93563897978312": false}], [[1, "abc", [1, 2, 3]], {"key": "valuae"}], [[2, [1, 2, 3]], {"key": "value"}], [[1, "abc", [1, 2, 3]], {"key": "inner_rkey", "nested_dict": {"inner_key": [4, 5, 6]}}], [[10, {}, 10], {"key": "value", "kek": "vauue"}], [[7, {"a": 1, "b": 2}, [3, "xyz"], [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[{"b": 2}, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}, "cYnIa": "vSQQue"}], [["WXeNtT", "tJ", "SQQ", "MxSKJ", "XK", "abc", "ja", "gibJM", "TRDUDpQp", "FYypOF"], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[10, [1, 2, 3]], {"key": "value"}], [[8, 7, {"a": 1, "b": 2}, 6, [3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[1, [1, 1, 2, 3], "abc", [1, 1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 6], "innerkey": [4, 6]}, "WXeNtT": {"inner_key": [4, 6], "innerkey": [4, 6]}}], [["ceof", "SQQ", "quQcknOYU", "inner_key", "Ia", "AFTEHcLG", "ORUcTd"], {}], [[1, [1, 1, 2, 3], "abc", [1, 1, 2, 3]], {"key": "value"}], [[-76, 1, [1, 2, 3]], {"-43.880983848693766": false, "-81.59221120935743": true, "-37.25422566711521": true, "-44.45585276563992": false}], [[7, {"a": 1, "b": 2}, [3, "xyz"]], {"nested_dict": {"inner_key": {"nested_key": "nested_value"}}, "cYnIa": "vSQQue"}], [[7, [2, 3, "xyz"], {"b": 2}, [2, 3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}, "cYnIa": "vSQQue"}], [[7, {"a": 1, "b": 2}, 6, [3, "xyz"]], {"key": "value", "nesvalued_dict": {"inner_key": {}, "innner_key": {"82": "MxSKJ", "79": "valvSQQueue", "57": "def", "85": "", "-51": "ORUcTd"}}}], [[32, {}], {}], [[10, {}, 31, 10], {"key": "value", "kek": "vauue"}], [[1, "abc", "aabc", [1, 2, 3]], {"key": "valuee", "kkey": "cYnnIa"}], [[7, {"a": 1, "b": 2}], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}}], [[1, "abc", [1, 2, 3], [1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 5, 6]}}], [[1, "abcaabc", "abc", [1, 2, 3], 1], {"key": "valuae"}], [[10, [1, 2, 3]], {"key": "valu"}], [[82, 82, 82], {"-73": null, "-16": -48.93563897978312}], [[7, {"a": 1, "b": 2}, 6, {"a": 1, "b": 2}], {"key": "value", "nesvalued_dict": {"inner_key": {}, "innner_key": {"82": "MxSKJ", "79": "valvSQQueue", "57": "def", "85": "", "-51": "ORUcTd"}}}], [[10, {}, {"86": 29.039224599071417, "-89": -20.1520619052111}], {"key": "value", "kaabcey": "vaabclue", "kaab": "cYnIa", "kaabcenested_dicty": "cYnnIa", "kxyzey": "vaelue"}], [[1, "abc"], {"key": "value", "bkey": "nesvalued_dic"}], [[[2, 1, -77, 2, 3], 82, [2, 1, -77, 2, 3]], {"-73": null, "-16": -71.40888357559548}], [[7, {"a": 1, "b": 2}, 8, [3, "xyz"]], {"nested_dict": {"inner_key": {}}}], [[1, [1, 1, 3, 79]], {"-57.46866221421249": "cAEX", "91.49834284610671": -48.93563897978312, "99.0567328929331": "a", "-31.270276764825923": "xyz", "-62.470824790640236": -98.59549206630514, "-99.78882063540917": {"-13": 31, "80": -76, "6": 8, "10": -23, "32": -13, "4": 96}, "33.71452942222891": [-13, 31, -11, 83, -47, 96, -73], "86.29685027502393": 3, "-56.87579256561883": 85}], [[10, 10, [4, "def"]], {}], [[7, {"a": 1, "b": 2}], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nesteAFTEHcLGd_value"}}, "ekey": {"inner_key": {"nested_key": "nesteAFTEHcLGd_value"}}}], [[false, false, false, true, false, true, true, true, false], {}], [[10, {}, {}, [4, "def"], [4, "def"]], {}], [[{"a": 1, "b": 2}], {"key": "Ia", "nested_dict": {"inner_key": {}}, "nesvalued_dict": {"inner_key": {}}}], [[1, [1, 2, 3]], {"-93.62973836264239": false, "31.54678173057721": -38, "-86.95752493778267": 6, "64.02217731139194": 91, "-30.698433024748795": -31.270276764825923, "-21.702575364709958": -57, "-83.31276966362807": "SMVJ", "22.6104424104727": -81.59221120935743, "-81.76849770684896": 11, "33.71452942222891": "ukdNnNYvA"}], [[7, {"a": 1, "b": 2}, 6, [3, "xyz"]], {"key": "value", "nesvalued_dict": {"inner_key": {}}}], [[32, {}], {"-34": 49.042429142726576, "82": 48.96701994798619}], [[7, [83, 3, "xyz"]], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "neseted_value"}, "SQQ": {"nested_key": "neseted_value"}}}], [["ceof", "SQQ", "quQcknOYU", "inner_key", "cYIa", "AFTEHcLG", "ORUcTd"], {"a": false, "aa": false, "adefa": false}], [[7, [2, 3, "xyz"], {"b": 2}, [2, 3, "xyz"], 7], {"key": "value", "nested_dict": {"inner_key": {"nested_key": "nested_value"}}, "cYnIa": "vSQQue"}], [["ceof", "inner_key", "cYnIa", "AFTEHcLG", "ORUcTd"], {"a": false, "aa": false, "adefa": false}], [[82, [2, 1, 2, 3]], {"-73": null}], [[{"1": false, "70": true, "29": false}, 32, {}, 32], {"-34": 49.042429142726576, "82": 48.96701994798619}], [[false, false, false, true, false, true, true, true, false], {"-17.960081004247954": false, "64.02217731139194": false, "66.59197329455": true, "-81.76849770684896": true, "49.042429142726576": false, "-71.40888357559548": true, "-91.79712960897837": true, "-58.77697193704181": false}], [["ceof", "cYnIa", "AFTEHcLG", "ORUcTd"], {"a": false, "aa": false, "adefa": false, "fadefa": false}], [[[1, 1, 2, 3], [1, 1, 2, 3]], {"key": "value", "nested_dict": {"inner_key": [4, 6], "innerkey": [4, 6]}, "WXeNtT": {"inner_key": [4, 6], "innerkey": [4, 6]}}]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_dict, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n"}
{"task_id": "Mbpp/721", "prompt": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n", "entry_point": "maxAverageOfPath", "canonical_solution": "\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n  # all paths are of length 2 * N - 1, so just divide by that\n  return dp[N - 1][N - 1] / (2 * N - 1)\n", "base_input": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]], [[[2, 3, 4], [7, 6, 5], [8, 4, 10]]], [[[3, 4, 5], [8, 7, 6], [9, 5, 11]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]], "atol": 0, "plus_input": [[[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, -1]]], [[[0, 0, 0], [0, 0, 1], [0, 0, -1]]], [[[0, 0, 0], [0, 0, -1], [0, 0, -1]]], [[[0, 0, -1], [0, 0, -1], [0, 0, -1]]], [[[0, 0], [0, 0]]], [[[-1, 0, 0], [-1, 0, 0], [0, 0, -1]]], [[[0, 1, 0], [0, 0, -1], [0, 0, -1]]], [[[1, 0, 0], [1, 0, 0], [1, 0, 0]]], [[[0, 0, 0], [-1, 0, 0], [0, 0, -1]]], [[[1, 1, -1, 0], [1, 1, -1, 0], [1, 1, -1, 0], [1, 1, -1, 0]]], [[[1, 1, -1, 0, 1], [1, 1, -1, 0, 1], [1, 1, -1, 0, 1], [1, 1, -1, 0, 1], [1, 1, -1, 0, 1]]], [[[1, 0], [1, 0]]], [[[0, 0, 0], [-1, 0, 0], [0, 0, 0]]], [[[0, -1, 0], [0, -1, 0], [0, 0, -1]]], [[[-1, 1, 0], [-1, 1, 0], [-1, 1, 0]]], [[[1, 1, -1, 0, -1], [1, 1, -1, 0, -1], [1, 1, -1, 0, -1], [1, 1, -1, 0, -1], [1, 1, -1, 0, -1]]], [[[0, 0, 0], [1, 0, -1], [1, 0, -1]]], [[[-1, 0, -1], [-1, 0, -1], [0, 0, -1]]], [[[0, 0, -1], [-1, 0, 0], [0, 0, -1]]], [[[1, -1, -1], [1, -1, -1], [1, -1, -1]]], [[[-1, 0, 0], [0, 0, -1], [-1, 0, 0]]], [[[1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1]]], [[[0, -1, 0], [0, -1, 0], [0, -1, 0]]], [[[1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1]]], [[[1, 0, -1], [1, 0, -1], [1, 0, -1]]], [[[0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, -1], [0, -1, 0, 0]]], [[[0, 1, 0], [0, 1, 0], [0, 1, 0]]], [[[1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1]]], [[[0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]]], [[[1, 1, 0], [0, 0, -1], [0, 0, -1]]], [[[1, 1, -1, 1, 0], [1, 1, -1, 1, 0], [1, 1, -1, 1, 0], [1, 1, -1, 1, 0], [1, 1, -1, 1, 0]]], [[[0, -1, 1, 0], [0, -1, 1, 0], [0, -1, 1, 0], [0, -1, 1, 0]]], [[[0, 1, 0], [0, 0, -1], [0, 1, 0]]], [[[1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1]]], [[[1, -1, 0, -1], [1, -1, 0, -1], [1, -1, 0, -1], [1, -1, 0, -1]]], [[[0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0]]], [[[1, -1, -1, 1], [1, -1, -1, 1], [1, -1, -1, 1], [1, -1, -1, 1]]], [[[1, 0, -1, 1, 0], [1, 0, -1, 1, 0], [1, 0, -1, 1, 0], [1, 0, -1, 1, 0], [1, 0, -1, 1, 0]]], [[[0, 1, -1, 0], [0, 1, -1, 0], [0, 1, -1, 0], [0, 1, -1, 0]]], [[[1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1]]], [[[1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1]]], [[[1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0]]], [[[1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0]]], [[[1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1]]], [[[1, -1, -1, 1, 1], [1, -1, -1, 1, 1], [1, -1, -1, 1, 1], [1, -1, -1, 1, 1], [1, -1, -1, 1, 1]]], [[[0, 0, 0], [0, 0, 0], [0, 0, -2]]], [[[0, -1, 0, -1], [0, -1, 0, -1], [0, -1, 0, -1], [0, -1, 0, -1]]], [[[1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 1, 0]]], [[[1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1]]], [[[0, -1, -2, 0], [0, -1, -2, 0], [0, -1, -2, 0], [0, -1, -2, 0]]], [[[0, -1, 0, -1, 0], [0, -1, 0, -1, 0], [0, -1, 0, -1, 0], [0, -1, 0, -1, 0], [0, -1, 0, -1, 0]]], [[[1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0]]], [[[1, 0, -1, 0, -1], [1, 0, -1, 0, -1], [1, 0, -1, 0, -1], [1, 0, -1, 0, -1], [1, 0, -1, 0, -1]]], [[[-1, 0, 0], [0, 0, -1], [0, 0, -1]]], [[[1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0]]], [[[0, 0, 0], [0, 0, -2], [0, 0, 0]]], [[[1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1]]], [[[0, 1, -1, 1], [0, 1, -1, 1], [0, 1, -1, 1], [0, 1, -1, 1]]], [[[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0]]], [[[0, -1, -1, 0], [0, -1, -1, 0], [0, -1, -1, 0], [0, -1, -1, 0]]], [[[1, -1], [1, -1]]], [[[1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1]]], [[[1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0]]], [[[0, -1, -1, 0, 0], [0, -1, -1, 0, 0], [0, -1, -1, 0, 0], [0, -1, -1, 0, 0], [0, -1, -1, 0, 0]]], [[[1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1]]], [[[1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1]]], [[[1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1]]], [[[2, 1, -1, 0, -1], [2, 1, -1, 0, -1], [2, 1, -1, 0, -1], [2, 1, -1, 0, -1], [2, 1, -1, 0, -1]]], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]]], [[[1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1]]], [[[0, -1, 0, 1], [0, -1, 0, 1], [0, -1, 0, 1], [0, -1, 0, 1]]], [[[1, 1, 2], [1, 1, 2], [1, 1, 2]]], [[[1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1]]], [[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]], [[[0, 2, 0], [-1, 0, 0], [0, 0, -1]]], [[[1, 1, 2, 1], [1, 1, 2, 1], [1, 1, 2, 1], [1, 1, 2, 1]]], [[[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1]]], [[[0, -1, 0, 0, 0], [0, -1, 0, 0, 0], [0, -1, 0, 0, 0], [0, -1, 0, 0, 0], [0, -1, 0, 0, 0]]], [[[2, 0, -1, -1, 0], [2, 0, -1, -1, 0], [2, 0, -1, -1, 0], [2, 0, -1, -1, 0], [2, 0, -1, -1, 0]]], [[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]]], [[[0, 0, 0], [-1, 0, 0], [-1, 0, 0]]], [[[1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1]]], [[[0, 1, -1, 1, 0], [0, 1, -1, 1, 0], [0, 1, -1, 1, 0], [0, 1, -1, 1, 0], [0, 1, -1, 1, 0]]], [[[0, -1, 0, 1], [0, -1, 0, 1], [0, -1, 0, -1], [0, -1, 0, 1]]], [[[-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1]]], [[[0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0]]], [[[2, -1, 0, 0], [2, -1, 0, 0], [0, -1, 0, -1], [2, -1, 0, 0]]], [[[-1, 0, 0], [-1, 0, 0], [2, 0, -1]]], [[[0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0]]], [[[1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0]]], [[[1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1]]], [[[0, -1, 1, -2, 0], [0, -1, 1, -2, 0], [0, -1, 1, -2, 0], [0, -1, 1, -2, 0], [0, -1, 1, -2, 0]]], [[[2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1]]], [[[1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1]]], [[[1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1]]], [[[0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0]]], [[[0, 1, -1, 0, 0], [0, 1, -1, 0, 0], [0, 1, -1, 0, 0], [0, 1, -1, 0, 0], [0, 1, -1, 0, 0]]], [[[0, 2, 0], [-1, 0, 0], [0, 2, 0]]], [[[0, -1, -1, 0, -1], [0, -1, -1, 0, -1], [0, -1, -1, 0, -1], [0, -1, -1, 0, -1], [0, -1, -1, 0, -1]]], [[[0, -1, 0], [0, 0, -1], [0, 0, -1]]]], "contract": "\n  assert isinstance(cost, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(cost) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, list) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == len(cost) == len(cost[0]) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in sum(cost, [])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n"}
{"task_id": "Mbpp/722", "prompt": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n", "entry_point": "filter_data", "canonical_solution": "\ndef filter_data(students,h,w):\n    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n", "base_input": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70], [{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 5.9, 67], [{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 5.7, 64]], "atol": 0, "plus_input": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 5.8, 67], [{}, 5.7, 64], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65], [{}, 9.9, 9999], [{}, 0, 0], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 5.5, 60], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 6.2, 75], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 5.8, 65], [{}, 5.0, 60], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.3352700555113355, 5.5], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 0, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 7.6771179872039275, 65], [{}, 60, 60], [{"Alice": [5.6, 60], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 3.775767325751101, 75], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 0, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68]}, 5.8, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.729862314625353, 6.3352700555113355], [{}, 59, 60], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 65, 7.6771179872039275], [{"Alice": [5.6, 60], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 4.258632338706851, 75], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 5.5, 59], [{}, 64, 5.7], [{}, 5.0, 9999], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.729862314625353, 5.5], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.729862314625353, 8.190457327073037], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 68, 67], [{}, 64, 64], [{}, 72, 64], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 7.6771179872039275, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 65, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68]}, 5.8, 9999], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 5.8, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.702463419036826, 5.5], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68]}, 6.347801785816663, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75]}, 6.729862314625353, 8.190457327073037], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 1, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.729862314625353, 3.660457791550787], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [5.49128356349249, 68]}, 5.8, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 5.5, 60], [{}, 55, 64], [{}, 5.0, 5.2], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 2, 67], [{}, 58, 0], [{}, 59, 59], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 60, 60], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 67, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.038735073603959, 6.3352700555113355], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 67, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 67, 68], [{}, 67, 65], [{}, 64, 4.5127014348401], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 64, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 3.9132721275728577, 5.49128356349249], [{}, 67, 55], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 66, 64], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 0, 66], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 60, 59], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 59, 60], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 7.421813010934091, 6.3352700555113355], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 59, 59], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 3.775767325751101, 6.3352700555113355], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 5.824887060150681, 5.11], [{"Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 60, 60], [{}, 5.7, 5.7], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 5.5, 61], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65]}, 0, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.729862314625353, 10.135570714344796], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 63]}, 6.3352700555113355, 6.3352700555113355], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 63, 63], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 10.135570714344796, 59], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 10.135570714344796, 6.679165466227062], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 7.599846835005838, 4.5127014348401], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 58, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 55, 55], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "EEve": [6.2, 65]}, 5.8, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 9999], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 0, 0], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 63, 61], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 68, 70], [{"Alice": [5.6, 60], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 65, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 67, 0], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 10.135570714344796, 10.135570714344796], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 9.297305401955562, 6.679165466227062], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Dave": [5.11, 72]}, 0, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.8967696393963465, 10.135570714344796], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Dave": [5.11, 72]}, 1, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 67, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Irene": [5.6, 9999]}, 6.2, 75], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [5.49128356349249, 68]}, 65, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68]}, 6.347801785816663, 66], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 75, 59], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 5.8, 5.8], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 5.8, 59], [{"Alice": [5.6, 60], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 75, 75], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 57, 58], [{}, 4.5127014348401, 11.052854689507116], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58], "HHarry": [6.627749952516089, 75]}, 72, 72], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 57, 57], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Frank": [5.11, 66]}, 5.8, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68]}, 8.190457327073037, 9999], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 57, 6.1], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 55, 64], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 68, 71], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "EEve": [6.2, 65]}, 5.8, 59], [{"Alice": [5.6, 60], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 58, 65], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72]}, 5.8, 68], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 6.8967696393963465, 10.135570714344796], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68]}, 6.082623855502811, 67], [{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63], "Grace": [5.2, 55], "Harry": [6.2, 75], "Irene": [5.4, 58]}, 4.5127014348401, 4.5127014348401]], "contract": "\n    assert isinstance(students, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values()) # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(w, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert h >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert w >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n"}
{"task_id": "Mbpp/723", "prompt": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n", "entry_point": "count_same_pair", "canonical_solution": "\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]], [[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2]], [[0, 1, 1, 2], [0, 1, 2, 2]]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1]], [[3, 7, 8, 2, 5, 1, 9, 4, 6], [6, 4, 9, 1, 5, 2, 8, 7, 3]], [[10, 20, 30, 40, 50, 60, 70], [70, 60, 50, 40, 30, 20, 10]], [[100, 200, 300, 400, 500], [500, 400, 300, 200, 100]], [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]], [[], []], [[-1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9], [-1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [10, 20, 30, 40, 50, 70, 80, 90, 100, 110]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25]], [[1, 3, 2, 7, 9], [1, 3, 2, 7, 9]], [[2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25], [2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25]], [[1, 3, 2, 8, 7, 9], [1, 3, 2, 8, 7, 9]], [[70, 60, 50, 40, 1, 30, 20, 10, 1], [70, 60, 50, 40, 1, 30, 20, 10, 1]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15]], [[1, 3, 2, 8, 7, 9, 8, 7], [1, 3, 2, 8, 7, 9, 8, 7]], [[1, 3, 2, 16, 2, 7, 9], [1, 3, 2, 16, 2, 7, 9]], [[1, 3, 2, 16, 2, 7, 9, 2], [1, 3, 2, 16, 2, 7, 9, 2]], [[-1, 0, 1, 2, 2, 3, 4, 5, 6, 80, 8, 9], [-1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]], [[6, 4, 9, 1, 5, 2, 7, 2], [6, 4, 9, 1, 5, 2, 7, 2]], [[1, 3, 2, 8, 7, 9, 9], [1, 3, 2, 8, 7, 9, 9]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 18, 20, 22, 23, 24, 22, 25], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 18, 20, 22, 23, 24, 22, 25]], [[10, 23, 30, 40, 50, 60, 70, 80, 90, 25], [10, 20, 30, 40, 50, 70, 80, 90, 100, 110]], [[2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 23], [2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 23]], [[1, 3, 2, 16, 2, 7, 9, 9], [1, 3, 2, 16, 2, 7, 9, 9]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25]], [[1, 3, 2, 8, 7, 9, 9, 3], [1, 3, 2, 8, 7, 9, 9, 3]], [[1, 3, 2, 16, 7, 9], [1, 3, 2, 16, 7, 9]], [[1, 2, 8, 7, 9, 8, 7], [1, 2, 8, 7, 9, 8, 7]], [[2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24], [2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24]], [[1, 2, 3, 4, 5, 16, 17, 17, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[3, 7, 8, 2, 5, 1, 9, 4, 6], [3, 7, 8, 2, 5, 1, 9, 4, 6]], [[1, 25, 2, 10, 3, 4, 5, 16, 23, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25], [1, 25, 2, 10, 3, 4, 5, 16, 23, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25]], [[1, 2, 3, 5, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 400, 11, 12, 13, 14, 15]], [[3, 7, 2, 5, 1, 9, 4, 6], [3, 7, 2, 5, 1, 9, 4, 6]], [[10, 20, 40, 50, 70, 80, 90, 7, 110], [10, 20, 40, 50, 70, 80, 90, 7, 110]], [[1, 8, 7, 9, 8, 7, 7], [1, 8, 7, 9, 8, 7, 7]], [[1, 1, 2, 8, 7, 9, 9, 3], [1, 1, 2, 8, 7, 9, 9, 3]], [[1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25], [1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25]], [[10, 20, 50, 70, 79, 90, 7, 110], [10, 20, 50, 70, 79, 90, 7, 110]], [[14, 3, 8, 7, 9, 9, 3, 9], [14, 3, 8, 7, 9, 9, 3, 9]], [[1, 3, 8, 7, 9, 9], [1, 3, 8, 7, 9, 9]], [[1, 25, 2, 10, 1, 3, 4, 4, 16, 17, 18, 18, 20, 22, 23, 24, 22], [1, 25, 2, 10, 1, 3, 4, 4, 16, 17, 18, 18, 20, 22, 23, 24, 22]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 21], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 21]], [[1, 3, 5, 7, 9, 7], [1, 3, 5, 7, 9, 7]], [[10, 89, 20, 50, 70, 79, 90, 7, 110, 10], [10, 89, 20, 50, 70, 79, 90, 7, 110, 10]], [[24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 5], [24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 5]], [[1, 3, 20, 8, 7, 9, 9], [1, 3, 20, 8, 7, 9, 9]], [[1, 3, 9, -1, 7, 9, 9], [1, 3, 9, -1, 7, 9, 9]], [[1, 2, 2, 8, 7, 9, 9, 3], [1, 2, 2, 8, 7, 9, 9, 3]], [[80, 1, 3, 2, 16, 2, 7, 9], [80, 1, 3, 2, 16, 2, 7, 9]], [[6, 4, 9, 2, 8, 7, 3], [6, 4, 9, 2, 8, 7, 3]], [[3, 8, 7, 9, 9], [3, 8, 7, 9, 9]], [[1, 3, 500, 8, 7, 499, 9, 9], [1, 3, 500, 8, 7, 499, 9, 9]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 16], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 16]], [[1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25], [1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25]], [[1, 3, 2, 7, 4, 9], [1, 3, 2, 7, 4, 9]], [[1, 3, 9, -1, 7, 9, 9, 3], [1, 3, 9, -1, 7, 9, 9, 3]], [[1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22], [1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22]], [[2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23], [2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23]], [[10, 89, 20, 50, 70, 79, 90, 7, 110, 10, 50], [10, 89, 20, 50, 70, 79, 90, 7, 110, 10, 50]], [[1, 7, 3, 20, 8, 7, 9, 9], [1, 7, 3, 20, 8, 7, 9, 9]], [[2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[1, 3, 20, 90, 8, 7, 9, 9, 7], [1, 3, 20, 90, 8, 7, 9, 9, 7]], [[24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 3], [24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 3]], [[1, 10, 7, 9, 8, 7, 7, 1], [1, 10, 7, 9, 8, 7, 7, 1]], [[1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 24, 25, 25, 21], [1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 24, 25, 25, 21]], [[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 10], [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 10]], [[200, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22], [200, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22]], [[70, 60, 50, 40, 1, 30, 20, 10, 1, 50], [70, 60, 50, 40, 1, 30, 20, 10, 1, 50]], [[1, 3, 2, 14, 16, 2, 79, 9], [1, 3, 2, 14, 16, 2, 79, 9]], [[10, 89, 20, 17, 70, 79, 90, 7, 110, 10, 50], [10, 89, 20, 17, 70, 79, 90, 7, 110, 10, 50]], [[1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25, 5], [1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25, 5]], [[70, 100, 50, 40, 1, 30, 20, 10, 1, 10], [70, 100, 50, 40, 1, 30, 20, 10, 1, 10]], [[6, 4, 9, 1, 5, 2, 13, 7, 2], [6, 4, 9, 1, 5, 2, 13, 7, 2]], [[80, 1, 3, 2, 16, 2, 9], [80, 1, 3, 2, 16, 2, 9]], [[1, 8, 7, 9, 8, 7, 8], [1, 8, 7, 9, 8, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15]], [[1, 3, 20, 90, 8, 7, 9, 9, 7, 90], [1, 3, 20, 90, 8, 7, 9, 9, 7, 90]], [[1, 2, 2, 4, 5, 16, 17, 17, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[24, 3, 7, 8, 2, 6, 1, 9, 4, 6, 3], [24, 3, 7, 8, 2, 6, 1, 9, 4, 6, 3]], [[1, 25, 2, 10, 1, -1, 4, 4, 16, 18, 18, 20, 22, 23, 23, 22], [1, 25, 2, 10, 1, -1, 4, 4, 16, 18, 18, 20, 22, 23, 23, 22]], [[1, 3, 2, 16, 2, 17, 7, 9], [1, 3, 2, 16, 2, 17, 7, 9]], [[1, 3, 9, -1, 7, 9, 3], [1, 3, 9, -1, 7, 9, 3]], [[9, 23, 30, 40, 499, 50, 60, 70, 80, 90], [9, 23, 30, 40, 499, 50, 60, 70, 80, 90]], [[14, 3, 7, 9, 9, 3, 9], [14, 3, 7, 9, 9, 3, 9]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 21, 22, 23, 24, 25, 25, 4], [1, 2, 3, 4, 5, 16, 17, 18, 19, 21, 22, 23, 24, 25, 25, 4]], [[3, 2, 7, 50, 9], [3, 2, 7, 50, 9]], [[3, 5, 7, 9, 7], [3, 5, 7, 9, 7]], [[2, 23, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23], [2, 23, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23]], [[10, 89, 20, 50, 70, 79, 90, 69, 7, 110, 10], [10, 89, 20, 50, 70, 79, 90, 69, 7, 110, 10]], [[100, 200, 300, 400, 500], [100, 200, 300, 400, 500]], [[1, 3, 2, 16, 2, 17, 7, 9, 2], [1, 3, 2, 16, 2, 17, 7, 9, 2]], [[3, 9, 7, 9, 9], [3, 9, 7, 9, 9]], [[14, 3, 9, 7, 9, 3, 9], [14, 3, 9, 7, 9, 3, 9]], [[80, 2, 3, 2, 16, 2, 7, 9], [80, 2, 3, 2, 16, 2, 7, 9]], [[6, 4, 9, 2, 8, 7, 3, 3], [6, 4, 9, 2, 8, 7, 3, 3]], [[1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 24, 22, 23, 23, 11, 24, 25, 22], [1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 24, 22, 23, 23, 11, 24, 25, 22]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25, 25], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25, 25]], [[24, 3, 7, 8, 2, 3, 5, 1, 9, 4, 6, 5, 6], [24, 3, 7, 8, 2, 3, 5, 1, 9, 4, 6, 5, 6]], [[1, 3, 500, 8, 7, 499, 9, 9, 500], [1, 3, 500, 8, 7, 499, 9, 9, 500]], [[1, 8, 7, 9, 8, 7, 8, 7], [1, 8, 7, 9, 8, 7, 8, 7]], [[19, 1, 3, 20, 90, 8, 89, 7, 9, 9, 7, 90], [19, 1, 3, 20, 90, 8, 89, 7, 9, 9, 7, 90]], [[80, 1, 3, 2, 16, 2, 9, 9], [80, 1, 3, 2, 16, 2, 9, 9]], [[6, 4, 9, 1, 5, 12, 0, 7, 2], [6, 4, 9, 1, 5, 12, 0, 7, 2]], [[80, 1, 3, 1, 16, 2, 9, 9, 9], [80, 1, 3, 1, 16, 2, 9, 9, 9]], [[3, 7, 25, 8, 2, 5, 1, 9, 4], [3, 7, 25, 8, 2, 5, 1, 9, 4]]], "contract": "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert all(hasattr(a, '__eq__') and isinstance(a, type(b)) for a, b in zip(nums1, nums2)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3\n"}
{"task_id": "Mbpp/724", "prompt": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n", "entry_point": "power_base_sum", "canonical_solution": "\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n", "base_input": [[2, 100], [8, 10], [8, 15], [3, 3]], "atol": 0, "plus_input": [[1, 1000000], [0, 500], [11, 100], [7, 200], [5, 1000], [5, 1], [201, 200], [5, 0], [1, 500], [5, 8], [1, 11], [1, 0], [11, 1], [10, 1], [11, 8], [0, 11], [500, 200], [999, 5], [200, 0], [99, 999], [201, 201], [8, 8], [202, 201], [498, 200], [200, 999], [999, 999], [200, 200], [1, 1], [5, 202], [1001, 1000], [0, 998], [1000000, 1], [201, 202], [11, 201], [11, 202], [0, 0], [1002, 1], [5, 1001], [7, 7], [11, 200], [7, 1], [202, 498], [10, 10], [1002, 498], [201, 999], [10, 202], [202, 202], [11, 10], [10, 99], [0, 1], [1002, 1001], [12, 100], [202, 200], [11, 1000], [1000, 5], [11, 11], [1, 202], [998, 998], [499, 499], [1003, 1002], [0, 498], [12, 999], [8, 11], [1000, 10], [498, 499], [202, 1003], [1000, 100], [203, 202], [1002, 1002], [1002, 5], [200, 201], [199, 201], [204, 203], [0, 999], [500, 201], [998, 999], [11, 999], [1000, 1000], [99, 0], [8, 12], [499, 498], [1003, 5], [501, 201], [501, 1002], [9, 8], [5, 100], [1001, 204], [501, 501], [1000, 200], [199, 200], [1001, 12], [1, 998], [12, 12], [100, 203], [202, 1], [204, 1001], [1001, 1001], [204, 204], [998, 8], [1001, 200], [0, 202], [199, 1], [998, 12], [9, 9], [1003, 1003]], "contract": "\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9\n"}
{"task_id": "Mbpp/725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n", "entry_point": "extract_quotation", "canonical_solution": "\nimport re\ndef extract_quotation(text1):\n  return re.findall(r'\"(.*?)\"', text1)\n", "base_input": [["Cortex \"A53\" Based \"multi\" tasking \"Processor\""], ["Cast your \"favorite\" entertainment \"apps\""], ["Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support"], ["Watch content '4k Ultra HD' resolution with 'HDR 10' Support"]], "atol": 0, "plus_input": [["This is a \"nested 'quote'\" example"], [""], ["No quotation marks in this input"], ["Nested quotation marks: \"This is the \"nested\" quote\""], ["Two sets of quotation marks: \"First\" and \"second\""], ["Quotation marks within single quotes: 'This is a \"quoted\" phrase'"], ["Multiple nested quotation marks: \"This is the \"nested \"and \"more nested\" quote\"\""], ["Quotation marks within single quotes within double quotes: \"This is a 'quoted' phrase within double quotes\""], ["Multiple nested quotation marks within single quotes: 'This is a \"nested \"and \"more nested\" quote\" within single quotes'"], ["Quotation marks with \"escaped\" inside"], ["Nested quotation marks with multiple levels: \"This is the \"first\" quote\" and \"This is the \"second\" quote\""], ["Overlapping quotation marks: \"This is the \"first quote\"\" and \"This is the \"second quote\"\""], ["the"], ["Quotation marks within single quoe'"], ["Thilse is a \"nested 'quote'\" example"], ["MuQuotation marks within single quotes: 'This is a \"quoted\" phrase'ltiple"], ["Quotation marks within single quotes within double quotes: \"This isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\""], ["\"second\""], ["Nested quotation marks with multiple levels: \"This is the \"first\" quote\" and \"iThis is the \"second\" quote\""], ["'quoted'of"], ["in"], ["\"First\""], ["and"], ["ls:"], ["Overlapping Quotation the \"first quote\"\" and \"This \""], ["\"iThis"], ["Quotation marksa with \"escaped\" inside"], ["quotes:"], ["ITjhLBoMY"], ["qQuotation marksa with \"escaped\" insideuotes:"], ["Overlapping quotation marks: \"This igs the \"first quote\"\" and \"This is the \"second quote\"\""], ["iMultiple nested quotation marks within single quotes: 'This is a \"nested \"and \"more nested\" quote\" within single quotes'"], ["This is a \"nested 'isquote'\" exame"], ["of"], ["insideuotes:"], ["\"\"secondiThsis"], ["inseideuotes:"], ["\"iThiis"], ["tquotes:"], ["iMultiple"], ["Overlapping Quotation the a\"first quote\"\" and \"This \""], ["Overlapping quotation marks: \"\"\""], ["tmultiple"], ["Overlapping quotation marks: \"This is quotes'the \"first quote\"\" and \"This is the \"second quote\"\""], ["MuQQuotation marks within single quotes within double quotes: \"This isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\"uotation marks within single quotes: 'This is a \"quoted\" phrase'ltiple"], ["'qMuQQuotation marks within single quotes within double quotes: \"This isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\"uotation marks within single quotes: 'This is a \"quoted\" phrarse'ltipleuoted'of"], ["Quotation marks within single quotes: 'This is a 'qMuQQuotation marks within single quotes within double quotthees: \"This isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\"uotation marks within single quotes: 'This is a \"quoted\" phrarse'ltipleuoted'of\"quoted\" phrase'"], ["Overlappi\"ng quotation marks: \"\"\""], ["tmulti"], ["'quote'\""], ["quote\"\""], ["example"], ["Overlapping quotation marks: \"This quotes'theis the \"first quote\"\" and \"This is the \"second quote\"\""], ["phrasee'ltiple"], ["'qMuQQuotation marks within single quotes within double quotes: \"This isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\"uotation marks within single quotes: 'This is a \"quoted\" phrarse'ltipleuoted'ofls:"], ["This is a \"nested 'quote'\"insideuotes: example"], ["Quotation marks wiethin single quoe'"], ["Multiple nested quotation marks: \"This is the \"nested \"and \"more rnested\" quote\"\""], ["\"morNested quotation marks: \"This is the \"nested\" quote\"e"], ["YITjhLBBoMY"], ["Multiple nested quontation marks: \"This is the \"nested \"and \"more rnested\" quote\"\""], ["nRYitGiW"], ["This is a \"nested 'quote'\"oinsideuotes: example"], ["Q uotation marks within single quotes: 'This is a \"quoted\" phrase'"], ["'quote'\"insideuotes:"], ["nRYitGiYW"], ["nRYitGW"], ["Overlapping quotation marks: \"This quotes'theis the \"first quote\"\" and \"This is the \"suecond quote\"\""], ["setsls:"], ["MuQuotation marks within single quotes: 'This e"], ["Quaotation marks within single quoe'"], ["'quote'\"insideuootes:"], ["OvThilse is a \"nested 'quote'\" exampleerlapping quotation marks: \"This is the \"first quote\"\" and \"This is the \"second quote\"\""], ["This is a \"nested'isquote'\" 'quote'\"oinsideuotes: example"], ["i"], ["phrarse'ltipleuoted'of"], ["exame"], ["quotes\""], ["'quoted'"], ["ITjhLBQ uotation marksj within sie'Y"], ["MuQQuotation marks within single quotes within double quotes: \"This isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\"uotquote\"ation marks within single quotes: 'This is a \"quoted\" phrase'ltiple"], ["ame"], ["Multiple nested quotation marks: \"This irnested\" quote\"\""], ["marksa"], ["ITjhLBBoMY"], ["Overlapping quotation marks: \"This quotes'theis the \"first quote\"\" and \"This is the \"second qouote\"\""], ["nThis is a \"nested'isquote'\" 'quote'\"oinsideuotes: exampleRYitGW"], ["This is a \"nested'isquote'\" 'quote'\"oinsideuotess: example"], ["\"suecondTwo sets irnested\"of quotation marks: \"First\" and \"marks:s"], ["qouote\"\""], ["qQuotation marksa with \"escape:"], ["Overlapping quotation marks: \"This quotes'theis the \"first quote\"\"Thilse\"\""], ["irnested\"of"], ["iin"], ["This isQuotation marks within single quoe' a \"neste 'quote'\" example"], ["\"neste"], ["double"], ["a\"suecondTwome"], ["Overlapping quotation mphrarse'ltipleuoted'ofls:arks: \"\"\""], ["'quote'\"insideuoos:"], ["phrarse'ltiplquote\"eeuoted'of"], ["Two sets of quotation marks: \"First\" and \"snested\"econd\""], ["quote\"\"Thilse\"\""], ["'quote'\"in\"morNested quotation marks: \"This is the \"nested\" quote\"edeuoos:"], ["This is a \"nested 'quote'\" examplle"], ["Quotaton marks wiethin siongle quoe'"], ["ii'quote'\"in\"morNestedn"], ["'qMuQQuotation marks within single quotes within double quotes: \"Thi\"firsts isNested quotation marks: \"This is the \"nested\" quote\" a 'quoted' phrase within double quotes\"uotation marks within single quotes: 'This is a \"quoted\" phrarse'ltipleuoted'ofls:"], ["exampleerlapping"], ["\"nested\""], ["smYPGQnHV"], ["aminpute"]], "contract": "\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n"}
{"task_id": "Mbpp/726", "prompt": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n", "entry_point": "multiply_elements", "canonical_solution": "\ndef multiply_elements(test_tup):\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n", "base_input": [[[1, 5, 7, 8, 10]], [[2, 4, 5, 6, 7]], [[12, 13, 14, 9, 15]], [[12]]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5, 6]], [[0.5, 0.25, 0.125, 0.0625]], [[10, 100, 1000, 10000]], [[-1, -2, -3, -4, -5]], [[1, -2, 3, -4, 5]], [[]], [[0.5, 0.25, 0.125, 0.5, 0.0625]], [[10, 1, 1000, 10000]], [[2, 3, 4, 5, 6]], [[2, 3, 100, 5, 6]], [[-1, -2, -3, 6, -5]], [[1, -2, 1000, 5, -4, 5]], [[3, 3, 4, 5, 6]], [[0.25, 0.09658093675455971, 0.5, 0.0625]], [[10, 1, 1000]], [[3, -4, 3, 4, 5, 6]], [[2, 3, 3, 5, 6]], [[0.25, 0.125, 0.5, 0.0625, 0.5]], [[0, 2, 3, 4, 5, 6, 3]], [[-1, -2, -3, 6]], [[-2, 3, 5, 5]], [[1, -1, -2, -3, -4, -5]], [[-1, -2, -3, 6, -5, -2]], [[9, 10, 1, 1000]], [[0.25, 0.09658093675455971, 0.5, 0.5, 0.0625]], [[0, -2, -3]], [[1, -2, 3, -4]], [[0.25, 0.125, 0.5, 0.0625, 0.5, 0.5, 0.5]], [[-2, 3, 5]], [[1, 10, 1, -5, 1000, -5]], [[10, 1, 10000, 1000]], [[-2, 3, 5, 3, -2]], [[-1, -2, -3, 6, -1, -5, -2]], [[22]], [[0, 2, 3, 4, 5, 6, 3, 4]], [[0, 2, 3, 4, 5, 7, 6, 3]], [[0.09658093675455971, 0.5, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832]], [[0.09658093675455971, 0.5, 0.125, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832]], [[-1, -3, 6]], [[-1, -2, -3, 6, -2]], [[21, 22]], [[1, 3, 100, 5, 7, 6]], [[0.25, 0.5, 0.0625, 0.5, 0.5, 0.8942957050187041, 0.5]], [[0, -4, -2, -3]], [[0.25, 0.125, 0.5, 0.0625, 0.5, 0.0625]], [[0.5, 0.25, 0.125, 0.5, 0.0625, 0.25]], [[21, 22, 22, 21]], [[-1, 0, 7, 6, -1]], [[-2, 3, 4, 5]], [[-1, -2, -3, 6, -5, -3]], [[1, 10, -6, 1, -5, 1000, -5]], [[1, -2, 3, 1, -4, 5, 5]], [[0, 2, 3, 4, 5, 6, 4]], [[2, 3, 100, -2, 5, 6]], [[2, 3, 3, 5, 6, 5]], [[1, -5, 3, 4, 5, 6]], [[2, 3, 3, 5, 6, 5, 3]], [[-1, -3, 2, 6]], [[0, -2, -3, -2]], [[1, -2, 1000, 5, 6, -4, 5, 6]], [[-1, -2, -1, -3, 6]], [[0.09150698236271086, 0.5, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 0.0625]], [[0.8109212936994514, 0.5, 0.25, 0.8490361128540658, 0.5, 0.0625]], [[0, 2, 3, 4, 5, 7, 6, 3, 5]], [[0, 2, 3, 4, 5, 7, 6, 3, 3]], [[10, 100, 10000]], [[-1, -2, 5, 7, 6, -2]], [[1, -1, -2, -3, -4, -5, -1]], [[1, 10, -6, 1000, -5]], [[0.09658093675455971, 0.5, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832, 0.09658093675455971]], [[1, 2, -2, 3, 4, 5, 6]], [[2, 3, 4, 5]], [[2, -2, 1000, 5, 6, -4, 5, 6]], [[0, 2, 3, 4, 5, 6, 3, 4, 3]], [[1, -1, -2, -3, -5, -1]], [[0.25, 0.125, 0.125, 0.0625, 0.5, 0.25]], [[0, 7, -1, 0]], [[1, 10, -6, 2, -5, 1000, -5]], [[3, 4, 5]], [[0.5, 0.125, 0.5, 0.0625]], [[-2, 2, 3, 3, 5, 6]], [[2, 3, 4, 5, 2]], [[2, 3, 4, 21, 6]], [[-1, -3, -6, -1]], [[0, -2, -3, -2, 0]], [[1, -1, -2, -3, -4, -1]], [[0.25, 0.5, 0.0625, 0.5, 0.5, 0.8942957050187041, 0.5, 0.5]], [[-1, 10, -2, -3, 6, -2]], [[10, 1, 10, 1000]], [[-4, 1, 1000, 10000]], [[0.5, 0.25, 0.125, 0.5, 0.0625, 79.3038013402577, 0.25]], [[false, false, true, true, false, true, false, false, true, false]], [[10, -6, 2, -5, 1000, -5]], [[1, 1000, 7]], [[0.8109212936994514, 0.5, 0.25, 0.125, 0.8109212936994514, 0.5, 0.0625]], [[0.09658093675455971, 79.3038013402577, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832, 0.09658093675455971]], [[10, -6, 2, -5, 5, -5]], [[1, 1000, 5, -4, 5]], [[-1, -2, -3, -6, 0]], [[-1, -3, 6, -5, -3]], [[10, 100, 9, 1000, 10000, 100]], [[-1, -2, -2, 6, -2]], [[-2, -2, -3, 6]], [[0.5, 0.25, 0.5, 0.0625]], [[-1, 0, 6, 7, 6, -1]], [[1, -3, 1000, 5, 6, -4, 5, 6]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n"}
{"task_id": "Mbpp/728", "prompt": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n", "entry_point": "sum_list", "canonical_solution": "\ndef sum_list(lst1,lst2):\n  return [a + b for a, b in zip(lst1, lst2)] \n", "base_input": [[[10, 20, 30], [15, 25, 35]], [[1, 2, 3], [5, 6, 7]], [[15, 20, 30], [15, 45, 75]]], "atol": 0, "plus_input": [[[], []], [[1, 2, 3], [4, 5, 6]], [[10, 20, 30, 40], [5, 3, 2, 1]], [[0.5, 0.8, 1.2], [1.2, 0.3, 1.8]], [["a", "b", "c"], ["d", "e", "f"]], [[0.1, 0.2, 0.3, 0.4], [1, 2, 3, 4]], [[-1, -2, -3, -4], [1, 2, 3, 4]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[0.1, 0.2, 0.3, 0.4], [1, 2, 2, 4]], [[1, 30, 2, 4, 2], [1, 30, 2, 4, 2]], [[1, 3, 4], [1, 3, 4]], [[-1, -2, -3, -4, -3], [1, 2, 3, 4, 3]], [[0.1, 0.2, 0.3, 0.4, 0.4], [0.1, 0.2, 0.3, 0.4, 0.4]], [[3, 3, 4], [3, 3, 4]], [[0.1, 0.2, 0.4, 0.4, 0.1], [0.1, 0.2, 0.4, 0.4, 0.1]], [[10, 20, 30, 40], [6, 3, 2, 1]], [[5, 3, 2, 1], [5, 3, 2, 1]], [[10, 20, 30, 40], [20, 3, 2, 1]], [[0.1, 0.2, 0.4, 0.4, -5.070116511374234e-05, 0.1, 0.1], [0.1, 0.2, 0.4, 0.4, -5.070116511374234e-05, 0.1, 0.1]], [[-1, -2, -3, -4, -5, -6, -7, -4, -9, -10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4], [1, 2, 3, 4]], [[10, 20, 30, 40], [10, 20, 30, 40]], [[0.1, -5.070116511374234e-05, 0.2, 0.4, 0.4, -5.070116511374234e-05, 0.1, 0.1], [0.1, -5.070116511374234e-05, 0.2, 0.4, 0.4, -5.070116511374234e-05, 0.1, 0.1]], [[-1, -2, -3, -4], [-1, -2, -3, -4]], [[1, 3, 4, 5, 6, 7, 8, 9, 10, 7], [1, 3, 4, 5, 6, 7, 8, 9, 10, 7]], [[1, 40, 1, 4], [1, 40, 1, 4]], [[11, 20, 30, 40], [11, 20, 30, 40]], [[-1, -2, -3, -4, -5, -6, -7, -4, -9, -10], [-1, -2, -3, -4, -5, -6, -7, -4, -9, -10]], [[-1, -2, -3, -4, 3, -6, -7, -4, -9, -10], [-1, -2, -3, -4, 3, -6, -7, -4, -9, -10]], [[0.1, 0.2, 0.4, 0.2682347250149916, 0.4, -5.070116511374234e-05, 0.1], [0.1, 0.2, 0.4, 0.2682347250149916, 0.4, -5.070116511374234e-05, 0.1]], [[-1, -2, -3, -4, 3, -6, -7, 3, -4, -9, -10, -4], [-1, -2, -3, -4, 3, -6, -7, 3, -4, -9, -10, -4]], [[0.1, 0.12680036984068382, 0.3, 0.4], [1, 2, 2, 4]], [[-1, -3, -5, 3, -6, -7, 3, -4, -9, -10, -4], [-1, -3, -5, 3, -6, -7, 3, -4, -9, -10, -4]], [[-1, -2, -3, -4, 3, -6, -4, -9, -10], [-1, -2, -3, -4, 3, -6, -4, -9, -10]], [[-5, 11, 20, 20, 30, 40, 30, 11], [-5, 11, 20, 20, 30, 40, 30, 11]], [["a", "a", "b", "c", "b"], ["a", "a", "b", "c", "b"]], [[0.5, 0.8, 1.2, 0.8], [0.5, 0.8, 1.2, 0.8]], [[-1, -2, -3, -4, 3, -6, -4, -9, -10, -1], [-1, -2, -3, -4, 3, -6, -4, -9, -10, -1]], [[-1, -2, -3, -4, -6, 11, -4, -9, -10, -1], [-1, -2, -3, -4, -6, 11, -4, -9, -10, -1]], [[5, 3, 2, 2], [5, 3, 2, 2]], [[-5.070116511374234e-05, 0.5, 0.8, 1.4877489589365553, 0.8, 1.4877489589365553], [-5.070116511374234e-05, 0.5, 0.8, 1.4877489589365553, 0.8, 1.4877489589365553]], [[-1, -6, -2, -3, -4, 3, -6, -7, -4, -3, -9], [-1, -6, -2, -3, -4, 3, -6, -7, -4, -3, -9]], [[1, -2, -3, -4, -2], [1, -2, -3, -4, -2]], [[-1, -2, -3, -4, -6, 11, 40, -9, -10, -1], [-1, -2, -3, -4, -6, 11, 40, -9, -10, -1]], [[-1, -2, -3, -4, -5, -6, -7, -8, -10], [1, 2, 4, 5, 6, 7, 8, 9, 10]], [[-1, -6, -2, -3, -4, 3, -6, -7, -4, -3, -9, 3, -3], [-1, -6, -2, -3, -4, 3, -6, -7, -4, -3, -9, 3, -3]], [[1, -9, 3, 2, 4], [0.1, 0.5, 0.12680036984068382, 0.3, 0.4]], [[1, 3, 4, 1], [1, 3, 4, 1]], [[0.1, 0.2, 0.3, 1.020982984611004, 0.4], [0.1, 0.2, 0.3, 1.020982984611004, 0.4]], [[-1, -2, -4, -5, -6, -7, -4, -9, -11], [-1, -2, -4, -5, -6, -7, -4, -9, -11]], [[-1, -3, -5, 3, -6, -7, -4, -9, -10, -4], [-1, -3, -5, 3, -6, -7, -4, -9, -10, -4]], [[5, 3, 2, 2, 5], [5, 3, 2, 2, 5]], [[1, 3, 4, 5, 7, 7, 8, 9, 10, 7], [1, 3, 4, 5, 7, 7, 8, 9, 10, 7]], [[20, 3, 2, 1, 2], [20, 3, 2, 1, 2]], [[0.1, 0.2, 0.4, 0.2682347250149916, -5.070116511374234e-05, 0.1], [0.1, 0.2, 0.4, 0.2682347250149916, -5.070116511374234e-05, 0.1]], [[2, 3, 3, 4], [2, 3, 3, 4]], [[0, 6, -7, -4, -5, -6, -7, -8, -9, -10], [0, 6, -7, -4, -5, -6, -7, -8, -9, -10]], [[0.2, 0.4, 0.4910844678602658, 0.1, 0.4], [0.2, 0.4, 0.4910844678602658, 0.1, 0.4]], [[-1, -6, -2, -4, 3, -6, -7, -4, -3, -9, 3, -3], [-1, -6, -2, -4, 3, -6, -7, -4, -3, -9, 3, -3]], [[3, 2, 2, 5], [3, 2, 2, 5]], [[-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -7], [-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -7]], [[0.1, 0.3, 0.4], [0.1, 0.3, 0.4]], [[-1, -2, -3, -4, -5, -6, -7, -4, -9, -10, -4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 8]], [[3, 2, 1], [3, 2, 1]], [[0.1, 0.2, 0.3, 0.3394475696956425, 0.2], [0.1, 0.2, 0.3, 0.3394475696956425, 0.2]], [[1, 5, 2, 3, 4, 3], [1, 5, 2, 3, 4, 3]], [[1, 5, -7, 2, -10, 3, 4, 3], [1, 5, -7, 2, -10, 3, 4, 3]], [[-2, -3, -4, 3, -6, -4, -9, -10, -1], [-2, -3, -4, 3, -6, -4, -9, -10, -1]], [[2, 3, 4], [2, 3, 4]], [[1, 4, 40], [1, 4, 40]], [[-1, -2, -3, -4, -6, -7, 3, -4, -9, -10, -4], [-1, -2, -3, -4, -6, -7, 3, -4, -9, -10, -4]], [[11, 20, -5, 30, 30, 40], [11, 20, -5, 30, 30, 40]], [[1, 2, 3, 4, 4], [1, 2, 3, 4, 4]], [[1, 3, 2, 2], [1, 3, 2, 2]], [[-2, -3, -4, 3, -6, -4, -9, -10, -1, -6], [-2, -3, -4, 3, -6, -4, -9, -10, -1, -6]], [[-1, -2, -4, -5, 0, -6, -7, -4, -11, -7], [-1, -2, -4, -5, 0, -6, -7, -4, -11, -7]], [[2, 4, 4], [2, 4, 4]], [["a", "a", "b", "aa", "b", "b"], ["a", "a", "b", "aa", "b", "b"]], [[2, 4], [2, 4]], [[11, 20, -5, 30, 30, 40, 30], [11, 20, -5, 30, 30, 40, 30]], [[-1, -6, -4, -5, -6, -7, -4, -9, -11], [-1, -6, -4, -5, -6, -7, -4, -9, -11]], [[-1, -3, -5, 3, -6, -7, 3, -4, -8, -10, -4], [-1, -3, -5, 3, -6, -7, 3, -4, -8, -10, -4]], [[0.24244486712234534, 0.4, 0.4910844678602658, 0.1, 0.4, 0.1], [0.24244486712234534, 0.4, 0.4910844678602658, 0.1, 0.4, 0.1]], [[1, 2, 3], [5, 5, 6]], [["", "aa", "a", "a", "b", "c", "b"], ["", "aa", "a", "a", "b", "c", "b"]], [[-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -5, -7, -6, 2], [-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -5, -7, -6, 2]], [[0.24244486712234534, 0.4, 0.4910844678602658, 0.1, 0.4, 0.1, 0.4910844678602658], [0.24244486712234534, 0.4, 0.4910844678602658, 0.1, 0.4, 0.1, 0.4910844678602658]], [[-1, -2, -3, 9, -6, 11, -4, -9, -5, -10, -1, -1], [-1, -2, -3, 9, -6, 11, -4, -9, -5, -10, -1, -1]], [[0.1, 0.2, 0.3, 0.4], [1, 3, 4, 4]], [[-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -7, 1, -2], [-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -7, 1, -2]], [[0.1, 1.4877489589365553, 0.3, 0.2], [0.1, 1.4877489589365553, 0.3, 0.2]], [[-5.070116511374234e-05, 0.5, 0.8, 1.4877489589365553, 0.8, 1.4877489589365553, 1.4877489589365553, 1.4877489589365553], [-5.070116511374234e-05, 0.5, 0.8, 1.4877489589365553, 0.8, 1.4877489589365553, 1.4877489589365553, 1.4877489589365553]], [[2, 4, 3, 4], [2, 4, 3, 4]], [[3, 4], [3, 4]], [[-1, -3, -5, 3, -6, -7, 3, -3, -8, -10, -4, -4], [-1, -3, -5, 3, -6, -7, 3, -3, -8, -10, -4, -4]], [[3], [3]], [[1, -6, 3, 4, 4], [1, -6, 3, 4, 4]], [[0.2, 0.4, 0.4910844678602658, 0.4], [0.2, 0.4, 0.4910844678602658, 0.4]], [[-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -7, 1, -2, -3], [-1, 2, -6, -2, -3, 6, 3, -6, -7, -4, -3, -9, -7, 1, -2, -3]], [[2, 5, 4], [2, 5, 4]], [[2, -5, 11, 20, 20, 30, 40, 30, 11, 11], [2, -5, 11, 20, 20, 30, 40, 30, 11, 11]], [["d", "e", "f", "d", "d"], ["d", "e", "f", "d", "d"]], [[-5, 11, 20, 20, 30, 40, 30, 21, 11], [-5, 11, 20, 20, 30, 40, 30, 21, 11]], [[-5, 11, 20, 30, 40, 30, 11, 30], [-5, 11, 20, 30, 40, 30, 11, 30]], [[-9, -2, -3, -4, 3, -6, -4, -9, -10, -1, -6], [-9, -2, -3, -4, 3, -6, -4, -9, -10, -1, -6]], [[2, 3, 4, 4], [2, 3, 4, 4]], [[-1, -8, -6, -2, -3, -4, 3, -6, -7, -4, -3, -9, 3, -3], [-1, -8, -6, -2, -3, -4, 3, -6, -7, -4, -3, -9, 3, -3]], [[-1, -2, -3, -4, 3, -6, -4, -9, -10, -9], [-1, -2, -3, -4, 3, -6, -4, -9, -10, -9]]], "contract": "\n  assert isinstance(lst1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(lst2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]\n"}
{"task_id": "Mbpp/730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n", "entry_point": "consecutive_duplicates", "canonical_solution": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, _ in groupby(nums)] \n", "base_input": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]], [["a", "a", "b", "c", "d", "d"]], [["a", "a", "b", "c", "d", "d", "a", "a"]]], "atol": 0, "plus_input": [[["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange"]], [["a", "a", "b", "c", "d", "d", "a", "a", "e", "e", "f", "f", "f", "g", "h", "i", "j", "j"]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi"]], [["a", "a", "b", "c", "d", "d", "e", "f", "g", "g", "h", "i", "j", "j", "k", "k", "k", "l", "m", "m"]], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9]], [["a", "a", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "f", "g", "h", "i", "j", "j", "f"]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 3, 5, 6, 6, 7, 7, 7, 8, 8, 9]], [["a", "a", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "g", "h", "i", "j", "j", "f"]], [["a", "a", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "h", "i", "j", "j", "f"]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]], [["banana", "lm", "d", "g", "k", "CPAKrs", "y", "l"]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi"]], [["a", "a", "c", "d", "d", "a", "a", "e", "f", "f", "g", "h", "i", "j", "j", "f"]], [["j", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "h", "i", "j", "j", "f"]], [["bb", "apple", "XkdbOWvF", "wUpBgeXR", "UKW", "e", "f", "l", "lm", "CPAKrs"]], [["apple", "apple", "banana", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple"]], [["a", "a", "c", "d", "g", "d", "a", "a", "e", "f", "f", "g", "h", "i", "j", "j", "f"]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 4]], [["j", "bbe", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "h", "i", "j", "j", "f"]], [[true, null]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 3, 6, 6, 7, 6, 7, 7, 8, 9]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [["apple", "apple", "banana", "lm", "orange", "apple", "banana", "banana", "banana", "apple", "kiwi", "orange"]], [["apple", "apple", "banana", "apple", "bbe", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "bbe"]], [["a", "a", "bb", "c", "d", "a", "a", "e", "f", "f", "f", "g", "h", "i", "j", "j", "f"]], [[true, false, null]], [["a", "a", "beb", "c", "d", "d", "a", "a", "e", "f", "f", "f", "g", "i", "j", "j", "f"]], [["banana", "lm", "d", "g", "k", "CPAKrs", "y", "ll", "CPAKrs"]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi", "kiwi"]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 7]], [["a", "a", "", "bb", "c", "d", "a", "a", "e", "f", "f", "f", "g", "h", "i", "j", "j", "f"]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 1]], [["a", "a", "bb", "c", "d", "a", "a", "e", "h", "f", "f", "g", "h", "i", "j", "j", "f"]], [["a", "a", "c", "d", "g", "d", "a", "a", "e", "f", "f", "y", "g", "h", "i", "j", "j", "f"]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 0, 0]], [[true, false]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 3, 5, 6, 6, 7, 7, 7, 8, 8, 9, 3]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 5, 3, 5, 6, 6, 7, 7, 7, 8, 8, 9]], [["apple", "apple", "banana", "orange", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "banana"]], [["a", "a", "bb", "c", "d", "b", "a", "a", "e", "h", "f", "f", "g", "h", "i", "jh", "j", "j", "f"]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 7]], [["apple", "banana", "orangbe", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi", "kiwi"]], [["banana", "lm", "d", "g", "k", "CPAKrs", "y"]], [["a", "a", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "f", "g", "h", "i", "j", "j", "f", "j"]], [["apple", "banana", "orange", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "banana"]], [["banana", "lm", "d", "orange", "g", "k", "CPAKrs", "y", "ll", "CPAKrs"]], [["a", "a", "b", "c", "d", "d", "a", "a", "e", "e", "f", "f", "f", "g", "h", "i", "j", "j", "f"]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 3, 7, 7, 8, 6, 8, 9]], [["beb", "apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange"]], [["a", "orange", "c", "d", "d", "a", "a", "e", "e", "f", "f", "f", "g", "h", "i", "j", "j", "h"]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi", "kiwi", "orange"]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 3, 7, 0, 7, 8, 6, 8, 9, 9]], [[1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 7]], [["a", "a", "b", "c", "d", "d", "a", "a", "e", "e", "f", "f", "f", "g", "h", "j", "j"]], [["beb", "apple", "apple", "banana", "orange", "apple", "banana", "banana", "kiwi", "kiwi", "orange"]], [[true, false, true, null]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiCPAKrswi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi", "kiwi"]], [["apple", "apple", "banana", "apple", "bbe", "banana", "banana", "kiwi", "kiwi", "orange", "bbe", "apple"]], [[true, true, false]], [[1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 7, 8]], [["a", "a", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "f", "g", "h", "i", "j", "j", "f", "j", "a"]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwkiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi", "kiwi"]], [["banana", "lm", "d", "jh", "g", "k", "CPAKrs", "y", "ll", "CPAKrs"]], [["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "apple", "orange", "kiwi", "kiwi", "kiwi", "kiwi", "banana"]], [["apple", "applle", "banana", "apple", "orangbe", "banana", "banana", "kiwi", "kiwi", "orange", "bbe", "apple", "apple"]], [["a", "a", "a", "b", "c", "d", "d", "a", "a", "e", "e", "f", "f", "f", "g", "h", "i", "j", "j"]], [["banana", "lm", "d", "", "k", "y", "l"]], [["apple", "XkdbOWvF", "wUpBgeXR", "UKW", "e", "f", "l", "llm", "CPAKrs"]], [[true, null, null]], [[true, true]], [["beb", "apple", "apple", "banana", "oapplerange", "apple", "banana", "banana", "kiwi", "kiwi", "orange"]], [[false, true, true, false, null, true]], [["banana", "lm", "d", "g", "k", "CPAKrs", "y", "banana"]], [["j", "bbe", "bb", "c", "d", "d", "a", "a", "e", "f", "f", "h", "i", "j", "j", "f", "i"]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 2, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [["banana", "lm", "baanbana", "d", "jh", "g", "k", "banbana", "CPAKrs", "y", "ll", "CPAKrs"]], [["e", "beb", "i", "apple", "apple", "banana", "orange", "apple", "orangbe", "banana", "banana", "kiwi", "kiwi", "orange"]], [["a", "a", "", "c", "d", "d", "e", "f", "g", "g", "h", "i", "j", "j", "k", "k", "k", "l", "m", "m"]], [["apple", "banana", "orange", "banana", "banana", "banana", "kiwi", "kiwi", "orange", "kiwi"]], [[1, 2, 2, 3, 1, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 7, 8]], [["a", "a", "bb", "c", "d", "b", "a", "f", "a", "e", "h", "f", "f", "g", "h", "i", "jh", "j", "j", "f"]], [["banana", "lm", "d", "jh", "g", "k", "CPAKrs", "y", "llm", "CPAKrs"]], [["a", "a", "b", "c", "d", "d", "a", "a", "e", "f", "f", "f", "g", "h", "i", "j", "j"]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 7, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 3, 7, 0, 2, 7, 8, 6, 8, 9, 9]], [[0, 0, 1, 2, 4, 4, 5, 6, 6, 7, 0, 0, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 4, 6, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0, 9]], [["banana", "lm", "d", "k", "CPAKrs", "y", "banana"]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0, 4]], [["j", "bb", "c", "d", "d", "a", "a", "f", "f", "h", "i", "j", "j", "f"]], [[0, 0, 1, 2, 4, 4, 4, 5, 1, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 3, 9, 7, 9]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 7, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 3, 2, 2, 1, 0, 0]], [[true, false, false]], [[false, true, false]], [["banana", "lm", "d", "g", "k", "y", "banana"]], [["e", "beb", "i", "apple", "apple", "banana", "orange", "apple", "ee", "orangbe", "banana", "banana", "kiwi", "kiwi", "orange"]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 7, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0]], [["banana", "baanbana", "lm", "CPAKrs", "d", "g", "k", "CPAKrs", "y", "y"]], [["apple", "banana", "orange", "banana", "banana", "kiwi", "kiwi", "orange", "banana"]], [["banana", "lm", "d", "jh", "g", "k", "CPAKrs", "y", "llm", "CPAKrs", "CPAKrs"]], [["apple", "bb", "apple", "banana", "lm", "orange", "apple", "banana", "banana", "apple", "kiwi", "orange"]], [["j", "bb", "c", "d", "d", "a", "a", "f", "f", "h", "i", "j", "j", "f", "d", "d", "d"]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 2, 1, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]]], "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n"}
{"task_id": "Mbpp/731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n", "entry_point": "lateralsurface_cone", "canonical_solution": "\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n", "base_input": [[5, 12], [10, 15], [19, 17]], "atol": 0, "plus_input": [[2.5, 8.3], [3.7, 12.9], [6.2, 15.1], [15.1, 15.1], [5.4641498635818575, 12.9], [6.108468165504471, 5.4641498635818575], [22.446376239642667, 15.1], [3.7, 3.7], [6.108468165504471, 2.5], [14.989253097238434, 15.1], [2.143169966040728, 6.511574251772499], [2.627082370967182, 2.627082370967182], [3.7, 4.023046702194817], [15.1, 11.49988377404092], [2.8826303510762887, 2.96560035285773], [5.2042629714411, 6.2], [3.7, 2.8826303510762887], [2.8826303510762887, 5.2042629714411], [5.2042629714411, 12.9], [6.108468165504471, 15.1], [15.1, 6.511574251772499], [4.407307162865205, 2.8826303510762887], [1.7694488502615817, 15.1], [15.1, 6.249586159065888], [1.7694488502615817, 2.627082370967182], [5.4641498635818575, 12.03724008887459], [2.8826303510762887, 15.1], [5.4641498635818575, 16.102257473745404], [12.9, 16.102257473745404], [6.108468165504471, 5.380851620559562], [1.957071859413805, 5.098894738443001], [11, 11], [12, 12], [5.098894738443001, 6.2], [15.1, 22.446376239642667], [15.3666581306107, 15.1], [4.023046702194817, 12.9], [6.2, 16.102257473745404], [5.2042629714411, 2.8826303510762887], [3.7, 2.202518121053708], [15.1, 5.380851620559562], [3.7, 2.96560035285773], [5.098894738443001, 6.108468165504471], [6.108468165504471, 1.7797866098658295], [3.7, 3.1612397255085782], [4.819824980515893, 2.96560035285773], [1.3204950488261216, 1.7694488502615817], [3.7, 3.169916315777736], [14.262052494292515, 14.262052494292515], [16.102257473745404, 15.1], [1.756275636424042, 2.627082370967182], [6.2, 6.2], [13.54444281783779, 14.262052494292515], [8.930747528442026, 6.2], [9.53872133318414, 9.53872133318414], [9.53872133318414, 13.488930114910085], [1.3204950488261216, 13.454394825202115], [13.454394825202115, 3.7], [1.168485461090314, 1.7797866098658295], [15.1, 13.454394825202115], [11.49988377404092, 11.49988377404092], [4.819824980515893, 3.1612397255085782], [11.49988377404092, 4.819824980515893], [14.989253097238434, 15.964399808348505], [9.53872133318414, 2.8826303510762887], [4.407307162865205, 4.407307162865205], [16.102257473745404, 2.96560035285773], [16.102257473745404, 4.023046702194817], [3.1612397255085782, 3.301313980213199], [15.1, 1.756275636424042], [4.650640443650852, 4.650640443650852], [13.454394825202115, 13.454394825202115], [2.8757653923861417, 1.5442119948798239], [20.732326276101357, 14.262052494292515], [8.930747528442026, 1.756275636424042], [15.3666581306107, 4.407307162865205], [5.488488789359107, 4.023046702194817], [11, 12], [5.4641498635818575, 14.989253097238434], [2.8757653923861417, 5.2042629714411], [15.1, 2.627082370967182], [2.627082370967182, 1.756275636424042], [2.8826303510762887, 4.819824980515893], [4.819824980515893, 2.2212597177766646], [11.49988377404092, 13.454394825202115], [1.756275636424042, 1.756275636424042], [2.627082370967182, 2.4064990340562504], [6.038238072589067, 12.9], [14.989253097238434, 2.143169966040728], [1.5442119948798239, 5.2042629714411], [2.5, 2.202518121053708], [5.098894738443001, 15.1], [6.253045083887592, 13.80797667692187], [6.253045083887592, 2.96560035285773], [5.488488789359107, 3.8770686725864594], [11.49988377404092, 6.777867942699338], [15.1, 14.964415747029287], [15.279843983128266, 11.49988377404092], [7.547824026948591, 5.098894738443001], [5.2042629714411, 5.2042629714411], [6.2511034096749984, 5.4641498635818575], [2.8757653923861417, 0.9095414881896842], [15.34061760559046, 2.8826303510762887]], "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388\n"}
{"task_id": "Mbpp/732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n", "entry_point": "replace_specialchar", "canonical_solution": "\nimport re\ndef replace_specialchar(text):\n return re.sub(\"[ ,.]\", \":\", text)\n", "base_input": [["Python language, Programming language."], ["a b c,d e f"], ["ram reshma,ram rahim"]], "atol": 0, "plus_input": [["1,2 3,4 5.6"], ["This is a sentence with multiple spaces. It also has multiple commas, and some dots."], ["1.2.3.4,5,6,7 8,9.10 11.12"], ["First line. Second line, with a comma and a dot. Third line with only spaces."], ["   This     is   a  sentence     with      random    spaces.    "], ["Hello...world.....testing,,123"], [".....,.. .,. ..."], ["1,,,,,,23...456,,,,78......9,,,,0"], ["Python language.....Programming language..."], [""], ["First line... Second line,,, with a comma and a dot...."], ["No special characters here"], ["dot."], ["multiple"], ["1,,,,,,23...456,,,,78.......9,,,,0"], ["Second"], [".....,..."], ["First line. Second line, with a comma and a dot. 1,2 3,4 5.6 only spaces."], ["It"], ["aprKPinjxV"], ["line,,,"], ["charactrers"], ["No spPythonecial characters here"], ["This"], ["SeThiscond"], ["chareactrers"], ["cond"], ["Selanguage.....ProgrammingThis.s....,..d"], ["is"], ["coond"], ["No spPytho1,,,,,,23...456,,,,P78.......9,,,,0necial characters here"], ["1.2.3.4,5,6,7 18,9.10 11.12"], ["special"], ["dcoond"], ["   Thsis     is   a    "], ["First line... Second line,,, with a comma and a dont...."], ["c"], ["First loine. Second line, with a comma and a dot. 1,2 3,4 5.6 only spaces."], ["lin,e,"], ["coondFirst line. Second line, with a comma and a dot. 1,2 3,4 5.6 only spaces."], ["dcodont....ond"], ["No"], ["comma"], ["1,2 4 5.6"], ["No spPythonecial charaFirst line... Second line,,, with a comma and a dot....cters here"], ["VWtW"], ["dot...."], ["No spPythonecial charachere"], ["1,2 3,5.6"], ["..."], ["Python languagoe.....Programmionlyng language..."], ["3,5.6"], ["No spPytho1,,,,,,23...456,,,,P78.......9,also,,,0necial characters here"], ["1,,,,,,23...456,,,,78....0"], ["5.6"], ["TThis"], ["3,545,6,7.6"], ["ionlys"], ["18,9.10"], ["33,545,6,7.6"], ["chVWtWareactrers"], ["Selanguage.....Progrdont....ammingThis.s....,..d"], ["has"], ["dcoondVWtW"], ["61,2 4 5.6"], ["haThis is a sentence with multiple spaces. It also has multiple commas, and some dots.s"], ["1.2.3.14,5,6,7 8,9.10 11.12"], ["1,2d"], ["651,2 4 5.6"], ["haThis"], ["and"], ["1line.2.3.14,5,6,7 8,9.10 11.12"], ["1,2 4.....,... 5.6"], ["1,,,,,,,78.......9,,,,0"], ["1,,,,,,23comma...456,,,,78.......9,,,,0"], ["nYdDDY"], ["TThichVWtWareactrerss"], ["ccommma"], ["language.....ProgrNo special characters hereamming"], ["First loine. Secondlanguage.....Programming line, with a comma an4 5.6 only spaces."], ["dSecond"], ["1.2.3.4,5,6,87 18,9.10 11.12"], ["1,2 3,4,545,6,7.6 5.6"], ["3,56.6"], ["lin,1line.2.3.14,5,6,7,"], ["1,,,,,commas,,23...456,,,,78.......9,,,,0"], ["6ccommma51,2"], ["1line.2.3.14,5,6,7"], ["3,545"], ["1.2.3.4,15,6,7 8,9.10 11.12"], ["...."], ["VWWtW"], ["First line. Second line, with a comma and a dot. Third line with only   This     is   a  sentence     with      random    spaces.     spaces."], ["dot....cters"], ["1.2   Thsis     is   a    .3.4,5,6,7"], ["1.line.2.3.14,5,6,7"], ["First line. Second line, with a comma and a dot. Third line with o is   a  sentence     with      random    spaces.     spaces."], ["mcomma"], ["1,,,,,,,78.......9,,,,0This is a sentence with multiple spaces. It also has multiple commas, and some dots."], ["1.2"], ["dots."], ["Hello...world.....testin1,2 4.....,... 5.623"], ["SecondhaThidSeconds"], ["languagoe.....Programmionlyng"], ["Thi1,,,,,,,78.......9,,,,0This is a sentence with multiple spaces. It also has multiple commas, and some dots.s"], ["1,,,,,,,78.......9,,,,0This is a sentence with multihaThisple spaces. It also has multiple commas, and some dots."], ["1.2.3.4,5,6,7 81.12"], ["55.6"], ["dScondecond"], ["1language.....Programming"], ["   This     is   a  sentence     with      randoms.    "], ["coma"]], "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n"}
{"task_id": "Mbpp/733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n", "entry_point": "find_first_occurrence", "canonical_solution": "\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "base_input": [[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6]], "atol": 0, "plus_input": [[[5], 5], [[5, 5, 5, 5, 5], 5], [[5, 5], 5], [[5, 5, 5], 5], [[5, 5, 5, 5], 5], [[5, 5, 5, 5, 5, 5], 5], [[5, 5, 5, 5, 6], 5], [[5, 5, 5, 6], 5], [[5, 5, 5, 6], 6], [[5, 5, 5, 5, 6], 6], [[5, 5, 5, 6, 6], 5], [[5, 5, 6], 6], [[5, 5, 6], 5], [[4, 5, 5, 5, 6], 6], [[4, 5], 5], [[5, 6], 5], [[5, 6], 6], [[5, 5, 5, 5, 5, 5, 5], 5], [[5, 5, 5, 6, 6, 6], 5], [[5, 6, 6], 5], [[4, 4, 5, 5], 5], [[4, 4, 5, 5], 4], [[5, 5, 5, 6, 6], 6], [[5, 5, 6, 6, 6], 5], [[4, 4, 5], 5], [[5, 5, 5, 5, 5, 5, 5, 5], 5], [[4, 5, 5, 5, 6], 5], [[4, 4, 4, 5], 5], [[4, 4, 5], 4], [[5, 5, 5, 6, 6, 6, 6], 5], [[4, 5, 5, 6, 6, 6], 5], [[4], 4], [[4, 5], 4], [[5, 5, 5, 5, 5, 5, 5, 5, 5], 5], [[5, 6, 6, 6], 5], [[4, 5, 5, 5, 5, 5, 5, 5, 5], 4], [[4, 5, 5], 4], [[5, 5, 5, 5, 6, 6], 6], [[5, 5, 5, 6, 6, 6, 6], 6], [[5, 5, 5, 6, 6, 6], 6], [[4, 4, 4, 4, 5], 5], [[4, 5, 5, 6, 6, 6], 4], [[4, 4, 5, 5, 5], 4], [[5, 5, 5, 5, 6, 6, 6], 5], [[5, 5, 5, 5, 6, 6], 5], [[4, 4, 4], 4], [[4, 5, 6], 5], [[5, 6, 6, 6], 6], [[4, 5, 5, 5, 5, 6], 5], [[5, 5, 6, 6, 6], 6], [[4, 5, 6, 6, 6, 6], 5], [[4, 6, 6, 6], 6], [[4, 4, 5, 5, 5, 5], 4], [[5, 6, 6, 6, 6], 5], [[5, 5, 6, 6, 6, 6], 6], [[4, 4], 4], [[4, 6, 6, 6], 4], [[4, 6, 6, 6, 6], 4], [[4, 5, 5, 6, 6, 6, 6], 5], [[5, 6, 6, 6, 6], 6], [[5, 5, 6, 6], 6], [[5, 5, 6, 6, 6, 6], 5], [[5, 5, 5, 6, 6, 6, 6, 6, 6], 5], [[5, 6, 6, 6, 6, 6], 5], [[4, 5, 6, 6, 6], 5], [[4, 5, 5, 6, 6], 6], [[4, 5, 5, 5, 6, 6], 6], [[4, 5, 5, 6, 6, 6], 6], [[4, 6], 4], [[4, 4, 5, 5, 5, 5, 5], 4], [[4, 5, 6], 4], [[5, 6, 6, 6, 6, 6], 6], [[6], 6], [[4, 5, 5, 6, 6, 6, 6], 6], [[4, 4, 4, 4], 4], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5], [[4, 5, 6, 6, 6], 4], [[4, 4, 4, 5, 5], 4], [[4, 5, 6], 6], [[4, 5, 5, 5, 5, 6], 6], [[4, 5, 5, 5, 5], 5], [[5, 5, 5, 5, 6, 6, 6, 6], 5], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5], [[4, 6], 6], [[4, 5, 5, 5, 5], 4], [[4, 5, 5, 5, 5, 5], 5], [[4, 5, 5, 5, 6, 6], 5], [[4, 4, 5, 5, 5, 6], 6], [[4, 4, 5, 5, 5, 5], 5], [[4, 5, 5, 5, 6, 6, 6], 5], [[4, 5, 5, 5, 5, 6], 4], [[4, 4, 4, 5], 4], [[5, 5, 5, 6, 6, 6, 6, 6, 6, 6], 5], [[4, 4, 4, 5, 5], 5], [[6, 6], 6], [[4, 5, 5, 5, 7], 5], [[4, 4, 5, 5, 5], 5], [[4, 5, 5, 5, 6], 4], [[4, 5, 6, 6, 6, 6], 4], [[5, 5, 5, 5, 5, 6, 6], 6], [[4, 5, 6, 6, 6, 6], 6], [[4, 5, 5, 6], 5]], "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(a, (int, float)) for a in A), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(A, A[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert x in A, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n"}
{"task_id": "Mbpp/734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n", "entry_point": "sum_Of_Subarray_Prod", "canonical_solution": "\ndef sum_Of_Subarray_Prod(arr):\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n", "base_input": [[[1, 2, 3]], [[1, 2]], [[1, 2, 3, 4]]], "atol": 0, "plus_inputcontract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84\n"}
{"task_id": "Mbpp/735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n", "entry_point": "toggle_middle_bits", "canonical_solution": "\ndef toggle_middle_bits(n): \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n", "base_input": [[9], [10], [11], [65], [77]], "atol": 0, "plus_input": [[2147483647], [123456], [0], [9223372036854775807], [34211], [2047], [31580], [123455], [31579], [34212], [2147483646], [false], [123453], [31578], [true], [2147483645], [31581], [1], [34213], [123454], [34210], [2046], [2], [2147483648], [53], [31577], [9223372036854775806], [34215], [9223372036854775805], [34208], [34214], [123457], [34209], [78], [3], [31582], [52], [9223372036854775804], [58], [9223372036854775803], [59], [60], [57], [34216], [9223372036854775802], [51], [2045], [9223372036854775808], [31576], [2044], [79], [123452], [2147483644], [123458], [123451], [31583], [54], [123459], [2147483649], [31575], [123460], [56], [95], [94], [123450], [123449], [55], [9223372036854775809], [9223372036854775801], [34217], [34207], [31584], [123448], [4], [123461], [2043], [93], [16], [80], [31574], [2147483643], [81], [50], [91], [47], [123464], [123465], [2147483650], [9223372036854775810], [123466], [9223372036854775800], [49], [34218], [92], [46], [34219], [83], [2048], [48], [15], [65], [31585], [31586], [2147483651], [2147483642], [96], [17]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011\n"}
{"task_id": "Mbpp/736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n", "entry_point": "left_insertion", "canonical_solution": "\nimport bisect\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n", "base_input": [[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 7]], "atol": 0, "plus_input": [[[], 1], [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 15], [[5], 5], [[], 5], [[], [24]], [[], 16], [[], 4], [[], []], [[], 24], [[], 26], [[], [24, 16, 15, -86, 25, 18, -63, 1, 5, 4]], [[], [30, 24]], [[], 30], [[], [false, false, true, true, true, false, true, false]], [[14], 14], [[], ["rfvEP", "kSSJBNc", "Ck", "MlFV", "NCpr"]], [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 0], [[], 22], [[], -86], [[], [3, 24, 16, 15, -86, 25, 18, -63, 1, 5, 4]], [[false, true, true], 26], [[], ["MlFV", "IwZvTRzpU"]], [[], [3, 24, 16, 15, -86, 25, 18, -63, 1, 5, 4, 16]], [[14, 14], 2], [[], [30, 25, 24]], [[], [-53.40737393286277]], [[0, 2, 4, 6, 8, 10, 12, 14, 16, 19, 20, 22, 22, 26, 28, 30], 0], [[], 31], [[], 2], [[], [24, 16, 15, -86, 24, 18, -63, 1, 5, 4]], [[], [24, 24]], [[], 19], [[5, 5], 10], [[], 6], [[], [24, 16, 15, -86, 25, 18, -63, 22, 1, 5, 4, -86, 18]], [[], ["MlFV", "IwZvTRkSSJBNczpU"]], [[], 18], [[], [6, -56, 10, 15, 0]], [[0, 1, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 15], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu"]], [[14, 14, 14], 3], [[5, 5], 3], [[5, 5], 24], [[], [6, -56, 10, 15, 0, 0]], [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 14], [[], [30, 24, 30]], [[], 25], [[], [false, false, false, false, true, false, true, false]], [[], [true, false, true, true, true, false, true, false, false, true]], [[5, 5], 19], [[14], 2], [[], [30, 25, 25]], [[], [false, true, true]], [[5, 5], 22], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu", "xu"]], [[14], 1], [[14], 24], [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 23, 26, 28, 30], 1], [[], [false, true, false, true, true, true, false, true, false, false, true]], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu", 30]], [[], -85], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu", 30, 30]], [[], [30, 25, 26, 25]], [[], [false, false, true, true, false, true, false, true, false]], [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 26, 28, 30], 0], [[], 0], [[true, true], 25], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu", 10]], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu", "xu", 10]], [[5, 5], 9], [[], -87], [[true, true, true], 26], [[], [{"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "xu"]], [[], [70.96164714216567, -53.40737393286277]], [[4, 5], 9], [[5], 10], [[false, true, true, true, true], 11], [[3, 5, 5], 3], [[], ["hEMq", "rfvEP", "kSSJBNc", "rfvEP", -16.540016490531514, -70.3664297248564, true, false, false, false]], [[5, 5], 11], [[9], 10], [[], 3], [[14, 14], 3], [[], [1, -63, 62, -85]], [[5, 5], 18], [[], [-84, {"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, 10, -16.540016490531514, 30, "M", "xu", 10]], [[true], 25], [[], [10, -16.540016490531514, 30, "xu"]], [[5, 5, 5], 10], [[], [{"Ck": "MlFV", "IwZvTRkSSJBNczpU": "DlrME", "rfvEP": "M", "xjY": "IwZvTRzpU", "GVfLSKzrND": "IwZvTRkSSJBNczpU", "MlFV": "WghKoONC", "": ""}, -16.540016490531514, 30, "xu"]], [[], [10]], [[false, true, true, true, true], 12], [[5, 5, 5], 8], [[], [20, 24, 16, 15, -86, 25, 18, -63, 22, 1, 5, 4, -86, 18, 24]], [[5], 18], [[14, 14], 14], [[14, 14], 4], [[14], 31], [[], [true, true]], [[5, 5, 5, 5], 8], [[11, 22], 24], [[], 11], [[14, 14], 5], [[5], -84]], "contract": "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x <= y for x, y in zip(a, a[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4\n"}
{"task_id": "Mbpp/737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n", "entry_point": "check_str", "canonical_solution": "\nimport re \ndef check_str(string): \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n", "base_input": [["annie"], ["dawood"], ["Else"]], "atol": 0, "plus_input": [["H3llo"], ["_Eelse"], ["Anna18"], ["__Danielle"], ["_aBbbb"], ["!Uuiouy"], ["1Abb"], ["1Abb_Eelse"], ["H3ll__lDanielle"], ["_BaBbbb"], ["Ann_aBbbba18"], ["H3!Uuiouylo"], ["b_BaBbbb"], ["!1Abb_Eelseouy"], ["1AbH3!Uuiouyloelse"], ["An_aBbbba18"], ["An_aBbbba1Anna188"], ["1AbH3!Uuiou__Danielleyloelse"], ["_Eels"], ["H3!Uylo"], ["13AbH3!Uuiouyloelse"], ["1AbH3!Uuio13AbH3An_aBbbba1Anna188Uuiouyloelseu__Danielleyloelse"], ["1Ab"], ["!1Abb_E__Danielleelseouy"], ["13AbH3!UuiouyAnn_aBbbba18loelse"], ["H3!yUylo"], ["AnAnna18n_aBbbba18"], ["AAn_aBbbba18"], ["!1Abb_E__DanielleelAnA!1Abb_E__Danielleelseouynna18n_aBbbba18seou1ABbH3!Uuiouyloaelsey"], ["1AbH3!Uuiou__Danielleeyloelse"], ["!UuH3ll__lDanielleiouy"], ["Anna1n8"], ["1AbAnAnna18n_aBbbba18"], ["!1Abb_E__DanielleelAnA!1Abb_E__Daniellleelseouynna18n_aBbbba18seou1ABbH3!Uuiouyloaelsey"], ["13AbH3!UuiouyAnn_aBbbba18lo3else"], ["!AAn_aBbbba181Abb_Eels_eouy"], ["H3ll__lDaniell"], ["!AAn_aBbbba181_EelsAy"], ["H3!ylo"], ["1AbH3!Uuio13AbH1AbH3!Uuiou__Danielleyloelse3An_aBb_aBbbblseu__Danielleyloelse"], ["!Uy"], ["1AbAnAnna18n_aH3ll__lDanielleBbbba18"], ["A1AbAnAnna18n_aH3ll!1Abb_E__DanielleelAnA!1Abb_E__Danielleelseouynna18n_aBbbba18seou1ABbH3!UuiouyloaelseynielleBbbba18"], ["13AbH3!3Uuiouyloelse"], ["1AbH3!Uuio13AbH3An_aBbbba1Anna188Uuiouyloelseu__Danielleyloele"], ["An_aB"], ["__DanDielle"], ["1AbH3!Uuio11AbH3!Uuio13AbH3An_aBbbba1Anna188Uuiouyloelseu__Danielleyloele3AbH3An_aBbbba1Anna188Uuiouyloelseu__Danielleyloelse"], ["1AbAnAnna18n_aH3ll__lDanielleBbbba181Ab"], ["A1AbAnAnna18n_aH3ll!1Abb_E__DanielleeH3ll__lDanielllAnA!1Abb_E__Danielleelseouynna18n_aBbbba18seou1ABbH3!UuiouyloaelseynielleBbbba18"], ["H3!yl!o"], ["__DanDiel13AbHi3!UuiouyAnn_aBbbba18loelsele"], ["Annan1n8"], ["1AbAnAnnaa18n_aBbb1AbH3!Uuiouyloelseba18"], ["!1Abb_E__DanielleelseoEuy"], ["!1Abb_E__DanielleelAnA!1Abb_E__Daniellleelseouynna18n_aBbb1AbAnAnna18n_aH3ll__lDanielleBbbba181Abba18seou1ABbH3!Uuiouyloaelsey"], ["y"], ["An_aaBbbbaA1Anna188"], ["Aan_aB"], ["H3llH3!yl!oo"], ["!1Abb_Eelseou1Ab"], ["13AbH3!Uuioulyloelse"], ["H3!yo"], ["H3!yylo"], ["1AbH3!Uuiou__Danielleeyloe!AAn_aBbbba181Abb_Eels_eouy"], ["1AbAnAnnaa18nb_aBbb1AbH3!Uuiouyloelseba18"], ["13AbH3!U_uiouyAnn_aBbbba18loelH3!yUylose"], ["!1Abb_1AbH3!Uuiou__Danielleeyloe!AAn_aBbbba181Abb_Eels_eouyEelseouy"], ["1AbAnAnnaa18n_aBbb1AbH3!Uuiouyloelseba18Annan1n8"], ["fXdDfqe"], ["H3!yllo"], ["1AbH3!Uuio13AbH3An_aBbbba1Anna188Uuiouylboelseu__Danielleyloele"], ["H!Uy3!Uylo"], ["13AbH3!Uuiouyloelsee"], ["1AbAnAnna18n_aH3ll__lDanielleBbbba181__DanDielleAb"], ["!U!uH3ll__lDanielleiouy"], ["1Abb_EelseAan_aB"], ["13AbH3!Uuiou1AbH3!Uuiou__Danielleeyloelseyloelse"], ["AnnH3!yl!oa1n8"], ["An_aaBbbbaA1Ann8"], ["1AbAnAnnaa18nb_aBb1AbH3!Uuiouyloelseb1AbH3!Uuiouyloelseba18"], ["An_aaBbbbaA1Anna18"], ["!AAn_aBbbba181Abb_Eel1AbH3!Uuiou__Danielleyloelses_eouy"], ["!UuH3!Uyloiouy"], ["Ann_aBbbbba18"], ["PQYQGaD"], ["!1Abb_1AbH3!Uuiou__Danielleeyloe!AAn_aBbbba181Abb_Eels_e"], ["1AbAnAnna18n_aH3ll_l_lDanielleBbbba18"], ["!1Abb_1AbH3!Uuiou__Danielleeyloe!AAn_aBbbba181AAbb_Eels_e"], ["1AbH3!Uuio131AbH3!Uuiou__DanielleeyloelseAbH3An_aBbb1AbAnAnnaa18nb_aBbb1AbH3!Uuiouyloelseba18ba1Anna188Uuiouylboelseu__Danielleyloele"], ["_"], ["1AbH3!UuiHo13AbH3An_aBbbba1Anna188Uuiouyloelseu__Danielleyloelse"], [""], ["!1Abb_1A"], ["1AbH3!Uuio13AbH3An_aBbbba1Anna188aUuiouyelboelseu__DanielleyloelAn_aaBbbbaA1Ann8e"], ["__DaAnn_aBbbba18nielle"], ["1AbH3!Uu_io13AbH3An_aBbbba1Anna188Uuiouylboelseu__Danielleyloele"], ["1AbH3!Uuio131AbH3!Uuiou__DanielleeyloelseAbH3An_aBbb1AbAnAnnaa18nb_aBbb1AbH3!Uuiouyloelseba18ba1Anna188Unielleyloe1AbH3!Uuiou__Danielleyloelsee"], ["H3!Uuioouo"], ["Ann_AaBbbbba18"], ["H!Uy3!Uyloo"], ["__DaAnn_aB1AbAnAnna18n_aH3ll__lDanielleBbbba181Abbbba18nielle"], ["oH3lHlo"], ["A1AbAnAnna18n_aH3ll_l_lDanielleBbbba18nn_aBbbba18"], ["!AAn_aBbbba181Abb_Eels_eouey"], ["!U!uH3ll__lDanielle1Abb_EelseAan_aBiouy"], ["_Ba!AAn_aBbbba181Abb_Eel1AbH3!Uuiou__Danielleyloelses_eouyBbbb"]], "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")\n"}
{"task_id": "Mbpp/739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n", "entry_point": "find_Index", "canonical_solution": "\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n", "base_input": [[2], [3], [4]], "atol": 0, "plus_input": [[5], [1], [100], [2], [4], [6], [99], [101], [true], [3], [98], [7], [8], [9], [10], [57], [12], [11], [13], [91], [102], [14], [90], [56], [54], [97], [55], [53], [103], [52], [94], [92], [104], [58], [15], [95], [16], [51], [93], [59], [17], [96], [83], [82], [89], [18], [60], [84], [19], [62], [50], [42], [61], [49], [48], [88], [81], [106], [41], [40], [105], [85], [20], [21], [67], [68], [80], [69], [29], [86], [22], [25], [39], [47], [63], [46], [30], [28], [26], [23], [43], [64], [87], [38], [65], [44], [27], [79], [66], [31], [107], [45], [108], [70], [24], [109], [78], [33], [77], [110], [111], [32], [71]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n"}
{"task_id": "Mbpp/740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n", "entry_point": "tuple_to_dict", "canonical_solution": "\ndef tuple_to_dict(test_tup):\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n", "base_input": [[[1, 5, 7, 10, 13, 5]], [[1, 2, 3, 4, 5, 6]], [[7, 8, 9, 10, 11, 12]]], "atol": 0, "plus_input": [[[]], [[10, 20, 30, 40, 50, 60, 70, 80]], [[5, "a", 10, "b", 15, "c", 20, "d"]], [["apple", "red", "banana", "yellow", "grape", "purple"]], [[1, "a", 2, "b", 3, "c", 4, "d"]], [[1.5, "a", 2.7, "b", 3.2, "c", 4.9, "d"]], [[1, "a", 40, "b", 3, "c", 4, "d"]], [[3.2, "a", 2.7, "b", 3.2, "c", 4.9, "d"]], [[10, 20, 30, 40, 60, 11, 70, 80]], [["apple", "red", "banapurplena", "yellow", "purple", "grape"]], [[1.5, "a", 5.2, "b", 3.2, "c", 4.9, "d"]], [[10, 20, 30, 40, 50, 1, 70, 80]], [[1, "a", 4, "b", 3, "c", 4, "d"]], [[1, "a", 2, "b", 3, "c", 4, "ec", "d", 4]], [[1, "a", 40, "b", "apple", "dd", 3, "c", 4, "d"]], [[10, 20, 1, 30, 40, 60, 11, 70, 80, 20]], [[1, "a", 1, "b", 3, "c", 4, "d"]], [[1, "a", 2, "b", "c", 4, "ec", 4]], [[10, 20, 30, 40, 50, 1, 5, 80]], [[1, "aa", 4, "b", 3, "c", 4, "d"]], [[1, "a", 2, 3, 0, "c", 4, "d"]], [[1.5, "a", 2.7, "bb", 3.2, "c", 4.9, "d"]], [[1.5, "a", 2.7, "bb", 3.2, "c", 4.9, "dd"]], [[1, "a", 2, 3, 0, "c", 4, "d", "c", 1]], [[1, 4, 3, "c", 4, "d"]], [[1, "a", 1, "apple", 3, "c", 4, "d"]], [[10, 20, 30, 11, 40, 1, 70, 80]], [[1, "a", 2, 3, 5, "c", 4, "d"]], [["apple", "red", "banapurplena", "yellow", "purple", "graape"]], [[4, "e", 2, 3, 0, "c", 4, "d"]], [[1.5, "a", 5.2, "b", 3.2, "c", "d", "b"]], [[1, "purple", 40, "b", "apple", "dd", 3, "c", 4, "d"]], [[1, "a", 2, "b", 3, "c", 4, "ec", "grape", 4]], [[1.5, "", 2.7, "bb", 3.2, "c", 4.9, "d"]], [[5, "a", 10, "b", 15, "c", 20, "d", "a", 20]], [[1.5, "a", 2.7, "b", "c", 4.9, "d", "d"]], [[1.5, "a", "bb", 3.2, "c", 5.618850405922002, "d", 4.9]], [[1, 4, 50, "c", 4, "d"]], [[1, "grape", 2, "b", 3, "c", 4, "d"]], [[10, 20, 1, 30, 40, 60, 11, 70, 80, 20, 60, 20]], [[1.5, "a", 2.7, "bb", 3.2, 4.9, "d", "bb"]], [[10, 20, 30, 50, 1, 5, 80, 20]], [["apple", "red", "banana", "yellow", "gprape", "purple"]], [["apple", "red", "banapurplena", "yellow", "purple", "yellow", "graape", "yellow"]], [[5, "a", 10, "b", 15, "c", 20, "d", 10, "d"]], [[0, 1, "a", 2, 3, 0, "c", "d"]], [[1, "a", 40, "b", "dd", "dd", 3, "c", 4, "d"]], [[29, 10, 20, 30, 11, 1, 70, 80]], [[10, 20, 30, 40, 60, 11, 70, 80, 20, 70]], [[10, 30, 40, 11, 70, 80, 20, 70]], [[1.5, "a", 2.7, "bb", 3.2, 5.618850405922002, "c", 4.9, "dd", 3.2]], [[10, 20, 30, 40, 50, 1, 71, 79]], [[0, "a", 1, "apple", 3, "c", 4, "d"]], [[10, 20, 30, 40, 50, 0, 71, 79]], [[10, 20, 30, 10, 50, 1, 4, 80]], [[1.5, "a", "bb", 3.2, "c", 1.5, 5.618850405922002, "d", 4.9, 4.9]], [[1, "dgrape", "a", 40, "b", "dd", "dd", 3, "c", "dd", 4, "d"]], [[4, 3, "c", "d"]], [[10, 20, 30, 50, 1, 5, 79, 20]], [[1, 29, "a", 2, "gprape", "c", "", 4, "ec", 4]], [[10, 0, 1, 30, 40, 60, 11, 70, 80, 20, 5, 10]], [[10, 70, 20, 30, 40, 50, 60, 70, 80, 80]], [[0, "aa", 1, "apple", 3, "c", 4, "d"]], [[1.5, "a", 2.7, "bb", 3.2, "a", "d", "a"]], [[29, 10, 20, 30, 11, 20, 70, 80]], [[2.7, 1.5, "a", "bb", 3.2, "c", 5.618850405922002, "d", 4.9, 3.2]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n"}
{"task_id": "Mbpp/741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n", "entry_point": "all_Characters_Same", "canonical_solution": "\ndef all_Characters_Same(s) :\n    return all(ch == s[0] for ch in s[1:])\n", "base_input": [["python"], ["aaa"], ["data"]], "atol": 0, "plus_input": [[""], ["ms"], ["mms"], ["msms"], ["mmms"], ["yQNKBeQ"], ["msmyQNKBeQs"], ["mmss"], ["m"], ["msmss"], ["msmyQNyQNKBeQKBeQs"], ["mmsss"], ["mmsmyQNKBeQsmsss"], ["smssms"], ["mmsmss"], ["yKQNKBeQ"], ["mmmmmsmsssmmsss"], ["msmms"], ["msmyQNyQNKBeQKBeQsmmsmss"], ["msmyQNyQNBKBeQKBeQsmmsmss"], ["mmmsms"], ["mmsms"], ["msmmsms"], ["mmmss"], ["smssm"], ["mss"], ["msmmmss"], ["mmmms"], ["mssmsmyQNKBeQs"], ["mmsmyQNKBeQsmmsss"], ["msmyQNKBeQNs"], ["zWgdk"], ["mmsmsmmssss"], ["mQsmyQNKBeQs"], ["smssmsmyQNKBeQsmssms"], ["mmmmsms"], ["RfuIu"], ["mmssms"], ["RufuIu"], ["mmsmyQNyQNKBeQKBeQsmmmsms"], ["mssmsmysQNKBeQs"], ["mssmsNKBeQs"], ["mmmsmsmss"], ["mmmmsmyQNKBeQsmmsssssms"], ["msmmss"], ["smss"], ["smszWgdksm"], ["smssmms"], ["msmyQNyQNKBeQKBseQsmmsmss"], ["mmsmyQNyQNKBmmmsmseQKBeQsmmmsms"], ["msmmmmsmyQNKBeQNsss"], ["mmmsmss"], ["mmmmmmsmsssmmsss"], ["mmmsmyQNKBeQNsssms"], ["smssmsmymmsmsmmssssQNKBeQsmssms"], ["mmsmyQNKBmeQs"], ["mmmsmyQNyQNKBmmmsmseQKBeQsmmmsmsmsms"], ["mmmmsmsmsmmmmmmsmsssmmsss"], ["mmmssyQNKBeQmss"], ["msmyQNyQKNKBeQKBeQsmmsmss"], ["msmyQNyQKNKBmsmyQNKBeQNseQKBeQsmmsmss"], ["msmyQNyQNKBeQKBseQsmmQsmss"], ["msmyQNKBesQNs"], ["yKQNKBemssmsmysQNKBeQsQ"], ["mmsmyQNKBeQssmmsss"], ["msmmsmmsms"], ["mmyKQNKBeQmssyQNKBeQmss"], ["mmmmsmssmsNKBeQsmsmmms"], ["mmmsmmmsmsssmmsss"], ["smssmmmmmsmsssmmsssm"], ["mmmsmyQNKBeQsmssss"], ["msmyQNyQNBKyBeQKBeQsmmsmss"], ["msmmsmmmsms"], ["mmmsmsmyQNyQNKBeQKBseQsmmsmssms"], ["mmmmmsmyQNKBeQNsssmsmms"], ["mmmmsmsmsmmmmmmsmsssmmmmsmyQNKBeQsmmssssss"], ["mmmmsmyQNKBeQNsssmsmsmmsmmssss"], ["mmmmmmmsmyQNKBeQNsssmsmsmmsmmssssmmsmyQNKBeQNsssmsmms"], ["mssmQsmyQNKBeQs"], ["smmsssmsmymmsmsmmssssQNKBeQsmssms"], ["yKQN"], ["smssmmmmmmmmmsmyQNKBeQNsssmsmsmmsmmssssmmsmyQNKBeQNsssmsmmss"], ["smssmsmyQNKBmmsmyQNKBeQssmmssseQsmssms"], ["Rf"], ["mmRufuIus"], ["smssmBmmsmyQNKBeQssmmssseQsmssms"], ["BmmmsmyQNyQNKBmmmsmseQKBeQsmmmsmsmsmsRfuIu"], ["smsmsmssmsmyQNKBmmsmyssseQsmssms"], ["yKQNKmssmQsmyQNKBeQsBeQ"], ["mssmmmmsmyQNKBeQsmmsssssms"], ["zWgdWk"], ["mssmmms"], ["zWgdW"], ["smmsmyQNKBeQssmmsssmssm"], ["mssmsmysQNKBeQss"], ["mszWgWdWkms"], ["msmssmsmysQNKBeQss"], ["mmsmyQNyQNKBmmmsmseQKBmeQsmmmsms"], ["smszkWgdksm"], ["msmyQNyQNKBeQKBesQsmmsmss"], ["smssmBmmsmyQNKBeQsssmmssseQssmssms"]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False\n"}
{"task_id": "Mbpp/742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n", "entry_point": "area_tetrahedron", "canonical_solution": "\nimport math\ndef area_tetrahedron(side):\n  return math.sqrt(3)*(side*side)\n", "base_input": [[3], [20], [10]], "atol": 0.0001, "plus_input": [[1000000], [true], [1.5], [1e+30], [999999], [1.59978534789254], [77.8793434560892], [3.074373143508511], [8.346368082095324e+29], [1.6546636717000622], [1.7090994554410526], [1.3964870190521956], [1.6514502037380507], [7.206728093437386e+29], [1.504068222763319], [0.9574615822299601], [1.978952603905947], [1.0821151020776618], [1.8101404959122165], [77.46339000072932], [2.126409359720457], [1.7994080508660149], [2.0863282509978003], [1.9889979847423371], [2.209910516014096], [11.754053944629632], [2.9745432990981775], [1.9380485812956483], [1.8160105066755527], [0.8026534982703593], [1.8582712873153935], [1.3225487947269854], [1.537011943546412], [2.554675341633787], [13.323445662082547], [3.132314634383419], [1.1652257607369096], [2.666480350035669], [2.6211294693074243], [3.3991668350495305], [2.023449428551678], [1.2683788896608637], [2.3611884376247896], [1.296274219216975], [2.559363044750007], [2.4824773240117852], [1.201682902838797], [113.48545597352201], [1.9269574054294052], [1.681792278746306], [1.6929319982301843], [2.2851894516826885], [12.334339561069363], [1.8712664913912918], [0.6826835456742291], [12.243258342886065], [0.9645174112059665], [8], [1.6646082613320383], [1.5258790723960682], [2.135700245152801], [3.009934857892012], [0.6581784338861782], [1.7086474634345323], [1.1705721875789963], [1.1897322292012837], [2.976830484501024], [4.352277478522385], [1.0942496515491111], [1.1655270588910727], [3.0899280257149884], [1.5387265302270916], [2.6495562384732203], [1.1517020192886744], [4.368759672358581], [2.141695712341132], [1.7703961066409695], [2.1969046243392203], [0.6578798509831945], [2.1513106244220426], [2.8679802547813225], [1.5361851820488037], [1.6721539678145565], [35], [0.9597448709941456], [1.5219621039341968], [1.1769819695214068], [3.135708584917471], [1.1678022895032214], [1.6367367339244994], [4.365360907637427], [4.407159357131757], [36], [3.432990255884539], [6.416082503464835], [0.16945715175880016], [3.0151057620514683], [2.9363660031871768], [3.217338125591618], [1.2358067443671152], [3.6139095069895246], [0.06559550507643896], [0.9117300805503203], [1.8815855133951018]], "contract": "\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert side > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)\n"}
{"task_id": "Mbpp/743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n", "entry_point": "rotate_right", "canonical_solution": "\ndef rotate_right(l, m):\n  return l[-m:] + l[:-m]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5]], "atol": 0, "plus_input": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 4], [[5, 15, 25, 35, 45, 55, 65, 75, 85, 95], 5], [[11, 22, 33, 44, 55, 66, 77, 88, 99, 110], 7], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 2], [["apple", "banana", "cherry", "date", "elderberry"], 3], [["cat", "dog", "elephant", "fish", "giraffe"], 4], [[100], 1], [[1000000000, 2000000000, 3000000000, 4000000000], 2], [[1, "two", 3.0, [4, 5], {"six": 7}, [8, 9]], 1], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], 3], [[true, 2.5, "hello", [1, 2, 3], {"a": 1, "b": 2}], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1], [["apple", 2, true, [1, 2, 3]], 2], [[], 0], [[1000000000, 3000000000, 4000000000], 2], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 6], 3], [[9, 2, 4, 6, 8, 10, 12, 14, 16, 2000000000, 20], 3], [[5, 15, 25, 45, 55, 65, 75, 85, 95], 5], [[8, 15, 25, 45, 55, 65, 75, 85, 95], 6], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 16], 3], [[2, 4, 6, 8, 10, 12, 14, 6, 16, 18, 20, 6], 3], [[1, "two", [4, 5], {"six": 7}, [8, 9]], 1], [[[1, 2, 3], [4, 5, 6, 6], [7, 8, 9]], 1], [[2, 4, 13, 6, 8, 10, 12, 14, 16, 30, 18, 20], 3], [["cat", "dog", "two", "elephant", "fish", "giraffe"], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 19], 2], [[2, 4, 6, 8, 10, 12, 16, 18, 1, 20, 6], 3], [[5, 15, 25, 35, 45, 55, 65, 75, 85, 4000000000], 5], [[2, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16], 11], [[[1, 2, 3], [4, 5, 6, 6], [7, 8, 100, 9], [7, 8, 100, 9]], 1], [["cat", "dog", "elephant", "fish", "giraffe"], 3], [[5, 15, 25, 45, 55, 65, 75, 95], 5], [["cat", "dog", "two", "elephant", "fish", "giraffe", "two"], 5], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 6], 4], [["giraffe", "RGSFieqfEz", "date", "aPof", "elderberry", "", "JGvUdQh"], 0], [[2, 4, 6, 8, 10, 12, 14, 6, 16, 18, 20, 6], 5], [[2, 45, 19, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16], 11], [[[1, 2, 3], [7, 8, 9]], 1], [[3.0], 0], [[0, 3, 5, 7, 9, 11, 15, 17, 19, 19, 15], 2], [["cat", "dog", "two", "fish", "giraffe"], 5], [[5, 15, 45, 55, 65, 75, 85, 95], 5], [[9, 2, 1999999999, 4, 6, 8, 10, 12, 14, 16, 2000000000, 20], 3], [[5, 15, 25, 45, 66, 65, 75, 95], 5], [[2, 4, 6, 8, 10, 12, 16, 18, 1, 20, 6], 4], [[4, 6, 8, 10, 12, 16, 18, 1, 20, 6], 4], [[17, 2, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16], 11], [[11, 22, 12, 33, 44, 55, 66, 77, 88, 99, 110], 7], [[true, 2.5, "hello", [1, 2, 3], {"a": 1, "b": 2}, [1, 2, 3]], 2], [[2, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16, 2], 11], [[[1, 2, 3], [7, 8, 9], [7, 8, 9], [1, 2, 3]], 1], [[2000000000, 3000000000, 4000000000], 2], [["apple", "banana", "chery", "date", "elderberry"], 3], [[[1, 2, 3, 1], [7, 8, 9], [7, 8, 9], [1, 2, 3, 1]], 1], [[2, 45, 19, 6, 8, 11, 12, 14, 16, 18, 20, 16], 11], [[100], 0], [[2, [1, 2, 99, 3, 1], true, [1, 2, 99, 3, 1]], 2], [["cat", "dog", "elephant", "fish", "giraffe"], 2], [[5, 45, 55, 75, 85, 95], 5], [[2, 4, 6, 8, 10, 14, 16, 18, 20, 6], 4], [[1, 3, 12, 5, 7, 9, 11, 13, 15, 17, 19, 19], 2], [[2, 4, 6, 8, 12, 16, 18, 1, 20], 4], [[5, 15, 45, 66, 65, 75, 95], 5], [[5, 15, 45, 55, 65, 110, 75, 85, 95], 5], [[[3, 1, 2, 3], [7, 8, 9], [7, 8, 9], [3, 1, 2, 3]], 1], [[17, 2, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16, 2], 11], [[2, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16, 2, 4], 11], [[1, 3, 12, 5, 7, 9, 11, 13, 17, 19, 19], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 13], 2], [[[1, 2, 3, 1], [7, 8, 9], [7, 8, 9]], 1], [[true, 2.5, "hello", [1, 2, 3], {"a": 1, "b": 2}], 4], [[1, "two", 3.0, [4, 5], {"six": 7}, [8, 9], 3.0], 1], [["giraffe", "echerylderberry", "RGSFieqfEz", "date", "aPof", "elderberry", "", "JGvUdQh"], 0], [["cat", "elephant", "fish", "girafffe"], 2], [[8, 15, 25, 45, 55, 65, 75, 85, 20, 95], 6], [[1, 3, 12, 7, 11, 13, 17, 19, 19], 2], [[[1, 2, 3], [7, 8, 9], [7, 8, 9], [1, 2, 3]], 2], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 10], 3], [[2, 4, 13, 6, 8, 10, 12, 14, 16, 3, 30, 18, 20], 3], [[2, 4, 6, 8, 10, 12, 25, 16, 18, 20, 6], 3], [[10, 20, 30, 40, 50, 70, 80, 90, 100], 4], [["giraffe", "RGSFieqfEz", "date", "elderberry", "", "JGvUdQh"], 1], [[2, [1, 2, 99, 3, 1], true, [1, 2, 99, 3, 1]], 3], [[11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 11], 7], [[5, 15, 25, 45, 66, 65, 75, 99], 5], [[2, 4, 6, 8, 10, 12, 14, 6, 16, 18, 20, 6], 11], [[[1, 2, 3], [7, 8, 9], [7, 8, 9], [1, 2, 3]], 0], [[2, 4, 6, 8, 11, 12, 14, 16, 18, 20, 16, 12], 11], [["a", "dog", "two", "elephant", "fish", "giraffe", "two"], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 11], 3], [[[7, 8, 9], [7, 8, 9], [1, 2, 3, 1]], 0], [[2, 4, 6, 8, 10, 12, 16, 18, 1, 6], 4], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 9], [["cat", "dog", "two", "eelephant", "fish", "giraffe"], 5], [[2, 4, 6, 8, 10, 12, 14, 6, 16, 18, 20, 6], 7], [[1, "two", [4, 5], {"six": 7}, [8, 9]], 5], [[5, 15, 25, 45, 55, 65, 75, 95], 6], [[5, 15, 25, 45, 55, 65, 75, 85, 95], 4], [[true, 2.5, {"a": 1, "b": 2, "six": 2}, [1, 2, 3, 1], "hello", [1, 2, 3, 1], {"a": 1, "b": 2, "six": 2}], 2], [[1, "two", 3.0, [4, 5], {"six": 7}, [8, 9], [4, 5], [4, 5]], 1], [[[7, 8, 9]], 0], [[5, 15, 25, 45, 66, 65, 99, 75, 25], 5], [[2, 4, 6, 8, 10, 12, 14, 6, 16, 18, 20, 6], 2], [[2, 4, 6, 8, 10, 12, 25, 16, 18, 20, 6], 2], [[5, 15, 45, 55, 65, 75, 85, 95, 55], 5], [[1, 3, 12, 5, 7, 9, 11, 13, 17, 19, 19], 1], [[[1, 2, 3, 1], [7, 8, 9, 9], [7, 8, 9, 9], [7, 8, 9, 9]], 2], [[2, 4, 8, 10, 12, 16, 18, 1, 20, 6], 4], [[[1, 3], [1, 3], [3, 4], [5, 6], [7, 8], [9, 10]], 3], [["apple", 2, true, [1, 2, 3]], 3], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 11], 3], [[[1, 2, 3, 3], [4, 5, 6, 6], [1, 2, 3, 3], [7, 8, 9]], 1], [["cat", "dog", "two", "fish", "giraffe", "dog"], 5], [[true, 2.5, [1, 2, 3], {"a": 1, "b": 2}, {"a": 1, "b": 2}], 4]], "contract": "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n"}
{"task_id": "Mbpp/744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n", "entry_point": "check_none", "canonical_solution": "\ndef check_none(test_tup):\n  return any(ele is None for ele in test_tup)\n", "base_input": [[[10, 4, 5, 6, null]], [[7, 8, 9, 11, 14]], [[1, 2, 3, 4, null]]], "atol": 0, "plus_input": [[[2]], [[[1, 2], [3, 4], [5, null]]], [[[null, null, null], [null, null, null], [null, null, null]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, null]]], [[[[null], [null]], [[null], [null]]]], [[[], []]], [[[1, [2, 3]], [4, [null, 5]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, null]]]]]]]]]]]], [[[null, [null, [null, [null, [null, [null, [null, [null, [null, null]]]]]]]]]]], [[null, [null, [null, [null, [null, [null]]]]]]], [[[[null], [1, 2], [3, null]], [null, [4, 5]], [[6, null], [null, 7]]]], [[[[null, 1, 2, 3], [4, null, 5, 6]], [[null, 7, 8, null], [null, 9, null, 10]]]], [[[[null, null, null], [1, 2, 3], [null, null, null]], [[4, null, 5], [null, null, null], [null, 6, null]]]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [[6, null], [null, 7]]]], [[10, 4, 5, 6, null, []]], [[1, 2, 3, 4, null, [null]]], [[[1, 2], [3, 4], [5, null], []]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [[6, null], [null, 7]], []]], [[[1, [2, 3]], [4, [null, 5]], [null, [null, 6]]]], [[]], [[[1, 2], [3, null], [4, null, 5], [null, null], [6, 7, null, null]]], [[[null, null, 1], [2, null, null], [null, 3, null], [4, null, 5, 6]]], [[[null, null, null, null], [1, 2, 3], [null, null, null], [4, 5, 6]]], [[[[null, null, null], [1, 2, 3], [null, null, null]], [[4, null, 5], [null, null, null], [null, 6, null]], [[7, null, null], [null, null, null], [null, null, null]]]], [[[1, 2], [3, null], [4, 5], [null, 6], [7, 8], [null, null]]], [[[[null], [1, 2], [3, null]], [null, [4, 5]], [[6, null], [null, 7]], [[null], [8, 9], [null, null]]]], [[[[null, null], [[null, null], [null, null]]], [[null, null], [[null, null], [null, null]]]]], [[[[null, null, [null, [null, null]]], null], [[null, null, [null, null]], null]]], [[[1, 2], [3, null], [4, 5], [null, 6], [7, 8], [null, null, 6], [null, null]]], [[[4, 5, 6], [7, 8, 9, null], [7, 8, 9, null]]], [[[5, 6], [1, 2, 3], [4, 5, 6], [7, 8, 9, null, 8]]], [[[1, [2, 3]], [4, [null, 5]], [1, [2, 3]]]], [[[4, 5, 6], [7, 8, 9, null]]], [[[4, 4, 6], [7, 8, 9, null], [7, 8, 9, null]]], [[[], [9, ["EmZMRTPX", "ntSnaH", "mtiRiOL", "quzN", "YeCzezCHd"]], []]], [[[1, 2, 2], [3, 4], [5, null]]], [[[[4, null, 5], [null, null, null], [null, 6, null], [4, null, 5]], [[4, null, 5], [null, null, null], [null, 6, null]]]], [[[1, [2, 3]], [1, 1, [2, 3]], [4, [null, 5]], [1, [2, 3]]]], [[[1, [2, 3]], [1, [2, 3]]]], [[[1, 2], [3, null], [null, null], [7, 7, null, null]]], [[[1, 2], [3, 4], [5, null], [3, 4]]], [[[1, 2, 2], [3, 4], [5, null], [5, null]]], [[[7, 8, 9, null, 8], [4, 4, 6], [7, 8, 9, null], [7, 8, 9, null]]], [[[1, [2, 3]], [4, [null, 5]], [1, [2, 3]], [4, [null, 5]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, null]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, null]]]]]]]]]]]], [[[1, 2], [3, 4], [6, null], [3, 4], [1, 2]]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [[6, 7, null], [6, null], [null, 7]]]], [[[1, 2, 2], [1, 2, 2, 2], [3, 4], [5, null], [5, null]]], [[[null, null, 1], [2, null, null], [null, 3, null], [null, 3, null], [1, 4, null, 5, 6]]], [[[1, [2, 3]], [1, [6, 3]], [1, 1, [2, 3]], [4, [null, 5]], [1, [2, 3]], [1, 1, [2, 3]]]], [[[[null, null, null], [1, 2, 3], [null, null, null]], [[4, null, 5], [6, null], [null, null, null], [null, 6, null]], [[7, null, null], [null, null, null], [null, null, null]]]], [[[1, 2], [3, 4], [5, null], [5, 10, null], ["gvL", "EmZMRTPX", "DpLWe", "quzN", "ZoPZGHEV", "YeCzezCHd", "mtiRiOL"]]], [[10, 5, 6, null, []]], [[[null, [4, 5]], [[6, null], [null, 7]], [[null], [8, 9], [null, null]]]], [[[4, 4, 6], [9, 7, 8, 9, null]]], [[[2, null, null], [null, 3, null], [4, null, 5, 6]]], [[6, 5, 6, null, []]], [[[1, 2], [3, 4], [5, null, null], []]], [[false, false, false, true, true]], [[null, [null, [null, [null, [null, [null]]]]], null]], [[[null, null, 1], [2, null, null], [4, null, 5, 6], [4, null, 5, 6]]], [[[4, null, 1, 6], [2, null, null], [null, null, 1], [2, null, null], [4, null, 5, 6], [4, null, 5, 6], [4, null, 5, 6]]], [[[null, null, 1], [2, null, null, null], [4, null, 5, 6], [4, null, 5, 6]]], [[[4, 4, [null, 5]], [1, [2, 3]], [4, [null, 5]]]], [[[7, 8, 9, null, 8], [4, 4, 6], [7, 8, 9, null], [7, null, 8, 9, null], [7, 8, 9, null]]], [[[7, 8, 9, null, 8], [4, 4, 6], [7, 8, 9, null], [7, null, 8, 9, null], [7, 8, 9, null, 9], [7, 8, 9, null]]], [[[[null, null, null], [1, 2, 3], [null, null, null]], [[4, null, 5], [null, null, null], [null, null, 6, null]]]], [[10, 5, 6, null, [], 10]], [[[2, null, null], [2, null, null], [null, 3, null], [3, null, null], [4, null, 5, 6]]], [[[1, [2, 3], 1], [4, [null, 5]]]], [[[1], [4, [null, 5]], [1, [2, 3]], [1, [2, 3]]]], [[[null, null, null, null, null], [1, 2, 3], [null, null, null], [4, 5, 6]]], [[[null, [[null, [null, [null]]]]], null, [null, [null, [null, [null, [null]]]]], null]], [[[2, null, null], [null, 3, null], [null, 3, null], [1, 4, null, 5, 6]]], [[[4, [null, 5], 4], [1, [2, 3]], [4, [null, 5]], [1, [2, 3]]]], [[10, 5, 6, null, [], null]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [[6, null], [null, 7]], [], []]], [[[1, 2, 2], [1, 2, 2, 2], [3, 4], [5, null], [5, null], [1, 2, 2, 2]]], [[[[null, null, null], [1, 2, 3], [null, null, null], [null, null, null]], [[4, null, 5], [null, null, null], [null, 6, null]], [[7, null, null], [null, null, null], [null, null, null]], [[null, null, null], [1, 2, 3], [null, null, null], [null, null, null]], [[7, null, null], [null, null, null], [null, null, null]]]], [[null, [null, [null, [null, [null, [null]]]]], null, [null, [null, [null, [null, [null]]]]]]], [[5, 6, null, []]], [[[1, 2], [3, 4], [5, null], [1, 1, 2], [1, 2]]], [[[1, [2, 3], 1], [4, [null, 5, 5], [null, 5]]]], [[[1, 2], [3, 6, 4], [5, null], [1, 1, 2], [1, 2]]], [[[1, [2, 3]], [4, [null, 5]], [1, [2]]]], [[[4, 4, [null, 5]], [1, [2, 3]], [4, [null, 5]], [1, [2, 3]]]], [[[3, null], [4, 5], [7, 8], [null, null]]], [[[[4, 5], [null, null]], [[6, null], [null, 7]], ["gvL", "gvL", "YeCzezCHd", "YeCzezCHd"], []]], [[10, 5, 6, null, [], null, null]], [[[[2, 3], 1, [2, 3]], [4, 4, [null, 5]], [1, [2, 3]], [4, [null, 5]]]], [[[1, [2, 3]], [1, [2, 3]], [4, [null, 5]]]], [[[3, 4, 3], [5, null], []]], [[[3, 6, 4], [5], [1, 1, 2], [1, 2]]], [[[2, null, null], [null, 3, null], [null, 3, null, 3], [1, 4, null, 5, 6]]], [[[[null], [1, 2], [3, null]], [null, [4, 5]], [[6, null], [null, 7]], [null, [4, 5]], [[null], [1, 2], [3, null]]]], [[[1, [2, 3], 1], [2, [null, 5, 5], [null, 5]], [4, [null, 5, 5], [5]], [4, [null, 5, 5], [null, 5]]]], [[[7, 8, 9, null, 8], [7, 8, 9, null], [4, 4, 6], [7, 8, 9, null], [7, 8, 9, null]]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [78.89143771814926, -52.4240616339394, -72.56566507053195, -0.2817304158930085, -93.71004156385187, -15.10076750277966, 80.74945111800932, -63.35966765379977], [[6, null], [null, 7]], [], []]], [[[4, null, 1, 6], [2, null, null], [null, null, 1], [2, null, null], [4, null, 5, 6], [4, null, 5, 6], [4, null, 5, 6, 6]]], [[6, 5, 6, null, [], 6]], [[[[null], [1, 2], [3, null]], [[6, null], [null, 7]]]], [[[1, 2], [3, null], [4, 5], [null, 6], [7, 8], [null, null], [null, 6]]], [[[[null], [1, 2], [3, null]], [[5, 4, 5], [null, null]], [[6, null], [null, 7]], []]], [[[1, [2, 3]], [1, [2, 3]], [4, [null, 5]], [1, [2, 3]]]], [[-15.10076750277966, [true, false, false, true], "p", "quzN", -85, "ZoPZGHEV"]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [[6, null], [null, 7]], [[null], [1, 2], [3, null]]]], [[[null, [[null, [null, [null]]]]], null, [null, [null, [null, [null, [null]]]], null], null]], [[[null, null, 1], [2, null, null], [4, null, 5, 6, 4], [4, null, 5, 6]]], [[[[null]], [[null], [null]]]], [[[3, 4], [null], [5, null], [5, null]]], [[[[2, 3], 1, [2, 3]], [4, 4, [null, 5]], [1, [2, 3], [2, 3]], [4, [null, 5]]]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], []]], [[[1, 2, 2], [5, null], [5, null]]], [[[7, 8, 9, null, 8], [7, 8, 9, null, null], [7, 8, 9, null], [4, 4, 6], [7, 8, 9, null], [7, 8, 9, null]]], [[[3, 6, 4], [5, null, null], []]], [[[[4, 5], [null, null]], [[6, null], [null, 7]], ["gvL", "gvL", "YeCzezCHd", "YeCzezCHd"], [], []]], [[[1, [2, 3], 1], [2, [null, 5, 5], [null, 5]], [4, [null, 5, 5], [5]]]], [[[[null], [1, 2], [3, null]], [[4, 5], [null, null]], [78.89143771814926, -52.4240616339394, -72.56566507053195, -0.2817304158930085, -82.47988549016725, -93.71004156385187, -15.10076750277966, 80.74945111800932, -63.35966765379977], [[6, null], [null, 7]], [], []]], [[[5, 6], [1, 2, 3], [4, 5, 6], [7, 4, 5, 6], [7, 8, 9, null, 8, 8], [7, 8, 9, null, 8, 8]]], [[[], [9, ["EmZMRTPX", "ntSnaH", "mtiRiOL", "quzN", "YeCzezCHd"]], [], [9, ["EmZMRTPX", "ntSnaH", "mtiRiOL", "quzN", "YeCzezCHd"]]]], [[[1], [false, [2, 3]], [4, [null, 5]], [1, [2, 3]], [1, [2, 3]]]], [[[1, [2, 3], 1], [5, 4, [null, 5]]]], [[6, 5, 6, null, [], 4, 6]], [[[4, 5], [4, 6], [8, 7, 8, 9, null], [7, 8, 9, null]]], [[[4, [null, 5], 4], [1, [2, 3]], [4, [null, 5]], [1, [2, 3]], [1, [2, 3]]]], [[[2, null, null], [null, 3, null], [3, null], [1, 4, null, 5, 6]]], [[[7, 5, 9, null, 8], [7, 8, 9, null], [4, 4, 6], [7, 8, 9, null], [7, 8, 9, null]]], [[[null, [4, 5]], [[6, null], [null, 7]], [[null], [8, 9], [null, null]], [[null], [8, 9], [null, null]]]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n"}
{"task_id": "Mbpp/745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n", "entry_point": "divisible_by_digits", "canonical_solution": "\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n", "base_input": [[1, 22], [1, 15], [20, 25]], "atol": 0, "plus_input": [[100, 200], [500, 600], [1000, 1100], [10000, 10100], [10100, 10100], [500, 10100], [500, 599], [501, 10100], [100, 10100], [500, 500], [999, 999], [599, 10100], [998, 999], [598, 1100], [1100, 1102], [200, 200], [599, 998], [599, 599], [598, 598], [10101, 10101], [10099, 10099], [501, 999], [200, 201], [1099, 1099], [1103, 1103], [499, 599], [499, 999], [1099, 10101], [101, 200], [997, 999], [997, 998], [10100, 10101], [600, 600], [200, 10101], [501, 501], [499, 10100], [101, 199], [998, 998], [499, 997], [598, 599], [597, 598], [598, 1102], [101, 997], [501, 601], [200, 999], [true, true], [498, 499], [false, true], [498, 10100], [600, 601], [1102, 10101], [500, 10101], [false, 1102], [201, 10100], [false, 998], [600, 1103], [101, 198], [499, 500], [100, 199], [997, 997], [199, 200], [102, 199], [200, 498], [102, 10000], [false, false], [498, 10099], [10098, 10099], [501, 10101], [200, 10100], [200, 1000], [499, 499], [100, 101], [200, 1099], [101, 10101], [498, 498], [101, 999], [1098, 10100], [199, 997], [599, 1099], [1102, 1103], [false, 1101], [200, 1102], [10099, 10100], [597, 599], [201, 202], [100, 100], [200, 202], [1099, 10100], [199, 10101], [599, 601], [201, 201], [199, 1099], [13, 10101], [203, 10098], [198, 200], [200, 600], [false, 997], [199, 199], [102, 501], [999, 10100], [102, 198], [199, 10099], [1102, 1102], [201, 600]], "contract": "\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]\n"}
{"task_id": "Mbpp/746", "prompt": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\n", "entry_point": "sector_area", "canonical_solution": "\nimport math\ndef sector_area(r,a):\n    return (math.pi*r**2) * (a/360)\n", "base_input": [[4, 45], [9, 45]], "atol": 0.0001, "plus_input": [[0, 45], [1000000, 45], [0.5, 30.5], [1000000, 0], [45, 45], [44, 45], [44, 44], [0, 0], [0.5, 0.5], [0.6694897664463868, 0.5], [46, 45], [0.6897801467547076, 0.5], [1000000, 1], [1, 44], [43, 43], [0.6897801467547076, 30.5], [999999, 0], [44, 1], [0.5, 0.3906970013852109], [0, 1], [1, 43], [30.5, 30.5], [0.3906970013852109, 30.5], [1, 0], [0.5, 0.4834449123217472], [43, 46], [0.3906970013852109, 0.5], [45, 0], [43, 44], [0.4834449123217472, 30.5], [42, 46], [1, 45], [1000000, 42], [999999, 1], [0, 46], [999998, 0], [999998, 46], [1000000, 43], [0.5420056644795602, 0.4834449123217472], [0.479645647579252, 0.26041896143291793], [0.5, 35.6693225998964], [0.479645647579252, 30.5], [46, 0], [0.6610867368458183, 30.5], [35.6693225998964, 0.4834449123217472], [0.3906970013852109, 0.4834449123217472], [46, 1], [1, 1], [43, 47], [1.0818794640686968, 1.0818794640686968], [0.4834449123217472, 0.4834449123217472], [1.0818794640686968, 30.5], [30.5, 30.89870544722143], [0.479645647579252, 0.3906970013852109], [0.6610867368458183, 0.6610867368458183], [43, 45], [42, 1], [1.0818794640686968, 0.479645647579252], [1.6409769240321677, 1.2592020205160237], [1.6409769240321677, 0.26041896143291793], [35.6693225998964, 0.479645647579252], [35.6693225998964, 1.2592020205160237], [1.6495903299585666, 0.7022661152009566], [2.3533928078891444, 0.479645647579252], [0.479645647579252, 0.38357980860566104], [0.479645647579252, 0.479645647579252], [30.89870544722143, 0.38357980860566104], [42, 43], [42, 44], [1.6409769240321677, 0.5], [0.3906970013852109, 30.121757813265816], [30.89870544722143, 30.5], [24.315522100473768, 30.89870544722143], [29.77720391121332, 29.77720391121332], [0.26041896143291793, 0.479645647579252], [47, 43], [47, 47], [999998, 44], [1.0832619536532562, 1.6409769240321677], [19.76816466716299, 30.5], [46, 47], [1.0818794640686968, 0.7156916113004822], [2.3533928078891444, 1.2592020205160237], [0.7749927250180014, 0.479645647579252], [0.30149575371854687, 0.4834449123217472], [0.6810360670595147, 0.6810360670595147], [0.7123468814585188, 19.76816466716299], [1.6409769240321677, 1.6409769240321677], [2.2638131525955743, 1.6409769240321677], [0.6897801467547076, 24.315522100473768], [0.3906970013852109, 0.20420107536566706], [0.7123468814585188, 13.844247038543681], [47, 46], [1000000, 44], [0.7022661152009566, 0.5], [0.38357980860566104, 0.2142985145009113], [0.6486945569035474, 0.6810360670595147], [30.89870544722143, 24.315522100473768], [0.3609919923847602, 0.2142985145009113], [0.7022661152009566, 0.7022661152009566], [1.2649579570449165, 0.38357980860566104], [45, 1], [86, 86]], "contract": "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert r >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert 360 >= a >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(sector_area(4,45), 6.283185307179586, rel_tol=0.001)\nassert math.isclose(sector_area(9,45), 31.808625617596654, rel_tol=0.001)\n"}
{"task_id": "Mbpp/748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n", "entry_point": "capital_words_spaces", "canonical_solution": "\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n", "base_input": [["Python"], ["PythonProgrammingExamples"], ["GetReadyToBeCodingFreak"]], "atol": 0, "plus_input": [[""], ["MyNameIsAIAndIAmHereToHelpYou"], ["ThisIsATestStringWithMultipleCamelCaseWords"], ["IAmAProgrammerAndIWritingCodeInPython"], ["ThisStringHasSomeNumbers123InIt"], ["PleaseDOntDisturbWhileTestIsRunning"], ["LetsUseThisOPportunityToLearnSomethingNew"], ["ImSureYouWillFigureItOut"], ["ILOVEPYTHON"], ["pythonprogrammingexamples"], ["LetsUseThisOPsportunityToLearnSomethingNew"], ["ThisStriingHasSomeNumbers123InIt"], ["ThisStringHasSomeNumbers123InThisStriingHasSomeNumbers123InItIt"], ["cCTa"], ["ThisStringHasSomeNumThisStriingHasSomeNumbers123InItbers123InThisStriingHasSomeNumbers123InItIt"], ["LetsUseThisOPsportunityTosLearnSomethingNew"], ["ThisStringHasSomeNumbeers12t3InIt"], ["ImOSureYouWillFigureItOut"], ["ThisStringHasSomeNumbeLetsUseThisOPsportunityToLearnSomethingNewrs123InIt"], ["LetsUseThisOPsomethingNew"], ["PleaseDOntDIAmAProgrammerAndIWritingCodeInPythonisturbWhileTestIsRunning"], ["LetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123InItbers123InThisStriingHasSomeNumbers123InItItomethingNew"], ["PleaseDOntDistImSureYouWillFigureItOuturbWhileTestIsRunning"], ["pmingexamples"], ["ThisIsATestStringWiothMultipleCamelCasePleaseDOntDisturbWhileTestIsRunningWords"], ["ThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123IHasSomeNumbers123InItItomethingNewngHasSomeNumbers123InItIt"], ["ImOThisIsATestStringWiothMultipleCamelCasePleaseDOntDisturbWhileTestIsRunningWordsSureYouWillFigureItOut"], ["ImOSureYouWillFigureItOu"], ["pmingexamplles"], ["ThisStringHasSomeNumbers123InThisStriingHThisIsATestStringWiothMultipleCamelCasePleaseDOntDisturbWhileTestIsRunningWordsasSomeNumbers123InItIt"], ["ThisStringHasSomeNumbeLetsUseThisOPsportunityToLearnSomethingNewrs1MyNameIsAIAndIAmHereToHelpYou23InIt"], ["LetsUseThisOPsppythonprogrammingexamplesortuThisIsATestStringWithMultipleCamelCaseWordsnityToLearnSomethingNew"], ["ThisStringHasLetsUseThisOPportunityToLearnSomethingNewbeers12t3InIt"], ["ThisIsATesitStringWithMultipleCamelCaseWords"], ["PleaseDOntDIAmAProgrammerAndIWritingCodeInPytThisStriingHasSomeNumbers123InIthonisturbWhileTestIsRunning"], ["ImSureYouWillFiureItOut"], ["pythonprogramMyNameIsAIAndIAmHereToHelpYoumingexamples"], ["ThisStringHasSomeNumbers123InThisStriingHasSoThisIsATestStringWiothMultipleCamelCasePleaseDOntDisturbWhileTestIsRunningWordsmeNumbers123InItIt"], ["LetsUseThisOPsomethinPleaseDOntDIAmAProgrammerAndIWritingCodeInPythonisturbWhileTestIsRunninggNew"], ["ThisStringHasSomeNumbers123InThisStriingHaesSomeNumbers123InItIt"], ["pythondprogramMyNameIsAIAndIAmHereToHelpYoumingexamples"], ["ITntIt"], ["ILOVEPIAmAProgrammerAndIWritingCodeInPythonYTHON"], ["ThisThisStringHasSomeNumbers123InThisStriingHasSoThisIsATestStringWiothMultipleCamelCasePleaseDOntDisturbWhileTestIsRunningWordsmeNumbers123InItItStringHasSomeNumbeLetsUseThisOPsportunityToLearnSomethingNewrs123InIt"], ["LToLearnSomImSureYouWillFigureItOutethingNew"], ["pythonprogramMyNameIsAIAondIAmHereToHelpYoumingexamples"], ["LetsUseThisOPPsporLtunityTosLearnSomethingNew"], ["TITtntIt"], ["ImSuruWuillFigureItOut"], ["ThisStringHasSoumeNumbeLetsUseThisOPsportunityToLearnSomethingNewrs123InIt"], ["LToLearnSomImSureYouWillFigureItOupythondprogramMyNameIsAIAnThisStringHasSomeNumbers123InItdIAmHereToHelpYoumingexamplestethingNew"], ["LetsUseThisOPsportunityToLearnSomethiPleaseDOntDistImSureYouWillFigureItOuturbWhileTestIsRunningngNew"], ["pythonprogramMyNameIsAIAeToHelpYoumingexamples"], ["aXv"], ["tOut"], ["LetsUseThisOPPsporLtunyityTosLearnSomethingNew"], ["LetsUseThisOPsportunityToLearnSomethiPleaseDOntDistImSureYouWillFigureIteOuturbWhileTestIsRunningngNew"], ["LetsUseThisOPPsporLtunyityTosLearnSomsethingNew"], ["pythonprogramMyNameIsAIAes"], ["ThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123IHasSomeNumbers123InItgHasSomeNumbers123InItIt"], ["ImOThisIsATestStringWiothMultipleCamelCasePleaseDOntDistsRunningWordsSureYouWillFigureItOut"], ["ITtntIt"], ["ThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123IHasSomeNumbers123InItItomethingNewngHasSomeNumbers123InItItThisStringHasSomeNumbers123InIt"], ["LetsUseThiw"], ["ThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThiisStriingHasSomILOVEPIAmAProgrammerAndIWritingCodeInPythonYTHONomeNumbers123InItIt"], ["ThisStrPleaseDOntDIAmAProgrammerAndIWritingCodeInPytThisStriingHasSomeNumbers123InIthonisturbWhileTestIsRunningiingHasSomeNumbers123InIt"], ["pythonprogramMyNameIsAIAeToHelpYoumingexamplesut"], ["pmingexammplles"], ["LetsUseThisOPPsporLtunyityTLosLearnSomsethingNew"], ["ILOVLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123InItbers123InThisStriingHasSomeNumbers123InItItomethingNewEPYTHON"], ["PleaseDOntDIAmAProgrammerAndIWritingCodeInPytThisStriingHasSomeNumberThisStrPleaseDOntDIAmAProgrammerAndIWritingCodeInPytThisStriingHasSomeNumbers123InIthonisturbWhileTestIsRunningiingHasSomeNumbers123InIts123InIthonisturbWhileTestIsRunning"], ["ThisStringHasSomeNumThisStriingHasSomeNumbers123InItbers123InThisStriingHasSoILOVEPYTHONmeNumbers123InItIt"], ["ThisStringHLetsUseThisOPPsporLtunyityTosLearnSomethingNewasSoumeNumbeLetsUseThisOPsportunityToLearnSomethingNewrs123InIt"], ["pythondprogramMyNameIsAIAndIAmHereToHelpYoumingxexamples"], ["ImSureYouWillFiureLetsUseThisOPsomethingNewItOut"], ["LetsUseThisOPsportunityToLearnSomethiPleaseDOntDistIgmSureYouWillFigureItOuturbWhileTestIsRunningngNew"], ["ThisStringHasSomeNumThisStriingHasSomeNumbers123InItbers123InThisStriingHasSoILOVEPYTHONmeNumbers123It"], ["LThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSoTngNewngHasSomeNumbers123InItItetsUseThisOPPsporLtunyityTLosLearnSomsethingNew"], ["LetsUseThisOPPsporLtunyityTLosLearnSomsethinITtntItgNew"], ["LetsUseThisOPsportunityToLearnSomethiPleaseDOntDistYouWillFigureItOuturbWhileTestIsRunningngNew"], ["ThisStringHasSom1eNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123IHasSomeNumbers123InItgHasSomeNumbers123InItIt"], ["ttOut"], ["LToLearnSomImSureYouWillFigureItOupythondprogramMyNameIsAIAnThisStringHasSomhingNew"], ["TIt"], ["pmingeImSureYouWillFigureItOutamplles"], ["LetsUseThisOPPsporLtunyityTosILOVESPYTHONLearnSomsethingNew"], ["LetsUseThisOPsomethinPleaseDOntDIAmAProgrammeLetsUseThisOPPsporLtunyityTosLearnSomsethingNewnninggNew"], ["ImSuruWuillFigureItOaXv"], ["ThisStringHasSomeNumbeLetsUseThisOPsportunityToLearnSomethgingNewrs123InIt"], ["PleaseDOntDIAImOSureYouWillFigureItOutmAProgrammerAndIWritingCodeInPythonisturbWhileTestIsRunning"], ["ThisStriingHassSomeNumbers123InIt"], ["ImOSureYouuWillFigureItOut"], ["PleaseDOntDIAmAProgrammerAndIWritintgCodeInPythonyisturbWhIAmAProgrammerAndIWritingCodeInPythonileTestIsRunning"], ["IThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123IHasSomeNumbers123InItItomethingNewngHasSomeNumbers123InItIttIt"], ["pythonprogramMyNameIsAIAeToHelpYouminmgexamples"], ["cCTThisStringHLetsUseThisOPPsporLtunyityTosLearnSomethingNewasSoumeNumbeLetsUseThisOPsportunityToLearnSomethingNewrs123InIt"], ["ImSureYouWillFiureLetsUseThisOPsomethingNewnItOut"], ["ThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThiLetsUseThisOPsportunityToLearnSomethingNewsStringHasSomeNumThiisStriingHasSomILOVEPIAmAProgrammerAndIWritingCodeInPythonYTHONomeNumbers123InItIt"], ["ILOVEPIAmAProgrammerAndIWritEingCodeInPythonYLToLearnSomImSureYouWillFigureItOupythondprogramMyNameIsAIAnThisStringHasSomhingNewTHON"], ["ThisStringHasSomeNumbers123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasThisIsATesitStringWithMultipleCamelCaseWordstItomethingNewngHasSomeNumbers123InItIt"], ["MyNameIsAILOVEPYTHONIAndIAmHereToHelpYou"], ["TIPleaseDOntDIAmAProgrammerAndIWritintgCodeInPythonyisturbWhIAmAProgrammerAndIWritingCodeInPythonileTestIsRunningt"], ["LetsUseThisOPsppythonprogrammingexamplesortuThisIsATestStringWithMultipleCamelCaseWordsnityToLearnsSomethingNew"], ["LetsUseThisOPPsporLtunyityTosILOVESPYTHONLearnSomsethigNew"], ["ImOThisIsATestStriWordsSureYouut"], ["ThisStringHasSomeNumbersThisIsATesitStringWithMultipleCamelCaseWords123InThisStriiLetsUseThisOPportunityToLearnSThisStringHasSomeNumThisStriingHasSomeNumbers123IHasSomeNumbers123InItItomethingNewngHasSomeNumbers123InItIt"], ["ImSuruWuillFiguThisIsATestStringWithMultipleCamelCaseWordsreItOaXv"], ["LetsUseThisOPssportunityToLearnSomethiPleaseDOntDistIgmSureYouWillFigureItOuturibWhileTestIsRunningngNew"], ["PleaseDOntDIAImOSureYouWillFigureItOutmAProgrammeILOVEPYTHONrAndIWrOitingCodeInPythonisturbnning"], ["LetsUseThisOPsportunityToLeasrnSomethingNew"]], "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n"}
{"task_id": "Mbpp/749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n", "entry_point": "sort_numeric_strings", "canonical_solution": "\ndef sort_numeric_strings(nums_str):\n    return sorted([int(x) for x in nums_str])\n", "base_input": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]], [["2", "3", "8", "4", "7", "9", "8", "2", "6", "5", "1", "6", "1", "2", "3", "4", "6", "9", "1", "2"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11"]]], "atol": 0, "plus_input": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]], [["5", "-3", "7", "2", "-5", "5", "2", "-3", "1", "-7", "4", "1", "-2", "4"]], [[]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "1"]], [["5", "-3", "7", "2", "2", "5", "2", "-3", "1", "-7", "4", "1", "-2", "28", "4"]], [["5", "-3", "7", "2", "-5", "5", "2", "-3", "1", "-7", "4", "1", "4", "1"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "66266666", "5", "4", "3", "2", "1", "-4444"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "5"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "6"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["5", "-3", "7", "2", "-5", "5", "2", "-4444", "1", "-7", "4", "1", "4", "1", "-3"]], [["5", "-3", "7", "2", "2", "5", "2", "-3", "1", "-7", "4", "1", "-2", "28", "2", "4"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "22", "18", "20", "22", "24", "26", "28", "30"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "777777724", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "6", "14"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11"]], [["5", "-3", "7", "2", "5", "2", "-3", "1", "-7", "4", "1", "28", "4"]], [["155", "-3", "7", "2", "2", "5", "2", "-3", "1", "-7", "4", "1", "-2", "28", "1"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "66266666", "5", "4", "3", "2", "1", "-4444", "66266666"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "13"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "917", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11"]], [["5", "-3", "7", "2", "-5", "5", "2", "15", "1", "-7", "666666", "1", "-2", "4"]], [["1", "3", "5", "7", "18", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "124", "6", "14"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "5"]], [["1", "3", "5", "7", "1", "3", "22213", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["5", "-3", "7", "2", "2", "5", "2", "-43", "1", "4", "1", "-2", "28", "4"]], [["1", "3", "514", "7", "1", "3", "13", "15", "17", "5", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "5"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "1"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "9", "1", "11", "6", "8", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "6", "14", "17"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11", "13", "20"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11", "5"]], [["5", "-3", "7", "5", "2", "-3", "1", "-7", "4", "1", "28", "4"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "22", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11", "13", "20", "1"]], [["1", "3", "5", "7", "-5", "18", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "12", "4", "10", "14", "16", "18", "20", "22", "26", "28", "30", "124", "6"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111222", "10", "124", "7", "6", "5", "4", "3", "2", "1"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30", "20", "12"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "4", "1015", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "15", "7 ", "9", "1", "11", "6", "8", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "155", "30", "1", "6", "14"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "1", "6"]], [["5", "-3", "7", "5", "2", "-3", "1", "-7", "4", "1", "28", "4", "28"]], [["10000000000", "99999999", "88888888", "2218", "7777777", "666666", "-55555", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "1"]], [["1", "3", "5", "7", "1", "3", "13", "15", "1710", "5", "7 ", "917", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11"]], [["5", "-3", "7", "2", "2", "5", "2", "-43", "-2", "4", "1", "-2", "28", "4"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30"]], [["1", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "5"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-333", "222", "66", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "88888888"]], [["5", "-3", "7", "2", "2", "5", "2", "-43", "124", "1", "4", "1", "-2", "28", "4"]], [["5", "-3", "7", "5", "2", "-3", "1", "-7", "4", "100000000001", "28", "4", "28"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "1", "6", "7777777"]], [["1", "3", "5", "7", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["1", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "666666", "30", "1", "5"]], [["1", "3", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30", "20", "12"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "28", "30", "1", "11"]], [["5", "-3", "7", "2", "2", "5", "2", "-43", "124", "1", "4", "1", "-2", "28", "4", "28"]], [["1", "3", "5", "7", "1", "3", "15", "17", "5", "7 ", "9", "1", "11", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "11", "5", "1"]], [["5", "-3", "7", "2", "-5", "5", "2", "15", "1", "-7", "666666", "1", "111222", "4"]], [["1", "3", "5", "7", "1", "3", "13", "4", "17", "5", "7 ", "-5", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "5"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "22", "12", "4", "10", "14", "16", "18", "22", "24", "26", "28", "30", "11", "13", "20", "1"]], [["1", "3", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30", "20", "12", "7"]], [["5", "-3", "7", "44", "2", "99999999", "2", "5", "2", "-43", "-2", "4", "1", "-2", "28", "4", "-2"]], [["1", "-5", "5", "7", "1", "3", "22213", "15", "17", "17", "7 ", "-7", "1", "11", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["5", "-3", "7", "44", "2", "99999999", "2", "5", "2", "-43", "-2", "4", "1", "-2", "28", "4", "-2", "-3", "2", "-43"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "2", "12", "4", "10", "16", "18", "20", "22", "24", "26", "28", "30", "13"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "777777724", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "2"]], [["1", "3", "5", "7", "18", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "124", "6", "14", "3"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "27777777246", "30"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "115", "1"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "22"]], [["55", "-3", "7", "2", "-5", "5", "2", "-3", "1", "-7", "4", "1", "-2", "4"]], [["1", "3", "5", "7", "13", "15", "17", "5", "7 ", "9", "1", "11", "110", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1"]], [["10000000000", "99999999", "88888888", "7777777", "88", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "7", "6", "5", "4", "3", "2", "1"]], [["5", "7", "5", "2", "-3", "1", "-7", "4", "1", "28", "4", "28"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "777777724", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "2", "30"]], [["1", "3", "5", "7", "18", "99999999", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "124", "6", "14", "3"]], [["1", "3", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30", "20", "12", "12"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "-444", "7", "6", "5", "4", "3", "2", "1"]], [["1", "5", "7", "1", "3", "13", "4", "17", "5", "7 ", "-5", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "-444", "24", "26", "28", "30", "5"]], [["10000000000", "22213", "7777777", "666666", "-55555", "-4444", "-333", "222", "111222", "10", "15", "8", "7", "6", "5", "4", "3", "2", "1", "6", "7777777"]], [["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "010", "9", "8", "-444", "7", "6", "5", "4", "3", "2", "1"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "17"]], [["155", "-3", "7", "2", "2", "2", "-3", "1", "-7", "4", "1", "-2", "28", "1"]], [["10000000000", "99999999", "88888888", "2218", "7777777", "666666", "-55555", "-333", "222", "111222", "10", "15", "8", "267", "6", "5", "4", "3", "2", "1", "7"]], [["55", "-3", "7", "2", "-5", "5", "-3", "1", "-7", "4", "1", "-2", "4"]], [["1", "3", "7", "1", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "27777777246", "30"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30", "6"]], [["1", "3", "7", "1", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "8", "2", "12", "4", "10", "-3", "16", "18", "20", "22", "24", "26", "27777777246", "30", "666666"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "8", "2", "12", "4", "14", "16", "18", "20", "22", "24", "26", "28", "30"]], [["1", "3", "7", "1", "3", "13", "15", "17", "5", "7  ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "30", "20", "12"]], [["1", "3", "99999999", "7", "1", "3", "13", "15", "17", "5", "7  ", "9", "1", "11", "6", "8", "2", "12", "10", "14", "16", "15155", "18", "20", "22", "24", "26", "28", "30", "30", "20", "12"]], [["1", "3", "7", "1", "3", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "24", "01014", "26", "28", "30", "30", "20", "12", "12"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "1"]], [["1", "3", "5", "7", "1", "13", "15", "17", "5", "7 ", "9", "1", "11", "6", "8", "12", "4", "10", "777777724", "16", "18", "20", "22", "24", "26", "28", "30", "1", "6", "14"]], [["1", "3", "5", "7", "1", "3", "13", "15", "-4444", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "13"]], [["1", "516", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "7 ", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "17", "5"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "18", "16"]], [["1", "3", "5", "7", "13", "15", "17", "5", "7 ", "9", "1", "11", "110", "6", "8", "2", "12", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "30"]], [["5", "-3", "7", "2", "-5", "5", "2", "-4444", "1", "-7", "44", "1", "4", "1", "-3"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "-7", "1", "11", "6", "8", "2", "12", "777777724", "4", "10", "14", "16", "18", "20", "22", "24", "26", "28", "30", "1", "7 "]]], "contract": "\n    def check_numeric(num: str): # $_CONTRACT_$\n        return num.lstrip('-').rstrip(' ').isdigit() # $_CONTRACT_$\n    assert isinstance(nums_str, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(check_numeric(num) for num in nums_str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n"}
{"task_id": "Mbpp/750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n", "entry_point": "add_tuple", "canonical_solution": "\ndef add_tuple(test_list, test_tup):\n  return test_list + list(test_tup)\n", "base_input": [[[5, 6, 7], [9, 10]], [[6, 7, 8], [10, 11]], [[7, 8, 9], [11, 12]]], "atol": 0, "plus_input": [[[], [1, 2]], [[], []], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695], [1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1, 2]], [[], ["gLrST", "cgbZL", "gakjwn", "GZGE", "zG"]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -31.08718493477471, 65.17669523907202], [true, "zG", 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805, 56.561546955182706], [2, 1, 1, 2]], [[85.91907394610695, "gLrST"], ["gLkArST", "cgbZL", "gakjwn", "GZGE", "zG"]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1, 2, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, -49.52689816727833], [1, 2]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -59.633415719094835, 65.48591501629136, -31.08718493477471, 65.17669523907202], [true, "zG", 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695], [1, 2, 2]], [[-10.26715024967983, 55.543216964956486, 85.91907394610695, -31.08718493477471, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2, 1]], [[-95.93549064962474, -10.26715024967983, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, -49.52689816727833], [1, 2, 1]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 65.17669523907202, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, false, "iGvRkInoya", true]], [[-10.26715024967983, 55.543216964956486, 85.91907394610695, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 82.37922713480094, 56.561546955182706, -59.633415719094835, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805, 56.561546955182706], [2, 1, 3, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, 65.48591501629136, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [1, 0, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 3, 2, 1]], [[85.91907394610695, "gLrST", 85.91907394610695], ["gLkArST", "cgbZL", "gakjwn", "GZGE", "zG"]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -31.08718493477471, 65.17669523907202], [true, 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-10.26715024967983, 82.37922713480094, -43.46143646200369, -31.08718493477471, 65.17669523907202], [true, 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695], [1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, 65.48591501629136, 56.561546955182706, -87.65973057260044, -28.65485586376057, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2, 1]], [[2, 2], ["gLkArST", "fQWlqEa", "GZGE", "ZUpJfqNP", "zG", "KiEslH", "iGvRkInoya", "hsvhNF"]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, 51.55337458326554, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695], [2, 2, 2]], [[50.74160029251425, -31.08718493477471, 45.573615319483054, 32.91228520753927, 80.27721048870663, -23.825573761509688, -52.44291906450442, 32.91228520753927], ["gLrST", "cgbZL", "gakjwn", "GZGE", "zG"]], [[1, 3, 65.17669523907202, false, true, true, -52.44291906450442], ["gLrST", "cgbZL", "gakjwn", "GZGE", "zG"]], [[-10.26715024967983, 55.543216964956486, 85.91907394610695, -31.08718493477471, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "zG", true]], [[-12.919016524402082, 55.543216964956486, 85.91907394610695, -31.08718493477471, 65.17669523907202], [true, false, 0, "kA", -95.07998304699902, "zG", true]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, -12.919016524402082], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 86.53121788549056, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, 65.48591501629136, 38.24361019954367, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2, 1]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, -12.919016524402082], [false, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 86.53121788549056, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -31.08718493477471, 65.17669523907202, -31.08718493477471, -10.26715024967983], [true, "zG", 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2, 2, 1]], [[-10.26715024967983, 55.543216964956486, -31.08718493477471, 65.17669523907202], [true, "zG", 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, -31.17870476469473, 65.17669523907202, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, false, "iGvRkInoya", true]], [[55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 86.53121788549056, 65.17669523907202], [true, true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[0, 2], ["gLkArST", "fQWlqEa", "GZGE", "ZUpJfqNP", "zG", "KiEslH", "iGvRkInoya"]], [[51.71717469521855, -95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805, 38.24361019954367], [2, 1, 0, 1]], [[55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 86.53121788549056, 65.17669523907202], [true, false, "zG", 0, "kA", -49.52689816727833, "iGvRkInoya", true]], [[-10.26715024967983, 82.37922713480094, -43.46143646200369, -31.08718493477471], [true, 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, 50.74160029251425, 47.797080090629805, 39.54647476925683, 47.797080090629805], [2, 1, 3, 2, 1]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -31.08718493477471, -31.17870476469473, 65.17669523907202, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, false, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 3, 2, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 47.797080090629805, 38.24361019954367, 47.797080090629805], [1, 2, 1, 3, 2, 1]], [[55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 86.53121788549056, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true, -95.07998304699902]], [[-10.26715024967983, 55.543216964956486, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-10.26715024967983, 55.543216964956486, 85.91907394610695, -31.08718493477471, 65.17669523907202], [true, false, "zG", "kA", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 50.74160029251425, 47.797080090629805, 39.54647476925683, 47.797080090629805], [2, 1, 3, 2, 1]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 86.53121788549056, 65.17669523907202, -31.08718493477471], [true, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.70193517973803, -31.08718493477471, 65.17669523907202, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, false, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 0, 1, 1]], [[50.74160029251425, -31.08718493477471, 45.573615319483054, 32.91228520753927, 81.03417583063762, -23.825573761509688, -52.44291906450442, 32.91228520753927], ["gLrST", "cgbZL", "gakjwn", "GZGE", "zG"]], [[-95.93549064962474, -10.26715024967983, 82.37922713480094, 56.561546955182706, -59.633415719094835, -49.52689816727833, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [1, 0, 1, 1]], [[false, false, true, false, true, false, false, false, false], [1, 2]], [[-95.93549064962474, -10.26715024967983, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, -49.52689816727833, -49.52689816727833], [1, 2, 1]], [[50.74160029251425, 55.543216964956486, 65.17669523907202], [true, false, "zG", "kA", -95.07998304699902, "iGvRkInoya", true]], [[-15, 3, 41, 52], ["gLT", "cgbZL", "gakjwn", "GZGE", "zG"]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 41, 3, 1]], [[-95.93549064962474, -10.26715024967983, 82.37922713480094, 39.54647476925683, 56.561546955182706, -59.633415719094835, -49.52689816727833, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 0, 1, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805, -49.52689816727833], [2, 1, 0, 1]], [[-36.89586249488907, -95.93549064962474, -87, [-27, 1, 88, 61, 52, -79], {"-68": "loXRYiwIF", "2": "jns", "87": "Xc", "1": "CN", "-15": "GZGE", "-19": "gLT", "16": "GZGE"}, false, "DJEiGvRkInoyad", "DJEd", -55, "fQWlqEa"], ["gLrST", "cgbZL", "gakjwn", "GZGE"]], [[-10.26715024967983, 55.543216964956486, 85.91907394610695, -31.08718493477471, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, "zG", true, true]], [[-10.26715024967983, 55.543216964956486, 85.91907394610695, -31.08718493477471, 54.71081150035622], [true, false, "zG", 0, "cgbZL", -95.07998304699902, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, -42.66921859581447, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 52, 3, 88, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, 65.48591501629136, 56.561546955182706, -87.65973057260044, -28.65485586376057, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [1, 1, 1, 2]], [[-95.93549064962474, -10.26715024967983, 82.37922713480094, 56.561546955182706, -59.633415719094835, -49.52689816727833, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 2]], [[1, 3, 65.17669523907202, false, -42.66921859581447, true, true, -52.44291906450442], ["gLrST", "cgbZL", "gakjwn", "GZhsvhNFGE", "GZGE", "zG"]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, 47.797080090629805, -48.85929221953715, 38.24361019954367, 85.91907394610695, 47.797080090629805], [2, 1, 1, 0, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, -42.66921859581447, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 52, 3, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805, -49.52689816727833], [2, 1, 0, 1, 2, 2, 2]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -48.58837901592278, 45.573615319483054, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [1, 1, 1, 2, 2]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -31.08718493477471, -31.17870476469473, 65.17669523907202, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, false, "iGvRkInoya", true, "iGvRkInoya"]], [[-10.26715024967983, 55.543216964956486, -31.08718493477471, 65.17669523907202, -31.08718493477471], [true, "zG", -1, "kA", -95.93549064962474, "iGvRkInoya", true]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 2, 1, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, -87.65973057260044, -49.52689816727833, 47.797080090629805, 38.24361019954367, 85.91907394610695, 47.797080090629805], [1, 0, 1]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, 65.77590529408057, 65.17669523907202], [true, false, "zG", 0, "kA", -95.07998304699902, false, "iGvRkInoya", true, "iGvRkInoya"]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, -31.08718493477471, 65.17669523907202], [false, "zG", 0, "kA", -95.93549064962474, "iGvRkInoya", true]], [[0, 3, 65.17669523907202, false, -42.66921859581447, true, true, -52.44291906450442], ["gLrST", "cgbZL", "gakjwn", "GZhsvhNFGE", "GZGE", "zG"]], [[-10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 3, 2, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, 65.48591501629136, 38.24361019954367, -87.65973057260044, -49.52689816727833, 44.838951065833115, 47.797080090629805, 38.24361019954367, 47.797080090629805], [2, 1, 2, 1]], [[-95.93549064962474, -10.26715024967983, 56.561546955182706, -43.46143646200369, 56.561546955182706, -87.65973057260044, -49.52689816727833, 45.573615319483054, 47.797080090629805, 38.24361019954367, 47.797080090629805, 56.561546955182706], [2, 1, 2, 2, 1]], [[-10.26715024967983, 55.543216964956486, -43.46143646200369, 85.91907394610695, -31.08718493477471, -12.919016524402082, -12.919016524402082], [false, false, "zG", 0, "kA", -95.07998304699902, "iGvRkInoya", true]], [[-93.61964802108062, "dsgpZflr"], ["gLrST", "cgbZL", "gakjwn", "GZGE", "zG"]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n"}
{"task_id": "Mbpp/751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n", "entry_point": "check_min_heap", "canonical_solution": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\n", "base_input": [[[1, 2, 3, 4, 5, 6]], [[2, 3, 4, 5, 10, 15]], [[2, 10, 4, 5, 3, 15]]], "atol": 0, "plus_input": [[[8, 3, 9, 6, 7, 5, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 6, 1, 9]], [[4, 2, 3, 16, 5, 6, 7, 8, 10]], [[10, 9, 7, 6, 5, 4, 3, 2, 6, 1, 15, 9, 7]], [[-80, 19, 31, 4, 18, 5, 7]], [[4, 2, 11, 3, 16, 5, 6, 7, 8, 10, 11]], [[-80, 19, 4, 18, 5, 7]], [[-80, -80, 19, 31, 4, 18, 5, 7, 5, 5]], [[10, 9, 8, 7, 5, 4, 3, 2, 6, 1, 9]], [[10, 9, 8, 7, 5, 4, 3, 2, 6, 1, 9, 6]], [[10, 9, 7, 6, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 5, 4, 12, 3, 2, 6, 1, 9, 6, 1]], [[-80, 19, 31, 4, 18, 30, 5, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3, 4, 3]], [[10, 9, 8, 6, 5, 4, 3, 2, 6, 1, 9, 4]], [[10, 9, 8, 7, 5, 4, 3, 2, 6, 1, 9, 10, 4]], [[10, 9, 8, 7, 6, 20, 5, 4, 3, 2, 6, 1, 9]], [[4, 10, 9, 7, 0, 6, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 30, 3, 2, 1]], [[-80, 19, 31, 4, 18, 5, 7, 19]], [[4, 2, 11, 3, 16, 5, 6, 7, 8, 10, 11, 2, 11]], [[10, 9, 7, 6, 20, 4, 3, 2, 6, 1, 9]], [[-80, 5, 19, 31, 4, 18, 5, 7]], [[8, 8, 3, 9, 6, 7, 5, 1]], [[10, 9, 8, 7, 5, 4, 12, 3, 2, 6, 1, 9, 1]], [[-80, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[-80, 19, 31, 4, 18, 30, 12, 7, 18]], [[4, 2, 11, 3, 16, 5, 6, 7, 8, 10, 11, 7]], [[4, 10, 9, 8, 0, 6, 5, 4, 3, 2, 1, 9]], [[-80, -80, 19, 31, 4, 18, 5, 5, 5]], [[-80, 5, 31, 4, 18, 19, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 31, 10]], [[-80, 31, -80, 19, 31, 4, 18, 5, 7, 5, 5, 5, 5]], [[-80, 19, 4, 5, 18, 5, 7]], [[-80, 19, 5, 18, 6, 7]], [[-80, 5, 19, 31, 4, 18, 5, 7, 5]], [[-80, 19, 4, 8, 5, 7]], [[-80, 19, 4, 18, 5, 7, 19]], [[-80, 19, 5, 0, 18, 6, 7, -80]], [[10, 8, 7, 5, 16, 3, 2, 6, 1, 9, 6]], [[-80, -80, 19, 31, 4, 18, 5, 7, 5, 5, 5]], [[4, 2, 3, 16, 5, 6, 7, 31, 8, 10]], [[10, 9, 7, 6, 5, 4, 1, 3, 2, 1]], [[-80, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 2]], [[-80, 31, -80, 19, 31, 4, 18, 5, 7, 5, 4, 5, 5]], [[-80, 4, 31, 4, 18, 5, 7, 19]], [[4, 11, 3, 16, 5, 6, 7, 8, 10, 11, 7]], [[10, 9, 8, 7, 6, 8, 5, 4, 3, 2, 1]], [[10, 9, 8, 7, 5, 4, 12, 3, 2, 6, 20, 1, 9, 1]], [[-80, 18, 5, 31, 4, 18, 19, 7]], [[4, 2, 3, 16, 5, 6, 7, 6, 10]], [[3, 4, 5, 6, 7, 8, 9, 6, 5]], [[10, 9, 8, 7, 5, 4, 12, 3, 2, 16, 1, 9, 6, 1, 9]], [[10, 9, 8, 7, 6, 5, 30, 3, 2, 1]], [[4, 2, 11, 3, 16, 31, 7, 8, 11, 7]], [[4, 2, 11, 3, 16, 5, 6, 7, 8, 10, 11, 4]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 5, 12, 13, 14, 16, 17, 18, 19]], [[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20]], [[4, 11, 3, 16, 5, 6, 7, 10, 11, 7, 5, 7]], [[10, 9, 8, 7, 5, 4, 3, 2, 1, 6, 1, 9, 10, 4]], [[9, 8, 7, 5, 4, 12, 3, 2, 6, 20, 1, 9, 1]], [[4, 2, 3, 16, 5, 6, 7, 31, 8, 10, 3]], [[4, 2, 7, 11, 3, 16, 31, 7, 8, 11, 7]], [[-80, -80, 19, 30, 4, 10, 18, 5, 7, 5, 5, 5]], [[10, 9, 8, 7, 5, 4, 12, 3, 2, 16, 1, 9, 6, 1, 10, 9]], [[-80, 19, 14, 5, 18, 5, 7, 19, 14]], [[10, 9, 8, 7, 5, 4, 12, 3, 2, 16, 0, 1, 9, 6, 10, 9, 12]], [[-80, 31, -80, 19, 31, 4, 18, 5, 7, 5, 4, 5, 5, 19]], [[4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3, 4, 3]], [[-80, -80, 19, 31, 4, 5, 5, 5]], [[-80, 4, 31, 4, 17, 5, 7, 19, 31]], [[-80, 9, 8, 7, 6, 4, 3, 2, 1]], [[10, 9, 6, 5, 4, 1, 3, 3, 2, 1]], [[-80, -80, 19, 31, 4, 18, 5, 14, 5, 5]], [[18, 10, 9, 8, 7, 5, 4, 12, 3, 2, 16, 1, 9, 6, 1, 9]], [[10, 11, 10, 9, 8, 7, 5, 9, 3, 2, 6, 1, 9]], [[-80, 19, 4, 5, 5, 18, 5, 7]], [[4, 18, 7, 3, 3, 16, 5, 6, 7, 6, 10]], [[-80, 9, 8, 7, 6, 5, 4, 3, 1, 2, 2]], [[19, 2, 11, 3, 15, 5, 6, 7, 8, 10, 11, 2, 11]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3, 4, 31, 3]], [[-80, 9, 8, 7, 5, 4, 3, 2, 1, 2, 2]], [[8, 10, 9, 8, 7, 6, 8, 5, 30, 3, 2, 1]], [[-80, 9, 8, 7, 5, 4, 3, 2, 1, 2, 2, 2]], [[-80, 5, 31, 4, 18, 7]], [[-80, 4, 31, 4, 17, 6, 32, 7, 19, 31]], [[10, 9, 8, 6, 5, 4, 3, 2, 16, 6, 1, 8, 10, 4]], [[1, 2, 6, 3, 4, 5, 6, 7, 8, 9, 10, 3, 4, 3, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 5, 9, 10, 3, 4, 3, 3]], [[-80, -80, 19, 31, 4, 18, 5, 7, 5]], [[-80, -80, 19, 31, 4, 18, 5, 14, 5, 5, -80]], [[-80, 9, 8, 7, 5, 4, 3, 2, 2, 2, 14, 2]], [[4, 2, 7, 11, 3, 16, 31, 7, 8, 11, 14]], [[-80, 19, 31, 4, 5, 18, 5, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[4, 11, 3, 16, 5, 6, 7, 10, 11, 7, 5, 7, 6]], [[-80, 31, -80, 19, 31, 4, 11, 5, 7, 5, 4, 5, 5]], [[1, 6, 2, 6, 3, 4, 5, 6, 7, 8, 9, 10, 3, 4, 3, 3]], [[10, 9, 7, 6, 5, 4, 3, 2, 6, 1, 15, 9, 7, 4]], [[-80, 9, 8, 7, 5, 4, 3, 2, 2, 2, 14, 2, 2]], [[-80, 5, 19, 31, 8, 18, 5, 7, 5]]], "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False\n"}
{"task_id": "Mbpp/752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n", "entry_point": "jacobsthal_num", "canonical_solution": "\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\n", "base_input": [[5], [2], [4], [13]], "atol": 0, "plus_input": [[100], [1000], [true], [1001], [99], [98], [101], [97], [999], [96], [84], [998], [85], [1002], [83], [76], [77], [102], [1003], [78], [1004], [103], [95], [1005], [79], [82], [997], [48], [49], [996], [75], [35], [86], [81], [87], [36], [37], [80], [50], [88], [89], [34], [1006], [995], [104], [52], [53], [65], [94], [47], [33], [66], [74], [93], [105], [51], [91], [90], [46], [32], [92], [106], [18], [54], [994], [15], [1007], [21], [17], [107], [108], [19], [20], [44], [73], [22], [64], [38], [14], [45], [1008], [993], [23], [11], [24], [67], [12], [25], [68], [13], [16], [72], [7], [39], [10], [43], [31], [40], [55], [56], [30], [69]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731\n"}
{"task_id": "Mbpp/753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n", "entry_point": "min_k", "canonical_solution": "\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \n", "base_input": [[[["Manjeet", 10], ["Akshat", 4], ["Akash", 2], ["Nikhil", 8]], 2], [[["Sanjeev", 11], ["Angat", 5], ["Akash", 3], ["Nepin", 9]], 3], [[["tanmay", 14], ["Amer", 11], ["Ayesha", 9], ["SKD", 16]], 1]], "atol": 0, "plus_input": [[[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10]], 2], [[], 0], [[["John", 20]], 1], [[["John", 20]], 0], [[["John", 20], ["John", 20]], 0], [[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10]], 1], [[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10]], 0], [[], -1], [[["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], 1], [[["John", 20], ["John", 20], ["John", 20]], 1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], 0], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], 1], [[["John", 20], ["John", 20], ["John", 20], ["John", 20]], 1], [[["John", 20], ["John", 20]], -2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], -1], [[["John", 20], ["John", 20]], 1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Nikhil", 10]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -4], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -5], [[["John", 20], ["John", 20], ["John", 20], ["John", 20]], -5], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], -5], [[["John", 20], ["John", 20], ["John", 20]], -2], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Manjeet", 10]], -4], [[["John", 20], ["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Manjeet", 10]], -4], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10]], -1], [[["John", 20], ["John", 20]], -3], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], -2], [[["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], 1], [[["Nikhil", 10, "Nikhil"], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], 1], [[["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10]], 1], [[["John", 20], ["John", 20], ["John", 20], ["John", 20]], -1], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], -1], [[["John", 20], ["John", 20], ["John", 20], ["John", 20]], -2], [[["Nikhil", -5], ["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10]], 0], [[["John", -4], ["John", 20]], -1], [[["John", 20, 20], ["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Manjeet", 10]], -2], [[["John", 20, 20], ["John", 20], ["John", 20, 20], ["John", 20]], -1], [[["John", 20], ["John", 20], ["John", 20, 20], ["John", 20]], 2], [[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10]], 1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Manjeet", 10]], 1], [[["John", 20], ["John", 20], ["John", 20]], 2], [[["John", 20], ["John", 20], ["John", 20]], -1], [[], -5], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], 0], [[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -3], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Manjeet", 10]], 1], [[["John", 20], ["John", 20], ["John", 20], ["John", 20]], 2], [[["John", 20, "John"], ["John", 20], ["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akshat", 10, "Akshat"]], -1], [[["John", 20, 20], ["John", 20], ["John", 20, 20], ["John", 20], ["John", 20]], -1], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Nikhil", 10]], -1], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], -2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], -5], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], 0], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akshat", 0], ["Nikhil", 10]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Manjeet", 10, 10]], -4], [[["Manjeet", 10], ["Akshat", 10], ["Nikhil", 10], ["Akash", 10]], -3], [[["Manjeet", 10], ["Akshat", 10, "Akshat", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Manjeet", 10, 10]], -4], [[["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], 0], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10]], 0], [[["John", 20], ["John", 20]], 2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], -4], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Nikhil", 10], ["Akshat", 10, "Akshat"]], -1], [[["John", -4], ["John", 20]], -5], [[["Manjeet", 10], ["Akshat", 10], ["Manjaeet", 10], ["Akash", 10], ["Nikhil", 10]], 0], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10]], 1], [[["Nikhil", 10, "Nikhil"], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Nikhil", 10]], 0], [[["Manjeet", 10], ["Akshat", 10], ["Manjaeet", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10]], 0], [[["John", -3], ["John", 20], ["John", 20], ["John", 20], ["John", 20], ["John", 20]], 0], [[["Manjeet", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -3], [[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10]], -4], [[["Manjeet", 10], ["Akshat", 10], ["Manjaeet", 10], ["Akash", 10], ["Nikhil", 10]], -1], [[["Manjeet", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -1], [[["Manjeet", 10], ["Akshat", 10, "kshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10]], -5], [[["Akshat", 10, "Akshat", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Manjeet", 10, 10]], -2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10]], -2], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10]], -1], [[["John", 20, 20], ["John", 20, 20], ["John", 20], ["John", 20, "John"]], -2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Nikhil", 10], ["Manjeet", 10]], -2], [[["Nikhil", -5], ["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Nikhil", 10], ["Nikhil", -5]], 0], [[["John", 10, 20, 20], ["John", 20]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Akash", 10, "Akash"], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10]], 1], [[["John", 10, 20, 20]], -1], [[["John", 20, 20], ["John", 20]], 1], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akshat", 0], ["Nikhil", 10], ["Akash", 10]], -1], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Akash", 10, "Akash"], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10], ["Manjeet", 10]], 1], [[["Akshat", 10], ["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Nikhil", 10]], -2], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10], ["Akash", 10]], -1], [[["John", -2], ["John", 20]], 1], [[["Manjeet", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10]], -3], [[["Manjeet", 10], ["Akshat", 10, "Akshat"], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Akash", 10], ["Akash", 11], ["Akash", -4], ["Akash", 10]], -4], [[["Akshat", 10, "Akshat"], ["Nikhil", 10]], 1], [[["John", -4], ["John", 20], ["John", 20]], -5], [[["Akshat", 10, "Akshat", 10], ["Akash", 10], ["Nikhil", 10], ["Akash", 10], ["Manjeet", 10, 10], ["Manjeet", 10, 10]], -2], [[["Akshat", 10], ["Manjeet", 10], ["Akash", 10], ["Nikhil", 10], ["Manjeet", 10]], 1], [[["John", 20], ["John", 20], ["John", 20], ["John", -1], ["John", 20]], 0], [[["Manjeet", 10], ["Akshat", 10], ["Akash", 10], ["Manjeet", 10]], 1]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x[1], (int, float)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert K <= len(test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n"}
{"task_id": "Mbpp/754", "prompt": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n", "entry_point": "extract_index_list", "canonical_solution": "\ndef extract_index_list(l1, l2, l3):\n    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]\n", "base_input": [[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]], [[1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], "atol": 0, "plus_input": [[[], [], []], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3, 4, 5, 6, 7], [7, 6, 5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6, 7]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]], [[10, 20, 30], [0, 5, 10], [10, 15, 20]], [[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]], [[11, 22, 33, 44, 55], [10, 20, 30, 40, 50], [20, 40, 60, 80, 100]], [[0.5, 1, 1.5, 2, 2.5], [0.2, 0.4, 0.6, 0.8, 1], [0.2, 0.4, 0.6, 0.8, 1]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 3, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 8, 9]], [[5, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[1, 3, 5, 7, 9, 2, 20, 4, 6, 8, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[6, 11, 8, 9, 10], [9, 8, 7, 6, 5], [6, 11, 8, 9, 10]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [3, 1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8, 8, 10, 12, 14], [1, 2, 3, 5, 5, 6], [2, 4, 6, 8, 8, 10, 12, 14]], [[5, 3, 4, 5, 6, 7], [0, 1, 2, 3, 1, 4, 5, 6], [0, 1, 2, 3, 1, 4, 5, 6]], [[5, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 60, 2, 3, 4, 5, 6, 7]], [[10, 20, 30], [0, 5, 10], [10, 20, 30]], [[0.5, 1, 1.5, 2, 2.5], [0.2, 0.4, 0.6, 0.8, 1], [0.2, 1.5, 0.4, 0.6, 0.8, 1]], [[4, "Qmha", false], [], [35, 96, 80, 59, 44, -20, 30, 8, -30]], [[33, 1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 3, 5, 7, 30, 2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 30, 2, 4, 6, 8, 10]], [[10, 20, 30], [10, 20, 30], [10, 20, 30]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 4, 6, 8, 10, 8]], [[1, 2, 22, 3, 4, 5, 6], [3, 1, 9, 3, 4, 6, 6], [3, 1, 9, 3, 4, 6, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[10, 20, 30], [0, 10], [10, 15, 20]], [[], [false, false, true], []], [[0, 1, 2, 3, 1, 1, 4, 5, 6], [0, 1, 2, 3, 1, 1, 4, 5, 6], [0, 1, 2, 3, 1, 1, 4, 5, 6]], [[1, 3, 5, 7, 30, 2, 4, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 30, 2, 4, 8, 10]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14]], [[10, 20, 31], [0, 5, 10], [10, 15, 15, 20, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 40], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[2, 3, 4, 5], [9, 8, 7, 6, 5], [6, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 60, 9], [1, 2, 3, 4, 5, 6, 7, 8, 60, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 8, 9]], [[1, 2, 4, 5], [1, 2, 4, 5], [9, 8, 7, 6, 5, 9]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 5], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3], [3, 2, 3], [3, 2, 3]], [[3, 4, 6, 8, 10, 12, 14], [3, 4, 6, 8, 10, 12, 14], [3, 4, 6, 8, 10, 12, 14]], [[5, 2, 3, 4, 5, 6, 7], [0, 60, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 1]], [[0, 1, 2, 3, 4, 7, 60, 6, 5, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 4]], [[10, 20, 30], [0, 5, 10, 10], [10, 19, 15, 20]], [[10, 10, 20, 30], [10, 15, 20, 15], [10, 15, 20, 15]], [[33, 1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10], [0, 1, 2, 3, 4, 6, 7, 8, 9], [0, 1, 2, 3, 4, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 40], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 4, 7, 6, 5, 8, 9]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 33, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14]], [[1, 1, 3, 4, 5, 6, 5, 7], [0, 1, 10, 2, 3, 4, 5, 6, 20], [1, 1, 3, 4, 5, 6, 5, 7]], [[4, 3, 3, 3, 3, 3, 3, 4, 3, 3], [4, 3, 3, 3, 3, 3, 3, 4, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [[1, 2, 3, 4, 5, 6], [3, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[10, 30, 10], [10, 30, 10], [10, 30, 10]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [4, 6, 8, 10, 8, 8]], [[1, 3, 5, 9, 7, 30, 2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 9, 7, 30, 2, 4, 6, 8, 10]], [[false, false, false, false, false], [], [-19.126915383548493, false, 2.5, [[], "Qmha"], -36, null, 8]], [[2, 3, 4, 5], [2, 3, 4, 5], [9, 8, 7, 6, 5, 6]], [[2, 3, 4, 5, 3], [9, 8, 7, 6, 5, 6], [2, 3, 4, 5, 3]], [[0.2, 0.6, 0.8, 2, 1], [0.2, 0.6, 0.8, 2, 1], [0.2, 0.4, 0.8, 1]], [[10, 30], [0, 10], [0, 10]], [[0.2, 0.6, 0.8, 2, 1], [1.5, 0.2, 0.4, 0.8, 1], [1.5, 0.2, 0.4, 0.8, 1]], [[10, 20], [10, 20], [10, 20]], [[1, 2, 3], [1, 3, 3], [1, 2, 3]], [[2, 3, 4, 5], [9, 8, 7, 6, 5, 6], [2, 3, 4, 5]], [[-54], [4, "Qmha", false], []], [[2, 3, 5, 7, 30, 2, 4, 6, 8, 10, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 5, 7, 30, 2, 4, 6, 8, 10, 3]], [[2, 3, 5, 7, 30, 2, 20, 6, 8, 10, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 5, 7, 30, 2, 20, 6, 8, 10, 3]], [[55, 2, 3, 4, 5, 6, 7, 8, 40, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[33, 1, 2, 3, 5, 6, -20, 7, 8, 9, 10], [0, 1, 2, 3, 6, 5, 6, 7, 8, 9], [0, 1, 2, 3, 6, 5, 6, 7, 8, 9]], [[0.2, 0.4, 0.6, 0.8, 1], [0.2, 0.4, 0.6, 0.8, 1], [0.2, 0.4, 0.6, 0.8, 1]], [[5, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 60, 2, 3, 4, 3, 5, 6, 7]], [[5, 2, 3, 4, 6, 7, 7], [5, 2, 3, 4, 6, 7, 7], [1, 60, 2, 3, 4, 3, 5, 5, 7]], [[0.5, 1, 1.5, 2, 2.5, 1, 1.5], [0.5, 1, 1.5, 2, 2.5, 1, 1.5], [0.2, 0.4, 0.6, 1]], [[0, 1, 2, 3, 1, 1, 5, 6, 0], [0, 1, 2, 3, 1, 1, 5, 6, 0], [0, 1, 2, 3, 1, 1, 5, 6, 0]], [[2, 4, 6, 8, 8, 10, 0, 14], [1, 2, 3, 5, 5, 6], [2, 4, 6, 8, 8, 10, 0, 14]], [[9, 8, 7, 6, -54], [2, 6, 7, 8], [9, 8, 7, 6, -54]], [[5, 3, 4, 5, 6, 7, 3], [0, 1, 2, 3, 3, 1, 4, 5, 6], [0, 1, 2, 3, 3, 1, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 19, 3, 4, 5, 6], [0, 1, 2, 19, 3, 4, 5, 6]], [[2, 4, 6, 8, 10, 12, 14, 4], [1, 2, 3, 4, 5, 7, 3], [1, 2, 3, 4, 5, 7, 3]], [[1, 2, 3, 4, 33, 5, 6, 7], [2, 4, 6, 10, 12, 14], [2, 4, 6, 10, 12, 14]], [[1, 2, 4, 5], [1, 2, 4, 5], [9, 8, 7, 6, 5, 9, 9]], [[0, 8, 1, 2, 3, 3, 7, 6, 5, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 60, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 9, 9]], [[1, 2, 3, 4, 5], [8, 7, 6, 5], [6, 7, 8, 9, 10]], [[2, 4, 6, 10, 12, 14, 14], [2, 4, 6, 10, 12, 14, 14], [2, 4, 6, 10, 12, 14, 14]], [[2, 6, 8, 7, 8], [2, 6, 8, 7, 8], [9, 8, 7, 6, -54]], [[0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[100, 20, 30], [100, 20, 30], [100, 20, 30]], [[-54], [4, "Qmha", false], [1.5, 5.545422274822442, 48.537942334058584, 66.85132571363468, 0.4, 0.2, 48.92270766385428, 0.2, 82.31395095377587]], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[null], [false, false, true], []], [[1, 2, 3, 4, 5, 6], [1, 2, 7, 3, 4, 5, 6, 7], [1, 2, 7, 3, 4, 5, 6, 7]], [[10, 80, 10], [10, 80, 10], [10, 80, 10]], [[1, 2, 3, 4, 5, -30, 3], [1, 2, 3, 4, 5, -30, 3], [1, 2, 3, 4, 5, -30, 3]], [[1, 2, 3, 4, 5, 6, 7], [4, 6, 8, 10, 8, 8], [1, 2, 3, 4, 5, 6, 7]], [[-54, 3, 5, 7, 9, 2, 20, 4, 6, 8, 10], [10, 9, 8, 7, 6, 5, 4, 2, 2, 1, 10], [10, 9, 8, 7, 6, 5, 4, 2, 2, 1, 10]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [9, 8, 7, 6, 5]], [[0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5]], [[1, 3, 5, 7, 30, 2, 4, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-20, 20, 30], [5, 10, 10], [-20, 20, 30]], [[0, 1, 2, 3, 3, 1, 4, 5, 6], [0, 1, 2, 3, 3, 1, 4, 5, 6], [0, 1, 2, 3, 3, 1, 4, 5, 6]], [[1, 2, 7, 3, 4, 5, 6, 7], [1, 2, 7, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]], [[10, 20, 30], [0, 5, 10, 6, 10], [10, 19, 15, 20]], [[4, "Qmha", false], [95, 4, 95], [35, 96, 80, 59, 44, -20, 30, 50, -30]], [[0, 5, 10, 6, 10, 10], [0, 5, 10, 6, 10, 10], [10, 19, 15, 20]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 30, 1], [6, 5, 4, 3, 2, 30, 1]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 4, 1], [3, 1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 33, 5, 6, 8, 7], [2, 4, 6, 8, 10, 12, 14]], [[10, 20, 30], [0, 5, 10, 10], [0, 5, 10, 10]], [[10, 10, 20, 30], [10, 15, 15], [10, 15, 15]]], "contract": "\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n"}
{"task_id": "Mbpp/755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n", "entry_point": "second_smallest", "canonical_solution": "\ndef second_smallest(numbers):\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n", "base_input": [[[1, 2, -8, -2, 0, -2]], [[1, 1, -0.5, 0, 2, -2, -2]], [[2, 2]], [[2, 2, 2]]], "atol": 0, "plus_input": [[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]], [[]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[3, 1, 4, 1, 5, 9, 2, 7, 6, 5, 3, 5, 8, 9, 7, 9]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 4, 8, 9, 7, 9]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[2, 1, 2, 1, 1, 7, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[3, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]], [[1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[3, 1, 4, 1, 5, 9, 2, 7, 6, 5, 3, 7, 5, 8, 9, 7, 9]], [[2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 7, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1]], [[2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 4, 8, 9, 7, 9, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[3, 1, 1, 5, 9, 9, 2, 7, 6, 5, 3, 5, 8, 4, 7, 9]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 7, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 0, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 4, 0, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]], [[1, 1, 1, 1, 1, 1, 1, 0, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 4, 2, 8, 9, 7, 9, 1]], [[1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 7, 2, 1]], [[3, 1, 1, 5, 9, 9, 2, 6, 5, 3, 5, 8, 4, 7, 9]], [[1, 7, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 1, 1]], [[1, 4, 0, 5, 9, 2, 5, 3, 5, 8, 9, 7, 9]], [[3, 4, 1, 5, 9, 2, 6, 5, 3, 5, 5, 8, 9, 7, 9]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[3, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 5, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]], [[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 7, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]], [[6, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 1, 0, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1]], [[2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 2]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1]], [[1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 7, 2, 1]], [[3, 1, 4, 1, 5, 9, 2, 7, 6, 5, 3, 5, 6, 8, 9, 7, 9]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 7, 3, 5, 8, 9, 7, 9]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 5, 4, 2, 8, 9, 7, 9, 1, 5]], [[3, 1, 1, 5, 9, 9, 2, 7, 3, 5, 3, 5, 8, 4, 7, 9]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]], [[-83.2558960666197]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1]], [[1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2]], [[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]]], "contract": "\n  assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None\n"}
{"task_id": "Mbpp/757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n", "entry_point": "count_reverse_pairs", "canonical_solution": "\ndef count_reverse_pairs(test_list):\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n", "base_input": [[["julia", "best", "tseb", "for", "ailuj"]], [["geeks", "best", "for", "skeeg"]], [["makes", "best", "sekam", "for", "rof"]]], "atol": 0, "plus_input": [[[]], [["abc", "defg", "hijk", "uvwxyz", "ijklmnop", "qrstuv"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]], [["geeks"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk"]], [["ab", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ij", "ji"]], [["aba", "cdc", "efe", "ghg", "ijij", "klm", "mlk"]], [["abcba", "defed", "ghighg", "ijklkji", "mnoponm", "aaa", "bbb", "ccc"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "rrr", "sss", "ttt", "uuu", "vvv", "www", "xxx", "yyy", "zzz"]], [[""]], [["ab", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ji"]], [["abc", "def", "fed", "hij", "jih", "klm", "mlk"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]], [["ef", "defg", "hijk", "uvwxyz", "ijklmnop", "qrstuv"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk", "def"]], [["aba", "cdc", "efe", "ij", "kmlk", "qrstuv", "ghg", "mmlk", "ijij", "klm", "mlk"]], [["app", "123", "adef3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "rrr", "sss", "ttt", "uuu", "vvv", "xxx", "yyy", "zzz"]], [["aba", "cdc", "effe", "ij", "kmlk", "qrstuv", "ghg", "mmlk", "ijij", "klm", "mlk"]], [["aba", "cdc", "vvvefe", "ghg", "cd", "ijij", "klm", "mlk"]], [["app", "123", "adef3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed", "apple"]], [["abcba", "defed", "ghighg", "ijklkji", "mnoponm", "aaa", "bbb", "ccc", "defed"]], [["", ""]], [["abc", "defg", "hijk", "uvwxyz"]], [["abcba", "defed", "ghighg", "ijklkji", "ijjiklkji", "mnoponm", "aaa", "bbb", "ccc", "defed"]], [["app", "123", "adef3", "apple", "elppa", "xyx", "hhh", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed", "apple"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "rrr", "sss", "ttt", "uuu", "vvv", "www", "xxx", "yyy", "zzz"]], [["ab", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ij", "ji", "fe"]], [["cdc", "efe", "ij", "kmlk", "qrstuv", "mmlk", "ijij", "mmelppak", "klm", "mlk"]], [["lll"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "rrr", "ssslll", "ttt", "uuu", "vvv", "www", "xxx", "yyy", "zzz"]], [["abc", "ijklmnfedop", "defg", "hijk", "uvwxyz", "ijklmnop", "qrstuv"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecr", "abc", "zyx", "def", "fed"]], [["geeji", "geeks"]], [["ab", "ba", "dc", "ef", "fe", "gh", "hg", "ji", "fe"]], [["ab", "ba", "dc", "ef", "fe", "gh", "hg", "ji", "fe", "ef"]], [["abc"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "rrr", "sss", "ttt", "uuu", "vvv", "www", "yyy", "zzz"]], [["jjj", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ij", "ji", "fe"]], [["cdc", "efe", "ij", "kmlk", "qrstuv", "mmlk", "ijij", "mmelppak", "mlk"]], [["abac"]], [["aba", "cdc", "effe", "ij", "kmlk", "qrstuv", "ghg", "mmlk", "ijij", "klm", "ghg", "mlk"]], [["geeji", "gedddeji", "geeks"]], [["geeks", "geeks", "geeks"]], [["app", "123", "adef3", "apple", "xyx", "ssslll", "hhh", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "def", "fed", "apple"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk", "def", "def", "ijklmnop", "gedddeji"]], [["ji", "adef3", "geeks", "geeji"]], [["abcba", "defed", "ghighg", "mnoponm", "aaa", "bbb", "ccc"]], [["ad3", "ppp"]], [["ab", "ba", "dc", "mlk", "ef", "fe", "gh", "hg", "ji", "fe"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk", "def", "def", "ijklmnop", "gedddeji", "ijklmnop"]], [["abc", "defg", "uvwxyz"]], [["aba", "cdc", "vvvefe", "ghg", "cd", "ijij", "klm", "mlk", "klm"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed", "ddd"]], [["hijbak", "abc", "ijklmnfedop", "defg", "hijk", "uvwxyz", "ijklmnop", "qrstuv"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk", "def", "def", "klm"]], [["ijjiklkji"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "racecar", "abc", "zyx", "def"]], [["geeks", "geeks", "geeks", "geeks"]], [["abcba", "defezyxd", "cccc", "ghighg", "mnoponm", "aaa", "bbb", "ccc"]], [["ad3"]], [["abcba", "defed", "ghighg", "ijklkji", "mnoponm", "aa", "bbb", "ccc", "defed"]], [["abcba", "defed", "ghighg", "ijklkji", "mnoponm", "aaa", "lll", "ccc", "defed"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "ijjiklkji", "rrr", "ssslll", "ttt", "uuu", "vvv", "www", "xxx", "yyy", "zzz", "ssslll"]], [["ab", "ba", "dc", "mlk", "ef", "fe", "gh", "hg", "ji"]], [["aaa", "pppp", "bbb", "ccc", "ddd", "eee", "fff", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "rrr", "sss", "ttt", "uuu", "vvv", "www", "xxx", "yyy", "zzz"]], [["hijbak", "abc", "ijklmnfedop", "defg", "hijk", "uvwxyz", "ijkklmnop", "qrstuv"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "ttacocat", "abc", "zyx", "def", "fed"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "tacocat", "racecar", "abc", "ssslll", "zyx", "def", "ji", "fed"]], [["ab", "ba", "dc", "ef", "fe", "gh", "hg", "ji", "fe", "fe"]], [["abcba", "cccc", "ghighg", "aaa", "bbb", "ccc", "aaa"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "yyy", "abc", "zyx", "def", "fed"]], [["mnoponm"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "racecar", "abc", "zyx", "def", "racecar"]], [["abc", "ijklmnfedop", "hijk", "uvwxyz", "ijklmnop", "qrstuv"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk", "def", "def", "ijklmnop", "gedddeji", "def"]], [["aba", "cdc", "vvvefe", "ijijj", "ghg", "cd", "ijij", "klm", "mlk"]], [["abcba", "defed", "ijklkji", "mnoponm", "aaa", "ijkli", "lll", "ccc", "defed"]], [["ab", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ij", "ji", "ij"]], [["abcba", "defed", "ghighg", "ijklkji", "mnoponm", "aaa", "bbb", "zzz", "ccc"]], [["abc", "cba", "def", "batfed", "hij", "jih", "klm", "mlk", "def", "def", "klm"]], [["ab", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ij", "ji", "fe", "gh"]], [["eji", "ji", "adef3", "geeks", "klm", "geeji"]], [["aba", "cdc", "efe", "ij", "kmlk", "qrstuv", "ghg", "mmlk", "iracecrjij", "klm", "mlk"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "rrr", "sss", "ttt", "uuu", "vvv", "xxx", "yyy", "zzz", "ttt"]], [["abcba", "defed", "ijklkji", "mnoponm", "aaa", "ijkli", "lll", "ccc", "defed", "aaa"]], [["aiiib", "ba", "dc", "mlk", "ef", "fe", "gh", "hg", "ji"]], [["abcba", "cccc", "ghighg", "aaa", "bbb", "ccc", "aaa", "aaa"]], [["aba", "cdc", "efe", "ij", "kmlk", "qrstuv", "ghg", "mmlk", "ijij", "mlk"]], [["abcba", "defezyxd", "cccc", "ghighg", "mnoponm", "aaa", "bbb", "cccfe"]], [["app", "123", "apple", "elppa", "xyx", "bat", "tab", "racecar", "abc", "zyx", "def", "racecar"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "klm", "ddd", "tab", "tacocat", "racecar", "yyy", "abc", "zyx", "def", "fed", "ddd"]], [["eji", "ji", "adef3", "geeks", "klm", "geeji", "klm"]], [["ij", "aiiibj", ""]], [["geeji", "gedddeji", "geeks", "geeks"]], [["aaa", "bbb", "ccc", "ddd", "eee", "fff", "ggg", "hhh", "iii", "jjj", "kkk", "lll", "mmm", "nnn", "ooo", "ppp", "qqq", "rrr", "sss", "ttt", "uuu", "vvv", "www", "yyy", "zzz", "iii"]], [["tab"]], [["abc", "defg"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "ml", "def"]], [["aba", "cdc", "vvvefe", "ghg", "cd", "klm", "mlk"]], [["abcba", "cccc", "ghighg", "mnoponm", "aaa", "bbb", "cccfe"]], [["abc", "defg", "hjk"]], [["abcba", "defezyxd", "cccc", "ghighg", "mnoponm", "aaa", "bbb", "ccc", "bbb"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "ml", "hij"]], [["abc", "cba", "def", "fed", "hij", "jih", "klm", "ml", "hij", "hij"]], [["app", "123", "ad3abac", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecr", "abc", "zyx", "def", "fed"]], [["app", "123", "apple", "elppa", "xyx", "klm", "ddd", "tacocat", "racecar", "yyy", "abc", "zyx", "def", "fed", "ddd", "app"]], [["abc", "def", "fed", "hij", "jih", "klm", "ml", "def", "cba"]], [["abcba", "defed", "ghighg", "ijklkji", "mnoponm", "aa", "bbb", "defed"]], [["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "ddd", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed", "elppa"]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n"}
{"task_id": "Mbpp/758", "prompt": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n", "entry_point": "unique_sublists", "canonical_solution": "\ndef unique_sublists(list1):\n    return {tuple(x): list1.count(x) for x in list1}\n", "base_input": [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[["green", "orange"], ["black"], ["green", "orange"], ["white"]]], [[[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]], [[["john"]]]], "atol": 0, "plus_input": [[[]], [[[]]], [[[1, 2], [2, 3], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[["green", "orange"], [1, 2], ["green", "orange"], [1, 2, 3]]], [[["cat", "dog"], ["cat"], ["cat", "dog"], ["cat", "dog"], ["cat", "dog", "rabbit"], ["rabbit"]]], [[["a", "b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"]]], [[[1, 2], [2, 1, 3], [1, 2], [2, 3], [1, 2, 3]]], [[[1, 2], [3, 4, 5], [6, 7], [8, 9, 10], [6, 7], [1, 2]]], [[["a", "b"], ["c"], ["d"], ["e"], ["c"], ["a", "b"]]], [[[1, 2, 3, 4], [5, 6, 7], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 6, 7]]], [[["x", "y"], ["z", "w"], ["x", "y"], ["z", "w"], ["x", "y"]]], [[[], []]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apae", "bganana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"]]], [[["x", "y"], ["z", "w"], ["x", "y"], ["z", "w"], ["x", "y"], ["z", "w"]]], [[["a", "b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "j", "k"]]], [[[1, 2, 4], [5, 6, 7], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 6, 7]]], [[[true, true, true, false]]], [[["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"]]], [[["a", "bapae", "b"], ["c"], ["d"], ["e"], ["c"], ["a", "b"]]], [[["a", "b"], ["c"], ["d"], ["e"], ["c"], ["a", "b"], ["c"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae"], ["apae", "bganana", "cherry", "apae"], ["apae", "bganana", "cherry", "apae"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae"], ["apple", "banana", "cherry"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae", "apae"], ["apae", "bganana", "cherry", "apae", "apae"], ["apae", "bganana", "cherry", "apae", "apae"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae", "apae"], ["apae", "bganana", "cherry", "apae", "apae"], ["apple", "banana", "cherry"]]], [[[1, 2], ["green", "orange"], [1, 2, 3]]], [[[3, 3], [1, 2], [2, 3], [1, 2], [1, 2, 3], [3, 3], [1, 2]]], [[[22.633521147116923, 41.08183937180155, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959]]], [[["b", "c", "d", "e", "f", "g"], ["a", "b"], ["h", "i", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "k"], ["g", "f", "e", "d", "c", "b", "a"]]], [[["a", "b"], ["c"], ["d"], ["e"], ["c"], ["a", "b"], ["d"]]], [[[1, 2], [2, 1, 3], [2, 3], [1, 2, 3]]], [[["x", "y"], ["z", "wf"], ["x", "y"], ["z", "w"], ["x", "y"]]], [[[], ["x", "y"], ["z", "w"], ["x", "y"], ["z", "w"]]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 3], [1, 2, 3]]], [[["a", "b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["g", "f", "e", "d", "c", "b", "a", "g"], ["a", "b"], ["a", "b"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a", "g"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a", "g"]]], [[[10, 60, 50.03460044856237], [], []]], [[[5, 1], [2, 1, 3], [5, 1], [2, 3], [1, 2, 3]]], [[["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banadna", "cherry"], ["apple", "pear"]]], [[[1, 2], [3], [3], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae"], ["apae", "bganana", "cherry", "apae"], ["apae", "bganana", "cherry", "apae"], ["apple", "pear"], ["apple", "banana", "cherry"]]], [[["a", "b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["g", "f", "e", "d", "c", "b", "a", "g"], ["a", "b"], ["a", "b"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a", "g"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a", "g"], ["g", "f", "e", "d", "c", "b", "a"]]], [[["x", "y"], ["z", "w"], ["x", "y"], ["z", "w"], ["a", "y"], ["a", "y"], ["z", "w"], ["z", "w"]]], [[["a", "bapae", "b"], ["c"], ["d"], ["e"], ["c"], ["a", "b"], ["c"]]], [[["a", "b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "wf", "j", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "wf", "j", "k"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana", "apple"], ["apple", "pear"], ["apple", "banana", "apple"], ["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "pear"]]], [[[1, 2, 3, 4], [5, 10, 6, 7], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 10, 6, 7], [5, 6, 7]]], [[[], ["x", "y"], ["z", "w"], ["z", "w"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae", "apae"], ["apae", "bganana", "cherry", "apae", "apae"], ["apae", "bganana", "cherry", "apae", "apae"], ["apple", "pear"], ["apae", "bganana", "cherry", "apae", "apae"], ["apae", "bganana", "cherry", "apae", "apae"], ["apple", "banana", "cherry"], ["apple", "pear"]]], [[[5, 1, 6, 2], [5, 1, 6, 2], [5, 1, 6, 2], [2, 3], [1, 2, 3]]], [[["a", "b"], ["c"], ["wf"], ["d"], ["e"], ["wf"], ["a", "b"], ["wf"]]], [[[true, true, true, true, false], [true, true, true, true, false], [true, true, true, true, false]]], [[["x", "xx", "y"], ["z", "wf"], ["x"], ["z", "w"], ["x", "xx", "y"], ["x", "y"]]], [[[2, 4], [5, 1], [2, 1, 3], [5, 1], [2, 4], [1, 2, 3]]], [[["a", "b"], ["c"], ["wf", "wf"], ["d"], ["e"], ["wf", "wf"], ["a", "b"], ["wf", "wf"]]], [[[1, 2], [], [], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[["x", "w", "xx", "y"], ["z", "wf"], ["g", "x"], ["k", "z", "w"], ["x", "w", "xx", "y"], ["x", "w", "xx", "y"], ["x", "y"]]], [[[10, 60, 50.03460044856237], []]], [[["x", "xx", "y"], ["z", "wf"], ["x"], ["z", "w"], ["x", "xx", "y"], ["x", "y"], ["x", "y"]]], [[[5, 1], [2, 1, 3], [5, 1], [5, 2, 3], [1, 2, 3]]], [[["z", "wf"], ["x"], ["z", "w"], ["x", "xx", "y"], ["x", "y"], ["x", "y"]]], [[["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["bananaa", "apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "pear"]]], [[["a", "b"], ["c"], ["dd", "d"], ["e"], ["c"], ["ak", "b"], ["dd", "d"]]], [[[], ["x", "y"], ["z", "w"], ["z", "w"], []]], [[[10, 60, 50.03460044856237], [], [8, 8, 3, -40, 48], [], []]], [[["z", "wf", "z"], ["x", "w", "xx", "y"], ["z", "wf", "z"], ["g", "x"], ["k", "z", "w"], ["x", "w", "xx", "y"], ["x", "w", "xx", "y"], ["x", "y"]]], [[["a", "b"], ["wf", "a", "a"], ["c"], ["wf", "a", "a"], ["d"], ["e"], ["wf", "a", "a"], ["a", "b"], ["wf", "a", "a"], ["wf", "a", "a"], ["e"]]], [[["a", "b"], ["c"], ["wf", "wf"], ["d"], ["e"], ["wf", "wf"], ["a", "b"], ["wf", "wf"], ["wf", "wf"]]], [[[true, true, true, false, true, false], [true, true, true, false, true, false], [true, true, true, false, true, false], [true, true, true, false, true, false]]], [[["x", "ww", "xx", "y"], ["z", "wf"], ["g", "x"], ["k", "z", "w"], ["x", "ww", "xx", "y"], ["x", "ww", "xx", "y"], ["x", "y"], ["x", "y"]]], [[["a", "b"], ["c"], ["wf", "wf"], ["d"], ["e"], ["wf", "wf"], ["a", "b"], ["wf", "wf"], ["wf", "wf"], ["wf", "wf"]]], [[["a", "b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["g", "f", "e", "d", "c", "b", "a"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana", "apple"], ["apple", "pear"], ["apple", "banana", "apple"], ["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "pear"], ["apple", "pear"]]], [[[22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959]]], [[["a", "b"], ["c"], ["d"], ["e"], ["f", "c"], ["a", "b"]]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 3], [1, 2, 3], [2, 3]]], [[["a", "b", "c", "d", "e", "f", "g"], ["g", "f", "e", "d", "c", "b", "a", "e"], ["a", "b"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apae", "bganana", "cherry"], ["apple", "banana", "cherry", "apple"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "banana", "cherry", "apple"]]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 3], [1, 2, 3], [2, 1, 3]]], [[[1, 2, 1], [3], [3], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[[5, 1], [2, 1, 3], [5, 1], [1, 2, 3]]], [[["c"], ["wf", "wf"], ["d"], ["e"], ["wf", "wf"], ["a", "j", "b"], ["wf", "wf"], ["wf", "wf"]]], [[[1, 2], [2, 1, 3], [2], [1, 2, 3]]], [[["apple", "banana", "cherry"], ["apple", "adpple", "pear"], ["apple", "adpple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apae", "bganana", "cherry"], ["apple", "banana", "ae", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"]]], [[["z", "wf"], ["x"], ["z", "w"], ["x", "xx", "y"], ["ww", "x", "y"]]], [[["a", "b"], ["c"], ["x", "wf", "wf"], ["d"], ["e"], ["x", "wf", "wf"], ["a", "b"], ["x", "wf", "wf"], ["x", "wf", "wf"], ["x", "wf", "wf"], ["x", "wf", "wf"]]], [[["x", "y"], ["z", "wf"], ["z", "w"]]], [[["b", "c", "d", "e", "f", "g"], ["a", "b"], ["i", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["i", "k"], ["g", "f", "e", "d", "c", "b", "a"]]], [[["z", "i", "w"], ["x", "xx", "y"], ["z", "wf"], ["x"], ["z", "i", "w"], ["x", "xx", "y"], ["x", "y"]]], [[["x", "xx", "y"], ["z", "wf"], ["x"], ["w"], ["x", "xx", "y"], ["x", "y"], ["x", "y"], ["x"], ["x"]]], [[["a", "b"], ["c"], [], ["d"], [], ["c"], ["a", "b"]]], [[[3, 60], [1, 2], [3, 60], [2, 3], [1, 2], [1, 2, 3], [3, 60], [1, 2]]], [[[], ["x", "y"], ["zz", "z", "w"], ["x", "y"], ["zz", "z", "w"]]], [[["apple", "banana", "cherry"], ["apple", "banana", "cherry"], ["bananaa", "apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "banana", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"]]], [[["a", "b"], ["c"], ["d"], ["e"], ["c"], ["a", "b"], ["a", "b"]]], [[[1, 6, 2], [1, 6, 2], [1, 6, 2], [2, 3], [1, 2, 3], [1, 6, 2], [2, 3]]], [[["x", "y"], ["z", "w"], ["", "y"], ["", "y"], ["z", "w"], ["y"], ["y"], ["y"], ["z", "w"], ["z", "w"], ["y"]]], [[[1, 10, 3, 4], [5, 10, 6, 7, 5], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 10, 6, 7, 5], [5, 6, 7], [5, 10, 6, 7, 5]]], [[["x", "y", "y"], ["z", "wf"], ["z", "w"], ["x", "y"]]], [[["b", "c", "d", "e", "f", "y"], ["b", "c", "d", "e", "f", "y"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["i", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"]]], [[["x", "xx", "y"], ["z", "wf"], ["w"], ["x", "xx", "y"], ["x", "y"], ["x", "y"], [], [], []]], [[["b", "c", "d", "e", "f", "g"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "j", "k"], ["g", "f", "e", "d", "c", "b", "a"]]], [[["j", "z", "wf"], ["x"], ["z", "w"], ["x", "xx", "y"], ["x", "y"], ["x", "y"]]], [[["dd", "d", "dd"], ["a", "b"], ["c"], ["dd", "d", "dd"], ["e"], ["c"], ["ak", "b"], ["dd", "d", "dd"]]], [[["a", "b", "c", "d", "e", "f", "g"], ["g", "f", "e", "d", "c", "b", "a", "e"], ["a", "b"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "pear", "cherry"], ["apae", "bganana", "pear", "cherry"], ["apple", "banana", "cherry"], ["apae", "bganana", "pear", "cherry"]]], [[[6, 2], [6, 2], [6, 2], [2, 3], [1, 2, 3], [6, 2], [2, 3]]], [[["a", "b"], ["c"], ["d"], ["e"], ["f", "c"], ["a", "b"], ["e"]]], [[["a", "b"], ["g", "f", "e", "d", "c", "b", "a"], ["a", "b"], ["a", "b"], ["g", "f", "e", "d", "c", "b", "a", "c"], ["h", "i", "wf", "j", "k"], ["g", "f", "e", "d", "c", "b", "a"], ["h", "i", "wf", "j", "k"]]], [[["x", "w", "xx", "y"], ["z", "wf"], ["g", "x"], ["k", "z", "w"], ["x", "w", "xx", "y"], ["x", "w", "xx", "y"], ["x", "y"], ["x", "w", "xx", "y"]]], [[["apple", "banana", "cherry"], ["apple", "pear"], ["apple", "banana"], ["apple", "banana"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "pear", "cherry"], ["apae", "bganana", "pear", "cherry"], ["apple", "banana", "cherry"], ["apae", "bganana", "pear", "cherry"]]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 10], [1, 3], [1, 3], [2, 10], [2, 10]]], [[["x", "y", "y"], ["z", "w"], ["x", "y"]]], [[["apple", "banana", "cherry"], ["apple", "adpple", "pear"], ["apple", "adpple", "pear"], ["apple", "banana", "cherry"], ["apple", "banana"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apae", "bganana", "cherry"], ["apple", "banana", "ae", "cherry"], ["apple", "pear"], ["apae", "bganana", "cherry"], ["apple", "pear"]]], [[["x", "y"], ["z", "w"], ["x", "y"], ["z", "w"], ["a", "y"], ["a", "y"], ["z", "w"], ["z", "w"], ["x", "y"]]]], "contract": "\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}\n"}
{"task_id": "Mbpp/759", "prompt": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n", "entry_point": "is_decimal", "canonical_solution": "\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n", "base_input": [["123.11"], ["e666.86"], ["3.124587"], ["1.11"], ["1.1.11"]], "atol": 0, "plus_input": [["1..2"], ["1.1$"], ["123.1111"], ["-123.11"], ["       123.11       "], [""], ["123"], ["."], ["$123.11"], ["1.1.1"], ["123.11"], ["1231.1111"], ["1..21..2"], ["13.1123$"], ["-1123.11"], ["TDH"], ["-1123.11123.11"], ["1..21.1.1"], ["123.       123.11       1"], ["11"], ["13.11$23$"], ["TD"], ["$12.11"], [".."], ["$123.1..21.1.111"], ["$1123.       123.11       123.11"], ["123."], ["1323.1.1.1"], ["KehoROOXec"], ["-123.113.11$23$1"], ["13.123$"], ["$.12.11"], ["-3.11"], ["$123.111..21.1.111"], ["123.1.1$11"], ["TTDH"], ["..."], ["13.11$1123.       123.11       123.113$"], ["-123.113.11$1"], ["$1123."], ["1123.1123.1111"], ["1123.1123.11111231.1111"], ["1.11$"], ["1233."], ["1231"], ["T..D"], ["1..      11 123.11       2"], ["1.."], ["1323.1TD.1.1"], ["$-123.113.11$11123."], ["KehoROOXec1h.1.1"], ["-1123.11123.121"], ["TD$123.11"], ["-123.       123.11       1123.111"], ["1.1.."], ["KehoROOXe.c1h.1.1"], ["TD1231"], ["13123.1.1.1"], ["1123.1123.11111231.13.11$1123.       123.11       123.113$1111"], ["13.123-3.11$"], ["$1123. .      123.11       123.11"], ["123.       123.11  TD$123.11    2 1"], ["13123.13.1.1"], ["....."], ["       123.-123.1111       "], ["123.       123.11  TD $123.11    2 1"], ["13.1123-3.11$"], ["131..3-3.11$"], ["131..3-3.113.123-3.11$1$"], ["o"], ["123.       123.11       1."], ["1."], ["12123.       123.11       13.1.1$11"], ["1231.1..      11 123.11       21111"], ["TD-1123.1112...3.11"], ["123-123.       123.11       1123.111"], ["1.111$"], ["1123.11123.11111231.13.11$1123.       123.11       123.113$1111"], ["13.1.1$11"], ["12311"], ["12123.  13123.1.1.1     123.11       13.1.1$11"], ["1231.1..      11 123.11  -123.113.11$23$1     21111"], ["$11233.121"], ["T"], ["1123.11123.11111231.13.113."], ["1.1"], ["1"], ["VJ"], ["21111"], ["13.11$1123.       121123.11123.11111231.13.11$1123.3.11       123.113$"], ["-1123.111"], ["1123.111231.1111"], ["12-1123.11123."], ["-123.          1123.111"], ["13.11$1123.       121123.11123.11111231.13.11$1123.3.11       123.1112313$"], ["T3D-1123.1112...3.11"], ["123.11123313$"], ["13.1.131..3-3.113.123-3.11$1$1$11"], ["1$123.11323.1.1.1"], ["1231.1..      11 123. 11       21111"], ["1123-123.      "], ["123.13111"], ["131..3-3.1TD$123.11$"], ["-1123.11123.11111231.13.11$1123.       123.11       123.113$1111.11"], ["1KehoROOXec"], ["12123.     1231.1..      11 123. 11       21111"], ["TD-1123.1131..3-3.1TD$123.11$112...3.11"], ["1231.11111"], ["1$123.113223.1.1.$12.11"], ["       1-123.113.11$23$123.11       "]], "contract": "\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False\n"}
{"task_id": "Mbpp/760", "prompt": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n", "entry_point": "unique_Element", "canonical_solution": "\ndef unique_Element(arr):\n    return arr.count(arr[0]) == len(arr)\n", "base_input": [[[1, 1, 1]], [[1, 2, 1, 2]], [[1, 2, 3, 4, 5]]], "atol": 0, "plus_input": [[[1, 1, 1, 1, 1, 1, 1, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 1, 1, 1, 1, 2, 2, 2, 2, 2]], [[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]], [[1, 3, 1, 1, 1, 2, 2, 2, 2]], [[1, 1, 1, 1, 1, 1, 1, 2, 10, 1]], [[1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1]], [[1, 2, 3, 4, 5, 1, 2, 5, 3, 4, 5]], [[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 4]], [[1, 2, 3, 4, 5, 7, 2, 3, 4, 5, 4]], [[1, 1, 1, 1, 1, 1, 1, 1, 2, 10, 5]], [[1, 1, 1, 5, 1, 1, 1, 1, 2, 10, 1]], [[4, 1, 2, 3, 4, 7, 2, 3, 4, 5, 4]], [[1, 2, 3, 4, 5, 1, 1, 1, 3, 4, 5, 1]], [[1, 1, 4, 2, 5, 1, 1, 1, 1, 2, 10, 1]], [[1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]], [[1, 2, 3, 4, 5, 3, 4, 5, 4, 4]], [[1, 2, 3, 4, 1, 2, 3, 4]], [[1, 2, 3, 4, 1, 3, 4]], [[1, 2, 3, 5, 1, 1, 1, 3, 4, 5, 1]], [[1, 2, 3, 5, 1, 1, 1, 3, 4, 5, 1, 1]], [[1, 1, 1, 1, 1, 1, 0, 1, 2, 1]], [[1, 1, 2, 3, 5, 1, 1, 1, 3, 4, 5, 1, 1]], [[9, 2, 3, 5, 1, 0, 1, 1, 3, 4, 5, 1]], [[1, 3, 1, 1, 1, 2, 2, 2]], [[1, 2, 3, 4, 5, 1, 1, 3, 5, 1]], [[1, 1, 1, 1, 2, 2, 2, 2, 2]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 2, 10, 1]], [[1, 2, 3, 4, 5, 4, 1, 3, 1, 5, 1, 1]], [[1, 2, 3, 0, 5, 1, 1, 3, 4, 5, 1, 1]], [[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 9, 10]], [[1, 2, 3, 4, 1, 2, 3, 4, 1]], [[1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 5]], [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2]], [[1, 1, 2, 3, 4, 5, 3, 4, 5, 4, 4, 4]], [[1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 1]], [[1, 2, 3, 1, 0, 5, 1, 1, 3, 4, 5, 1, 1]], [[1, 7, 2, 3, 0, 5, 1, 1, 3, 4, 5, 1, 1]], [[1, 1, 2, 3, 5, 1, 1, 1, 3, 4, 5, 1, 1, 5]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 2, 10, 1, 4]], [[1, 2, 3, 5, 1, 1, 1, 3, 4, 2, 5, 1]], [[1, 2, 3, 4, 5, 4, 1, 3, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 1, 2, 3, 4, 3, 5]], [[1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 1, 3]], [[1, 2, 4, 5, 6, 7, 9, 10]], [[1, 5, 1, 4, 2, 5, 1, 1, 1, 0, 2, 10, 1, 4]], [[1, 2, 3, 4, 5, 1, 2, 3, 5, 4]], [[1, 1, 1, 0, 1, 1, 1, 1, 2, 10, 1]], [[1, 1, 1, 0, 1, 1, 1, 1, 2, 10, 1, 1]], [[1, 2, 3, 1, 3, 4]], [[1, 2, 3, 5, 1, 1, 1, 4, 2, 5, 1, 5]], [[1, 2, 3, 4, 5, 7, 2, 3, 4, 5, 4, 4]], [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 1]], [[1, 2, 3, 5, 1, 1, 1, 3, 4, 2, 5, 1, 1]], [[3, 2, 3, 4, 5, 7, 2, 3, 4, 5, 5, 4]], [[1, 1, 1, 1, 1, 1, 0, 1, 1]], [[1, 2, 3, 2, 5, 1, 2, 3, 5, 4]], [[2, 3, 4, 5, 1, 2, 5, 3, 4, 5]], [[1, 1, 2, 3, 4, 5, 4, 5, 4, 4, 4]], [[1, 1, 2, 3, 4, 4, 5, 4, 4, 4, 4, 4]], [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 2, 10, 1, 5]], [[1, 1, 2, 3, 4, 5, 5, 4, 4, 4, 1]], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 2]], [[1, 2, 4, 3, 4, 5, 1, 2, 3, 4, 5]], [[1, 3, 2, 3, 5, 1, 1, 1, 2, 5, 1, 2]], [[1, 2, 3, 4, 1, 2, 3, 4, 5, 5]], [[1, 2, 3, 0, 2, 5, 1, 2, 3, 5, 4]], [[1, 2, 3, 4, 5, 1, 1, 3, 4, 5, 1, 1, 1]], [[1, 1, 3, 4, 4, 5, 4, 4, 4, 5, 4, 4]], [[1, 2, 3, 5, 1, 1, 1, 3, 4, 5, 1, 1, 1]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 2, 10, 1, 1, 10]], [[2, 3, 1, 0, 5, 1, 1, 3, 4, 5, 1, 1, 3, 1]], [[1, 1, 2, 3, 4, 4, 5, 4, 5, 5, 4, 4, 4]], [[1, 1, 1, 1, 1, 3, 0, 2, 10, 1]], [[1, 1, 1, 1, 1, 1, 0, 0, 2, 1]], [[1, 2, 3, 4, 5, 1, 2, 3, 5]], [[1, 1, 2, 3, 4, 4, 5, 5, 4, 4, 4, 4]], [[1, 1, 2, 2, 8, 4, 4, 10, 5, 4, 4, 4, 4]], [[1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1]], [[1, 2, 3, 4, 5, 1, 3, 4, 5]], [[1, 3, 0, 2, 5, 1, 2, 3, 5, 4]], [[1, 2, 2, 3, 4, 5, 1, 1, 1, 3, 4, 5, 1]], [[1, 1, 1, 1, 1, 1, 2, 2, 2]], [[1, 3, 10, 3, 5, 1, 1, 1, 2, 5, 1, 3, 2]], [[1, 2, 2, 3, 4, 5, 5, 1, 1, 1, 3, 4, 5, 1, 1]], [[1, 2, 3, 4, 1, 2, 5, 3, 4, 5, 5]], [[1, 2, 3, 4, 5, 6, 1, 7, 9, 10]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 2, 2, 10, 1, 5]], [[1, 2, 3, 4, 5, 7, 2, 3, 4, 5, 4, 2]], [[1, 7, 2, 3, 0, 5, 1, 1, 10, 3, 4, 5, 1, 1]], [[2, 3, 4, 5, 1, 2, 6, 5, 3, 4, 5]], [[1, 3, 0, 1, 5, 1, 2, 3, 5, 4]], [[1, 7, 2, 3, 0, 5, 1, 1, 10, 3, 4, 5, 1, 1, 5]], [[1, 3, 0, 1, 5, 1, 2, 3, 5, 4, 2]], [[1, 2, 3, 4, 5, 2, 1, 1, 3, 4, 5, 1, 1]], [[1, 1, 2, 5, 1, 1, 1, 0, 2, 10, 1, 1]], [[3, 0, 1, 5, 1, 2, 3, 5, 4]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 2, 10, 1, 1, 10, 1]], [[1, 1, 2, 3, 4, 4, 5, 4, 4, 4, 4, 4, 2]], [[1, 2, 3, 4, 5, 7, 2, 3, 4, 5, 4, 2, 2]], [[4, 1, 2, 4, 7, 2, 3, 4, 5, 4]], [[1, 1, 4, 2, 5, 1, 1, 1, 0, 7, 10, 1, 4, 2, 2]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False\n"}
{"task_id": "Mbpp/762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n", "entry_point": "check_monthnumber_number", "canonical_solution": "\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "base_input": [[6], [2], [12]], "atol": 0, "plus_input": [[1], [true], [3], [2], [4], [5], [6], [7], [9], [10], [8], [11], [12]], "contract": "\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False\n"}
{"task_id": "Mbpp/763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n", "entry_point": "find_min_diff", "canonical_solution": "\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \n", "base_input": [[[1, 5, 3, 19, 18, 25], 6], [[4, 3, 2, 6], 4], [[30, 5, 20, 9], 4]], "atol": 0, "plus_input": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 29, 8, 4, 19, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 29, 11, 4, 18, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 30, 8, 4, 19, 30, 22, 28, 11, 25], 12], [[15, 12, 20, 30, 8, 4, 30, 22, 28, 11, 25, 22], 12], [[15, 12, 20, 29, 11, 4, 18, 37, 22, 28, 11, 26], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25, 22], 13], [[15, 12, 31, 30, 8, 4, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 31, 11, 25, 22], 13], [[15, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 30, 8, 4, 30, 22, 28, 11, 26, 22], 12], [[15, 12, 20, 29, 8, 4, 18, 38, 22, 31, 11, 25, 22], 13], [[15, 12, 20, 18, 8, 20, 19, 37, 22, 28, 11, 37], 12], [[15, 30, 20, 30, 8, 4, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 30, 8, 4, 19, 36, 22, 28, 11, 25], 12], [[15, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25], 12], [[15, 12, 30, 8, 4, 19, 37, 22, 3, 28, 11, 37], 12], [[15, 12, 12, 20, 29, 11, 4, 18, 37, 22, 28, 25], 12], [[15, 26, 20, 30, 8, 4, 30, 22, 28, 11, 25, 22], 12], [[15, 30, 20, 30, 8, 4, 29, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 30, 11, 5, 18, 37, 22, 28, 11, 26], 12], [[15, 30, 20, 30, 8, 4, 19, 37, 22, 36, 11, 37], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 20, 25], 12], [[15, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37, 8], 13], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 9, 11, 25], 13], [[9, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 13, 11, 4, 18, 37, 22, 28, 11, 26], 12], [[15, 12, 31, 20, 8, 4, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 21, 31, 11, 25, 22], 13], [[15, 12, 21, 18, 8, 20, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 11, 4, 19, 37, 22, 28, 11, 25], 11], [[28, 12, 20, 29, 8, 4, 18, 37, 22, 28, 20, 25], 12], [[15, 12, 20, 29, 12, 4, 18, 37, 22, 31, 11, 25, 22], 13], [[15, 12, 20, 29, 12, 4, 18, 37, 22, 4, 11, 25, 22], 13], [[15, 12, 20, 18, 8, 20, 19, 37, 22, 28, 11, 20], 12], [[15, 12, 20, 30, 8, 4, 19, 36, 22, 11, 11, 25], 12], [[15, 23, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25, 22], 14], [[15, 12, 20, 30, 8, 4, 19, 38, 22, 28, 11, 37], 12], [[15, 12, 20, 30, 8, 4, 19, 36, 22, 11, 11, 23], 12], [[15, 12, 20, 30, 8, 4, 19, 36, 22, 28, 11, 37], 12], [[15, 12, 20, 30, 8, 4, 12, 36, 22, 11, 11, 23], 12], [[14, 12, 20, 29, 11, 4, 18, 37, 22, 28, 11, 25], 12], [[15, 12, 30, 8, 4, 19, 38, 22, 3, 28, 11, 37], 12], [[15, 12, 20, 30, 8, 4, 18, 30, 22, 28, 11, 25], 12], [[9, 30, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25], 13], [[15, 12, 29, 8, 4, 19, 38, 22, 3, 28, 11, 37], 12], [[15, 23, 12, 20, 29, 8, 4, 18, 37, 4, 22, 28, 11, 25, 22], 15], [[15, 12, 20, 30, 8, 4, 30, 22, 28, 14, 25, 22], 12], [[15, 12, 20, 30, 11, 5, 18, 37, 22, 28, 29, 11, 26], 13], [[15, 12, 14, 30, 8, 4, 19, 38, 22, 28, 11, 37], 12], [[15, 12, 20, 29, 11, 4, 18, 37, 22, 29, 11, 26], 12], [[15, 12, 20, 30, 8, 4, 18, 30, 22, 28, 11, 26], 12], [[15, 12, 20, 28, 11, 4, 18, 37, 22, 29, 11, 26], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25, 37], 13], [[15, 12, 20, 30, 8, 4, 30, 5, 28, 11, 26, 22], 12], [[37, 12, 12, 20, 29, 11, 4, 18, 37, 22, 28, 25], 12], [[28, 12, 20, 29, 8, 4, 18, 37, 22, 27, 20, 25], 12], [[15, 12, 20, 3, 8, 4, 30, 22, 28, 11, 26, 22], 12], [[15, 12, 20, 28, 11, 4, 18, 37, 22, 29, 11, 25], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 5, 11, 25, 37], 13], [[15, 12, 29, 8, 5, 19, 38, 22, 3, 28, 11, 37], 12], [[15, 12, 20, 29, 10, 4, 19, 37, 22, 28, 11, 25], 12], [[37, 12, 12, 20, 29, 37, 4, 18, 37, 22, 28, 25], 12], [[15, 12, 20, 30, 8, 4, 19, 30, 25, 28, 11, 25], 12], [[15, 20, 29, 12, 4, 18, 37, 22, 4, 11, 25, 22], 12], [[15, 12, 12, 20, 29, 11, 5, 18, 37, 22, 28, 25], 12], [[15, 3, 20, 30, 11, 5, 18, 37, 22, 28, 11, 26], 12], [[15, 15, 20, 29, 11, 4, 18, 37, 22, 28, 11, 25], 12], [[15, 12, 20, 30, 20, 19, 37, 22, 28, 11, 37, 11], 12], [[25, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25], 12], [[28, 12, 20, 29, 8, 4, 18, 30, 22, 28, 20, 25], 12], [[15, 12, 20, 29, 9, 4, 18, 37, 22, 28, 9, 11, 25], 13], [[5, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37], 12], [[15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 5, 25, 22, 22], 14], [[15, 12, 20, 29, 8, 18, 18, 37, 22, 28, 11, 25, 22], 13], [[15, 15, 20, 29, 11, 4, 18, 18, 22, 28, 11, 25], 12], [[28, 29, 20, 29, 8, 4, 18, 37, 22, 27, 20, 25], 12], [[15, 12, 20, 29, 12, 4, 18, 37, 22, 30, 11, 25, 26], 13], [[11, 12, 20, 30, 8, 4, 18, 30, 22, 28, 11, 25], 12], [[37, 12, 12, 20, 29, 10, 4, 18, 37, 22, 28, 25], 12], [[15, 15, 20, 29, 11, 4, 18, 37, 22, 28, 14, 25], 12], [[15, 12, 31, 20, 8, 4, 19, 37, 22, 28, 12, 37], 12], [[9, 30, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 24], 13], [[37, 12, 12, 20, 29, 10, 4, 18, 38, 22, 28, 25], 12], [[15, 30, 30, 8, 4, 29, 37, 22, 28, 11, 37, 37], 12], [[37, 12, 12, 20, 29, 37, 4, 13, 37, 22, 28, 25], 12], [[26, 12, 20, 29, 8, 4, 19, 37, 22, 28, 11, 25], 12], [[37, 12, 12, 20, 29, 25, 10, 4, 18, 37, 22, 28, 25], 13], [[15, 12, 20, 29, 9, 4, 18, 38, 22, 28, 9, 11, 25], 13], [[9, 30, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 24, 11], 14], [[15, 12, 29, 9, 4, 19, 38, 22, 3, 28, 11, 37], 12], [[15, 12, 20, 4, 8, 4, 30, 22, 28, 11, 26, 22], 12], [[15, 12, 36, 30, 11, 5, 18, 37, 22, 28, 29, 11, 26], 13], [[15, 37, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37, 8], 14], [[37, 22, 12, 20, 29, 10, 4, 18, 37, 22, 28, 25], 12], [[15, 23, 27, 20, 29, 8, 4, 18, 37, 4, 22, 28, 11, 25, 22], 15], [[37, 12, 12, 20, 29, 37, 9, 18, 37, 22, 28, 25], 12], [[15, 12, 29, 12, 4, 19, 38, 22, 3, 28, 11, 37], 12]], "contract": "\n    assert isinstance(arr, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n == len(arr), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n"}
{"task_id": "Mbpp/764", "prompt": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n", "entry_point": "number_ctr", "canonical_solution": "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)\n", "base_input": [["program2bedone"], ["3wonders"], ["123"], ["3wond-1ers2"]], "atol": 0, "plus_input": [[""], ["hello world"], ["1234567890"], ["1 2 3"], ["      "], ["12 2 3"], ["hello 12 2 3world"], ["lhello world"], ["12 2  3"], ["lhello"], ["1 22 3"], ["22"], ["1 2 3lhello"], ["hello 12 2 olrld"], ["lhell3lhelloo world"], ["3"], ["1 22 322"], ["helhello 12 2 olrldlo world"], ["hello"], ["1lhell3lhelloo 22 3"], ["3world"], ["12 22 322"], ["2222"], ["1 22 3212"], ["hello 12 2 olrlld"], ["world"], ["1 22 13212"], ["112 2  3"], ["1lhell3lhell oo 22 3"], ["322"], ["helhello 12 2 olrldlo worldolrlld"], ["     olrldlo "], ["112"], ["olrlld"], ["12"], ["olrld"], ["1 2 2 3"], ["       "], ["oo"], ["122  3"], ["112 2  32233world"], ["1 2 3lheworldllo"], ["olrldlo"], ["olr"], ["hello 12 2 olrlld2222"], ["hello 12l 2 olrld"], ["old"], ["lhello worlolrlld222o2d"], ["1lhell3lhell"], ["wold"], ["22122  3"], ["ooo"], ["lhewll3lhelloo world"], ["1hello 12l 2 olrld 23 3"], ["olrlld2222"], ["1lhell3l13212hell"], ["13212lhell3lhellolo"], ["1 22 31 2 3212"], ["rw"], ["lhello122  3"], ["              "], ["ollrlld2222"], ["1 22 33"], ["1123"], ["3lhello1234567890"], ["31"], ["1lhell3lhelloo 222 3"], ["helhello"], ["bNEygn"], ["2lhell3lhelloo22"], ["        "], ["lhell3lhelloo weorld"], ["12 2 122  33"], ["1 22"], ["12 2 122  233"], ["123"], ["        olrlld"], ["lhell3lhelloollo"], ["helhelllo"], ["233"], ["222"], ["12 2 122lhewll3lhelloo worldlhell3lhelloo  33"], ["3w12 2 122  33orld"], ["1l12 2  32 122lhewll3lhelloo worldlhell3lhelloo  33l oo 22 3"], ["1 32222 3212"], ["3lheworldllo"], ["lhdello worlolrlld222o2d"], ["122"], ["1l12 2  32 122lhewll3lhellloo worldlhell3lhelloo  33l oo 22 3"], ["31hello 12 2 olrlld2222"], ["1  22"], ["1l12"], ["worldolrlld"], ["hell3lhello1234567890o2222"], ["olrlld22d22"], ["3wold"], ["22122"], ["ollrll12 2 122  233d2222"], ["3123"], ["122 2 3"], ["1l12 2  3e2 122lhewll3lhellloo wohello 12l3lhelloo  33l oo 22 3"], ["hell3lhello1234567890o22223"], ["12 lhello1222 3"], ["hello 12 2 orld"], ["wworld"]], "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3\n"}
{"task_id": "Mbpp/765", "prompt": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n", "entry_point": "is_polite", "canonical_solution": "\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n", "base_input": [[7], [4], [9]], "atol": 0, "plus_input": [[10000000], [1000000000], [999999999], [1], [2], [123456789], [99999999], [1000000001], [10000001], [3], [19], [123456790], [100000000], [99999998], [true], [999999998], [9999999], [1000000002], [20], [10000002], [10000003], [18], [16], [4], [999999997], [17], [10000004], [100000001], [100000002], [51], [10000005], [123456791], [21], [100000003], [9999997], [999999996], [22], [10000006], [52], [23], [123456788], [9999998], [123456792], [53], [99999997], [54], [61], [99999996], [62], [15], [123456787], [9999996], [14], [24], [50], [99999995], [5], [49], [123456793], [10000007], [9999995], [10000008], [100000004], [25], [99999994], [123456794], [123456786], [68], [67], [999999995], [69], [13], [10000009], [48], [66], [123456795], [10], [6], [123456785], [60], [123456796], [100000005], [59], [12], [58], [47], [123456784], [55], [7], [74], [99999993], [1000000003], [11], [10000010], [123456797], [123456783], [9999994], [63], [8], [75], [26], [99999991], [999999993], [9999993], [99999992], [1000000004], [29], [99]], "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n"}
{"task_id": "Mbpp/766", "prompt": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n", "entry_point": "pair_wise", "canonical_solution": "\ndef pair_wise(l1):\n    return list(zip(l1, l1[1:]))\n", "base_input": [[[1, 1, 2, 3, 3, 4, 4, 5]], [[1, 5, 7, 9, 10]], [[5, 1, 9, 7, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "atol": 0, "plus_input": [[[]], [[1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]], [["apple", 1, true, 2.5, [1, 2]]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]], [[5, 10, 15, 20, 25, 30, 35]], [[2, 4, 8, 16, 32, 64, 128]], [["a", "b", "c", "d", "e", "f", "g"]], [["apple", "banana", "cherry", "date", "elderberry"]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]], [[1, 2.5, "hello", true, 3.14, "world", false]], [["", "c", "B", "vi", "pAKb", "c", "EuUfCuweMj"]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true, false]], [["a", "b", "c", "d", "e", "f", "g", "a"]], [["apple", 1, 3.14, "appl", true, 2.5, [1, 2]]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true]], [["date", "b", "c", "d", "e", "f", "g"]], [["date", "b", "c", "d", "ee", "f", "a", "g"]], [["c", "B", "vi", "pAKb", "c", "EuUfCuweMj", "c"]], [["apple", 1, true, [1, 2]]], [[39.52616213203228, -64.78484107892933, 2.5, 3.14, -60.839277499671866, 3.14, 2.5, 83.06195985369447]], [[10, 20, 30, 40, 50, 30, 70, 80, 90, 100]], [["Mw", "luttEB"]], [["apple", 1, true, 2.5, [1, 2], 1]], [[20, 30, 40, 50, 30, 100, 70, 80, 90, 100]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a"]], [[2, 20, -69, 1, 48, 42, 30]], [["date", "b", "c", "d", "ee", "f", "a", "g", "c"]], [[-37, 17, 35, 19, 5, -69, 2, 40, 2]], [["apple", 1, true]], [["apple", 1]], [[1, "hello", true, 3.14, "world", false]], [["apple", 1, true, 2.5, [1, 2], [1, 2]]], [["Mw", "luttEB", "luttEB"]], [[false, false, null, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true]], [["apple", 1, true, 2.5]], [[20, 30, 40, 50, 60, 70, 80, 90, 100]], [["luttEB", "luttEB"]], [["YrFlQtkwMA", "c", "B", "vi", "pAKb", "c", "EuUfCuweMj"]], [["apple", "banana", "Mw", "cherry", "date", "elderberry"]], [[10, 20, 30, 40, 50, 30, 70, 80, 90, 100, 50]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3]], [["apple"]], [[10, 20, 30, 40, 50, 30, 80, 90, 100]], [["a", "b", "c", "d", "e", "f", "EuUfCuweMj", "g"]], [[false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a"]], [[5, 15, 20, 25, 30, 35]], [["apple", "crherry", "banana", "cherry", "cherry", "b", "date", "elderberry"]], [[0, 1]], [["applle", "apple", 1]], [[2, 20, -69, 1, 48, 42, 30, 20]], [[39.52616213203228, 2.5, 3.14, -60.839277499671866, 3.14, 2.5, 83.06195985369447]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3, 13]], [[1, "hello", 3.14, "world", false]], [[10, 20, 30, 40, 50, 30, 80, 21, 100]], [["", "c", "B", "vi", "pAKb", "c", "EuUfCuweMj", "EuUfCuweMj"]], [["applle", 1]], [[20, 30, 40, false, 99, 50, 60, 70, 80, 90, 100]], [[5, 10, 15, 20, 25, 30]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 19]], [[false, false, false, true, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true]], [[10, 20, 30, 40, 50, 30, 80, 90, 100, 100]], [["date", "b", "c", "d", "ee", "f", "a", "g", "ee"]], [["UZHjhsX", "b", "Rf", "pAKb", "", "apple", "pAKb", "xubfwq", "", "g"]], [[false, false, null, false, true, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true]], [[1, true, [1, 2]]], [[2, 4, 8, 32, 32, 64, 128, 64]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true, false, false, false]], [["apple", "crherry", "banana", "cherry", "cherry", "date", "elderberry"]], [["appMw", "crherry", "banana", "cherry", "cherry", "b", "date", "elderberry"]], [[1, true, [100, 2]]], [["", "", "", "B", "vi", "pAKb", "c", "EuUfCuweMj"]], [[39.52616213203228, -64.78484107892933, 2.5, 3.9503308701348963, -60.839277499671866, 3.14, 2.5, 83.06195985369447]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true, false, false]], [[10, 20, 30, 40, 51, 30, 80, 21, 100, 20]], [["", "c", "EuUfCuwe", "B", "vi", "pAKb", "c", "EuUfCuweMj", "EuUfCuweMj"]], [[10, 30, 40, 50, 30, 80, 90, 100]], [["c", "d", "e", "f", "g", "e"]], [["c", "apple", 1]], [[10, 20, 30, 40, 50, 30, 70, 80, 90, 100, 50, 40]], [[1, true, true, [100, 2]]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", false, false, false, false]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3, 13, 13]], [["apple", "crherry", "b", "cherry", "cherry", "date", "elderberry"]], [["date", "b", "c", "d", "ee", "f", "a", "g", "c", "c"]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", true, false, false, false, false]], [["date", "d", "b", "d", "e", "f", "g"]], [["apple", "apluttEBple", 1]], [["date", "d", "b", "d", "e", "f", "g", "d"]], [["appMw", "crherry", "banana", "cherry", "cherry", "b", "date", "crherry"]], [["apple", 1, [1]]], [[10, 20, 30, 40, 30, 5, 80, 50, 90, 100]], [["apple", "banana", "cherry", "date", "elderberry", "apple"]], [["apviple", "apple"]], [[20, 30, 40, 50, 30, 128, 100, 70, 80, 90, 100, 30]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3, 9]], [["apple", 1, [1, 1]]], [[false, false, false, true, null, {"3.14": "apple", "2.5": "YrFlQtkwMA", "-63.48479177576927": "d"}, true, "a", false, false, false, false, false]], [[1, true, [1, 2, 2], [1, 2], true]], [[5, 10, 15, 20, 25, 35]], [["apluttEBple", "aplluttEBple", 1]], [["apple", true, 2.5]], [[5, 15, 20, 25, 35]], [[10, 20, 30, 40, 50, 30, 70, 80, -69, 90, 100, 50]], [[-37, 17, 35, 19, 20, 5, -69, 2, 40, 2, -69]], [[0, "apple", 1]], [[2, 4, 8, 16, 32, 64, 128, 8]], [[2, 128, 8, 32, 32, 64, 127, 64]], [["banana", "cherry", "date", "elderberry"]], [["banana", "cherry", "date", "elderberry", "date"]], [["apple", "dappMwe", "banana", "cherry", "eldeerberry", "date", "elderberry"]]], "contract": "\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n"}
{"task_id": "Mbpp/767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n", "entry_point": "get_pairs_count", "canonical_solution": "\ndef get_pairs_count(arr, sum_):\n    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2\n", "base_input": [[[1, 1, 1, 1], 2], [[1, 5, 7, -1, 5], 6], [[1, -2, 3], 1], [[-1, -2, 3], -3]], "atol": 0, "plus_input": [[[], 0], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8], [[], 5], [[-1, 0, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 0], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1], 0], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 4], 8], [[-1, 0, 1, 2, 3, 4, 5, 7, 8, 9], 8], [[97.69700646889478], 5], [[-1, 6, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1], 1], [[], -1], [[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 8], [[-1, 0, 1, 2, 3, 4, 5, 7, 8, 9], 9], [[-1, 0, 1, 2, 3, 4, 5, 7, 8, 9], 4], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1], [[-1, 1, 2, 4, 5, 6, 8, 9], 8], [[-1, 1, 2, 3, 4, 5, 7, 8, 9], 8], [[true, false, false, true, true, false, true, true, true], 1], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 4], 2], [[true, false, false, true, true, false, true, true, true], 2], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1], -1], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 3], 4], [[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1], [[97.69700646889478], 6], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 7], -1], [[-1, 0, 6, 1, 2, 3, 4, 5, 6, 5, 7, 8, 9, 7], 8], [[-1, 0, 1, 2, 3, 4, 5, 1, 6, 7, 8, 9, 9, 4], 2], [[-1, 0, 1, 2, 3, 8, 5, 6, 7, 8, 9, 3], 4], [[true, false, true, true, false, true, true, true, true, true], 3], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 1, 9, 9, 1], 8], [[9, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 2], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 5], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 1, 9, 9, 1], -1], [[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], 9], [[97.69700646889478, 97.69700646889478], 6], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 7], [[-1, 1, 1, 4, 5, 6, 8, 9], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 4], [[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 4], 8], [[-1, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9], 8], [[-1, 8, 0, 1, 2, 3, 4, 5, 7, 8, 9], 9], [[-1, 8, 0, 1, 2, 3, 4, 5, 7, 8, 9], 10], [[], 6], [[-1, 0, 1, 2, 3, 4, 5, 7, 8, 9], 7], [[-1, 0, 1, 2, 3, 4, 5, 7, 8, 9, -1], 8], [[97.69700646889478], 7], [[-1, -1, 1, 1, 4, 5, 6, 8, 9], 8], [[-1, 6, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 6], 1], [[-1, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9], 2], [[-1, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9], 4], [[-1, 1, 2, 3, 4, 5, 7, 8, 9, 9, 4], 8], [[-1, 0, 1, 2, 3, 8, 5, 6, 7, 8, 9, 3], 5], [[true, false, false, true, true, false, true, true, false, true], 2], [[4, 24, 20], 1], [[true, false, true, true, false, false, true, true, true, true, true], 3], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 1, 9, 9, 1], 9], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 5], 9], [[-1, 0, 1, 2, 3, 8, 5, 6, 7, 8, 9, 3], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3], [[-1, 0, 1, 2, 3, 4, 5, 10, 7, 8, 1, 9, 9, 1], -2], [[-1, 0, 1, 2, 3, 4, 5, 7, 8, 9, -1], -2], [[97.69700646889478, 97.69700646889478], 8], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 5, 5], 8], [[0, 1, 2, 3, 6, 8, 5, 6, 7, 8, 9, 3], 5], [[5, -1, 1, 2, 4, 5, 6, 8, 9], 8], [[-1, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9], 1], [[-1, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9], 2], [[97.69700646889478, 97.23101051556709], 8], [[-1, 0, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8], 8], [[-1, 0, 6, 1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 6], 9], [[5, 24, 24, -1, 1, 2, 4, 5, 6, 8, 9], 8], [[97.35909695921131, 97.69700646889478], 7], [[-1, 0, 1, 3, 20, 3, 4, 5, 6, -2, 7, 8], 3], [[-1, -1, 1, 1, 4, 5, 6, 8, 9, -1], 8], [[-1, 0, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8], 9], [[], 8], [[-73, 8, -86, -19], 5], [[-1, -73, 1, 2, 3, 4, 5, 7, 8, 9, -1], -2], [[6, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 5, 5, 6], 3], [[-1, 0, 2, 2, 3, 4, 5, 6, 7, 8, 1, 9, 9, 1], 2], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 1, 9, 9, 1], 6], [[-1, 0, 1, 3, 4, 5, 6, 7, 8, 9, 1, 7], -1], [[-1, 0, 1, 2, 3, 8, 5, 6, 8, 9, 3, 8], 5], [[-1, 2, 2, 4, 5, 6, 8, 9], 7], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4], [[-1, -1, 1, 1, 4, 5, 6, 9, -1, 1], 7], [[-1, 0, 1, 2, 3, 8, 5, 6, 7, 8, 9, 3, 8], 8], [[false, true, true, false], 1], [[-1, 0, 6, 1, 2, 3, 4, 5, 6, 7, 8, 8], 9], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1], -2], [[-1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9], 8], [[5, -1, 1, 2, 4, 5, 6, 8, 9, 5], 8], [[true, false, false, true, true, false, false, true, true, true], 1], [[-1, 8, 0, 1, 2, 3, 4, 5, 7, 8, 9], 6], [[-1, 0, 2, 2, 3, 4, 5, 6, 7, 8, 9, 9, 5, 5], 2], [[9, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], -19], [[9, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], -1], [[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4], 9], [[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], 1]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(sum_, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1\n"}
{"task_id": "Mbpp/769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n", "entry_point": "Diff", "canonical_solution": "\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \n", "base_input": [[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[1, 2, 3, 4, 5], [6, 7, 1]], [[1, 2, 3], [6, 7, 1]]], "atol": 0, "plus_input": [[[], []], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7]], [[1, 2, 3, 4, 5], [3, 3, 3, 3, 3]], [[10, 20, 30, 40, 50], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[1, 1, 1, 2, 2, 3], [2, 2, 3, 3, 4]], [[1, 1, 1, 2, 2, 3, 2], [2, 2, 2, 3, 3, 4]], [[10, 20, 30, 40, 50], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 26, 55]], [[], [21.053827787412118, -26.99597124733289, -31.379141584827323, 92.96856462430469, 80.59200072494767, -33.39739721928059, 78.85020436951248, 63.482299506394384, -38.72845621707337, 80.59200072494767]], [[45, -1, -57, 10, 55, -6, -72, -10], [1, 2, 3]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 5]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 5]], [[78.85020436951248, 4.052029849956853, -33.39739721928059, 57.29229970397222, -63.90816106474213, -94.57327338374273, 57.29229970397222], [78.85020436951248, 4.052029849956853, -33.39739721928059, 57.29229970397222, -63.90816106474213, -94.57327338374273, 57.29229970397222]], [[2, 2, 3, 3, 2, 4], [2, 2, 3, 3, 2, 4]], [[1, 25, 2, 2, 3, 3, 4, 4, 5, 5], [1, 25, 2, 2, 3, 3, 4, 4, 5, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 5, 6]], [[-1, -57, 10, 55, -6, -72, -10], [1, 3]], [[1, 2, 3, 4, 5], [2, 4, 6, 10, 2]], [[78.85020436951248, 4.052029849956853, 57.29229970397222, -33.39739721928059, 57.29229970397222, -63.90816106474213, -94.57327338374273, 57.29229970397222], [78.85020436951248, 4.052029849956853, 57.29229970397222, -33.39739721928059, 57.29229970397222, -63.90816106474213, -94.57327338374273, 57.29229970397222]], [[2, 3, 4, 5], [2, 4, 6, 10, 2]], [[5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 10], [5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 10]], [[5, 10, 15, 20, 30, 35, 4, 45, 55, 10], [5, 10, 15, 20, 30, 35, 4, 45, 55, 10]], [[78.85020436951248, 4.052029849956853, 57.29229970397222, -34.126255419632514, -63.90816106474213, -94.57327338374273, 57.29229970397222], [78.85020436951248, 4.052029849956853, 57.29229970397222, -34.126255419632514, -63.90816106474213, -94.57327338374273, 57.29229970397222]], [[2, 2, 3, 3, 3, 2, 4], [2, 2, 3, 3, 3, 2, 4]], [[92.96856462430469, 78.85020436951248, -31.379141584827323, -6.798645629977713, 4.052029849956853], []], [[78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213], [78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213]], [[21.053827787412118, -26.99597124733289, -31.379141584827323, 92.96856462430469, 80.59200072494767, -33.39739721928059, 78.85020436951248, 63.482299506394384, -38.72845621707337, 80.59200072494767], [21.053827787412118, -26.99597124733289, -31.379141584827323, 92.96856462430469, 80.59200072494767, -33.39739721928059, 78.85020436951248, 63.482299506394384, -38.72845621707337, 80.59200072494767]], [[6, 4, 5], [6, 4, 5]], [[-1, -57, 10, 55, -6, -72], [1, 3, 3]], [[21.053827787412118, -26.99597124733289, -31.379141584827323, 92.96856462430469, 80.59200072494767, -33.39739721928059, 78.85020436951248, 63.482299506394384, -38.72845621707337, 80.59200072494767, 80.59200072494767], [21.053827787412118, -26.99597124733289, -31.379141584827323, 92.96856462430469, 80.59200072494767, -33.39739721928059, 78.85020436951248, 63.482299506394384, -38.72845621707337, 80.59200072494767, 80.59200072494767]], [[1, 25, 2, 2, 3, 4, 5, 5, 5], [1, 25, 2, 2, 3, 4, 5, 5, 5]], [[2, 4, 6, 10, 2], [2, 4, 6, 10, 2]], [[78.85020436951248, 4.052029849956853, -33.39739721928059, -93.71866999005064, 57.29229970397222, -63.90816106474213, -94.57327338374273, 57.29229970397222], [78.85020436951248, 4.052029849956853, -33.39739721928059, -93.71866999005064, 57.29229970397222, -63.90816106474213, -94.57327338374273, 57.29229970397222]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[45, 3, 4, 5], [45, 3, 4, 5]], [[true, true], [true, true]], [[1, 2, 3, 2], []], [[1, 3, 4, 4], [1, 3, 4, 4]], [[3, 3, 3, 3, 3], [3, 3, 3, 3, 3]], [[1, 2, 2, 3, 6], [1, 2, 2, 3, 6]], [[78.85020436951248, 57.44201028672728, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213, -33.39739721928059], [78.85020436951248, 57.44201028672728, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213, -33.39739721928059]], [[1, 3, 4, 1, 5], [1, 3, 4, 1, 5]], [[1, 25, 2, 2, 3, 4, -57, 5, 5], [1, 25, 2, 2, 3, 4, -57, 5, 5]], [[1, 2, 3, 4], [5, 4, 3, 2, 1]], [[5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 10, 45], [5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 10, 45]], [[78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, 19.280231583546648, -63.90816106474213, 57.29229970397222, -63.90816106474213], [78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, 19.280231583546648, -63.90816106474213, 57.29229970397222, -63.90816106474213]], [[3, 3, 3, 3, 4, 3], [3, 3, 3, 3, 4, 3]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, -57]], [[1, 2, 3], [5, 4, 3, 2, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 3, 5, 5, 3], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7]], [[1, 2, 2, 3, 2], [1, 2, 2, 3, 2]], [[3, 3, 3, 3, 4, 3, 3, 4, 3], [3, 3, 3, 3, 4, 3, 3, 4, 3]], [[10, 20, 30, 40, 50], [10, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 26, 55]], [[1, 2, 3, 4], [8, 4, 3, 2, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 3, 5, 5, 4], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7]], [[3, 3, 3, 3], [3, 3, 3, 3]], [[1, 3, 4], [1, 3, 4]], [[3, 3, 4, 4, 5, 5, 6, 6, 7, 7], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7]], [[92.96856462430469, 78.85020436951248, -31.379141584827323, -6.798645629977713, 4.052029849956853, -6.798645629977713], []], [[1, 1, 2, 2, 3, 3, 4, 4, 3, 5, 5, 4], [3, 3, 4, 4, 5, 5, 7, 7]], [[10, 20, 26, 40, 50], [5, 10, 15, 20, 25, 30, 35, 30, 40, 45, 50, 55]], [[5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 15], [5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 15]], [[1, 1, 2, 2, 3, 3, 4, 4, 3, 5, 5, 4], [1, 1, 2, 2, 3, 3, 4, 4, 3, 5, 5, 4]], [[78.85020436951248, 57.44201028672728, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213, -33.39739721928059, 78.85020436951248], [78.85020436951248, 57.44201028672728, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213, -33.39739721928059, 78.85020436951248]], [[1, 2, 3, 3], [1, 2, 3, 3]], [[2, 50, 2, 3, 3, 3, 2, 4, 2], [2, 50, 2, 3, 3, 3, 2, 4, 2]], [[78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, -32.6127267841512, 34.11377601910786, -94.57327338374273, 57.29229970397222, -63.90816106474213], [78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, -32.6127267841512, 34.11377601910786, -94.57327338374273, 57.29229970397222, -63.90816106474213]], [[-72, 2, 3, 4], [-72, 2, 3, 4]], [[78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, 19.280231583546648, -63.90816106474213, 57.29229970397222, -63.90816106474213, -63.90816106474213], [78.85020436951248, 5.016938121201768, 57.29229970397222, -33.39739721928059, 19.280231583546648, -63.90816106474213, 57.29229970397222, -63.90816106474213, -63.90816106474213]], [[-1, -57, 10, 55, -6, -72, -10], [1, 3, 1]], [[92.96856462430469, 78.85020436951248, 4.052029849956853, 57.29229970397222, -34.126255419632514, -63.90816106474213, -94.57327338374273, 57.29229970397222], [92.96856462430469, 78.85020436951248, 4.052029849956853, 57.29229970397222, -34.126255419632514, -63.90816106474213, -94.57327338374273, 57.29229970397222]], [[10, 3, 4], [10, 3, 4]], [[4.052029849956853, -33.39739721928059, 57.29229970397222, -63.90816106474213, -94.57327338374273, -6.798645629977713, 45.00118380650045, 57.29229970397222, 57.29229970397222], [4.052029849956853, -33.39739721928059, 57.29229970397222, -63.90816106474213, -94.57327338374273, -6.798645629977713, 45.00118380650045, 57.29229970397222, 57.29229970397222]], [[5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 15, 10], [5, 10, 15, 20, 30, 35, 40, 45, 50, 55, 15, 10]], [[-1, -57, 10, 55, -6, -72], [1, 3, 3, 1]], [[2, 3, 5, 5], [2, 3, 5, 5]], [[-1, -57, 10, 55, -6, -72], [-1, -57, 10, 55, -6, -72]], [[true], [true]], [[6, 4, 25], [6, 4, 25]], [[92.96856462430469, 78.85020436951248, -31.379141584827323, -6.798645629977713, 4.052029849956853, -6.798645629977713, 78.85020436951248], [92.96856462430469, 78.85020436951248, -31.379141584827323, -6.798645629977713, 4.052029849956853, -6.798645629977713, 78.85020436951248]], [[1, 2, 3], ["Dxjf", "IPtogid", "kZeTRnafBg", "", "oQBAov", "Zd", "YuHlX", "wH", "nHgsGYA"]], [[], [21.053827787412118, -26.99597124733289, -31.379141584827323, 92.96856462430469, 80.59200072494767, -33.39739721928059, 78.85020436951248, 63.482299506394384, -38.72845621707337, 80.59200072494767, 80.59200072494767]], [[-1, -57, 10, 55, -6, -72, 10], [-1, -57, 10, 55, -6, -72, 10]], [[5, 4, 2, 3, 2, -57], [5, 4, 2, 3, 2, -57]], [[1, 1, 2, 2, 3, 3, 4, 4, 3, 5, 3], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [3, 3, 4, 4, 5, 5, 35, 6, 7]], [[3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3]], [[true, true, true], [true, true, true]], [[1, 2, 3, 4, 5, 5], [1, 2, 3, 4, 5, 5]], [[92.96856462430469, -31.379141584827323, -6.798645629977713, 4.052029849956853, -6.798645629977713], [78.85020436951248, 92.96856462430469, -6.798645629977713, 19.280231583546648]], [[1, 2, 2, 6, 6], [1, 2, 2, 6, 6]], [[1, 1, 2, 3, 3, 4, 4, 5, 5], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7]], [[5, 10, 15, 16, 20, 35, 40, 45, 55, -1, 10], [5, 10, 15, 16, 20, 35, 40, 45, 55, -1, 10]], [[1, 25, 2, 2, 3, 4, -57, 5, 5, 4], [1, 25, 2, 2, 3, 4, -57, 5, 5, 4]], [["oQBAov", "Dxjf", ""], []], [[1, 2, 2, 2, 2], [1, 2, 2, 2, 2]], [[4, 5, 4, 3, 2, -72, 3], [4, 5, 4, 3, 2, -72, 3]], [[-1, 10, 55, -6, -72, 3, 10, -1], [-1, 10, 55, -6, -72, 3, 10, -1]], [["Dxjf", "IPtogid", "kZeTRnafBg", "", "oQBAov", "Zd", "YuHlX", "wH"], ["Dxjf", "IPtogid", "kZeTRnafBg", "", "oQBAov", "Zd", "YuHlX", "wH"]], [[1, 3, 3, 4, 4], [1, 3, 3, 4, 4]], [[1, 2, 2, 3, 2, 2], [1, 2, 2, 3, 2, 2]], [[3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 5, 7], [3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 5, 7]], [[78.85020436951248, 57.44201028672728, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213, -33.39739721928059, -63.90816106474213], [78.85020436951248, 57.44201028672728, 5.016938121201768, 57.29229970397222, -33.39739721928059, 34.11377601910786, -63.90816106474213, -94.57327338374273, 57.29229970397222, -63.90816106474213, -33.39739721928059, -63.90816106474213]], [[1, 25, 2, 2, 3, 4, 5, 5, 3], [1, 25, 2, 2, 3, 4, 5, 5, 3]], [[1, 26, 2, 2, 3, 2, 2], [1, 26, 2, 2, 3, 2, 2]], [[1, 2, 15], [5, 4, 3, 2, 1]]], "contract": "\n    assert isinstance(li1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(li2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n"}
{"task_id": "Mbpp/770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n", "entry_point": "odd_num_sum", "canonical_solution": "\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n", "base_input": [[2], [3], [4]], "atol": 0, "plus_input": [[1], [2], [3], [4], [5], [69], [70], [6], [true], [71], [68], [7], [72], [67], [66], [8], [65], [64], [73], [9], [10], [63], [62], [60], [11], [61], [74], [75], [76], [18], [77], [59], [30], [17], [58], [78], [16], [39], [29], [15], [91], [28], [79], [31], [90], [12], [89], [13], [14], [40], [19], [41], [42], [32], [100], [43], [57], [20], [27], [80], [21], [56], [99], [81], [98], [97], [93], [33], [101], [92], [37], [35], [44], [82], [38], [83], [55], [94], [45], [84], [26], [53], [88], [52], [54], [87], [36], [50], [85], [95], [96], [102], [34], [51], [86], [22], [49], [103], [23], [25], [24]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108\n"}
{"task_id": "Mbpp/771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n", "entry_point": "check_expression", "canonical_solution": "\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n", "base_input": [["{()}[{}]"], ["{()}[{]"], ["{()}[{}][]({})"]], "atol": 0, "plus_input": [[""], ["(((())()))()"], ["{[{[()]}]}"], ["(((())()))(){[{[()]}]}"], ["(((())()))(()"], ["(((())()(((())()))(()))(){[{[()]}]}"], ["{[{[()]}](((())()))(()}"], ["(((())()(((()){[{[()]}](((())()))(()}()))(()))(){[{[()]}]}"], ["(((())()(((()){[{[()]}](((())()]}"], ["(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[()]}]}"], ["((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}"], ["(((())()(((()){[{[()]}](((())()))(()}()))(()))(){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(()))(){[{[()]}]}]}]}"], ["(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(()))(){[{[()]}]}]}]}"], ["(((())()(((()){[{[()]}](((())()))())(){[{[()]}]}"], ["((((())()))()((())())(()"], ["(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))()]{[{[()]}]}"], ["(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}"], ["((((())()(((()){[{[()]}]((((()))(()}()((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}"], ["(((())())))()"], ["(((())()((((((((())()(((()]){[{[()]}](((())()]}))()))(()))(){[{[()]}]}"], ["ws"], ["(((())())(((()){[{[()]}](((())()))())(){[{[()]}]}"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[{[()]}]}]}]}"], ["(((())()(((()){[{[()]}](((())()))())(){[{[())]}]}"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}"], ["{[[{[()]}](((())()))(()}"], ["(((())()))(()ws"], ["((((())()(((()){[{[()]}]((((()))(()}((((())()(((()){[{[()]}]((((()))(()}()((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}{[{[()]}]}"], ["]){[{[()]}]}"], ["((){[{[()(((}())()(((()){[{[(()]}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}"], ["(()(())()(((())()))(())){(){[{[()]}]}"], ["(((())()((((((((())()(((()){[{[()]}](((()((((())()))()((())())(())))(()))()]{[{[()]}]}"], ["{[{[()](((())()))(()}"], ["((((())()(((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())((){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}"], ["{[{[()](((())()))(ws()}"], ["(((()(()ws"], ["(((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}"], ["((){[{[()(((}())()(((()){[{[(()](((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}"], ["(((((())()(((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())((){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(()))(){[{[()]}]}]}]}(((())()(((()){[{[()]}](((())()))())(){[{[()]}]}"], ["vBMc"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((()()()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}"], ["(((((())()(((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())vBMc((){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))()()]}]}]}]}"], ["EOLG"], ["Wofi"], ["(((())()(((()){[{[()]}](((())()))(){[{[()]}]})(){[{[())]}]}"], ["((){[{[()(((())()(((()){[{[(()]}]}{[()]}]}]}]}"], ["(((())()(([()]}](((()))(()}()))(()))(){[{[()]}]}"], ["w{[{[()](((())()))(ws()}s"], ["vvBMMc"], ["{[[{[()]}](((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))()]{[{[()]}]}(((())()))(()}"], ["(((())()((){[{[()(((}())()(((()){[{[(()](((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}"], ["(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))())]{[{[()]}]}"], ["(((())()(((()){[{[()]}](((())()))(()}()))(()))(){[{((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((()()()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}[()]}]}"], ["((){[vMMc()(((())()(((()){[{[(()]}]}{[()]}]}]}]}"], ["(((())()(((()){[{[()]}](((())()))())()){[{[()]}]}"], ["(((())())(((()){[{[()]}](((())()))())((((())()(((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())((){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}(){[{[()]}]}"], ["(((())())))())"], ["((){[{[()(((())()(((()){[{)[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}"], ["(((((((())())))()))()))(()"], ["(((((((())()(((())())))()))))()))()))(()"], ["(()(())()(((())()))((]}"], ["(((()vvBMMc)()(((()){[{[()]}](((())()))())(){[{[()]}]}"], ["(((())()(((((((((())()(((()]){[{[()]}](((())()]}))()))(()))(){[{[()]}]}"], ["(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())((((())()(((()){[{[()]}]((((()))(()}((((())()(((()){[{[()]}]((((()))(()}()((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}{[{[()]}]}}]}"], ["{[{[()](((())(()))(()}"], ["((){[{[()(((())()(((()){[{[(()]((){[{[()(((}())()(((()){[{[(()](((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}}](((()))(()}()))(()))(){[{[()]}]}]}]}"], ["(((((())()(((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())(()))(()))(){[{[()]}]}"], ["(((())()(((())()))(()))(){[{[)]}]}"], ["(((((())()()((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())vBMc((){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}"], ["(((((())()()((()){[{[()]}]((((()))(()}()((((())()(((())((((())()))()((())())vBMc((){[{[()]}]((((()))(()}()))(()))()({[{[()]}]}"], ["RO"], ["(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[)()]}]}"], ["(((()(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[)()]}]})()))((()(())()(((())()))(())){(){[{[()]}]})"], ["(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}(((())()))()))()))(()))(){[{[()]}]}"], ["(((())()(((()){((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((())()(((()){[{[()]}](((())()))())()){[{[()]}]}(((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}{[{[()]}]}"], ["((){[{)[()(((())()(((((())()(((()){[{[()]}](((())()]}(()){[{[(()]}](((()))(()}()))(()))(){[{[()]}]}]}]}"], ["(((())()(((()){[{[()]}](((((())()))(){[{[()]}]}(())()))())()){[{[()]}]}"], ["((){[{[()(((}())()(((()){[{[(()](((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((}]}]}"], ["(((()vvBMMc)()(((()){[{[()]}](((())()))())(){[{[()]}{[{[()](((())()))(ws()}]}"], ["(((())()(((())(()(())()(((())())(((((((())()(((())())))()))))()))(()))(())((]}({[{[()]}](((())()]}"], ["EOLG(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[()]}]}"], ["(((()(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[)()]}]})()))((()(())()((((())()))(())[){(){[{[()]}]})"], ["((){[{[()(((())()(((()){[{[(()]}](((()))(()}()(((())()))(()))(())))(){[{[()]}]}]}]}"], ["(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){(((())())))()[{[()]}]}"], ["(()(())()(((())()))((]"], ["((){[{[()(((())()()((()){[{[(()]}](((()))(()}()(((())()))(()))(())))(){[{[()]}]}]}]}"], ["{[{[()]}](((()])()))(()}"], ["{[{[()]}](((()]{)()))(()}"], ["((){[{[()(((}())()(((()){[{[(()](((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((}]}]}"], ["(((())()(((())(()(()())())(((((((())()(((())())))()))))()))(()))(())((]}({[{[()]}](}((())()]}"], ["(((())()(((())()))(()))()(((())()((){[{[()(((}())()(((()){[{[(()](((())()(((()){[{[()]}](((())()((){[{[()(((())()(((()){[{[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}))())(){[{[()]}]}}](((()))(()}()))(())))(){((((())()(((()){[{[()]}]((((()))(()}()))(()))(){[{[()]}]}[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}(((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}]}]}]}((((((((())()(((()){[{[()]}](((())()]}))()))(()))(){[{[()]}]}{[{[)]}]}"], ["(()(())()(((())())))((]"], ["{[{[()]}](((((((())()))()((())())(()())()))(()}"], ["EOLG(((())()(((()(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[)()]}]}){[{[()]}](((()))(()}()))(())[)(){[{[()]}]}"], ["(((())()(((((((((())()(((()]){[{[()]}](()(())()]}))()))(()))(){(((())()(((()){[{[()]}](((()))(()}()))(()))(){[{[()]}]}[{[()]}]}"], ["(((())()(((())(()(()())())(((((())()((((((((())()(((()){[{[()]}](((())()]}))()))(()))()]{[{[()]}]}(((((())()(((())())))()))))()))(()))(())((]}({[{[()]}](}((())()]}"], ["(((())((((()vvBMMc)()(((()){[{[()]}](((())()))())(){[{[()]}]})))()"], ["(((())()(((()){[{[()]}](((((())()))(){[{[()]})]}(())()))())()){[{[()]}]}"], ["((){[{[()(((())()(((()){[{)[(()]}](((()))(()}()))(())))(){[(((())()((((((((())()(((()){[{[()]}(((())()(((()){[{[()]}](((())()]}](((())()]}))()))(()))(){[{[()]}]}{[()]}Wofi]}]}]}"], ["(((())()(((()){[{[()]}](((())()))(())(){[{[())]}]"]], "contract": "\n    assert isinstance(exp, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True\n"}
{"task_id": "Mbpp/772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n", "entry_point": "remove_length", "canonical_solution": "\ndef remove_length(test_str, K):\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n", "base_input": [["The person is most value tet", 3], ["If you told me about this ok", 4], ["Forces of darkeness is come into the play", 4]], "atol": 0, "plus_input": [["", 3], ["", 5], ["", 10], ["This is a very long and complex sentence that contains words of different lengths such as abracadabra, internationalization, and antidisestablishmentarianism.", 10], ["This is a Test of the Function", 4], ["This is a test sentence with all words having length of five.", 5], ["This is a very long and complex sentence that contains words of different lengthsa such as abracadabra, internationalization, and antidisestablishmentarianism.", 10], ["Test", 6], ["This is a test sentence with all words having length of five.", 10], ["Test", 10], ["T", 11], ["", 6], ["", 4], ["Tesallt", 6], ["abracadabra,Test", 10], ["This is a Test Thisof the Function", 4], ["five.", 4], ["This is a Test Thisof the Fuwith", 6], ["Fuwith", 10], ["contains", 5], ["iThis is a test sentence with all words having length of five.", 5], ["contais", 5], ["", 9], ["This is a test sentence with all words having length of five.t of the Function", 4], ["abracadabra,Test", 11], ["This is a Test Thisof the Fuwith", 7], ["This is a Test Thisof the Fuwith", 5], ["all", 6], ["contais", 3], ["abracadabra,Test", 5], ["This is a very long and complex sentence that contains words of different lengthsa such as abracadabra, internationalization, and antidisestablishmentarianism.", 9], ["TeT", 10], ["iThis is a test sentence with all words having length of five.", 10], ["very", 9], ["Test", 9], ["Fuwith", 5], ["This is a Test of the unction", 4], ["that", 11], ["This is a very long and complex sentence that contaThisins words of different lengths such as abracadabra, internationalization, and antidisestablishmentarianism.", 10], ["This is a Test of the unctionof", 4], ["This is a Test of the unction", 9], ["Tabracadabra,his is a Test Thisof the Function", 7], ["unctioncontais", 3], ["Test", 5], ["conThisoftais", 3], ["Tabracadabra,his is a Test Thisof the Function", 9], ["This is a test sen tence with all words having length of five.", 5], ["complex", 3], ["This is a Test of the unctionof", 5], ["aand", 6], ["aand", 9], ["tunctioncontais", 7], ["This is a Test of the unctionof", 7], ["having", 3], ["This is a very long and complex sentence that contains words of different lengths such as abracadabra, internationalization, and antidisestatunctioncontaisblishmentarianism.", 10], ["different", 4], ["This is a very long and complex sentence that contains words of different lengths such as abracadabra, internationalization, and antidisestablishmentarianism.", 11], ["This is a very long and complex sentence that contains words of different lengthsthationalization, and antidisestablishmentarianism.", 9], ["This is a test sentence with all words having length of five.", 7], ["", 7], ["This is a Test Thisof the FuwitThis is a Test of the Functionh", 7], ["This is a test sentence with all words having length of five.", 11], ["This is a very long and complex sentence that contains words of different lengthsthationalization, and antidisestablishmentarianism.", 6], ["TeunctionofT", 10], ["Thsenis is a Test of the Function", 4], ["This is a Tescontainst of the unctionof", 7], ["This isi a Test Thisof the Function", 7], ["aan", 9], ["This is a Tescontainst of the unctionof", 5], ["This is a very long and complex sentence that contains words of different lengths such as abracadabra, internationalization, and antidisestatunctioncontaisblishmentarianism.", 11], ["tence", 9], ["lengthsa", 4], ["This is a very long and complex sentence that contains words of different lengthsa such as abracadabra, internationalization, and antidisestablishmentarianism.", 3], ["This i Test Thisof the FuwitThis is a Test of the Functionh", 11], ["a", 5], ["abracradabra,Test", 11], ["iThis is a test sentence with all words having length of five.", 11], ["FuwitThis", 6], ["thatunctioncontais", 11], ["This ise unction", 9], ["all", 5], ["iThis is a tiest sentence with all words having length of five.", 5], ["TeunctionofT", 5], ["This is a Test of the unctionof", 2], ["that", 5], ["FuwitThis", 5], ["Tabracadabra,his is a Test Thisof the Function", 11], ["test", 5], ["This", 2], ["abracadabra,Tebst", 10], ["This is a very long and complex sentence that contains words of differecontainsnt lengthsa such as abracadabra, internationalization, and antidisestablishmentarianism.", 3], ["Tesallt", 5], ["length", 3], ["thatt", 11], ["contais", 10], ["having", 11], ["Test", 8], ["lengths", 11], ["lengths", 5], ["thatunctioncontais", 10], ["This is a Test of abracadabra,Tebstthe unctionofwith", 2], ["lengthsTesallt", 5], ["TeT", 3], ["TieunctionofT", 5], ["", 8], ["FuwitThis", 7]], "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n"}
{"task_id": "Mbpp/773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n", "entry_point": "occurance_substring", "canonical_solution": "\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n", "base_input": [["python programming, python language", "python"], ["python programming,programming language", "programming"], ["python programming,programming language", "language"], ["c++ programming, c++ language", "python"]], "atol": 0, "plus_input": [["", ""], ["UPmVaKepPO", "UPmVaKepPO"], ["UPmVaKepPO", ""], ["", "UPmVaKepPO"], ["UPmVepPO", "UPmVepPO"], ["UPmVaKUPmVepPOepP", "UPmVaKepPO"], ["UPmVaKepPO", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["UPmVaKepPO", "UPmVepPO"], ["UUPmVaKepPOUPmVaKepPOaKPepPO", "UPmVaKepPO"], ["UPPmVaKepPO", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["UPmVaKepPO", "UPmVaKUPmVepPOepP"], ["UUPmVaKepPOUPmVaKepPOaKPepPOPO", "UPmVaKepPO"], ["UPmVepPO", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["UPPmVaKepPO", "UUPmVaKepPOUPmVaKep"], ["UPmVaKUPmVepPOepPUPmVepPO", "UPmVepPO"], ["UPmVaKPepP", "UPmVaKepP"], ["", "UPmVaKepPPO"], ["UPmVaKUPmVepPOepPUUPmVaKepPpPO", "UPPmVaKUPmVepPOepPUPmVepPO"], ["UPPmVaKUPmVepPOepPUPmVepPOO", "UPPmVaKUPmVepPOepPUPmVepPOO"], ["UPPmVaKepPO", "UPmVaKPepP"], ["UPmVaKPepPO", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["zsLntfBjA", "ubw"], ["UPmVaKPepPO", "UUPOaKPepPO"], ["UPmVaKepPO", "UPmVaKUPmVepPOUPPmVaKUPmVepPOepPUPmVepPOOepP"], ["UPmVaKUPmVepPOepPUUPmVaKepPpPO", "UPmVaKPepPO"], ["UPmVaKUPmVepPOepPUUPmVaKepPpPO", "UPPmVaKmVepPOepPUPmVepPO"], ["UPmVaKepP", ""], ["UPmVaKPUPPmVaKUPmVepPOepPUPmVepPOepPO", "UPPmVaKepPO"], ["zsLntfBjA", "zsLntfBjA"], ["UPmVUUPmVaKepPOUPmVaKepaKUPmVepPOepP", "UPmVaKepPO"], ["UPmVaeKepPO", "UPmVaKepPO"], ["UPmVaKUPmVepPOUPPmVaPmVepPOepPUPmVepPOOepP", "UPmVaKUPmVepPOUPPmVaKUPmVepPOepPUPmVepPOOepP"], ["UPmVaKUPmVepPOUPPmVaKUPmVepPOepPUPmVepPOOepP", "UPmVepPO"], ["UUPmVaKepPOUPmVaKepPOaKPepPUPPmVaKepPOOPO", "UUPmVaKepPOUPmVaKepPOaKPepPOPO"], ["UPPmVaKepPO", "UUPmVaKepPOUPmVa"], ["UPPmVaKUPmVepPOepPUPmVepPO", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["UPO", "UPmVaKepPO"], ["UPmVaKUPmVepPOepPUPmVepPO", "UPmVaKUPmVepPOepPUPmVepPO"], ["UPmVUUPmVaKepPOUPmVaKepaKUPmVepPOepP", "UPmVepPO"], ["UUPmVamKepPOUPmPVa", "UUPmVaKepPOUPmVa"], ["zsLntfUPmVaKepPPOBjA", "zsLntfUPmVaKepPPOBjA"], ["UPmVaKPUPPmVaKUPmVepPOepPUPmVepPOepPO", "UPmVaKepP"], ["UPmVaKepPO", "UPPmVaKUPmVepPOepPUPmVepPO"], ["UPmVUUPmVaKepPOUPmVaKepaKUPUPmVepPOepPOepP", "UPmVepPO"], ["UPmVaKUPmVepPOepPUUPUUPmVaKepPOUPmVamVaKepPVpPO", "UPmVaKUPmVepPOepPUUPmVaKepPpPO"], ["UPPmVaKepPO", "PUUPmVaKepPOUPmVa"], ["UPmVaUPPmVaUPmVUUPmVaKepPOUPmVaKepaKUPmVepPOepPKUPmVepPOepPUPmVepPOpP", ""], ["UPmVepPO", "UPmVepPUO"], ["UUPmVaKepPOUPmVaKepPOaKPepPUPPmVaKepPOOPO", "UUPmVaKepPOUPmVaKepPOaKPepPUPPmVaKepPOOPO"], ["UPmVaeKepPO", "UPmVaKepP"], ["UPmVaKUPmVepPOepPUPmVepPO", "UPmVPUUPmVaKepPOUPmVaaKUPmVepPOepPUPmVepPO"], ["UPmVaKPUPPmVaKUPmVepPOepPUPmVepPOepPO", "UPmVPUUPmVaKepPOUPmVaaKUPmVepPOepPUPmVepPO"], ["UPmVaKepP", "UPmVaeKepPO"], ["PUUPmVazsLntfUPmVaKepPPOBjAKepPOUPmVa", "PUUPmVaKepPOUPmVa"], ["UPmVaKUPmVepPOepPUUPUUPmVaKepPOUPmVamVaKepPVpPO", ""], ["UPmVaKPepP", "UPmUUPmVaKepPOUPmVaKepP"], ["UPmVaKUPmVepPOUPmVUUPmVaKepPOUPmVaKepaKUPUPmVepPOepPOepPepPUPmpVepPO", "UPmVaKUPmVepPOepPUPmpVepPO"], ["UPmVaKPepP", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["", "PUUPmVazsLntfUPmVaKepPPOBjAKepPOUPmVa"], ["UUPmVaKepPOUPmVaKepPOaKPepPOPO", "UPmVaKep"], ["UUPOaKPepPO", "UPmVaKepPO"], ["UUPmVaKPepPOUPmVaKepPOPaKPepPUPPmVaKepPOOPO", "UUPmVaKepPOUPmVaKepPOPaKPepPUPPmVaKepPOOPO"], ["UPmVa", "UUPmVaKepPOUPmVaKepPOaKPepPO"], ["UPmVaeKepPO", "UP"], ["UPmVaeKeUPmVPUUPmVaKepPOUPmVaaKUPmVepPOepPUPmVepPOpPO", "UPmVaeKepPO"], ["UPmVaKeUPmVaKUPmVepPOepPUPmVepPOpP", "UPmVaeKepPO"], ["UUPmVaKepPOUPmVaKep", "UPmVaKP"], ["UPmVepPO", "UPmVaKUPmVepPOepPUPmVepPO"], ["UPO", "UUPmVaKepPOUPmVaKepPOaKPepPUPPmVaKepPOOPO"], ["UPPmVaKUPmVepPOepPUPmVepPO", "zsLntfUPmVaKepPPOBjA"], ["UPmUVaKPepP", "UPmUVaKPepP"], ["UPmVaKep", "UPmVaKep"], ["UPmVUUPmVaKepPOUPmVaKepaKUPmVepPOepP", "UPmVUUPVmVaKepPOUPmVaKepaKUPmVepPOepP"], ["UPmVaKUPmVepPOepP", "UP"], ["UPPmVaKUUmVaKepPOUPmVaepPO", "UPPmVaKUUPmVaKepPOUPmVaepPO"], ["UPPmVaKUPmVaKPUPPmVaKUPmVepPOepPUPmVepPOepPOepP", "UPPmVaKepP"], ["UPmVzsLntfUPmVaKepPPOBjAVmVaKepPOUPmVaKOepaKUPmVepPOepPpPO", "UPmVaKepPO"], ["UPPmVaKUPmVepPOepPUPmVepPO", "UPPmVaKUPmVepPPOepPUPmVepPOO"], ["UPmVaKUPmVepPOepPUUPmVaKepPpPO", "PUUPmVaKepPOUPmVa"], ["UPmVUUPmVaKepPOUPmVaKepaKUPUPmVepPOepPOepP", "UPmVaKepP"], ["UPPmVaKepPmO", "UPPmVaKepPO"], ["zsLntfBjA", "UUPmVaKepPOUPmVa"], ["PUUPmVazsLntfUPmVaKepPPOBjAKepPOUPmVa", "PUUPmVaKepPUPmVa"], ["UPPmVaKepP", "UPmVepPO"], ["PUUPmVazsLntfUPmVaKepPPOBjAKepPaOUPmVa", "PUUPmVazsLntfUPmVaKeUPPmVaKepPmOpPPOBjAKepPOUPmVa"], ["UPmVaKUPmVepPOepPUPmVPO", "UPmVamKUPmVepPOepPUPmVepPO"], ["", "UPmVaKepPP"], ["UPmVaKUPmVepPOUPPmVaKUPmVepPOepPUPmVepPOOepP", "UPmVepPUO"], ["UPmUVaKPepP", "UPmVepPO"], ["UPmVaKUPmVepPOepPUPmVepPO", "UPmVaUKUPmVepPOepPUPO"], ["UPmPVaKP", "UPmVaKP"], ["UPmVaKUPmVepPOepPUUPUUPmVaKepPOUPmVamVaKepPVpPO", "UPmVaKeUPmVaKUPmVepPOepPUPmVepPOpP"], ["UPmVaKUPmVepPOepPUUPmVaKepPpPO", "UPmVVaKP"], ["UUPmVaKepPOUPmVaKepPOaKPepPOPO", "UPO"], ["UPmVaeKeUPmVPUUPmVaKepPOUPmVaaKUPmVepPOepPUPmVepPOpPO", "UPmVaeKeUPmVPUUPmVaKepPOUPmVaaKUPmVepPOepPUPmVepPOpPO"], ["PUUPmVafUPmVaKepPPOBjAKepPOUPmVa", "PUUPmVaKepPOUPmVa"], ["zfBjA", "zsLntfBjA"], ["UUPmVaKepPOUPmVaKepPOaKPepPOUPmVUUPVmVaKepPOUPmVaKepaKUPmVepPOepP", "UPPmVaKmVepPOepPUPmVepPUPOO"], ["PUUPmVazsLntfUPmVaKepPPOBjAKepPOUPmVa", "UPPmVaKUPmVaKPUPPmVaKUPmVepPOepPUPmVepPOepPOepP"], ["PUUPmVazsLntfUPmVaKepPPOBjAKepPOUPmVa", "PUUPmVaUKepPUPmVa"], ["UPmVUUPVmVaKepPOUPmVaKepaKUPmVepPOepP", "UPmVaKepPO"]], "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None\n"}
{"task_id": "Mbpp/775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n", "entry_point": "odd_position", "canonical_solution": "\ndef odd_position(nums):\n\treturn all(n % 2 == 1 for n in nums[1::2])\n", "base_input": [[[2, 1, 4, 3, 6, 7, 6, 3]], [[4, 1, 2]], [[1, 2, 3]]], "atol": 0, "plus_input": [[[2, 5, 4, 3, 6, 7, 8, 9]], [[1, 3, 5, 7, 9, 11, 13, 15]], [[2, 13, 5, 4, 3, 6, 7, 8, 9]], [[1, 3, 5, 7, 15, 9, 11, 13, 15]], [[2, 5, 4, 3, 6, 7, 8]], [[2, 13, 5, 4, 4, 3, 6, 7, 8, 13]], [[2, 5, 4, 3, 3, 6, 8, 8, 8, 9]], [[2, 13, 5, 15, 4, 11, 3, 6, 7, 8, 9]], [[2, 9, 5, 4, 4, 3, 6, 13, 7, 8, 13]], [[1, 3, 5, 7, 15, 9, 11, 13, 15, 3]], [[2, 5, 4, 3, 7, 8, 9, 5]], [[2, 9, 5, 4, 5, 3, 6, 13, 7, 8, 13]], [[1, 3, 5, 7, 15, 9, 11, 13, 15, 3, 3]], [[2, 13, 5, 15, 4, 7, 11, 3, 6, 7, 8, 9]], [[2, 13, 5, 15, 4, 4, 11, 3, 6, 7, 8, 9]], [[2, 5, 4, 3, 7, 8]], [[2, 13, 5, 15, 7, 11, 3, 6, 7, 8, 9, 3]], [[2, 13, 5, 15, 4, 4, 11, 3, 6, 7, 8, 9, 5]], [[2, 13, 5, 15, 4, 11, 3, 6, 7, 8, 9, 5]], [[3, 9, 5, 4, 4, 3, 3, 6, 13, 7, 8, 13]], [[2, 5, 4, 3, 6, 8, 9, 7]], [[1, 5, 6, 15, 9, 11, 13, 15, 3]], [[3, 5, 7, 15, 9, 11, 13, 15, 3]], [[1, 3, 5, 7, 15, 9, 13, 11, 13, 15]], [[3, 9, 5, 4, 4, 3, 3, 6, 13, 7, 8, 3]], [[1, 5, 6, 15, 9, 11, 13, 15, 8]], [[1, 5, 4, 3, 3, 6, 8, 8, 8, 9]], [[2, 13, 5, 15, 4, 4, 11, 3, 11, 6, 7, 8, 9, 5]], [[3, 13, 5, 15, 4, 4, 11, 3, 6, 7, 8, 9, 9]], [[3, 13, 5, 15, 4, 4, 11, 3, 6, 8, 8, 9, 9]], [[1, 3, 3, 5, 7, 15, 11, 9, 11, 13, 15]], [[2, 9, 5, 7, 4, 3, 6, 13, 7, 8, 13]], [[2, 13, 5, 4, 4, 3, 1, 7, 8, 13]], [[1, 5, 4, 3, 3, 6, 8, 8, 8]], [[2, 5, 15, 4, 7, 11, 3, 6, 7, 8, 9]], [[2, 9, 5, 5, 4, 3, 6, 13, 7, 8, 13]], [[1, 5, 4, 3, 3, 6, 3, 10, 8, 8, 8, 9]], [[1, 5, 4, 3, 3, 6, 8, 8, 11, 8, 9]], [[3, 13, 5, 15, 4, 11, 3, 6, 7, 8, 9, 9]], [[2, 13, 15, 4, 7, 11, 3, 6, 7, 8, 9]], [[1, 3, 3, 5, 7, 7, 15, 11, 9, 11, 13, 15, 5]], [[1, 5, 4, 3, 6, 8, 9, 7]], [[1, 3, 5, 7, 15, 9, 11, 4, 13, 15, 3, 3]], [[2, 9, 5, 4, 4, 6, 13, 7, 8, 13]], [[3, 9, 5, 7, 4, 3, 3, 6, 13, 7, 8, 13, 3]], [[3, 9, 2, 5, 4, 6, 4, 3, 3, 6, 13, 7, 8, 3]], [[1, 3, 7, 9, 11, 15]], [[1, 5, 4, 3, 3, 8, 8, 8, 9, 8, 4]], [[1, 3, 5, 5, 7, 9, 11, 13, 15]], [[2, 13, 5, 15, 15, 11, 3, 6, 7, 8, 9, 3]], [[1, 3, 3, 5, 7, 7, 15, 11, 9, 11, 13, 15, 9, 5]], [[1, 5, 6, 15, 9, 11, 7, 13, 15, 8]], [[2, 13, 5, 15, 4, 4, 11, 3, 6, 7, 8, 9, 5, 3]], [[1, 5, 6, 9, 11, 7, 13, 15, 8, 15]], [[1, 5, 4, 3, 3, 6, 8, 8, 11, 8, 9, 3]], [[13, 5, 15, 4, 4, 11, 3, 11, 6, 7, 8, 9, 5]], [[10, 1, 5, 6, 9, 11, 7, 13, 15, 8, 15]], [[3, 5, 7, 15, 9, 11, 13, 15, 3, 3]], [[2, 13, 5, 4, 3, 6, 3, 7, 8, 5, 5]], [[1, 3, 7, 9, 11, 15, 3]], [[3, 9, 4, 4, 3, 3, 6, 13, 7, 8, 13, 4]], [[2, 9, 5, 4, 5, 3, 6, 12, 13, 7, 8, 13, 2]], [[3, 5, 7, 15, 9, 11, 13, 15, 3, 13]], [[1, 5, 4, 3, 6, 8, 8, 8]], [[1, 3, 5, 7, 15, 9, 11, 4, 15, 3, 3]], [[3, 9, 5, 7, 4, 3, 3, 6, 13, 7, 8, 13, 3, 3]], [[1, 3, 5, 7, 15, 9, 13, 11, 12, 13, 15]], [[2, 13, 5, 15, 4, 4, 10, 3, 6, 7, 8, 9]], [[1, 5, 6, 15, 9, 11, 13, 10, 3]], [[3, 5, 7, 15, 9, 13, 11, 13, 15, 15]], [[1, 5, 15, 9, 11, 13, 10, 3]], [[2, 5, 4, 3, 7, 8, 5, 5]], [[15, 1, 3, 5, 15, 15, 9, 11, 16, 11, 13, 15]], [[1, 5, 4, 3, 3, 6, 8, 8, 8, 8]], [[1, 3, 5, 7, 15, 9, 11, 13, 15, 3, 15]], [[1, 3, 5, 7, 9, 11, 13, 15, 3, 3]], [[1, 5, 6, 9, 11, 13, 10, 3]], [[1, 5, 4, 3, 2, 3, 6, 3, 10, 8, 8, 8, 9]], [[2, 9, 5, 5, 5, 3, 6, 12, 13, 9, 8, 13, 2]], [[3, 9, 5, 7, 4, 3, 3, 6, 13, 2, 8, 13, 3, 2]], [[2, 5, 2, 3, 3, 6, 8, 8, 8, 9]], [[1, 5, 6, 15, 9, 11, 13, 15, 8, 15]], [[2, 4, 3, 7, 8, 10, 5]], [[2, 13, 13, 5, 4, 3, 6, 7, 8, 9, 7]], [[3, 5, 7, 15, 9, 13, 11, 13, 15]], [[2, 5, 4, 3, 3, 8, 6, 8, 8, 8, 9]], [[1, 15, 5, 6, 15, 9, 11, 13, 15, 8, 15]], [[2, 9, 5, 5, 4, 3, 6, 13, 7, 8, 13, 8, 2]], [[2, 13, 13, 5, 4, 6, 7, 8, 9, 7]], [[1, 5, 4, 11, 3, 6, 8]], [[1, 5, 15, 9, 11, 13, 15, 8, 15]], [[2, 13, 5, 15, 7, 11, 3, 6, 7, 8, 9]], [[10, 1, 5, 6, 9, 11, 7, 13, 15, 8, 7, 15]], [[3, 9, 3, 5, 7, 4, 3, 6, 13, 7, 8, 13, 3, 3]], [[1, 15, 11, 5, 6, 15, 9, 11, 13, 15, 8, 15]], [[2, 5, 4, 3, 7, 8, 9, 5, 5, 5]], [[1, 5, 6, 15, 9, 11, 7, 15, 8]], [[1, 5, 6, 9, 11, 7, 15, 7, 15]], [[3, 9, 5, 7, 4, 3, 3, 6, 13, 7, 8, 13, 3, 5]], [[7, 13, 5, 15, 15, 11, 3, 6, 7, 8, 9, 3]], [[1, 3, 5, 5, 7, 1, 11, 13, 15]], [[2, 13, 5, 15, 4, 11, 6, 7, 8, 9, 11, 4]]], "contract": "\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False\n"}
{"task_id": "Mbpp/777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n", "entry_point": "find_sum", "canonical_solution": "\ndef find_sum(arr): \n    return sum(set(arr))\n", "base_input": [[[1, 2, 3, 1, 1, 4, 5, 6]], [[1, 10, 9, 4, 2, 10, 10, 45, 4]], [[12, 10, 9, 45, 2, 10, 10, 45, 10]]], "atol": 0, "plus_input": [[[-1, -2, -3, -1, -1, -4, -5, -6]], [[0, 0, 0, 0, 0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[-5, -5, -5, -5, -5, -5, -5, -5, -5]], [[]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 5]], [[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[-1, -2, -3, -1, -1, -4, 0, -5, -6]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10]], [[1, 2, 3, -6, 5, 1, 2, 3, 4, 5]], [[9, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4]], [[1, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4]], [[-2, -3, -1, -1, -4, 0, -5, -8, -6]], [[1, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8, 9, 10, 10, 10, 10, 10, 10, 10, 11]], [[10, 0, 0, 0, 0, 0, 0, 0]], [[1, 8, 2, 3, 1, 5, 0, 2, 3, 4, 5, 4]], [[-5, -4, -5, -5, -5, -5, -5, -5, -5, -5]], [[-5, -4, -5, -5, -5, 0, -5, -5, -4]], [[-5, -4, -5, -5, -5, -5, -5, -5, 5, -5, -5]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -2, 9]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4]], [[1, 2, 3, 4, 1, 5, 1, 3, 4, 5, 4]], [[-2, -3, -1, -1, -4, 0, -5, -8]], [[1, 8, 2, 3, 4, 1, 5, 1, 3, 4, 5, 4]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4, 5]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 5]], [[5, 2, 3, 1, 4, 5, 2, 6, 3, 7, 5]], [[9, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10]], [[8, 9, 10, 10, 10, 10, 10, 10, 11]], [[1, 8, 2, 4, 1, 5, 2, 1, 3, 4, 5, 4]], [[9, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10]], [[-1, -2, -3, -1, -1, -5, -6, -1]], [[8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1]], [[8, 9, 10, 10, -2, 10, 10, 10, 11, 11]], [[-6, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[8, 10, 10, 10, 9, 10, 10, 10, 11]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6]], [[-1, 3, -3, -1, -1, -4, -5, -6]], [[9, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 6, 10]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -2, 9, 1]], [[-5, -4, -5, -5, -5, -5, -5, -5, 5, -5, -5, -5]], [[-3, -6, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[-3, -6, 3, 3, 4, 5, 1, 2, 3, 4, 5]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4]], [[-1, -2, -3, -1, 0, -5, -6, -1]], [[-6, 2, 3, 4, 5, 2, 4, 4, 5]], [[-5, -4, -5, -5, -5, -5, -4, -5, 5, -5, -5, -5]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 2]], [[-6, 2, 9, 3, 4, 2, 4, 4, 5]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 5, 4]], [[-5, -5, -5, -5, -5, -5, -5, -5]], [[-3, -6, 3, 3, 4, 5, 1, 2, 4, 5]], [[5, 2, 3, 1, 4, 5, 7, 6, 7, 2]], [[7, 8, 10, 10, 10, 9, 10, 10, 10, 11, 10, 7]], [[-6, 2, 9, 3, 4, 2, 4, 5]], [[2, 3, 1, 4, 5, 2, 6, 3, 7, 5]], [[-3, -6, 3, 4, 3, 5, 1, 2, 3, 4, 5]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -2, 9, -5]], [[2, 3, 1, 4, 5, 2, 6, 3, 5]], [[10, 0, 0, 0, 0, 0, 0, 0, 0]], [[8, 9, 10, 10, 10, 10, 11, 10, 11]], [[9, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10]], [[9, 10, 10, -4, 10, 10, 10, 10, 10, 11, 10, 10, 6, 10]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4, 3]], [[-3, -6, 3, 3, 4, 5, 1, 2, 4, 5, 2, 5, 5]], [[-3, -6, 3, 3, 4, 5, 1, 0, 2, 3, 5]], [[8, 9, 10, 10, 10, 11, 10, 11]], [[1, 8, 2, 3, 4, 1, 5, 1, 3, 5, 4]], [[-1, -2, -3, -1, -1, -4, 6, -5, -6]], [[-6, 2, 9, 3, 4, 2, 5]], [[8, 2, 3, 4, 5, 1, 10, 3, 4, 5]], [[1, 8, 2, 4, 1, 5, 2, 1, 3, 5, 5, 4]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 5]], [[1, -2, 3, 4, -5, 6, 7, 9, 10, -2, 9]], [[9, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 9, 10, 10]], [[8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 1]], [[-4, -6, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[8, 10, 10, -2, 10, 10, 10, 11, 11, -2]], [[5, 2, 3, 1, 4, 5, 7, 1, 6, 7, 2]], [[1, 8, 2, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 5]], [[1, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[1, 8, 2, 3, 1, 5, 0, 2, 3, 4, -1, 5, 4]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 5, 5]], [[8, 2, 3, 4, 1, 5, 2, 1, 2, 3, 4, 5, 4, 3, 4, 1, 1, 4]], [[1, 8, 2, 3, 1, 5, 0, 2, 3, -1, 5, 4]], [[1, 2, 3, -6, 5, 1, 2, 3, 4, 4]], [[1, 8, 2, 3, 1, 5, 2, 3, 4, -1, 5, 4]], [[1, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2]], [[1, 8, 2, 4, 1, 5, 2, 3, 4, -1, 5, 4, 4]], [[-1, 3, -3, -1, -2, -4, -5, -6]], [[5, 2, 3, 4, 5, 2, 6, 7, 4, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3, 6, 9]], [[8, 10, 10, 10, 9, 9, 10, 10, 12]], [[5, 2, 3, 4, 5, 2, 6, 7, 4]], [[1, 8, 2, 3, 5, 0, 2, 3, 4, 5, 4]], [[1, -2, 3, 4, -5, 6, 7, 8, 9, 10, -2, 9]], [[5, 2, 4, 1, 4, 5, 2, 6, -5, 7, 5]], [[6, -3, -1, -1, -4, 0, -5, -8, -6]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4, 3, 2, 2]], [[-3, -6, 3, 3, 4, 5, 1, 0, 2, 3]], [[1, 8, 2, 2, 3, 4, 1, 5, 1, 3, 5, 4]], [[9, 10, 10, 10, 10, 10, 11, 10, 10, 11, 10, 10, 10, 10, 11]], [[3, -3, -6, 3, 3, 4, 5, 1, 0, 2, 3, 5, 3]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n"}
{"task_id": "Mbpp/778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n", "entry_point": "pack_consecutive_duplicates", "canonical_solution": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]\n", "base_input": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]], [["a", "a", "b", "c", "d", "d"]]], "atol": 0, "plus_input": [[[2, 5, 3, 1, 1, 0, 4, 4, 2, 3, 3]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", 5]], [["a", "a", "a", "a", "b", "b", "b", "b", "c", "d", "d", "d", "d"]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e"]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", false, true, 0, "f", 1.5]], [[0, 0, 1, 1, 1, "a", "a", "b", "b", "b", [1, 2, 3], [1, 2, 3], "c", {"name": "John", "age": 25}, {"name": "John", "age": 25}]], [[]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5]], [["ae", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e"]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", false, true, 0, "f", 1.5, 2]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "b"]], [["a", 1, "ae", 2, "c", 3, "d", 4, "e", "e"]], [["a", "a", "a", "a", "b", "b", "b", "b", "c", "d", "", "d", "d"]], [["a", "a", "a", "a", "b", "bb", "b", "b", "b", "c", "d", "", "d", "d"]], [["ae", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", 3]], [[2, 5, 1, 3, 1, 1, 0, 4, 4, 4, 2, 3, 3]], [["a", 1, "ae", 2, "c", 3, "d", 4, "e"]], [["a", "b", 2, 3, 3, "b", "d", 4, "e", "e"]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", false, true, 0, "f", 1.5, "d"]], [["ae", "b", 2, "c", 3, 3, "d", 4, "e", "e", 3]], [["a", "a", "a", "a", "b", "bb", "b", "b", "b", "c", "d", "John", "bb", "d", "d", "a", "a"]], [[0, "a", 2.5, true, "b", 3, false, 4.5, false, 4, "c", 5]], [[2, 5, 1, 3, 1, 0, 4, 4, 4, 2, 3, 3]], [["a", 1, "b", 2, "ae", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "b"]], [["ae", 1, "b", 2, "c", "ae", 3, 3, "d", 4, "e", "e"]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", true, 5, true]], [["a", 1, "b", 2, "c", 3, "d", "bbe", 4, "e", "e", false, true, 0, "f", 1.5]], [["a", "a", "a", "a", "b", "b", "b", "c", "d", "d", "d", "d", "a"]], [["a", 1, "bb", "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "b"]], [["a", 1, "b", "f", 2, "c", 3, 3, "e", "e"]], [["a", 1, "b", 2, "age", 3, "d", "bbe", 4, "e", "e", false, true, 0, "f", 1.5]], [[true, false, true]], [[2, 5, 1, 2, 1, 0, 4, 4, 4, 2, 3, 3, 3]], [[0, 0, 1, 1, 1, "a", "a", "b", "b", "b", [1, 2, 3], [1, 2, 3], "c", {"name": "John", "age": 25}, "d", {"name": "John", "age": 25}, "b"]], [[2, 5, 1, 2, 1, 0, 4, 4, 4, 2, 3, 3, 5, 3]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", true, 5, true, false, true]], [[0, "a", 2.5, true, "b", 3, false, 4.5, false, 4, "c", 5, 4]], [[2, 5, 25, 1, 1, 0, 4, 4, 2, 3]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", false, 1.8236031742951366, true, 0, "f", 1.5]], [["a", "a", "a", "a", "b", "b", "b", "c", "d", "d", "d", "d", "a", "d"]], [["a", 1, "bb", "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "b", 1.5]], [["ae", 5, "b", 2, 3, 3, "d", 4, 25, "e", "e", 3, 4]], [[3, 2, 5, 1, 3, 2, 1, 0, 4, 4, 4, 2, 3, 3, 3]], [[0, 3, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", 5]], [[0, 3, "a", 2.5, true, 0, "b", 3, false, 4.5, 4, "c", 5]], [[0, 3, "a", 2.5, true, 0, "b", 3, false, 4.5, 4, "c", 5, false, 3]], [["ae", "b", 2, "c", 3, "d", 4, "e", "e", 3]], [["ae", 1, 3, "b", 2, "age", 3, 3, "d", 4, "e", "e", 3]], [["a", 4, "b", 2, "ae", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "b"]], [["a", 2.5, true, "b", 3, false, 4.999025494806807, false, 4, "c", 5]], [["a", "a", "a", "a", "b", "bb", "b", "b", "b", "c", "d", "John", "bb", "d", "d", "a", "a", "c"]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", true, 5, true, true]], [[true, false, true, true]], [[0, "a", 2.5, true, "b", 3, "", false, 4.5, 4, "c", true, 5, true]], [[3, 2, 5, 1, 3, 2, 1, 0, 4, 4, 4, 4, 2, 3, 3, 3]], [[2, 5, 3, 1, 1, 0, 4, 4, 2, 3, 3, 3]], [[0, "a", 2.5, true, "b", "", false, 4.5, 4, "c", true, 5, true]], [["a", 1, "b", "f", 2, "c", 3, "e"]], [[0, 3, "a", 2.5, true, "b", 3, false, 4, "c"]], [["ae", 1, 3, "a", 2, "age", 3, 3, "d", 4, "bbe", "e", 3]], [[0, "a", 2.5, true, "b", 3, "", false, 3.576699300614228, 4, "c", true, 5, true]], [["a", 4, "b", "ff", 2, "ae", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "b"]], [[0, "a", 2.5, true, "bb", "b", "", false, 4.5, 4, "c", true, 5, true]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", true, 0, "f", 1.5]], [["a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "abb", false, true, 0, "f", 1.5, 2]], [[0, {"name": "John", "age": 24}, 0, 1, 1, 1, "a", "a", "b", "b", "b", [1, 2, 3], [1, 2, 3], "c", {"name": "John", "age": 25}, {"name": "John", "age": 24}, "a", "a"]], [["a", 1, "bb", "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 0.7644455113748416, "b", 1.5, "bb"]], [["a", "b", 2, 3, "b", "d", 4, "e", "e", 4]], [["a", "a", "a", "a", "b", "bb", "b", "b", "b", "c", "d", "John", "bb", "ae", "d", "d", "a", "a", "c"]], [[0, 1, 1, 1, "a", "a", "b", "b", "b", [1, 2, 3], [1, 2, 3], "c", {"name": "John", "age": 25}, {"name": "John", "age": 25}]], [["ae", 1, "b", 5, 2, "c", "ae", 3, 3, "d", 4, "e", "e"]], [[true, false, true, false, true]], [[3, 2, 5, 3, 3, 2, 1, 0, 4, 4, 4, 4, 5, 2, 3, 4, 3]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", true, 5, true, 4]], [["a", "b", 2, 3, 3, "f", "d", 4, 3, "e", "e"]], [[0, "a", 2.5, "abb", true, "b", 3, "", false, 4.5, 4, "c", true, 5, true]], [[0, "a", 2.5, true, "b", 3, false, 4.5, false, 4, "c", 5, 5]], [["a", 1, "ae", 2, "aa", "c", 3, "d", 4, "e"]], [[0, 0, 1, 1, 1, "a", "a", "b", "b", "b", [1, 2, 3], [1, 2, 3], [1, 2, 4, 3], "c", {"name": "John", "age": 25}, {"name": "John", "age": 25}]], [[2, 5, 25, 1, 1, 0, 4, 4, 2, 3, 2]], [["a", "a", "a", "a", "b", "bb", "b", "b", "b", "c", "John", "bb", "d", "f", "d", "a", "a", "c", "c", "c"]], [["a", "b", 2, 3, "b", "d", 4, "e", "e", 0]], [[0, 0, 1, 1, 1, "a", "a", "b", "b", "bb", [1, 2, 3], [1, 2, 3], "cabb", {"name": "John", "age": 25}, "d", {"name": "John", "age": 25}, "b"]], [[false, false, true, false, true]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", true, 5, true, true, true]], [["ae", 1, 3, "a", 2, "age", 3, 3, "f", 4, "bbe", "e", 3, 4]], [["a", "a", "a", "a", "b", "b", "b", "b", "cc", "d", "e", "d", "c", "d", "d"]], [[0, "a", 2.5, true, "b", "name", 3, false, 4.5, 4, "c", 5]], [["a", "a", "a", "a", "b", "bb", "b", "b", "b", "c", "d", "John", "bb", "ae", "d", "d", "a", "", "c", "d", "c"]], [[3, 2, 5, 3, 3, 2, 1, 0, 4, 4, 5, 4, 5, 2, 3, 4]], [["a", 2.5, true, "b", 3, false, 4.999025494806807, true, 4, "age", 5]], [[0, "a", 2.5, true, "b", 3, false, 4.5, 4, "c", true, 5, true, false]], [["a", 1, "b", 2, "c", 24, 3, "d", 4, "e", "abb", false, true, 0, "f", 2]], [["a", 1, "bb", "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 0.7644455113748416, "b", 1.5, "bb", true]], [["a", "aa", 0, "b", 2, "c", 3, 3, "d", 4, "e", "abb", false, true, 0, 1.5, 2]], [["a", 1, "bb", "b", 2, "c", 3, 3, "d", 4, "e", false, true, 0, "f", 1.5, "cc", "b", 0]], [[true, false, true, false, true, true]], [[5, "a", 1, "b", 2, "c", 3, 3, "d", 4, "e", "e", false, true, 0, "f", 1.5, "d"]], [[true, false, true, false]], [["a", 1, "b", "f", 2, "c", 3, "e", "c", "a"]], [["a", "a", "a", "a", "b", "bb", "b", "b", "bbbe", "c", "d", "John", "bb", "ae", "d", "d", "a", "", "c", "d", "c"]], [[0, 0, 1, 1, 1, "a", "a", "b", "b", [1, 2, 3], [1, 2, 3], "c", {"name": "John", "age": 25}, {"name": "John", "age": 25}]], [["a", 1, "b", "f", 2, 3, "e", "c", "a"]], [[0, "a", 2.5, true, "b", "bbe", "", false, 4.5, 4, "c", true, 5, true, "b"]], [[0, "a", 2.5, true, "b", 3, false, 4.5, false, 4, "c", 5, 4, 4, 0]], [["a", "a", "a", "b", "bb", "b", "b", "bbbe", "c", "d", "John", "bb", "ae", "d", "d", "a", "", "c", "d", "c"]], [["a", "a", "a", "a", "b", "bb", "b", "b", "bbbe", "c", "d", "John", "ae", "d", "d", "a", "", "c", "d", "c"]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n"}
{"task_id": "Mbpp/780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n", "entry_point": "find_combinations", "canonical_solution": "\nfrom itertools import combinations \ndef find_combinations(test_list):\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]\n", "base_input": [[[[1, 2, 3], [3, 4, 5]]], [[[2, 4], [6, 7], [5, 1], [6, 10]]], [[[3, 5], [7, 8], [6, 2], [7, 11]]], [[[4, 6], [8, 9], [7, 3], [8, 12]]]], "atol": 0, "plus_input": [[[[100, 200], [300, 400], [500, 600], [700, 800]]], [[[1000, 2000], [3000, 4000], [5000, 6000], [7000, 8000]]], [[[10000, 20000], [30000, 40000], [50000, 60000], [70000, 80000]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [900, 1000]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]], [[[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]], [[[1, 10, 100], [2, 20, 200], [3, 30, 300], [4, 40, 400], [5, 50, 500]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]]], [[[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]], [[[11, 22, 33], [44, 55, 66], [77, 88, 99], [111, 222, 333]]], [[[1000, 2000], [3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000]]], [[[1, 10, 100], [2, 20, 200], [3, 30, 300], [4, 40, 400]]], [[[5, 50, 500, 5000], [6, 60, 600, 6000], [7, 70, 700, 7000]]], [[[10, 100, 1000, 10000], [20, 200, 2000, 20000], [30, 300, 3000, 30000]]], [[[100, 200, 300, 400, 500], [600, 700, 800, 900, 1000], [1100, 1200, 1300, 1400, 1500]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]], [[[3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [300, 400], [300, 400]]], [[[1, 10], [2, 20], [3, 30], [4, 40], [6, 60], [7, 70]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [13, 14, 15]]], [[[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60]]], [[[1000, 2000], [5000, 6000], [7000, 8000], [9000, 10000]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900], [700, 800, 900]]], [[[100, 200, 300], [700, 800, 900], [700, 800, 900]]], [[[1, 10], [2, 20], [3, 30], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20]]], [[[1, 10], [2, 20], [4, 40], [5, 50], [6, 60], [7, 70]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [300, 400], [300, 400], [500, 600]]], [[[1, 10, 100], [2, 20, 200], [3, 30, 300]]], [[[5000, 6000], [7000, 8000], [9000, 10000]]], [[[10, 100, 1000, 10000], [20, 200, 2000, 20000], [29, 300, 3000, 30000]]], [[[100, 200], [300, 400], [500, 600], [300, 400], [300, 400], [500, 600]]], [[[100, 200], [300, 400], [500, 600], [300, 400], [300, 400], [500, 600], [500, 600]]], [[[5, 50, 500, 5000], [6, 60, 600, 6000]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90]]], [[[100, 200], [300, 400], [700, 800], [300, 400], [300, 400], [500, 600], [300, 400], [300, 400]]], [[[1, 10, 100], [3, 30, 300], [2, 20, 200]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [13, 14, 15], [10, 11, 12]]], [[[1, 2, 3], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3], [7, 8, 9], [4, 5, 6], [7, 8, 9], [1, 2, 3], [7, 8, 9]]], [[[100, 200, 300], [700, 800, 900]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [13, 14, 15], [13, 14, 15], [10, 11, 12], [13, 14, 15]]], [[[1, 10], [2, 20], [4, 40], [5, 50], [6, 60], [6, 59], [7, 70]]], [[[1, 2, 3], [7, 8, 9], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[10, 20, 30], [40, 50, 60], [69, 80, 90]]], [[[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [6, 60]]], [[[3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000], [5000, 6000]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [13, 14, 15], [13, 14, 15]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [300, 400], [300, 400], [500, 600], [500, 600], [300, 400]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [13, 14, 15], [13, 14, 15], [4, 5, 6], [4, 5, 6], [13, 14, 15]]], [[[1, 10, 100], [3, 30, 300]]], [[[5000, 6000], [7000, 8000], [9000, 10000], [7000, 8000]]], [[[1000, 2000], [5000, 6000], [7000, 8000], [9000, 10000], [7000, 8000]]], [[[1, 2, 3], [4, 5, 6], [55, 11, 12], [10, 11, 12], [13, 14, 15], [13, 14, 15], [4, 5, 6], [4, 5, 6], [13, 14, 15]]], [[[1000, 2000], [5000, 6000], [7000, 8000], [9000, 10000], [78, 8000]]], [[[1, 10, 100], [3, 30, 300], [2, 20, 200], [2, 20, 200]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [300, 400], [300, 400], [300, 400]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [13, 14, 15, 16], [5, 6, 7, 8], [13, 14, 15, 16]]], [[[7, 8, 9], [4, 5, 6], [7, 8, 9], [4, 5, 6], [4, 5, 6]]], [[[3000, 4000], [5000, 6000], [9000, 10000]]], [[[1001, 2000], [7000, 8000], [9000, 10000], [7000, 8000]]], [[[10000, 20000], [30000, 40000], [70000, 80000]]], [[[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [4, 40]]], [[[100, 200, 300], [400, 500, 600], [400, 500, 601], [700, 800, 900], [700, 800, 900]]], [[[1, 10], [90, 20], [3, 30], [4, 17], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20]]], [[[1, 10], [90, 20], [3, 30], [6, 70], [4, 17], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20]]], [[[1, 10, 100], [3, 30, 300], [2, 20, 200], [2, 20, 200], [1, 10, 100]]], [[[9000, 222], [5000, 6000], [7000, 8000], [9000, 10000]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [13, 14, 15, 16], [5, 6, 7, 8]]], [[[1, 10, 100], [2, 20, 200], [900, 30, 300]]], [[[100, 200], [300, 400], [700, 800], [300, 400], [69, 400], [500, 600], [300, 400], [300, 400]]], [[[30000, 40000], [50000, 60000], [70000, 80000]]], [[[1, 10], [90, 20], [3, 30], [4, 17], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20], [3, 30], [4, 40]]], [[[7, 8, 9], [4, 5, 6], [4, 5, 6]]], [[[1, 10], [2, 20], [4, 40], [5, 50], [6, 60], [6, 59], [7, 70], [1, 10]]], [[[1, 10], [2, 20], [4, 40], [6, 60], [7, 70]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [6, 60], [5, 50]]], [[[1, 10], [2, 20], [4, 40], [6, 60], [7, 70], [2, 20]]], [[[7, 8, 9], [7, 8, 9], [4, 5, 6], [4, 5, 6]]], [[[10, 20, 30], [40, 50, 60], [69, 80, 90], [10, 20, 30]]], [[[3000, 4000], [5000, 6000], [7000, 8000]]], [[[1, 10, 100], [3, 30, 300], [3, 30, 300]]], [[[1, 2, 3], [4, 5, 6], [55, 11, 12], [10, 11, 12], [13, 14, 15], [13, 14, 15], [13, 80000, 15], [4, 5, 6], [4, 5, 6], [13, 14, 15]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [13, 14, 15], [13, 14, 15], [4, 5, 6]]], [[[1, 10], [90, 20], [3, 30], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20], [3, 30], [4, 40], [2, 20]]], [[[100, 200], [300, 400], [500, 600], [300, 400], [300, 400], [300, 400]]], [[[1, 2, 3], [10, 11, 12], [13, 14, 15], [13, 14, 15], [4, 5, 6], [4, 5, 6], [13, 14, 15]]], [[[3000, 4000], [7000, 8000]]], [[[7, 8, 9], [4, 5, 6], [4, 5, 6], [7, 8, 9]]], [[[1, 10], [90, 20], [3, 30], [100, 30], [6, 70], [4, 17], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20]]], [[[7, 8, 9], [4, 5, 6], [4, 5, 6], [4, 5, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [13, 14, 15], [16, 17, 18]]], [[[1, 10], [2, 20], [3, 30], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20], [3, 30]]], [[[100, 200], [300, 400], [700, 800], [300, 400], [300, 400], [500, 600], [500, 600], [300, 400]]], [[[1, 2, 3], [4, 5, 6], [55, 11, 12], [10, 11, 12], [13, 14, 15], [13, 14, 15], [13, 80000, 15], [4, 5, 6], [4, 5, 6], [13, 14, 15], [1, 2, 3]]], [[[1, 10, 100], [2, 20, 200], [900, 30, 300], [900, 30, 300]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [300, 400], [300, 400], [500, 600], [500, 600], [300, 400], [300, 400]]], [[[10, 33, 30], [40, 50, 60], [70, 80, 90]]], [[[300, 7], [100, 200], [300, 400], [500, 600], [300, 400], [300, 400], [300, 400]]], [[[10, 33, 30], [40, 50, 60], [70, 80, 90], [40, 50, 60], [40, 50, 60]]], [[[4, 5, 6], [4, 5, 6], [7, 8, 9]]], [[[1, 10], [3, 30], [3, 222], [4, 40], [6, 60], [7, 70], [2, 20]]], [[[1, 10, 100], [2, 20, 200]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [13, 14, 15, 16], [5, 6, 7, 8], [1, 2, 3, 4]]], [[[1, 10], [90, 20], [3, 30], [4, 40], [6, 60], [7, 70], [2, 20], [3, 30], [4, 40], [2, 20]]], [[[3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000], [5000, 6000], [3000, 4000]]], [[[7000, 8000], [9000, 10000], [7000, 8000]]], [[[300, 400], [100, 200], [300, 400], [500, 600], [300, 400], [300, 400], [500, 600]]], [[[1, 2, 3], [7, 8, 9], [13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3]]], [[[300, 400], [100, 200], [200, 400], [300, 400], [500, 600], [300, 400], [300, 400], [500, 600]]], [[[3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000], [5000, 6000], [16, 4000]]], [[[10, 100, 1000, 10000], [20, 200, 2000, 20000], [29, 300, 3000, 30000], [20, 200, 2000, 20000]]], [[[11, 22, 33], [44, 55, 66], [77, 88, 99], [111, 222, 333], [44, 55, 66]]], [[[100, 200], [300, 400], [500, 600], [700, 800], [300, 400], [300, 400], [500, 600], [500, 600], [300, 400], [300, 400], [700, 800]]]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(t, tuple) for t in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(t) == len(test_list[0]) for t in test_list), \"invalid inputs\" # $_CONTRACT_$))\n  assert all(isinstance(x, (int, float)) for t in test_list for x in t), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n"}
{"task_id": "Mbpp/781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n", "entry_point": "count_divisors", "canonical_solution": "\nimport math \ndef count_divisors(n) : \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n", "base_input": [[10], [100], [125]], "atol": 0, "plus_input": [[1], [2], [3], [7], [11], [17], [23], [31], [57], [79], [13], [1000000], [987654321], [12], [32], [22], [24], [4], [true], [25], [33], [78], [80], [18], [77], [21], [8], [6], [76], [9], [49], [34], [987654320], [50], [56], [30], [35], [51], [58], [5], [36], [81], [987654322], [37], [82], [54], [19], [1000001], [53], [52], [26], [55], [999999], [10], [29], [16], [75], [47], [14], [48], [20], [45], [15], [61], [83], [89], [90], [62], [84], [28], [46], [63], [27], [999998], [987654323], [38], [74], [73], [91], [64], [987654324], [85], [39], [999997], [999996], [88], [93], [40], [1000002], [87], [59], [999995], [70], [60], [44], [987654325], [68], [1000003], [69], [999994], [94], [987654326], [1000004], [41], [987654327], [987654328], [67], [42], [95], [97], [92], [72], [65]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)\n"}
{"task_id": "Mbpp/782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n", "entry_point": "odd_length_sum", "canonical_solution": "\ndef odd_length_sum(arr):\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n", "base_input": [[[1, 2, 4]], [[1, 2, 1, 2]], [[1, 7]]], "atol": 0, "plus_input": [[[4, 3, 2, 1, 9, 10, 7]], [[0, -1, 5, 10, -3, 2, 8, -6, 4]], [[-10, -20, -30, -40, -50, -60]], [[-5, -3, -2, -1, -4, -9, -6, -7, -8]], [[]], [[71, -68, 32, -50, -6, 70, -24, 86, -30]], [[0, -1, 5, 10, -3, 2, 8, 9, -6, 4]], [[-10, -20, -3, -40, -50, -60]], [[4, 3, 2, 1, 9, 10, 7, 3]], [[-5, -3, -2, -1, -4, -6, -7, -8]], [[-5, -2, -2, -1, -4, -6, -7, -8, -5]], [[4, 3, 2, 1, 9, 10, 10, 7, 2]], [[0, 5, 10, -3, 2, 8, 9, -6, 4]], [[0, -1, 5, 10, -4, 2, 8, -6, 4, -6]], [[0, 5, 10, -3, 2, 8, 9, -6, 4, 2]], [[-2, 0, 21, 70, -5, -9, -7, -60]], [[71, -2, 0, 21, 70, -5, -9, -6, -60, 70]], [[0, 9, 5, 10, -3, 2, 8, 9, -6, 4, 2]], [[0, 9, 5, 10, 2, 8, 9, -6, 4, 2, 2]], [[0, -1, 5, 10, -3, 2, 8, -6]], [[71, 21, 0, 21, 70, -5, -9, -6, -60, 70]], [[4, 3, 2, 1, 9, 10, 7, 4]], [[0, 9, 5, 10, 2, 8, 9, -6, 4, 2, 2, 9, -6]], [[0, 9, 5, 10, 2, 8, 9, 4, 2, 2]], [[-2, 0, 21, -9, -7, -60]], [[-5, -3, -2, -1, -3, -7, -6, -7, -8, -1]], [[4, 3, 2, 1, 9, -4, 10, 7, 2, 2]], [[0, 5, 10, -3, 2, 8, 10, -6, 4, 2, 2]], [[0, 5, -3, 2, 8, 10, -6, 4, 2, 2]], [[-5, -3, -7, -1, -3, -7, -6, -7, -8, -1]], [[-20, -3, -40, -50, -60]], [[false, true, false]], [[0, 5, 10, -3, 2, 8, 10, -6, 4, 2, 2, 8]], [[-5, -3, -2, -1, -3, -7, -6, -7, -8, -1, -7]], [[4, 3, 2, 9, 10, 7, 3]], [[-5, -2, 2, -2, -1, -4, -6, 70, -7, -8, -5]], [[8, 4, 3, 2, 1, 9, 10, 7, 4]], [[0, 5, 10, -3, 2, 8, 9, -7, 4, 2]], [[-5, -2, 2, -1, -4, -6, 70, -7, -24, -5, -2]], [[8, 4, 3, 2, 1, 9, 10, 7, 8, 4]], [[-60, 3, 2, 1, 9, 10, 7, 3]], [[-5, -3, -7, -1, -3, -7, -6, -7, -8, -1, -7]], [[0, 5, 10, -3, 2, 8, 10, -6, 4, 2, 2, 8, 5]], [[4, 3, -2, 2, 1, 9, 10, 7, 3]], [[true, true]], [[0, 9, 5, 10, 9, 4, 2, 2]], [[-5, -3, -2, -1, -3, 21, -7, -6, -7, -8, -1, -2, -3]], [[0, -1, 5, -3, 2, 8, 9, -6, 4]], [[-5, -3, -7, -1, -3, 3, -7, -6, -7, -8, -1, -7]], [[0, -1, 5, 10, 2, 8, -6, 4, -6, -6]], [[-5, -3, -7, 0, -7, -6, -7, -8, -1, -7]], [[0, 5, 4, 10, -3, 2, 8, 9, -6, 4, 2]], [[8, 4, 3, 2, 1, 9, 7, -60]], [[-5, -3, -1, -3, -7, -6, -7, -8, -1]], [[8, 4, 3, 2, 1, 8, 10, 7, 3]], [[0, 9, 5, 10, 2, 8, 9, -6, 4, 2, -1]], [[false]], [[-5, -3, -3, -1, -3, 21, -7, -6, -7, -8, -1, -2, -3, -7]], [[0, 5, 10, -3, 2, 8, 9, -7, 4, 2, 4, 0]], [[false, true, true, true, true]], [[0, 9, -1, 5, 10, -3, 2, 8, -6, 4]], [[0, -1, 5, 10, 2, 8, 4, -6, -6]], [[0, 9, 5, 10, 2, 8, 9, -6, 4, 2, -1, 5]], [[-5, -3, -2, -1, -3, -7, -4, -6, -7, -8, -1]], [[-5, -3, -2, -1, -3, -7, -6, -7, 86, -1]], [[4, 3, 2, 5, 9, 10, -20, 4]], [[-60, 3, 2, 1, 9, 10, -2, 3]], [[0, 9, 5, -5, 10, -3, 2, 8, 9, -6, 4, 2]], [[4, 3, 1, 9, 7, 3]], [[71, 86, -68, 32, -50, 70, -6, 70, -24, 86, 10, -24]], [[-5, 8, -3, -7, -1, -3, -7, -6, -7, -8, -1, -7]], [[0, 9, 5, 10, -3, 2, 8, 9, -6, 4, 2, 0]], [[-5, -3, -2, -1, -3, -7, -6, -7, 86, 87, -1]], [[4, -50, 2, 1, 9, 10, 7, 9, 7]], [[0, 9, 5, 10, -1, 2, 8, 9, -6, 4, 2, -1]], [[-10, -20, -30, -50, -60]], [[-2, 1, 0, 21, -9, -7, -60, 1]], [[0, 9, 5, 10, 2, 1, 8, 9, 4, 2, 2]], [[false, true, true, true]], [[8, 4, 3, 2, 1, 32, 9, 10, 7, 4, 7]], [[-20, -3, -40, -50, -40, -60]], [[-5, -3, -7, 0, -7, -6, -7, -6, -8, -1, -7]], [[0, 5, 1, 10, -3, 2, 8, 10, -6, 4, 2, 2, 8, 5, 2]], [[0, 9, 5, 9, 4, 2, 3, -3, 2]], [[4, 3, 2, 1, 9, 10, -2, 3]], [[-5, 86, -3, -2, -1, -3, -7, -6, -7, -4, 86, -1]], [[-20, -4, -40, -50, -60]], [[-2, 0, 21, -9, -7, -60, 1]], [[87, 0, 9, -1, 5, 10, -3, 2, 8, -6, 4]], [[0, 9, 5, 10, 70, 2, 8, 9, -6, 4, 2, 2, 2]], [[-5, -3, -7, 0, -7, -6, -7, -7, 0, -8, -1, -7]], [[false, true, true, false, true]], [[-5, 21, 8, -3, -7, -1, -3, -7, -6, -7, -8, -1, -7]], [[8, 4, 3, 2, 1, 32, 9, 10, 4, 7]], [[0, 5, 10, -3, 2, 8, 10, -6, 4, 4, 2, 3, 8, -60, 5, 2]], [[71, 0, 70, -5, -9, -6, -60, 70]], [[-5, -3, -1, -2, -1, -4, -6, -7, -8]], [[0, 5, 10, -3, 2, 8, 9, 9, -6, 4, 2]], [[0, 9, 5, 10, 2, 1, 8, 9, 4, -9, 2, 9]], [[0, 5, -2, 5, -3, 2, 8, 9, -6, 4]], [[8, 4, 3, 2, 1, 9, 7, -60, 2]], [[0, 9, 5, 10, 2, 3, 8, 9, -6, 4, 2, -1]], [[71, 5, 21, 70, -5, -9, -6, -60, 70, -5]], [[-5, -3, -2, -1, -3, -2, -4, -6, -7, -8, -1, -8]], [[4, -50, 2, 1, 9, 9, 7, 9, 7]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8\n"}
{"task_id": "Mbpp/783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\n", "entry_point": "rgb_to_hsv", "canonical_solution": "\ndef rgb_to_hsv(r, g, b):\n    import colorsys\n    h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return (h * 360, s * 100, v * 100)\n", "base_input": [[255, 255, 255], [0, 215, 0], [10, 215, 110]], "atol": 0, "plus_input": [[0, 0, 0], [0, 0, 1], [2, 0, 1], [1, 0, 1], [0, 1, 0], [2, 1, 0], [2, 1, 2], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 2, 0], [1, 1, 1], [3, 1, 2], [3, 3, 2], [1, 2, 1], [2, 3, 3], [3, 0, 2], [3, 1, 0], [2, 2, 2], [3, 2, 2], [3, 1, 3], [1, 0, 2], [2, 0, 2], [1, 2, 0], [0, 0, 2], [3, 0, 0], [3, 0, 3], [0, 3, 2], [1, 3, 0], [1, 2, 2], [3, 0, 1], [0, 3, 0], [1, 1, 3], [3, 3, 3], [1, 4, 3], [4, 1, 1], [0, 2, 2], [1, 0, 4], [0, 0, 3], [1, 1, 4], [2, 2, 0], [0, 1, 4], [0, 3, 3], [1, 4, 1], [1, 3, 1], [4, 3, 3], [3, 0, 4], [4, 3, 2], [2, 1, 1], [3, 1, 4], [2, 2, 1], [1, 4, 4], [1, 4, 0], [3, 2, 4], [0, 4, 1], [3, 4, 3], [1, 3, 3], [3, 3, 0], [1, 2, 3], [1, 4, 2], [2, 3, 1], [2, 1, 3], [3, 1, 1], [5, 1, 1], [4, 0, 0], [5, 0, 0], [3, 5, 3], [5, 5, 4], [4, 4, 0], [5, 4, 3], [2, 0, 3], [1, 2, 5], [2, 5, 2], [0, 1, 2], [0, 4, 0], [4, 1, 3], [2, 5, 1], [4, 0, 1], [0, 4, 3], [0, 2, 5], [4, 4, 3], [0, 4, 2], [4, 3, 4], [1, 0, 3], [3, 5, 2], [4, 2, 0], [1, 5, 5], [4, 2, 3], [0, 3, 1], [4, 3, 5], [0, 4, 4], [3, 4, 2], [2, 4, 4], [5, 4, 5], [4, 2, 1], [4, 5, 5], [4, 3, 0], [2, 4, 1], [2, 2, 3], [0, 0, 4], [3, 2, 1]], "contract": "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(g, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= r <= 255, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= g <= 255, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= b <= 255, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.2682926829268, 95.34883720930233, 84.31372549019608)\n"}
{"task_id": "Mbpp/784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "entry_point": "mul_even_odd", "canonical_solution": "\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n", "base_input": [[[1, 3, 5, 7, 4, 1, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 5, 7, 9, 10]]], "atol": 0, "plus_input": [[[-10, -5, 0, 5, 10]], [[0, 1, -1, 2, -2, 3, -3]], [[-10, -5, 0, 5, 10, 0]], [[0, 0, 1, -1, 2, -2, 3, -3]], [[-10, -5, 0, 5, 10, -2, 0]], [[0, 0, 1, -1, 2, -2, 3, -3, -3]], [[0, 1, 1, -1, 2, -2, 3, -3]], [[-10, -1, 0, 5, 10, 0]], [[0, 1, -1, 2, 3, -3, -3]], [[0, 0, 1, -1, 2, -2, 3, -3, 3]], [[0, 0, 1, 2, -2, 3, -3, -3]], [[-10, -1, 0, 5, 10, 0, 5]], [[0, 1, 2, -2, 3, -3, -3]], [[0, 0, 1, -1, 2, -2, 3, -3, -3, 2]], [[0, 1, 2, -2, -3, -3]], [[-10, -1, 0, 5, 10, 0, 5, -10]], [[-10, -5, 0, -10, -1, 10, -2, 0]], [[1, 2, -2, 3, -3, -3]], [[-10, -5, 0, 1, 10]], [[0, 0, 1, -1, -2, 3, -3, -3, 2]], [[0, 0, 1, -1, 2, -2, 3, -3, -3, 2, -3]], [[-10, -1, 0, 5, -2, 10, 0, 5, -10, -1]], [[-10, -5, 10, 0, -10, -1, 10, -2]], [[0, 1, 1, -1, -10, 3, -3, 3, 3]], [[-5, 0, 10, 1, 10]], [[-10, 3, 0, 1, 10]], [[-2, -10, -5, 0, 5, 10]], [[1, 2, -2, 3, -3]], [[-10, -5, -1, 5, 11, 10, 1]], [[0, 3, 1, -1, 2, -2, 3, -3, 3, -1]], [[-10, -1, 0, 5, 10, 0, 5, -10, -10]], [[-10, -1, 0, 5, 10, 0, 5, -10, -1]], [[-10, -5, -2, 5, 10, 0]], [[-10, -5, -1, 5, 11, 10, 1, 1]], [[-10, -5, -1, 11, 10, 1, -1]], [[-10, 0, 5, 10, 0, 0]], [[0, 1, -1, 2, 3, -4, -3]], [[-5, 0, 10, 1, -2, 10]], [[0, 0, 0, -1, 2, -2, 3, -3]], [[0, 0, 1, 2, -2, 3, -3, -3, 2]], [[0, 1, -1, 2, 3, 5, -3]], [[-10, 2, 0, 5, -2, 10, 0, 5, -10, -1]], [[0, 0, -10, -1, 2, -2, 3, -3, 3]], [[0, 0, 1, -1, 2, -2, 3, -3, -1, -3, 2, -3]], [[-10, -5, 0, 10, 5, 10, 10, 10]], [[0, 1, 2, -1, -3, -3]], [[-10, -5, 0, -10, -1, 10, 11, -2, 0]], [[0, 1, -1, 2, -2, 3, -3, 0]], [[0, 1, 2, -1, -3]], [[0, 1, -1, 2, 3, 11, 5, -3]], [[-10, -5, -1, 11, 1, 10, 1]], [[-10, -5, -10, -1, 10, -2, 0, -10]], [[0, 0, -1, 2, -2, 3, -4]], [[0, 1, -1, 2, -2, -4, -3, -4]], [[-5, 10, 0, -10, -1, 10, -2]], [[-2, -10, -5, 0, 5, 10, -2]], [[-5, 0, 5, -2, 0]], [[1, 2, -2, -3, -3]], [[0, -1, 2, 3, 11, 5, -3]], [[0, 1, 2, -2, 3, -3, -3, 2, 2]], [[0, 0, 2, -1, 5, -3, -3, 2, 3]], [[0, 0, 0, -1, 2, -2, -3]], [[-10, -5, -1, 5, 11, 10]], [[-4, -10, 0, 1, 1, -1, -10, 3, -3, 3, 3]], [[-10, -5, 0, 5, 2]], [[-1, 1, -1, 2, 3, -4, -3]], [[-10, -5, 0, 5, -5, 0]], [[0, 0, -1, 2, -2, 3, -4, 0]], [[-10, 0, 5, 10, 0, 0, 10]], [[-2, -10, -5, 0, 5, 10, -5]], [[-10, -1, 0, 5, 10, 0, 1, -10, -10]], [[-10, 0, 5, 10]], [[-10, 10, 0, -10, -1, 10, -2]], [[0, 2, -1, 1, -3]], [[0, 2, -1, 2, -1, 3, 11, 5, -3]], [[-5, 0, 1, -2, 10]], [[0, 0, -1, 2, -2, 3, -4, -2]], [[-4, -10, -5, 0, 5, 10, -10]], [[0, 1, -1, 2, 3, 5, -3, 0, -3]], [[-10, -5, -1, 5, 11, 0, 1, 1, 11]], [[-1, 0, 2, -1, 5, -3, -3, 2, 3]], [[0, 1, 2, -2, 3, -3, -3, 3]], [[-10, 1, -5, 0, 10, 5, 10, 10, 10]], [[0, 1, 1, -1, 2, -2, 3, -3, -3]], [[-5, 0, -10, -1, 10, -2]], [[-4, 0, 1, 2, -2, -3, -3]], [[-10, -5, 0, -1, 10, 11, 3, 0]], [[-11, -5, -1, 5, 6, 9, 11, 10, 1, 1, 1]], [[-4, -5, 0, 5, 10, -10]], [[-10, 3, -1, 5, 11, 10]], [[-5, -1, 5, 11, 10, -11, 1, 1]], [[-10, -5, 4, -2, 5, 10, 0]], [[-2, -10, -5, 0, 5, 10, -5, 10]], [[0, 1, 1, 2, -2, 3, -3, -3]], [[-10, -5, -1, 5, 11, -1, 1, 1, 11]], [[-10, 1, 0, 10, 5, 10, 10, 10]], [[-10, -5, -1, 5, 11, -1, 1, 1, 1, 11]], [[0, 1, -1, 2, 3, -4, -3, 3]], [[0, 0, 2, -1, 5, -3, -3, 3]], [[-4, -10, -5, 0, 5, 10, -10, -5]], [[-1, 1, -1, 3, -4, -3]], [[-2, -10, -5, 0, 5, 10, -2, -2]]], "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 == 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 != 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10\n"}
{"task_id": "Mbpp/785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n", "entry_point": "tuple_str_int", "canonical_solution": "\ndef tuple_str_int(test_str):\n  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n", "base_input": [["(7, 8, 9)"], ["(1, 2, 3)"], ["(4, 5, 6)"], ["(7, 81, 19)"]], "atol": 0, "plus_input": [["(1000000, 2000000, 3000000)"], ["(999999, 888888, 777777)"], ["(123456789, 987654321, 1111111111)"], ["(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"], ["(11, 22, 33, 44, 55, 66, 77, 88, 99, 100)"], ["(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000)"], ["((7, 8, 9)"], ["(7, 8, 9))"], ["(1 , 2   , 3)"], ["(1000000, 2000000, 30000000)"], ["(100)"], ["(1000000000, 2000000000, 3000000000)"], ["(10, 20, 30, 40)"], ["(100, 200, 300, 400, 500, 600)"], ["(1, 2, 3, 4, 5, 6, 7, 8, 9)"], ["(9, 8, 7, 6, 5, 4, 3, 2, 1)"], ["(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000)"], ["(10, 600)"], ["(123456789, 98765411111)"], ["(100, 600)"], ["(10,  600)"], ["(1 , 2, 3)"], ["(1, 3)"], ["(10, 2000000000, 3000000000)"], ["(10000000, 2000000, 30000000)"], ["(1000)"], ["(7, 8, 940)"], ["(1 , 22   , 3)"], ["(10, 20000000000, 3000000000)"], ["((10, 600)"], ["(100, 200, 300, 4000, 500, 600)"], ["(1000000000, 20000000, 3000000000)"], ["(100000000, 2000000, 30000000)"], ["(7, 8, 9 ))"], ["(100000000, 20000000, 300030000)"], ["(1  , 22   , 3)"], ["(10, 20000000000, 300000000)"], ["(10, 2000002000, 3000000000)"], ["(10, 200000000000, 300000000)"], ["(10, 200000000000, 3000000000)"], ["(9999799, 888888, 777777)"], ["(100, 200, 300, 4000, 0500, 600)"], ["(1723456789, 98765411111)"], ["(9999799, 8888888, 77777)"], ["(999999, 888888, 7787777)"], ["(999999, 888888, 97787777)"], ["(10, 2000000000, 30300000000)"], ["(999999, 8787777)"], ["(100, 200, 300, 4000, 000)"], ["(110, 600)"], ["(999999, 8888889, 777777)"], ["(999999, 8888888, 7787777)"], ["(123456789, 998765411111)"], ["(1 , 23, 3)"], ["(10, 6600)"], ["(10,  6000)"], ["(9989999, 888888, 97787777)"], ["(10, 2000000000000, 300000000)"], ["(100000, 3000000000)"], ["(1000, 200000, 5000, 6000, 7000, 08000, 9000, 10000)"], ["(1723456789, 998765411111)"], ["(1234561789, 98765411111)"], ["(1000, 2000, 3000, 4000, 5000, 6000, 70000, 8000, 9000, 10000)"], ["(1, 33)"], ["(9999799, 88888887)"], ["((1  , 22   , 3)"], ["(10 ,  600)"], ["(99899888888, 97787777)"], ["(1   , 22   , 3)"], ["(19000)"], ["(100,  200, 300, 400, 500, 600)"], ["(156789, 998765411111)"], ["(10, 2000000000000, 3000000)"], ["(1 , 3)"], ["(999999, 8888888, 97787777)"], ["(999999, 7787777)"], ["(9999799, 88889888, 77777)"], ["(10000000, 2000000, 300000000)"], ["(100000000, 2000000, 300000000)"], ["(1 , 2    , 3)"], ["(12345617819, 98765411111)"], ["(010, 20, 30, 40)"], ["(999999, 8898888, 777777)"], ["(123456)"], ["(9999799, 8888887)"], ["(9999799, 888898888, 77777)"], ["(999977)"], ["(100000)"], ["(999999, 77877777)"], ["(9999799, 888898888, 777777)"], ["(010, 20, 30, 400)"], ["(7, 8 , 9))"], ["(100010000000, 30000000)"], ["(1723456789, 398765411111)"], ["(110, 600))"], ["(0100000)"], ["(100000000, 2000000000000)"], ["(1, 2, 3, 4, 59, 6, 7, 8, 9)"], ["(100, 2000000000, 3000000000)"], ["(100, 2000, 300, 4000, 500, 600)"], ["(10, 020000000000, 300000000)"], ["(1000000)"], ["(1000800000, 2000000000000)"], ["(1256789, 98765411111)"], ["(1000000000, 2000000, 300000000)"], ["(999999, 778777772000000000000))"], ["(1 , 23 )"], ["(1000, 2000, 30000, 4000, 5000, 6000, 7000, 8000, 9000)"], ["(9899999, 77877777)"], ["(100000000, 200000000, 300030000)"], ["(1823456789, 9987654111811)"], ["(9999799, 88888788, 77777)"], ["(9999799, 88887777)"], ["(12345619789, 98765411111)"], ["(9,  8, 7, 6, 5, 4, 3, 2, 1)"], ["(1000, 2000, 3000, 4000, 5000, 6000, 70000, 8000, 9000, 1000)"], ["(9999799, 8888798888, 77777)"]], "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.startswith('('), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.endswith(')'), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.lstrip('(').rstrip(')').replace('...', '').replace(',', '').replace(' ', '').isdigit(), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)\n"}
{"task_id": "Mbpp/786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n", "entry_point": "right_insertion", "canonical_solution": "\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n", "base_input": [[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 7]], "atol": 0, "plus_input": [[[], 6], [[], 7], [[], 3], [[true, true, false, false, false, true, true, false, true, false], 7], [[true, false, false, true, true], 6], [[3, 6], true], [[true, true, false, false, false, false, true, true, false, true, false], 7], [[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7], [[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 8], [[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7], [[57, 3, true], 6], [[57, 3, true], 7], [[7, 3, true], 7], [[7, 3, true], 57], [[true, false, false, false, true, true], 7], [[], 2], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7], [[7, 3, 6], true], [[true, true, false, false, false, false, true, true, false, true, false, false], 7], [[], 8], [[7, true, 3, 6], true], [[true, false, true, true], 3], [[58, 3, true], 6], [[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 58], [[48.73417838625409, -35.964731488229475, 82.81444880501536, 11.857449640680656, 17.182050219901072, 21.593943255744534], 57], [[51, 7, -18, 57, 58, 57, false], 2], [[57, 3, true], false], [[51, 7, -18, 57, 58, 57, false], 3], [[48.73417838625409, -35.964731488229475, 82.81444880501536, 11.857449640680656, 17.182050219901072, 21.593943255744534, 21.593943255744534], 57], [[-12.02758648076636, -35.964731488229475, 82.81444880501536, 11.857449640680656, 17.182050219901072, 21.593943255744534], 57], [[true, true, false, false, false, false, true, false, false, true, false, false], true], [[58, 3, false], true], [[57, 3, true], true], [[58, 7, 3, true], 6], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, 17.182050219901072, -12.02758648076636, -35.964731488229475], -18], [[true, true, false, false, false, false, true, true, true, false, true, false], 7], [[57, 3, true, 57], false], [[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475, -90.20293226837086], 7], [[true, true, false, false, false, false, true, true, false, true, false, false, false], 7], [[-88.67190659296908, 21.593943255744534, -35.964731488229475, -90.20293226837086, 91.16324571161306, 50.64327388212607, 33.65983917911731], 2], [[false, true, true, false, false, false, true, true, true, true, false, true, false], 7], [[true, true, false, false, false, false, true, true, false, true, false, false, false], 58], [[58, 3, true], false], [[50.64327388212607, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7], [[50.64327388212607, 95.25630303581863, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], -18], [[true, true, false, false, false, false, true, true, false, true, false, false], false], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 2], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 6], [[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 6], [[50.64327388212607, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475, -35.906723367430125, 50.64327388212607], 6], [[false], 8], [[true, false, false, true], 58], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, -6.981753345954178, -35.964731488229475], 2], [[7, 3, 3, true], 7], [[58, -18, 58, 3, 3, true], false], [[50.64327388212607, -72.16612625583227, -12.02758648076636, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475, -12.02758648076636], 6], [[50.64327388212607, -107.06961552249132, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7], [[true, false, true], 51], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475, 50.64327388212607], 7], [[true, true, false, false, false, true, true, false, true, false, false, false], 58], [[50.64327388212607, -72.16612625583227, -75.73998556144497, -75.73998556144497, 90.05081633927793, -90.20293226837086, -6.981753345954178, -35.964731488229475], 3], [[], 56], [[50.64327388212607, -106.14126259013264, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 58], [[true, true, false, false, false, false, false, true, true, false, false, true, false], 7], [[true, 58, 3, true, true], 6], [[true, false, false, false, true, true, true], 7], [[51, 7, -18, 57, 58, 57, false], 4], [[58, -18, 58, 3, 3, true, true], false], [[51, 7, -18, -18, 57, 58, 57, false], true], [[true, false, false, false, true, true, true], 56], [[true, true, false, false, false, false, true, false, false, true, false, false], false], [[true, true, false, false, false, true, true, false, true, false, false, false], 59], [[48.73417838625409, -35.964731488229475, 82.81444880501536, 11.857449640680656, 21.593943255744534], 57], [[-18, -18, 58, 3, 3, true], false], [[true, true, false, false, false, true, true, false, true, false, false, false], 8], [[true, true, false, false, false, false, true, true, false, true, false, false], 6], [[true, false, true, false], 3], [[true, true, false, false, false, true, true, false, true, false, false, false], 56], [[true, true, false, false, false, false, true, true, false, true, false, false, false], false], [[true, true, false, false, false, true, false, true, false], 7], [[true, true, false, false, false, false, true, true, false, true, false, false, false], 59], [[true, true, false, false, false, false, true, true, false, true, false], false], [[57, 3, true, 57], true], [[3, true, 57], true], [[58, 58, 3, 3, true], true], [[7, 3, true], 56], [[true, false, false, true, false], 58], [[17.182050219901072, -35.964731488229475, 82.81444880501536, 11.857449640680656, 21.593943255744534], 57], [[57, true, 57], false], [[true, true, false, false, false, false, true, true, false, true, false], true], [[true, true, false, false, false, false, true, true, false, true, false, false, true], 7], [[50.64327388212607, -72.16612625583227, -12.02758648076636, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475, -12.02758648076636], 3], [[50.64327388212607, -107.06961552249132, -75.73998556144497, -75.73998556144497, 90.05081633927793, -12.02758648076636, -35.964731488229475], 7], [[50.64327388212607, 95.25630303581863, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475, -35.906723367430125, 50.64327388212607], 6], [[58, 7, true], 6], [[50.64327388212607, -72.16612625583227, -12.02758648076636, -12.02758648076636, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -12.02758648076636], 57], [[50.64327388212607, -106.14126259013264, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.712014625788704, -35.964731488229475, 90.05081633927793], 4], [[50.64327388212607, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 8], [[50.64327388212607, -72.16612625583227, -12.02758648076636, -75.73998556144497, 90.05081633927793, -90.20293226837086, -12.02758648076636, -12.02758648076636], 57], [[true, true, false, false, false, false, true, true, true, true, true, false, false], 7], [[95.25630303581863, 46.77615975283183, -72.16612625583227, -49.67713786505266, -59.21876350427635, 63.40916885926825, -106.14126259013264, 48.73417838625409], 8], [[true, true, false, false, false, true, true, false, true, false, false, false, false], 59]], "contract": "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4\n"}
{"task_id": "Mbpp/787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n", "entry_point": "text_match_three", "canonical_solution": "\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n", "base_input": [["ac"], ["dc"], ["abbbba"], ["caacabbbba"]], "atol": 0, "plus_input": [[""], ["gHZZiSWmTL"], ["gHZZiSWmgHZZiSWmTLL"], ["gHZZiSWmgHZZiSWgmTLL"], ["gHZgHZZiSWmgHZZiSWmTLLZSWmTL"], ["gHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLL"], ["gHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLL"], ["gHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWm"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["gHZgHZgHZZiSWmTLZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["ggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTL"], ["gHZZigHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTLSWmgHZZiSWmTLL"], ["gHZZiSWmgHZZiSWmTgHZZimgHZZiSWgmTLLLL"], ["gHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWm"], ["gHZZiSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLL"], ["gZHZgHZZiSWmgHZZiSWmTLLZSWmTL"], ["gZHZgHZZiSWmgHZZigHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSWmTL"], ["gZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTL"], ["gHZgHZZiSWmgHZZiSWTLLZSWmTL"], ["gHZgHZgHZZiSWmTLZiSWmgggHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmHZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["gHZgHZgHZZiSWmTLZiSWmgggHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLgZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLHZZiSWmTLLZSWmTL"], ["gHZgHZZiSWgZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZSZiSWmTLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLgHZZiSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTL"], ["gHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTL"], ["gHZZiSWmgHZZiSWmTgHZZimgHZgHZZiSWmgHZZgHZZiSWmgHZZiSWmTLLiSWmTgHZZiSWmgHZZiSWgmTLLLLZiSWgmTLLLL"], ["gHZZiSWmgHZgHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmZiSWmTLL"], ["gHZZiSWmggHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLL"], ["gHZgHZgHZZgHZZiSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLLiSWmTLZiSWmgggHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["gHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZigSWm"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWiSWmTL"], ["gHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTmLL"], ["AyLkNrPEwE"], ["wah"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTLZiSWmTLgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSgHZZiSWmgHZZiSWgmTLLTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmLZSWmTL"], ["gZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWLgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTL"], ["gHZgHZZiSWmgHZZiSWTgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTLSWmTL"], ["ggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZgHZZiSWmgHZgHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmZiSWmTLLZiSWgmTLL"], ["gHZZiSWmgHZZiSWmgHZZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLHZZiSWm"], ["gHZgHZWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWgmTLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWWSgmTLWLHZZiSWmTLLZSWmTL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWgZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTLWmgHZZiSWgmTLLWmTLSWTLLZSWmTLZiSWmTLgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTLZiSWmTLgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZgHZgHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLZiSWmgHZZiSWTLLZSHWmTL"], ["gHZZiSWmgHZZiSWimTLL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTgHZZiSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLLHZZiSWmTLZSWmTL"], ["gZHZgHZZiSWmgHZZigHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSTL"], ["gHZgHZgHZZiSgHZZiSWmgHZgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLZiSWgmTLLWmgHZZiSWgmTLLZiSWmgHZZiSWTLLZSHWmTL"], ["gHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmggHZZiSWgmTLLLLHZZiSgHZZigHZZiSWmgHZgHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmZiSWmTLLSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmLZSWmTgZHZgHZZiSWmgHZZigHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSTLL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLgHZZiSWmTLSWTLLZSWmTLZiSWmTLgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZZigHZgHZZiSWmggHZZiSWmgHZHZiSWgmTLLHZZiSWmTLLZSWmTLWSWHZZiSWmTLL"], ["gHgZHZgHZZiSWmgHZZiSWmTLLZSWmTLZgHZgHZZgHZZiSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLLiSWmTLZiSWmgggHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["gHZZZiS"], ["gHZZiSWmgHZZiSWmgHZZgHZZiSWmggHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWiSWmTLgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLHZZiSWm"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLgZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWggmTLLWmgHZZiSWgmTLLWmTLHZZiSWmTLLZSWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWgmTgHZZiSWmggHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLLLHZZiSWmTLZSWmTL"], ["gHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSgHZZiSZWmgHZgHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmZiSWmTLLWgmTmLL"], ["gHZZigHZgHZZiSWmggHZZiSWmgHZHZiwahSWgmTLLHSZZiSWmTLLZSWmTLWSWHZZiSWmTLL"], ["gHZZigHZZiSWmgHZZiSWmTLLSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLL"], ["gHZgHZZiSWmgggHZgHZgHZZiSgHZZiSWmgHZgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLZiSWgmTLLWmgHZZiSWgmTLLZiSWmgHZZiSWTLLZSHWmTLHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTL"], ["gHZZiSWmgHZZiSgWgmTL"], ["gZHZgHZZiSWmgHZZigHZZiSWmgHZZiSWmgHZgHgHZgHZWmTLZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSWmTL"], ["gHZZiSWSmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWm"], ["gZHZgHZZiSgHZZiSWmgHZZiSWmTgHZZimgHZZiSWgmTLLLLWmgHZZigHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSWmTL"], ["gHZgHZZiSWmggWHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTL"], ["gHZZigHZZiSWmgHZZiSWmTLLSWmgHZZiSWmTLgHZZiSgHZgHZgHZZiSWmTLZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWgZHZgHZZiSWmgHZZigHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSTLmTLZSWmTLWmgHZZiSWgmTLLLL"], ["ggHZZiSWmgHZZiSWmTgHZZiSWmgWHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLL"], ["gHZZigHZgHZZiWSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTLSWmgHZZiSWmTLL"], ["gHZgHZgHZZiZZiSWmTLZSWmTL"], ["gHZgHZZiSWgZHZgHZZiSWmgHZZigHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmTLSWmTLLZSTLmggHZZiSWmgHZZiSWgmLZSWmTL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWgZHZgHZZiSWggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTLWmgHZZiSWgmTLLWmTLSWTLLZSWTmTLZiSWmTLgHZZiSWmgHZZiSWgmTLLgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZgHZLLZiSWmgHZZiSWTLLZSHWmTL"], ["gHZgHZZiSWmggHZZiSWmgHZgHZZiSWmggWHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSWmTLgHZZiSWgmLZSWmTL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLgHZgHZZigHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZigHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLLZSgHZZiSWmgHZZiSWgmTLLTLSWmTLLZSWmTL"], ["gHZZiSWmgHZZiSWgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLmTLL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmTLLWmTLSWTLLZSWmTLZiSWmTLgHZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLLL"], ["gHZZiSWmggHZgHZZiSWmggHZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTLHZZiSWmTLL"], ["gHZZiSWmgHZZiSWmgHZZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSgZHZgHZZiSWmgHZZiSWmTLLZSWmTLWmTLiSWmgHZZiSWgmTLiLHZZiSWm"], ["gHZgHZgHZZiSWmTLZiSWmgggHZZgHZZiSWmgHZZiSgWgmTLgHZZiSWgmTLWLHZZiSWmTLTLiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmHZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTL"], ["gHZZiSWmggHZgHZgHZZiSWgZHZgHZZiSWggHZmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLgHZgHZZigHZZiSWmgHZ"], ["gHgHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWmgHZZiSWmgHZZiSWmTLLSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLL"], ["gHZgHZZiSWmggWHZZiSWmgHZZiSWgmTLLHTZZiSWmTLLZSWmTL"], ["gHZgHZgHZZiSWmTLZiSWmgggHZZiSWmgHZZiSWmgHZgHZZiSWmgggHZZiSWmgHZZiSWmgHZZgHZZiSWmggHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWiSWmTLgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWmgHZZiSWgmTLiLHZZiSWmHZZiSWmgHZZiSWgmTLWLHZZiSWmTLLZSWmTLiSWZZiSWmgHSZZiSWgmTLLHZZiSWmTLZSWmTL"], ["ggHZZiSWmgHZZiSWmTgHZZiSWmgHZZiSWgmTLLLLHZZiSgHZZiSWmgHZZiSWgmTLLWmgHZZiSWgmmTLL"], ["gHZZiSWmgHZZgiSWmTgHZZiSWmgHZZiSWgmTLiLLLgHZZiSWmgHZZiSWm"], ["gHZZiSWmgHZZiSgWgmTgHZZigHZgHZZiSWmggHZZiSWmgHZHZiSWgmTLLHZZiSWmTLLZSWmTLWSWHZZiSWmTLLL"], ["gHZZiSWmgHZZiSWmgHZZgHZZiSWmggHZZiSWmgHZZiSWgmTLWLHZgHgZHZgHZZiSWmgHZZiSWmTLLZSWmTLZgHZgHZZgHZZiSWmgHZZiSWmTLgHZZiSWmgHZZiSWgmTLLLLiSWmTLZiSWmgggHZZiSWmgHZZiSWmgHZgHZZiSWmggHZZiSWmgHZZiSWgmgHZZiSWgmTLLHZZiSWmTLZSWmTLZiHSWmTLLZSgZHZgHZZiSWmgHZZiSWmTLLZSWmTLWmTLiSWmgHZZiSWgmTLiLHZZiSWm"], ["gHZZiSWTLLZSWmTL"], ["gHZgHZZiSWmggWHZZiSWmgHmZZiSWgmTLLHTZZiSWmTLLZSWmTL"], ["wahh"], ["gHZZiSWmggHZgHZZiSWmggHgZHZgHZZiSWmgHZZiSWmTLLZSWmTLZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTLHZZiSWmTLL"], ["gHZZiSWmggHZgHZZiSWmggHgZHZgHZZiSWmgHZZiSWmTLLZSWmTLZZiSWmgHZZiSWgmTLLHZZiSWmTLZSWmTgHZgHZgHZZiSgHZZiSWmgHZgHZgHZZiSWmggHZZiSWmgHZZiSWWgmTLWLHZZiSWmTLLZSWmTLZiSWgmTLLWmgHZZiSWgmTLLZiSWmgHZZiSWTLLZSHWmTLLHZZiSWmTLL"]], "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")\n"}
{"task_id": "Mbpp/788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n", "entry_point": "new_tuple", "canonical_solution": "\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\n", "base_input": [[["WEB", "is"], "best"], [["We", "are"], "Developers"], [["Part", "is"], "Wrong"]], "atol": 0, "plus_input": [[[], ""], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], ""], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], ""], [[null, "", "vJLhOqhq", -86], ""], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJLhOqhq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJLhOqhq"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], ""], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJL"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], "vJLhOqhq"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[-10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJLhOhq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJvJLL"], [[45.31554022015084, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], "vJLhOqhq"], [[-51.27715473966572, 33.69836348184855, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJL"], [[-6.80022506914743, -51.27715473966572, -6.3979421133605765, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267], ""], [["POiV", -10.355958900117983, -86, 79, -8.323840159169166, false, "JGOc"], ""], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJL"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJL"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.611106744609591, -10.472754063243912], "vJLhOqhq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[null, "vJLhOqhq", -86], ""], [[-64.42482790803071, -6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084, 45.31554022015084], "vJLhvOqhq"], [[-51.27715473966572, 33.69836348184855, -69.2423613608672, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJL"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "JGO"], [[-51.27715473966572, -10.355958900117983, -10.472754063243912, 34.07985408015267, 45.31554022015084], "JGO"], [[null, -86, "vJLhOqhq", -86], ""], [[-51.27715473966572, -8.323840159169166, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJvJLL"], [["POiV", -10.355958900117983, 79, -8.323840159169166, false, "JGOc"], ""], [[null, -86, "vJLhOqhq", -86], "POiV"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJvJLL"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -10.355958900117983, -69.2423613608672, -15.508723324824603, 34.07985408015267, -8.323840159169166, 45.31554022015084, 34.07985408015267], "vJ"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267, 34.07985408015267], "vJL"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084, -10.355958900117983], "vJL"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[-51.27715473966572, -69.2423613608672, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[34.721023127039466, -6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -10.355958900117983, -69.2423613608672, -15.508723324824603, 34.07985408015267, -8.323840159169166, 45.31554022015084, 34.07985408015267, -15.508723324824603], "vvJ"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "LL"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, -10.472754063243912], ""], [[-51.27715473966572, -10.355958900117983, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "LL"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "JLL"], [[-51.27715473966572, -10.355958900117983, -51.27715473966572, -10.472754063243912, 34.07985408015267, 45.31554022015084], "POiV"], [[14, 79], "JLL"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], "LL"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 45.31554022015084], "POi"], [[25.957846772778606, -6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJvJLL"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "PvJvJLLOi"], [[34.721023127039466, -6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vvJLhOqhq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "LLvJLhvOqhqJGOc"], [[null, "", "vJLhOqhq", -86], "vJ"], [[45.31554022015084, -51.27715473966572, -10.355958900117983, -11.24647564777949, -10.472754063243912, 45.31554022015084], "vJLhOqhq"], [[-10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOhq"], [[-10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJLhOhhq"], [[-51.27715473966572, -10.355958900117983, -10.472754063243912, 34.07985408015267, 45.31554022015084], "GJGO"], [[-51.27715473966572, 45.360838150180015, -10.355958900117983, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "JLL"], [[-51.27715473966572, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [["POiV", -10.355958900117983, 79, -8.323840159169166, "JGOc"], "JGO"], [[-51.27715473966572, 33.69836348184855, -69.2423613608672, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "v"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084, -10.355958900117983], "POi"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "LLvJLhvOqhqJGOc"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], "vJvJLL"], [[-6.80022506914743, -51.27715473966572, -9.051593176986296, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], ""], [[14, 14, 14], "LJLL"], [[34.721023127039466, -6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vvJLhOqhq"], [[-51.27715473966572, -10.472754063243912, 34.07985408015267, 45.31554022015084], "JLL"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.611106744609591, 34.07985408015267, -69.2423613608672], "vJL"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqOq"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084], "vJLhhOqhq"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.611106744609591, 34.07985408015267, -69.2423613608672], "vJLL"], [[45.31554022015084, -51.27715473966572, -10.355958900117983, -11.24647564777949, -10.472754063243912, 45.31554022015084, -11.24647564777949, -11.24647564777949], "vJLhOqhq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "v"], [[-51.27715473966572, 34.07985408015267, 45.31554022015084, -15.508723324824603], "LLvJLhvOqhqJGOcLhOqhq"], [[34.07985408015267, -51.27715473966572, -10.355958900117983, -10.472754063243912, 34.07985408015267, 45.31554022015084], "GJGO"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, 34.07985408015267, 45.31554022015084, 34.07985408015267], "LLvJLLvJLhvOqhqJGOc"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, 34.07985408015267, 45.31554022015084, -10.611106744609591, 34.07985408015267], "LLvJLLvJLhvOqhqJGOc"], [[-10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084], "vJLhOOhq"], [[-51.27715473966572, -10.355958900117983, -69.2423613608672, 34.07985408015267, 45.31554022015084], "LLvJLhvJLhOqhqvOqhqJGOc"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.611106744609591, -10.472754063243912], "vJLhOhqvJLhOqhq"], [[-51.27715473966572, -10.355958900117983, -10.472754063243912, 34.07985408015267, 45.31554022015084], "GJGOGO"], [[-10.355958900117983, -69.2423613608672, -10.472754063243912, -8.212306909448763, 34.07985408015267, 45.31554022015084], "vJLhOOhq"], [[-6.80022506914743, -51.27715473966572, -6.3979421133605765, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOOLLqhq"], [[-51.27715473966572, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJvJLL"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, 25.957846772778606, -10.355958900117983, 34.07985408015267, 45.31554022015084, -10.611106744609591, -10.472754063243912], "vJLLvJLhOhqvJLhOqhq"], [[-6.80022506914743, -51.27715473966572, -6.3979421133605765, -10.355958900117983, -60.35480001031404, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[-6.80022506914743, -51.27715473966572, -69.2423613608672, -53.93069976413123, -10.472754063243912, 34.07985408015267, 45.31554022015084, -69.2423613608672], ""], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -11.24647564777949, -10.472754063243912, 45.31554022015084, -10.355958900117983], "PvvJOi"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267, 34.07985408015267], "JGO"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267, 38.28990847119975], "vJL"], [[-51.27715473966572, -5.763487757578141, 33.69836348184855, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267, 34.07985408015267, 34.07985408015267], "JGO"], [[14, 14, 14], "vJLhOOhq"], [[-51.27715473966572, 33.69836348184855, -8.323840159169166, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vJLhOOhq"], [[-51.27715473966572, -8.323840159169166, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 45.360838150180015, 34.07985408015267], "vJvJLL"], [[-10.355958900117983, -69.2423613608672, -8.212306909448763, 34.07985408015267, 45.31554022015084], "JGOc"], [[null, "", -86, "vJLhOqhq", -86], "vJ"], [[-51.27715473966572, -69.2423613608672, -10.472754063243912, -8.323840159169166, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vvJ"], [[-51.27715473966572, 33.69836348184855, -69.2423613608672, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267, -8.323840159169166], "vJL"], [[-51.27715473966572, 33.69836348184855, -69.2423613608672, -8.323840159169166, -69.2423613608672, -10.472754063243912, 34.07985408015267, 45.31554022015084, 34.07985408015267], "vvJL"], [[-51.27715473966572, -10.355958900117983, -69.07470488220116, 34.07985408015267, 45.31554022015084, -10.472754063243912], "vJLhOqhq"], [[-6.80022506914743, -51.27715473966572, -10.355958900117983, -69.2423613608672, -10.472754063243912, 34.07985408015267], "LJLL"]], "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n"}
{"task_id": "Mbpp/790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n", "entry_point": "even_position", "canonical_solution": "\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "base_input": [[[3, 2, 1]], [[1, 2, 3]], [[2, 1, 4]]], "atol": 0, "plus_input": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]], [[2, 7, 4, 9, 6, 12, 8]], [[2, 1, 4, 6, 8, 2, 10, 12]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 4, 6, 8, 10, 12]], [[1, 3, 5, 7, 9, 11, 13]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 11, 13]], [[1]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]], [[1, 2, 4, 6, 2, 10, 12]], [[2, 1, 4, 3, 7, 6, 5, 8, 7, 10, 9]], [[2, 10]], [[2, 1, 4, 3, 6, 5, 8, 7, 8, 10, 11, 13]], [[2, 7, 4, 9, 20, 6, 12, 8, 2, 2]], [[3, 11, 10, 11, 10]], [[2, 1, 4, 3, 6, 5, 9, 8, 7, 8, 10, 11, 13, 10]], [[1, 2, 4, 6, 21, 2, 10, 12]], [[1, 4, 3, 6, 5, 8, 7, 8, 10, 11, 13, 3]], [[2, 7, 5, 9, 6, 12, 8, 12]], [[2, 7, 4, 9, 20, 6, 12, 8, 2, 2, 4, 4]], [[1, 10]], [[1, 2, 4, 8, 10, 12, 8]], [[2, 7, 5, 4, 9, 20, 6, 12, 8, 2, 2]], [[1, 2, 3, 0, 4, 5, 6, 5, 2]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 2, 2]], [[18, 1, 2, 4, 6, 8, 9, 12]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 11, 13, 2, 8]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 7, 2, 2]], [[1, 2, 4, 6, 2, 10, 9]], [[1, 2, 8, 4, 6, 2, 10, 9, 4]], [[2]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 11, 13, 2, 8, 6]], [[1, 2, 4, 22, 6, 8, 10, 12, 18, 6]], [[2, 1, 4, 3, 6, 5, 9, 8, 7, 8, 10, 11, 13, 10, 6]], [[2, 1, 4, 3, 6, 5, 8, 10, 11, 13]], [[1, 2, 4, 6, 10, 9]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 7, 2, 7]], [[9]], [[1, 7, 2, 4, 22, 6, 8, 10, 12, 18, 6]], [[1, 1, 4, 3, 6, 5, 8, 7, 10, 11, 13, 2, 8, 6, 1, 2]], [[3, 11, 10, 11, 10, 10]], [[2, 7, 4, 9, 20, 6, 12, 8, 2, 2, 7]], [[1, 2, 4, 6, 2, 10, 12, 1]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 11, 2, 8, 6]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 6]], [[7, 2]], [[2, 4, 2, 10, 12, 1]], [[1, 3, 5, 7, 9, 11, 0]], [[1, 2, 4, 6, 21, 2, 10, 12, 1]], [[2, 7, 5, 9, 22, 8, 12]], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 29]], [[2, 1, 4, 2, 6, 1, 8, 10, 1, 12, 1]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 7, 2, 2, 7]], [[2, 1, 4, 3, 5, 8, 7, 10, 9]], [[6, 2, 6, 6]], [[2, 12, 7, 29, 4, 9, 20, 18, 6, 12, 8, 7, 2, 2, 13, 7]], [[25, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 7, 2, 2]], [[1, 3, 5, 7, 9, 11, 13, 13, 7]], [[2, 7, 5, 9, 22, 8, 12, 22, 2]], [[2, 7, 5, 4, 9, 20, 18, 6, 12, 8, 2, 2]], [[1, 2, 4, 6, 2, 10, 12, 10]], [[2, 1, 4, 3, 7, 6, 5, 8, 7, 8, 10, 9]], [[2, 1, 4, 3, 6, 5, 9, 8, 8, 10, 11, 13, 10]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 7, 2, 2, 7, 7]], [[1, 3, 5, 7, 9, 11]], [[6, 6, 6, 6]], [[2, 7, 5, 4, 9, 20, 13, 6, 12, 8, 2, 2]], [[2, 1, 4, 3, 6, 5, 8, 7, 10, 11, 13, 2, 12, 8]], [[2, 7, 5, 4, 9, 20, 18, 6, 12, 8, 2, 2, 2]], [[2, 7, 9, 12, 8, 13]], [[1, 2, 4, 6, 15, 2, 12, 10]], [[6, 6, 6, 6, 6]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 2, 2, 20]], [[1, 15, 4, 8, 10, 12, 8]], [[2, 1, 3, 6, 5, 9, 8, 4, 8, 11, 13, 10]], [[2, 2, 4, 6, 21, 2, 10, 12, 1]], [[18, 1, 2, 4, 6, 8, 9, 12, 8]], [[1, 2, 4, 6, 2, 10, 12, 10, 10]], [[2, 7, 5, 22, 9, 6, 13, 8, 12, 8]], [[19, 21, 2, 3, 0, 4, 5, 6, 5, 2]], [[]], [[2, 1, 4, 6, 8, 2, 10, 2, 12]], [[12, 7, 5, 9, 20, 18, 6, 12, 8, 7, 2, 2]], [[2, 1, 4, 3, 7, 6, 5, 8, 7, 29, 8, 9]], [[1, 3, 23, 7, 9, 11, 13]], [[2, 1, 4, 2, 6, 1, 8, 10, 1, 9, 12, 1, 9]], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 20, 25, 27, 29]], [[1, 3, 5, 7, 9, 11, -1]], [[1, 3, 5, 9, 11, 13, 13, 7, 5, 7, 1]], [[2, 12, 7, 4, 9, 20, 18, 6, 12, 8, 7, 2, 7]], [[1, 2, 6, 4, 8, 10, 12, 8, 2]], [[1, 2, 7, 6, 4, 8, 10, 12, 8]], [[2, 1, 4, 3, 7, 6, 5, 8, 7, 10, 29, 9]], [[2, 4, 10, 12, 19, 19]], [[3, 11, 29, 10, 11, 10, 10]], [[2, 3, 4, 3, 6, 4, 5, 8, 7, 10, 9]], [[2, 1, 3, 6, 5, 9, 8, 8, 11, 13, 10, 10]], [[2, 1, 19, 3, 7, 6, 5, 8, 7, 29, 8, 9]], [[2, 7, 9, 12, 8, 12]], [[6, 6, 6, 6, 4, 6]], [[2, 4, 6, 2, 10]], [[1, 7, 4, 9, 20, 6, 12, 8, 2, 2]], [[1, 2, 4, 22, 6, 8, 10, 12, 18, 10]], [[2, 12, 7, 5, 4, 9, 20, 18, 6, 12, 8, 8, 2, 2]], [[2, 7, 5, 9, 22, 8, 27, 12, 22, 2]], [[2, 7, 5, 2, 4, 9, 20, 6, 12, 8, 2, 2]], [[6, 6, 6]], [[1, 6, 3, 5, 7, 9, 11, 0]], [[3, 11, 29, 10, 11, 10, 10, 10]]], "contract": "\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True\n"}
{"task_id": "Mbpp/791", "prompt": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n", "entry_point": "remove_nested", "canonical_solution": "\ndef remove_nested(test_tup):\n  return tuple(e for e in test_tup if not isinstance(e, tuple))\n", "base_input": [[[1, 5, 7, [4, 6], 10]], [[2, 6, 8, [5, 7], 11]], [[3, 7, 9, [6, 8], 12]], [[3, 7, 9, [6, 8], [5, 12], 12]]], "atol": 0, "plus_input": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[1, 2, 3, 4]], [[]], [[1, 5, 7, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12]]], [[[], [], [[], []]]], [[[1, 2, [[3, 4], 5]], [[6, 7, []], 8]]], [[[1, 2], [3, 4], [5, 6], [[7, 8], [9, 10], [11, 12]], [[[13, 14], 15], 16], [17, 18, [19, 20]]]], [[[[1, [2, 3], 4], 5], [[[6, 7], 8], 9], [[10, 11], 12, [13, [14, 15]]], [16, 17], [18, [], 19, 20]]], [["BBeujUUS", "", "cHImXR", "BeujUUS"]], [[1, 5, 7, [[4, 6], 3], [10, 3], [10, 2], [[8, [14, 10]], 12], 1]], [[[], [[], []]]], [[[], [], [[], []], [[], []]]], [[[1, 2, [[3, 4], 5]]]], [["iaZtoqM", -15, 55]], [[2, 6, [[6, 3]], 8, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[1, 5, 7, [[4, 6], 3], [10, 3], [10, 2], [[8, [14, 10]], 12], 1, [10, 3]]], [[2, 6, [[6, 3]], 8, [5, 7], 11, [[6, 4], [6, 3]], [[2, 9], [6, 3]], 4, [[6, 3]]]], [["BBeujUUS", "", "cHImXR", "BeujUUS", ""]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, [5, 7]]], [["iaZtoqM", 55, -15, 55]], [[[], [[], [], []], [], [[], []]]], [[[[], []]]], [[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4, 6]], [[2, 20, [[6, 3]], 8, [5, 7], 11, 4]], [[2, 7, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, [5, 7]]], [[[], [], [[], []], []]], [[14, 6, [[6, 3]], 8, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[[], [[], [], [], []], ["iaZtoqM", "pm", "iaZtoqM", "wOkCgN", "oQjO", "BBeujUUS", "HjLKztlzPf", "BeujUUS", "", ""], [], [[], []]]], [[1, 5, 7, [[15, 6], 3], [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], [[8, [14, 10]], [8, [14, 10], [14, 10]], 12], [[4, 6], 3]]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, [5, 7], [5, 7]]], [[[], [], [[], []], [[]]]], [[[{"9": true, "1": true, "21": true, "32": false, "2": true, "-44": true}, "BBeujUUS", -39.29936222397124, true, [81], "hTiPAxILj", -38.17279241711651, 15.51245915461675], [[], [], []], [], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [[], []]]], [[[{"9": true, "1": true, "21": true, "32": false, "2": true, "-44": true}, "BBeujUUS", -39.29936222397124, true, [81], "hTiPAxILj", -38.17279241711651, 15.51245915461675], [[], [], []], [], [[], []]]], [[5, 7, 6, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12]]], [[2, 6, 20, 16, [5, 7], 11, [[2, 9], [6, 3]], 4, [5, 7]]], [[[1, 2, 1, [[3, 4], 5]], [[6, 7, []], 8]]], [["iaZtoqM", 55]], [[[10, 10, 2], 5, 7, 6, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], [[4, 6], 3]]], [[[1, 2], [3, 4], [5, 6, 5], [[[13, 14], 15], 16], [17, 18, [19, 20]]]], [[5, 7, 6, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], 6]], [[[], [[], [], [], []], ["iaZtoqM", "pm", "iaZtoqM", "wOkCgN", "oQjO", "BBeujUUS", "HjLKztlzPf", "BeujUUS", "", ""], [[], []]]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, 6]], [[2, 10, 20, 16, [5, 7, 7], 11, [[2, 9], [6, 3]], 4, [5, 7]]], [[[1, 2, [[3, 4]]], [1, 2, [[3, 4], 5]]]], [[[], [], [[]], []]], [[[1, 2], [3, 4], [5, 6, 5, 5], [5, 6, 5], [[[13, 14], 15], 16], [17, 18, [19, 20]]]], [[[[], [], []], [50, 80, -9, 12, 100, -66], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [[], []]]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, 6, 20]], [[1, 5, 6, 7, [[4, 6], 3], [10, 3], [10, 2], [[8, [14, 10]], 12], 1, [10, 3], 5]], [[[1, 2, 1, [[3, 4], 5]], [[6, 7, []], 8, 8]]], [[1, 5, 7, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], [[4, 6], 3]]], [[[[], [], []], [50, 80, -9, 12, 100, -66], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [50, 80, -9, 12, 100, -66, 12], [[], []]]], [[[[], [], []], [50, 80, -9, 12, 100, -66], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [50, 80, -9, 12, 100, -66, 12], [[], [], []], [[], []], [[], [], []]]], [[9, "iaZtoqM", -15, 55]], [[1, 5, 7, [[4, 6], 3], [10, 3], [10, 2], 8, 1]], [[1, 5, 7, [[15, 6], 3], [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], [[4, 6], 3, [4, 6]], [[8, [14, 10]], [8, [14, 10], [14, 10]], 12], [[4, 6], 3]]], [[[45, 81, 83, 83, 24, 4, -32], [[], []]]], [[[], [], [], [[], []], [[]]]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, 6, 20, 11]], [[[{"9": true, "1": true, "21": true, "32": false, "2": true, "-44": true}, "BBeujUUS", -39.29936222397124, true, [81], "hTiPAxILj", -38.17279241711651], [[], [], [], []], ["jGdwijsq", "xbjajBrxs", "iaZtoqM", "gBXqaucn"], [], [[], []]]], [[1, 1, 7, [[4, 6], 3], [10, 3], [10, 2], 8, 1]], [[5, 7, 6, [[4, 6], 3], [10, 2], [[8, [14, 10]]]]], [[[[], [], []], [50, 80, -9, 12, 100, -66], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [[], []]]], [[14, 6, [[6, 3]], 12, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[5, 7, 7, 6, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12]]], [[[1, 2], [5, 6], [[7, 8], [9, 10], [11, 12]], [[[13, 14], 15], 16], [17, 18, [19, 20]]]], [[8, 5, 6, 7, [[4, 6], 3], [10, 3], [10, 2], [[8, [14, 10]], 12], 1, [10, 3], 5]], [[14, 6, [[6, 3]], 10, 12, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[[1, 2, 1], [[6, 7, []], 8]]], [[[1, 2], [3, 4], [5, 6], [[[13, 14], 15], 16], [17, 18, [19, 20]]]], [[[]]], [["", "cHImXR", "BeujUUS"]], [[[17, 18, [19, 20]], [1, 2], [3, 4], [5, 6, 5], [[[13, 14], 15], 16], [17, 18, [19, 20]], [5, 6, 5]]], [[[10, 10, 2], 5, 6, 17, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], [[4, 6], 3]]], [[[1, 2, 1, [[3, 4], 5]], [[6, 7, []], 8], [[6, 7, []], 8, 8]]], [[8, 5, 6, 7, [10, 3], [10, 2], [[8, [14, 10]], 12], 1, [10, 3], 5]], [[[[], [], []], [50, 80, -9, 12, 100, -66], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [50, 80, -9, 12, 100, -66, 12], [[], []], [[], []]]], [[2, 6, 20, [5, 7], 11, [[2, 9], [19, 2, 9], [6, 3]], 4, [5, 7], [5, 7]]], [[2, 6, [7], 11, [[2, 9], [6, 3]], 4, 6]], [[false, true, true, false, false, false, false, false]], [[[17, 18, [19, 20]], [1, 2], [3, 4], [5, 6, 5], [[[13, 14], 15], 16], [17, 18, [19, 20]], [3, 4, 3], [5, 6, 5]]], [[14, 5, [[6, 3]], 8, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[5, 7, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], 6]], [[2, [5, 7], 11, [[2, 9], [6, 3]], 4, 6, 4]], [[2, 6, 20, [5, 7], 11, [[2, 9], [6, 3]], 4, 6, [5, 7], [5, 7]]], [[[], [], [], [[], [], []], [[]]]], [[[], [[], [], [], []], ["iaZtoqM", "pm", "iaZtoqM", "wOkCgN", "oQjO", "BBeujUUS", "HjLKztlzPf", "BeujUUS", "", ""], [], [[], []], []]], [[[{"9": true, "1": true, "21": true, "32": false, "2": true, "-44": true}, "BBeujUUS", -39.29936222397124, true, [81], "hTiPAxILj", -38.17279241711651, 15.51245915461675], [[], [], []], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM", "HjLKztlzPf"], [], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [[], []]]], [[2, 6, 20, [5, 7], [[2, 9], [6, 3]], 4]], [[[{"9": true, "1": true, "21": true, "32": false, "2": true, "-44": true}, "BBeujUUS", -39.29936222397124, true, [81], "hTiPAxILj", -38.17279241711651, 15.51245915461675], [[], [], []], ["KyvQyRlC", "ggsHGhlSj", "HjLKztlzPf", "tdmtNqM", "", "jGdwijsq", "xbjajBrxs", "oQjO", "upscQa", "iaZtoqM"], [[], []]]], [[[], [[], [], [], []], ["iaZtoqM", "pm", "iaZtoqM", "wOkCgN", "oQjO", "BBeujUUS", "HjLKztlzPf", "BeujUUS", "", ""], [], [[], []], [[], []]]], [[[1, 2], [3, 4], [5, 83, 5], [5, 6, 5, 5], [5, 6, 5], [[[13, 14], 15], 16], [17, 18, [19, 20]], [5, 83, 5]]], [["", "cHImXR", "BeujUUS", ""]], [[2, 20, [[6, 3]], 8, [5, 7], 11, 7, 4]], [[[], [[], [], []], [], [[], []], [[], [], []]]], [[[], [[], [], []], [], [[], []], [[], [], []], [[], [], []]]], [[[], [], [], [[], []]]], [[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3], [2, 9]], 4, 6]], [[2, 6, [[6, 3]], 8, [5, 7], 11, [[6, 4], [6, 3]], [[2, 9], [6, 3]], 4, [[6, 3], [6, 3]], 4]], [[2, 6, 20, [5, 7], 11, [[2, 9], [19, 2, 9], [6, 3]], 4, [5, 7]]], [[1, 5, 7, [[4, 6], 3], [10, 3], [10, 2], 1, [10, 3, 3]]], [["gBXqaucn", "BBeujUUS", "", "cHImXR", "BeujUUS", "BeujUUS"]], [[8, 5, 6, 7, [[4, 6], 3], [10, 3], [10], [[8, [14, 10]], 12], 1, [10, 3], 5]], [[6, [5, 7], [[2, 9], [6, 3]], 4]], [[14, 6, 10, 12, [5, 7], 11, [[2, 9], [6, 3]], 4]], [[5, 7, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12]]], [[5, 7, 7, 6, [[4, 6], 3], [10, 2], [[8, [14, 10]], 12], [[4, 6], 3]]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n"}
{"task_id": "Mbpp/792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n", "entry_point": "count_list", "canonical_solution": "\ndef count_list(input_list): \n    return sum(isinstance(e, list) for e in input_list)\n", "base_input": [[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1, 2], [2, 3], [4, 5]]], [[[1, 0], [2, 0]]]], "atol": 0, "plus_input": [[[[1, 2]]], [[]], [[[1]]], [[[1, [2, [3, 4]]]]], [[[[1, 2, 3], [4, 5, [6, 7, [8, 9]]]]]], [[[[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, [2, [3]]], [4, [5, [6]]]]]], [[[[1], [2], [3]], [[4], [5]], [[6], [7], [8], [9]]]], [[[[[[1, 2]]]]]], [[[[[[[[[1, 2, 3]]]]]]]]], [[[[4, 5, [6, 7, [8, 9]]]]]], [[2, 3, [4, [5, [6, [7, [8, 9]]]]]]], [[1, [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[1, 0]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[true, null, false, "obIluFKJh", null, "HHSVQOINN", "HHSVQOINN"]], [[[[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[2, 4, 3, [4, [5, [6, [7, [8, 9]]]]]]], [[[[1], [2], [3]], [[4], [5]], [[6], [7], [8], [9]], [[6], [7], [8], [9]]]], [[[[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[2, 3, [4, [5, [6, [7, [8, 9]]]]], [4, [5, [6, [7, [8, 9]]]]]]], [[[[5], [5]]]], [[[[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[[[1, [2], [2]], [1, [2], [2]]], [[1, [2], [2]], [1, [2], [2]]]]], [[[[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]]]], [[[[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]], [[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]]]], [[[14], [14]]], [[[[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[[1, 3], [4, 5, [6, 7, [8, 9]]]]]], [[[[15, 16, [17, 18, [19, 20]]]], [[15, 16, [17, 18, [19, 20]]]], [[15, 16, [17, 18, [19, 20]]]]]], [[[[2, [3, 4]]], [[2, [3, 4]]]]], [[[[5]]]], [[[[6], [7], [8], [9], [6]], [[1], [2], [3]], [[4], [5]], [[6], [7], [8], [9], [6]], [[6], [7], [8], [9], [6]]]], [[[[1, 2, 3, 2], [1, 2, 3, 2], [4, 5, [6, 7, [8, 9]]]]]], [[[[[[1, 2]]], [[[1, 2]]]], [[[[1, 2]]], [[[1, 2]]]]]], [[[[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[1], [1]]], [[[[[[1, 2]]], [[[1, 2]]]], [[[[1, 2]]], [[[1, 2]]]], [[[[1, 2]]], [[[1, 2]]]]]], [[[[1, [2, [3]]], [4, [5, [6]]]], [[1, [2, [3]]], [4, [5, [6]]]]]], [["obIluFKJh", "HHSVQOINN"]], [[2, [4, [5, [6, [7, [8, 9]]]]]]], [[-10.342467253952691, -91.98145901709941]], [[[[2, [3, 4]]], [[2, [3, 4]]], [[2, [3, 4]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[2, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 1, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[16, 19, 99, -25, 3, -100, 11]], [[[[15, 16, [17, 18, [19, 20]]]], [[15, 16, [17, 18, [19, 20]]]]]], [[[], [], [], []]], [[[[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]], [[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]], [[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]]]], [[2, 3, [[[6, [7, [8, 9]]]]], [[[6, [7, [8, 9]]]]], 2]], [[[true, false, true, false, true, false, true], [], [], []]], [[[[2, [3, 4]], [2, [3, 4]]], [[2, [3, 4]], [2, [3, 4]]]]], [[[1, 1], [1, 1]]], [[[1, 1], [1, 1], [1, 1]]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[[47.25172202541427, -91.98145901709941, -91.98145901709941, -10.342467253952691, -91.98145901709941, -10.342467253952691, -10.342467253952691, -10.342467253952691], []]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]], 16]]]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[]]], [[[[0], [0], [0]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[[4, 1, 3], [4, 5, [6, 7, [8, 9]]], [4, 1, 3]], [[4, 1, 3], [4, 5, [6, 7, [8, 9]]], [4, 1, 3]]]], [[[[1], [2], [3], [2]], [[4], [5]], [[6], [7], [8], [9]]]], [[[2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]]], [[[[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]]]]], [[[[4], [5], [4]], [[1], [2], [3], [2]], [[4], [5], [4]], [[6], [7], [8], [9]], [[1], [2], [3], [2]]]], [[[true, false, true, false, true, false, true], ["HHSVQOINN", "obIluFKJh", "obIluFKJh", "qzJktrue, null], [], [], []]], [[[], [], [true, null], [], [18, 0, -63, 9, 6, 3, 20, -63, 4, 60], [], [], []]], [[[true, false, true, false, true, false, true, true], [], [], [true, false, true, false, true, false, true, true], []]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[[4], [5], [4]], [[1], [], [3], [], []], [[4], [5], [4]], [[6], [7], [8], [9]], [[1], [], [3], [], []]]], [[0]], [[true, null, false, null, "HHSVQOINN", "HHSVQOINN"]], [[[[[2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]], [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 20, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]], [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[47.25172202541427, -91.98145901709941, -91.98145901709941, -11.162037698096084, -91.98145901709941, -10.342467253952691, -10.342467253952691, -10.342467253952691], [], [], [], [47.25172202541427, -91.98145901709941, -91.98145901709941, -11.162037698096084, -91.98145901709941, -10.342467253952691, -10.342467253952691, -10.342467253952691]]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[true, null, false, "obIluFKJh", null, "HHSVQOINN", "HHSVQOINN", false]], [[[[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]], [[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]], [[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]], [[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]]]], [[["qQtdzvurOO", "qzJk", "HHSVQOINN", "qQtdzvurOOqzJk", "y", "HHSVQOINN", "HHSVQOINN"], ["qQtdzvurOO", "qzJk", "HHSVQOINN", "qQtdzvurOOqzJk", "y", "HHSVQOINN", "HHSVQOINN"], []]], [[[[1, 3], [4, 5, [6, 7, [8, 9]]]], [[1, 3], [4, 5, [6, 7, [8, 9]]]]]], [[2, 4, 2, [4, [5, [6, [7, [8, 9]]]]]]]], "contract": "\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\n"}
{"task_id": "Mbpp/793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n", "entry_point": "last", "canonical_solution": "\ndef last(arr,x):\n    return len(arr)-arr[::-1].index(x) - 1\n", "base_input": [[[1, 2, 3], 1], [[1, 1, 1, 2, 3, 4], 1], [[2, 2, 3, 3, 6, 8, 9], 3]], "atol": 0, "plus_input": {}, "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n"}
{"task_id": "Mbpp/794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n", "entry_point": "text_starta_endb", "canonical_solution": "\nimport re\ndef text_starta_endb(text):\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n", "base_input": [["aabbbb"], ["aabAbbbc"], ["accddbbjjj"]], "atol": 0, "plus_input": [[""], ["xyz123"], ["ab"], ["aabb"], ["xaabbyz123"], ["xaabbyz1323"], ["axyz123bb"], ["xaabbyz1323ababb"], ["xaabbyzxaababyz1323ababb123"], ["aabaabbb"], ["aBXGdUCk"], ["aaxyz123bbxyz123bb"], ["aBXbdUk"], ["xaabbyz1323ababbb"], ["xaabbyz1323ababbaaxyz123bbxyz123bb"], ["xaabbya1bxaabbyz1323ababbz123"], ["xaabxaabbyz1231323ababb123"], ["xaabbyz1z23"], ["aaxyaaxyz123bbxyz123bbz12ab3bbxyz123bb"], ["xaabbyzxaxaabbyz123ababyz1323ababb1323"], ["xaabxaabbyz1231323abab2b123"], ["aaxyaaxyz123bbxyz1223bbz12ab3bbxyz123bb"], ["abxaabbya1bxaabbyz1323ababbz123"], ["aaab"], ["xaabxaabbyz1231323ababbb123"], ["a"], ["xaabxaabbyz1231a323ababb123"], ["aab"], ["aaxyaaxyz123bbxyz123xyz123bbz12ab3bbxyz123bb"], ["aaaaabxyz123bbxyz123bba"], ["aaxyaaxyz123bbxyz1b223bbz12ab3bbxyz123bb"], ["xaabxaa3bbyz1231323ababb123"], ["aaxyaaxyz1aabyz123bb"], ["xaabxaa3bbyz1231aaxyaaxyz123bbxyz1223bbz12ab3bbxyz123bb323ababb123"], ["xaabbyz1323ababbaaxyz123bbxbyz123bb"], ["aBXbdk"], ["xaaabbyz1323ababbaaxyz123bbxbyz123bb"], ["aaxyaaxyz123bbxyz12xyz1233xyz123bbz12ab3bbxyz123bb"], ["ababaabbb"], ["aaxyaaxyz123bbxyz123bbz12ab3bbxyzxaabbyz1z23123bb"], ["xaaabbyz1323ababbbyz123bb"], ["xaabbyazxaababyz1323ababb123"], ["aabbabb"], ["aBXbdUxaabbya1bxaabbyz1323ababbz123k"], ["xaaxyz123bbbb"], ["xaabbayababb"], ["xaabbya1bxaabbxaabbyz1323ababbz1323ababbz123"], ["aabaaaxyaaxyz123bbxyz12xyz1233xyz123bbz12ab3bbxyz123bbabbb"], ["xaabbyzxaxaaxaabxaabbyz1231a323ababb123bbyz123ababyz1323ababb1323"], ["aaaxyaaxyz123bbxyz123bbz12ab3bbxyz123bbabbabb"], ["aSLQ"], ["xaaabbyz1323aaaxyaaxyz123bbxyz123bbz12ab3bbxyz123bbbabbaaxyz123bbxbyz123bb"], ["xaabbyzxaabbyazxaababyz1323ababb123xaxaabbyz123ababyz1323ababab1323"], ["xaabbya1bxaabbxaabbyz1323ababbz1323ababbxaabbyzxaabbyazxaababyz1323ababb123xaxaabbyz123ababyz1323ababab1323123"], ["aabaaaxyaaxyz123bbxyz12xyz1233xyz123bbz12ab3bbaabaaaxyaaxyz123bbxyz12xyz1233xyz123bbz12ab3bbxyz123bbabbb"], ["aaaaabxyz123bbxyz12aaxyaaxyz123bbxyz123bbz212ab3bbxyzxaabbyz1z23123bbbba"], ["aBXGdUCkaabbabb"], ["aBXGdUCkaabbbabb"], ["aaxyaaxyz123bbxyz1223bbz12ab3bbxyz1231bb"], ["aaxyaaxyz123bbxyz1xaaabbyz1323ababbaaxyz123bbxbyz123bbb223bbz12ab3bbxyz123bb"], ["xaabbyyzxaababyz1323ababb123"], ["b"], ["aaaaab"], ["aaxyaaxyz123bbxyz1xaaabbyz1323ababbaaxyz123bbxbyyz123bbb223bbz12ab3bbxyz123bb"], ["zAxZKNA"], ["aaaaabxyzxaabbyzxaabbyazxaababyz1323ababb123xaxaabbyz123ababyz1323ababab1323123bbxyz123bba"], ["xaabbxaabbya1bxaxaabbya1bxaabbyz1323ababbz123abbxaabbyz1323ababbz1323ababbxaabbyzxaabbyazxaababyz1323ababb123xaxaabbyz123ababyz1323ababab1323123yz1323"], ["xaabbya1bxaabbyz1323ababbz12xaabxaabbyz1231323ababb123"], ["xaabbbyyzxaababyz1323ababb123"], ["xaaabbyz1323ababbbyzaaabbbb"], ["xaabbyz1323ababbaaxyz123bybxyz123bb"], ["xaaxyz123bbb"], ["aaaaxyaaxyz123bbxyz1223bbz12ab3bbxyz1231bbbb"], ["xaabxaa3bbyz1231aaxyaaxyz123bbxyz1223bbz12ab3bbxyz12a3bb3x23ababb123"], ["aaxyaaxyz123bbxyz123bbz12ab3bbxyz12b3bb"], ["xaabbya1bxaabbyz1323ababbz12xaabxaabbyz1231323ababbaBXbdUk3"], ["xa2axyz123bbb"], ["aaxyaaxyz123bbxyz1223bbz12b3bbxyz12xaabbyyzxaababyz1323ababb1233bb"], ["LaSL"], ["aaaaxyaaxyz123bbxyz1223bbz12ab3bbxyz123bbb"], ["xaabbya1bxaabbxaabbyz1323ababbz1323ababbxaabbyzxaabbyazxaababyz1323ababb123xaxaabaaxyaaxyz123bbxyz1xaaabbyz1323ababbaaxyz123bbxbyz123bbb223bbz12ab3bbxyz123bbbyz123ababyz1323ababab1323123"], ["aabaaaxyaaxyz123bbxyz12xyzbbb"], ["xaaabbyzxaxaabbyz123ababyz1323ababb1323"], ["xaxaabbya1bxaabbyz1323ababbz123z123bbbb"], ["xaabbya1bxaabbyz1323ababbz12xaabxaabbyz1231323ababbaBXbdUk3ayababb"], ["axyxz123bb"], ["xaabbyzxaabbyazxaabaabyz1323ababb123xaxaabbaxyz123bbyz123ababyz1323ababab1323"], ["aabaaabbb"], ["axaabbyz1z23aaBXGdUGCkaabbbabbbb"], ["xaabbyzxaababyz1323abbabb123"], ["abxaabbybbyz132a3ababbz123"], ["aaxyaaxyz123bbxyz1223bbz12b3bbxyz12xaabbyyxaabxaabbyz1231323abab2b123zxaababyz1323ababb1233bb"], ["aabaaaxyaaxyz123bbxyz12xyz1233xyzaabbabb123bbz12ab3bbxyz123bbabbb"], ["aBXGdUCkaaabbabb"], ["xaaabbyz1323ababbaaxyz12bbb"], ["xaabbyzxaabbyazxaababyz132aabaaaxyaaxyz123bbxyz12xyz1233xyzaabbabb123bbz12ab3bbxyz123bbabbb3ababb123xaxaabbyz123ababyz1323ababab1323"], ["aaxyaaxyz123bbxyz123bbzxyz12b3bb"], ["aBxaabxaabbyz1231323ababbb123XGdUCk"], ["abaaxyaaxyz123bbxyz1b223bbz12ab3bbxyz123bbabaabbb"], ["aaaaabxyzxaabbyzxaabbyazxaababyz1323ababb123xaxaabbyz123ababyz1323ababab1323123bbxyz123bbaaSLQ"], ["xaabbyzxaxaaxaabxxaaabbyz1323ababbbyzaaabbbbaabbyz1231a323ababb123bbyz123ababyz1323ababb1323"], ["axaabbya1bxaabbyz1323ababbz12xaabxaabbyz1231323ababb123xaabbyz1z23aaBXGdUGCkaabbbabbbb"], ["xaaaxyaaxyz123bbxyz123bbz12ab3bbxyzxaabbyz1z23123bbabbyz123"]], "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")\n"}
{"task_id": "Mbpp/796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n", "entry_point": "return_sum", "canonical_solution": "\ndef return_sum(d):\n  return sum(d.values())\n", "base_input": [[{"a": 100, "b": 200, "c": 300}], [{"a": 25, "b": 18, "c": 45}], [{"a": 36, "b": 39, "c": 49}]], "atol": 0, "plus_input": [[{}], [{"a": 1000000, "b": 999999, "c": 1000001}], [{"a": 1000000000, "b": 2000000000, "c": 3000000000}], [{"b": 2000000000, "c": 3000000000}], [{"a": 1000000, "b": 999999}], [{"a": 1000000000, "b": 999999}], [{"b": 1999999999, "c": 1000001, "": 3000000000}], [{"a": 1000000, "b": 999998, "c": 1000001}], [{"": 3000000000, "c": 2000000000}], [{"a": 1000000000, "b": 1000000000, "c": 3000000000}], [{"a": 1000001, "b": 999999}], [{"a": 1000000, "c": 1000001}], [{"a": 1000000, "b": 999999, "c": 1000001, "": 1999999999}], [{"b": 2000000000}], [{"a": 1000000, "b": 999999, "c": 2999999999}], [{"a": 999999, "b": 999998, "c": 1000001}], [{"a": 999999, "b": 2000000000, "c": 1000001, "": 3000000000}], [{"a": 999999, "b": 1000002, "c": 1000001, "": 3000000000}], [{"b": 999999, "c": 1000001}], [{"c": 1000000000, "a": 1000000000}], [{"b": 2000000000, "": 2000000000}], [{"a": 1000000, "b": 999999, "c": 1000001, "": 999998}], [{"a": 1000000000}], [{"b": 1000002, "c": 1000001, "": 3000000000}], [{"a": 2999999999, "b": 2000000000, "c": 1000001, "bb": 3000000000}], [{"a": 1000001, "b": 999998, "c": 1000001}], [{"a": 999999, "b": 999998, "c": 1000000, "bb": 1000001}], [{"a": 1000000000, "b": 999999, "": 1000000000}], [{"a": 1000001, "c": 2999999999}], [{"b": 999998, "c": 999998}], [{"a": 1000000001}], [{"b": 999998, "": 1000000000}], [{"a": 1000000, "b": 999999, "c": 1000001, "": 999999}], [{"-74.66033573549664": 3000000000, "40.06660936473111": 16, "3.5240647102472593": 93, "-36.90905808979343": 26, "-88.03974519895088": 36, "4.283511885784776": 1999999999, "90.27479950111882": -10, "27.153580187375766": 49, "75.20584319153858": -71, "-65.82670218861853": -82}], [{"a": 999999, "b": 999998, "c": 1000000, "bb": 1000001, "cc": 999998}], [{"-74.66033573549664": 3000000000, "40.06660936473111": 16, "3.5240647102472593": 93, "-36.90905808979343": 26, "-88.03974519895088": 36, "4.283511885784776": 16, "90.27479950111882": -10, "27.153580187375766": 49, "75.20584319153858": -71, "-65.82670218861853": -82}], [{"b": 2000000000, "": 999999}], [{"b": 1000002, "": 3000000000}], [{"b": 2000000000, "c": 3000000000, "cc": 1000000001}], [{"a": 999999, "b": 999998, "": 3000000000, "cca": 3000000000}], [{"a": 1000001, "b": -10, "": 1000000}], [{"c": 2999999998}], [{"b": 16}], [{"-6.592133142656678": -74.66033573549664, "4.283511885784776": 29.179082806283958, "96.95801895498732": -63.94902533164137, "-43.659979177568474": -80.16037131046572, "-43.89754125964028": -88.34305526116584}], [{"a": 1000002, "b": 999998, "c": 1000001, "cc": 1000000}], [{"b": 999998, "": 1000000001}], [{"a": 1000000}], [{"a": 1000002, "b": 999998, "c": 1000001, "cc": 1000000, "": 999999}], [{"a": 1000000, "b": 999999, "c": 2999999999, "": 2999999999}], [{"-6.592133142656678": -36.90905808979343, "4.283511885784776": 29.179082806283958, "96.95801895498732": -63.94902533164137, "-43.659979177568474": -80.16037131046572, "-43.89754125964028": -88.34305526116584}], [{"b": 1000001}], [{"b": 999998, "c": 3000000000}], [{"a": 1000002, "b": 999998, "c": 1000001, "cc": 1000000, "cca": 1000002}], [{"a": 2999999999, "b": 2000000000, "c": 1000001, "bb": 3000000000, "aa": 16}], [{"b": 1999999999, "": 3000000000}], [{"b": 2999999998, "": 3000000000}], [{"-74.66033573549664": 1000001, "40.06660936473111": 16, "3.5240647102472593": 93, "-36.90905808979343": 26, "-88.03974519895088": 36, "4.283511885784776": 1999999999, "90.27479950111882": -10, "27.153580187375766": 49, "75.20584319153858": -71, "-65.82670218861853": -82}], [{"a": 1000000, "b": 999998, "c": 1000001, "cc": 1000001}], [{"a": 1000000000, "b": 2000000000, "c": 3000000000, "aa": 26}], [{"a": 1000000000, "aa": 1000000001, "cc": 1999999999}], [{"-74.66033573549664": 1000001, "40.06660936473111": 16, "3.5240647102472593": 93, "-36.90905808979343": 26, "-88.03974519895088": 36, "4.283511885784776": 1999999999, "90.27479950111882": -10, "75.20584319153858": -71, "-65.82670218861853": -82}], [{"a": 1000000002}], [{"b": 999997, "": 1000000000}], [{"a": 999999, "c": 1000001}], [{"b": 999999, "c": 1000001, "": 1000002}], [{"-74.66033573549664": 1000001, "40.06660936473111": 16, "3.5240647102472593": 93, "-36.90905808979343": 26, "-88.03974519895088": 36, "4.283511885784776": 1999999999, "90.27479950111882": -10, "27.153580187375766": 49, "75.20584319153858": -71, "-65.82670218861853": -82, "89.97296312885616": -71}], [{"a": 1000000, "c": 1000001, "ca": 999999}], [{"b": 999998, "": 1000000001, "cc": 999999}], [{"": 1000000001, "a": 1000000001}], [{"a": 1000001, "cc": 2999999999}], [{"b": 999996, "": 1000000000}], [{"b": 999998, "c": 3000000000, "": 93, "bb": 26}], [{"b": 2999999998, "cca": 999999}], [{"a": 1000000, "b": 999998, "c": 1000001, "cc": 1000001, "bb": 1000000001}], [{"b": 999999, "c": 1000001, "": 999998}], [{"96.95801895498732": 1000000002, "-88.03974519895088": 49}], [{"b": 999997, "": 1000000001}], [{"a": 1000000000, "b": 999999, "cc": 1000000001}], [{"a": 1000000, "b": 999999, "c": 1000002}], [{"a": 999996}], [{"a": 999999, "c": 1000000, "bb": 999999, "cc": 999998}], [{"a": 999999, "c": 1000000, "bb": 1000000, "cc": 999998}], [{"b": 999999, "c": 1000001, "bb": 49}], [{"b": 999999, "c": -10, "": 999998, "aa": 16}], [{"b": 1000002, "c": 999999}], [{"a": 1000000000, "b": 999999, "ccab": 1000000}], [{"4.283511885784776": 29.179082806283958, "96.95801895498732": -63.94902533164137, "-43.659979177568474": -80.16037131046572, "-43.89754125964028": -63.94902533164137}], [{"a": 999999, "c": 1000000, "bb": 999999, "cc": 999998, "aa": 999997}], [{"a": 999999, "c": 1000001, "": 3000000000}], [{"b": 16, "ca": 999999}], [{"4.283511885784776": 29.179082806283958, "96.95801895498732": -64.13993946348552, "-43.659979177568474": -80.16037131046572, "-43.89754125964028": -63.94902533164137}], [{"b": 1000000, "c": 1000001, "": 999998}], [{"a": 1000000000, "aa": 3000000000}], [{"a": 1000000, "b": 999998, "c": 1000001, "cc": 1000001, "": 1000000}], [{"-74.66033573549664": 3000000000, "40.06660936473111": 16, "3.5240647102472593": 93, "-36.90905808979343": 26, "-88.03974519895088": 36, "4.283511885784776": 1999999999, "90.27479950111882": -10, "27.153580187375766": 48, "75.20584319153858": -71, "-65.82670218861853": -82}], [{"b": 2999999998}], [{"": 999998}], [{"b": 999999}], [{"a": 999999, "c": 1000000, "bb": 999999, "cc": 48}], [{"b": 1000002, "": 3000000000, "bb": 2999999999}], [{"-6.592133142656678": -74.66033573549664, "4.283511885784776": 29.179082806283958, "-43.659979177568474": -80.16037131046572, "-43.89754125964028": -88.34305526116584}], [{"b": 17, "ca": 999999}], [{"b": 1999999999, "c": 1000001, "": 3000000000, "bb": 999997}]], "contract": "\n  assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n"}
{"task_id": "Mbpp/797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n", "entry_point": "sum_in_range", "canonical_solution": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\n", "base_input": [[2, 5], [5, 7], [7, 13]], "atol": 0, "plus_input": [[1, 10000], [100, 100000], [0, 10000], [100, 100], [1, 1], [101, 99999], [1, 10001], [100, 10000], [0, 100], [99, 100], [0, 0], [100, 101], [0, 1], [99, 99], [10001, 10001], [10000, 99999], [99, 100000], [101, 101], [0, 99], [2, 2], [10000, 100000], [99, 101], [100000, 100000], [101, 9999], [false, false], [10000, 10000], [98, 100], [1, 100], [2, 99999], [99, 9999], [99, 10000], [97, 101], [101, 10001], [97, 99], [10000, 10001], [1, 100000], [9999, 99999], [10001, 100000], [false, true], [99998, 99999], [2, 10000], [96, 97], [97, 10000], [0, 100000], [101, 10000], [true, true], [9999, 10001], [98, 98], [0, 99999], [2, 100001], [99999, 99999], [10000, 10002], [97, 99999], [1, 101], [9999, 9999], [96, 99], [9999, 99998], [98, 101], [97, 100000], [1, 98], [97, 97], [1, 10002], [99, 99999], [9999, 10000], [100, 99999], [99998, 99998], [0, 98], [0, 99998], [2, 100000], [98, 9999], [101, 10002], [101, 9998], [98, 99], [96, 98], [97, 98], [100, 10001], [10001, 99999], [96, 96], [9998, 9999], [100, 10002], [98, 100000], [1, 99999], [98, 10000], [100, 9999], [2, 97], [0, 2], [9999, 10002], [1, 2], [99, 100001], [10002, 10002], [101, 102], [10002, 100001], [9998, 9998], [0, 96], [101, 99998], [99997, 99998], [98, 99999], [10001, 10002], [97, 10001], [99997, 99999], [100001, 100001], [99997, 99997]], "contract": "\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40\n"}
{"task_id": "Mbpp/798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n", "entry_point": "_sum", "canonical_solution": "\ndef _sum(arr):  \n    return sum(arr)\n", "base_input": [[[1, 2, 3]], [[15, 12, 13, 10]], [[0, 1, 2]]], "atol": 0, "plus_input": [[[10, -5, 3, 7, -2]], [[10, -5, 3, 7, -2, -2]], [[10, -5, -5, 3, 7, -2]], [[10, -5, -5, 3, -2]], [[-2, 10, -5, 3, 7, -2]], [[-2, 10, -5, 3, 7, -3, -2]], [[10, -5, 3, -2]], [[-5, 3, 7, -2, -2]], [[10, 10, -5, 3, 7, -2, -2, 7]], [[-2, 10, -5, 3, 7, 7, -3, -2]], [[-5, 3, 7, 7, -2]], [[-5, -4, 3, 7, 7, -2]], [[-5, 3, 7, 7, -2, -2]], [[-6, 3, 7, 8, -2]], [[-2, -1, 10, -5, 3, 7, -1, -2]], [[10, 3, -5, 3, -2]], [[10, -5, 3, -6, -2]], [[10, -5, 9, 3, 7, -2, 7]], [[10, 10, -5, 3, 7, -2, -2]], [[10, -5, 3, 7, -2, -2, 7, -5]], [[-2, -5, -4, 3, 7, 7, -5, -2]], [[-5, -4, 3, 7, 3, -2]], [[-5, 3, 7, 7, -2, -2, 7]], [[-5, 3, 7, 7, -2, -4, -2]], [[10, -5, 9, 3, 7, -2, 7, 3]], [[9, 3, -5, 3, -2]], [[-5, 3, -2]], [[-5, -4, -5, 3, 7, 7, -2]], [[-5, -2]], [[9, 3, 7, 7, -2, -4, -2]], [[-5, -5, -6, 3, -2, -2]], [[-2, -1, 10, -5, 3, 7, -2, -1, -2]], [[10, -5, 3, 7, -2, 10]], [[10, -5, -5, -2, 3, -2]], [[-2, -5, 3]], [[-5, -3]], [[10, 3, -5, 3, 3, -2]], [[10, -5, 3, 7, -2, 7, -2]], [[-2, -5, -4, 3, 7, 7, -3, -5, -2]], [[-5, 3, 8, 7]], [[10, -5, 3, 8, -2]], [[10, -4, 3, 7, -2, 10]], [[-2, 10, -5, 3, 7, 7, -3, -2, -5]], [[10, -5, -5, 3, 7, -2, -2]], [[-2, 10, -5, 3, -1, 9, 7, -3, -2, -5]], [[-5, -5, -6, 3, -2, -2, -2, -2]], [[9, 3, 9, -5, 3, -2]], [[10, -5, -3, 7, -2, -2]], [[9, 10, 3, 7, -2, -4, -2]], [[-3]], [[-5, 3, 7, -2, -2, -5]], [[10, 3, -5, 3, -3]], [[10, 11, -5, 3, 7, -2]], [[-5, 3, 3, -2]], [[10, -5, 7, 3, -6, -2]], [[-5, -4, -3]], [[10, 11, 3, 7, -2]], [[-5, 8, -5, 3, 7, 7, -2]], [[8, 3, 12, 9, -5, 3, -2]], [[9, 3, 3, -2]], [[10, -5, -3, 11, -2, -2, 7]], [[11, -2, 10, 3, -1, 9, 7, -3, -2, -5]], [[-5, 3, 7, -1, -2, -4, -2]], [[10, -5, 3, -1, 9, 7, -3, -2, -5, 7]], [[9, 10, 3, 7, -2, -4, -2, -2]], [[-5, -2, 3, -2, 7, -2, -2]], [[9, 3, 9, -5, 3, -2, 9]], [[10, -5, 6, 7, -5]], [[10, -5, -5, 3, 7, -2, -1, -2]], [[10, -5, -5, 3, 7]], [[-5, 3, 7, -1, -2, 8, -4, -2]], [[-2, -1, 10, -5, 3, 7, -2, -1, -2, 10]], [[-2, -5, 3, 7, 7, -3, -2, -5]], [[10, -5, -5, 3, 7, -2, -2, -2]], [[9, 7, 7, -2, -4, -2]], [[10, 10, 3, 7, -2, -2, 7]], [[-2, 10, -4, 3, -1, 9, 6, -3, -2, -5]], [[-2, 10, -5, 3, 7]], [[-5, 3, 7, 7, 6, -2, -2, 7, 7]], [[6, -5, -2]], [[-5, -3, -3]], [[-2, 10, -4, 3, -1, 9, 6, -3, -2, -5, -4]], [[10, -5, 9, 3, -2, 7, 10]], [[9, 3, -5, -2]], [[10, -5, 3, 7, -2, 7]], [[-2, 10, -5, 7]], [[10, -5, 9, 3, 7, -2, -4, 7]], [[-4]], [[-5]], [[10, 7, -5, 3, 7, -2, 7, -5, -2]], [[10, -3, 9, 3, 7, -2, 7, 3]], [[10, -5, 3, 7]], [[10, -4, 3, 7, -2, 10, 7, -2]], [[10, 10, -5, 3, 7, -2, -2, 3]], [[-5, -1, -5, 3, 7, 7, -2]], [[10, -5, 9, 3, 6, -2, 7, 3, 3]], [[10, -5, 3, 7, -2, 10, 7, -2]], [[-2, -1, 10, -5, 3, 7, -2, -1, -2, 10, -2]], [[10, -5, -2, 3, 8, 10]], [[10, -3, 9, 3, 7, -2, -3, 7, 3, -2]], [[]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3\n"}
{"task_id": "Mbpp/799", "prompt": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n", "entry_point": "left_rotate", "canonical_solution": "\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \n", "base_input": [[16, 2], [10, 2], [99, 3], [99, 3], [1, 3], [5, 3], [29, 3]], "atol": 0, "plus_input": [[0, 4], [0, 0], [1, 1], [4, 4], [1, 4], [1, 0], [0, 1], [4, 1], [5, 4], [4, 0], [3, 3], [5, 3], [5, 5], [4, 3], [1, 5], [2, 1], [2, 5], [3, 2], [1, 3], [3, 0], [6, 5], [5, 0], [2, 3], [4, 6], [6, 2], [3, 1], [6, 1], [3, 4], [2, 6], [6, 6], [0, 6], [5, 6], [5, 1], [6, 4], [2, 4], [3, 5], [1, 6], [4, 2], [7, 1], [7, 7], [2, 2], [1, 2], [6, 3], [4, 5], [8, 8], [7, 6], [7, 3], [8, 7], [9, 1], [7, 0], [9, 4], [9, 8], [7, 2], [8, 6], [7, 8], [8, 0], [5, 2], [5, 10], [8, 3], [2, 0], [9, 10], [2, 8], [3, 9], [4, 10], [10, 6], [6, 9], [5, 8], [true, true], [10, 0], [true, false], [10, 9], [10, 8], [9, 5], [6, 7], [9, 0], [9, 9], [1, 9], [7, 5], [8, 10], [0, 2], [8, 1], [1, 8], [false, false], [2, 9], [9, 3], [10, 10], [0, 3], [6, 0], [3, 10], [11, 11], [9, 11], [11, 10], [8, 9], [12, 6], [false, true], [0, 9], [11, 8], [0, 11], [3, 7], [12, 12], [0, 5]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(d, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= 0xffffffff, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000\n"}
{"task_id": "Mbpp/800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n", "entry_point": "remove_all_spaces", "canonical_solution": "\ndef remove_all_spaces(text):\n return text.replace(' ', '')\n", "base_input": [["python  program"], ["python   programming    language"], ["python                     program"], ["   python                     program"]], "atol": 0, "plus_input": [["    "], ["        "], ["          "], ["                        "], ["                           python   programming    language                             "], ["          python                     program                                       "], ["   python                     program                              "], ["python  program                                                          "], ["                   python   programming    language                                        python   programming    language                             "], ["          python                     program                                       python                     program                           "], ["   python                     program                              python                     program                          "], ["python  program                                                         python  program                                                             "], ["python\nprogram"], ["pythonprogramminglanguage"], [""], [" \t \n  python  \t \n  program  \t \n  python  \t \n  program  \t \n "], ["python\tprogram"], ["python\rprogram"], ["python\fprogram"], ["python\u000bprogram"], ["   python                     program                              python                     program                           "], [" \t \n  python  \t \n  program  \t \n    \t \n "], ["         "], ["python  prograpython\nprogramm                                                          "], ["python  program                                                         python  program                                                              "], ["                         "], ["python\rprogrpythonprogramminglanguageam"], [" \t \n  pytprogrpythonprogramminglanguageamhon  \t \n  program  \t \n  python  \t \n  program  \t \n "], ["                           python   programming g   language                             "], ["                   prython   programming    language                                        python   programming    language                             "], ["                                  "], ["python"], ["python\rprrogrpythonprogramminglanguageam"], ["language"], [" \t \n  python  \t \n m program  \t \n  python  \t \n  program  \t \n "], ["                              "], ["python  prograpython\nprogramm                                                        "], [" python\tprogram       "], ["  prython  "], ["pythyon\u000bprogram"], ["pytprogrammhonprogramminglanguage"], ["  prypython\u000bprogramon  "], ["python  program                                                         python  program                                                    \t \n  python  \t \n m program  \t \n  python  \t \n  program  \t \n           "], ["  pr                         ython  "], ["                     \t \n  python  \t \n  program  \t \n    \t \n      "], ["program"], ["ython\rprogram"], ["prython"], ["iEYji"], ["ythprogram"], ["   python                     program                              python                     program   r                        "], ["python   program                                                          "], [" \t \n  python  \t \n m program  \t \n  python  \t \n  program  \t \nython\rprogram"], ["python  program            pr                                             python  program                                                    \t \n  python  \t \n m program  \t \n  python  \t \n  program  \t \n           "], ["   python                     program                  ython\rprogram            python                     program                           "], ["                           python   programming    language        pytprogrammhonprogramminglanguage                      "], [" \t \n  python  \t \n m progroam  \t \n  pythoon  \t \n  program  \t \nython\rprogram"], ["          python                     program                       "], ["          python                     program                              python                     program                              python                     program                                       "], ["pythonprogramprogroamguage"], [" \t \n  pythonprogrpythonprogramminglanguageam  \t \n  program  \t \n    \t \n "], ["          python                     program                              python                     program                              python                     p rogram                                       "], ["          python                     program                              pyt hon                     program                              python                     program                                       "], ["  pr                         yt  "], ["                 python                     program                                                              "], ["pythonprogramprogroamguapytge"], ["  prythopythonprogramprogroamguapytgen  "], ["python  prograpython\nprogramm                                                      python\rprrogrpythonprogramminglanguageam  "], ["ythpm"], ["langythpr                         ogramuage"], ["ytmhtpm"], ["                           python   pro gramming g   language                             "], ["      "], [" pr         python                     program                                       "], ["python  program                                                         python  program       python\tprogram                                                               "], ["pythpython\tprogramon"], ["pythonprogrpythonprogramminglanguageam"], [" \t \n  python  \t \n  program \n    \t \n "], ["langythpr                          ogramuage"], ["programm"], [" \t \n  pythonprogrpythonprogramminglanguageam  \t \n  progra m  \t \n    \t \n "], ["pythonprogramprogroamgugapytge"], ["python  program                                                         python  program                                                            "], ["r  pr                         ython  ogram"], ["python  program                                                     pytprogrpythonprogramminglanguageamhon    python  program                                                          "], ["   python                     program                              python                                     \t \n  python  \t \n  program  \t \n    \t \n                 "], [" \t \n  pypthon  \t \n  program \n    \t \n "], ["gramming"], ["pro"], ["python\rprogrpythonpguageam"], ["   pyt hon     python\fprogram                program                              python                     program                           "], ["hon"], [" \t \n  pytprogrpythonprogramminglanguprageamhon  \t \n  program  \t \n  python  \t \n  program  \t \n "], ["python  program                     "], ["python  pprogrpythonprogrammi python\tprogram        python  program                                                          "], ["prograrm"], [" python  program                                                         python   program                                                    \t \n  python  \t \n m program  \t \n  python  \t \n  program  \t \n                  "], ["python   prograprogrammingm                                                          "], ["progrpythonpguageam"], ["prytprogrpythonprogramminglanguageamhon"], [" python  program                                                         python   program                                                    \t \n  py                           python   programming    language        pytprogrammhonprogramminglanguage                      thon  \t \n m program  \t \n  python  \t \n  program  \t \n                  "], ["   python pythpython\tprogramon                    program                              "], [" python  program                                                         python   program                                                    \t \n  pypythyonthon  \t \n m program  \t \n  python  \t \n  program  \t \n                  "], ["python  prograpython\nprogram m                                                        "], ["ogram"], ["                    pypythyonthonamming    language                             "], ["pythyon"], ["rogram"], ["pypythyonthon"], ["           "], [" python\tprogram   g    "], ["                           python   pro g                           python   programming g   language                             ramming g   language                             "], ["python  program                                                         python  program                                               "], ["pythonprogramprogroaamguage"], ["hhon"], ["python  program                                                         python  program                                                    \t \n  python  \t \n m program  \t \n  pyth     "], ["                    pypythyonthonammi   python                     propygram                              python                     program   r                        ng    language            "], ["python  program            pr                                             python  p pr         python                     program                                       rogram                                                    \t \n  python  \t \n m program  \t \n  python  \t \n  program  \t \n           "], ["  pprythopythonprogramprogroamguapytgen  "], ["python  program                                                         python  program               "]], "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'\n"}
{"task_id": "Mbpp/801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n", "entry_point": "test_three_equal", "canonical_solution": "\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n", "base_input": [[1, 1, 1], [-1, -2, -3], [1, 2, 2]], "atol": 0, "plus_input": [[1, 2, 3], [10, 10, 20], [-5, 0, 5], [100, 99, 101], [7, 7, 7], [10000000000, 9999999999, 10000000000], [9999999999, 9999999999, 10000000000], [100, 100, 100], [9876543210, 1234567890, 9876543210], [9999999999, 9999999999, 9999999999], [9876543210, 9876543210, 9876543210], [8, 7, 7], [9999999999, 3, 9999999999], [99, 10000000000, 9999999999], [9876543210, 5, 9876543210], [100, 6, 9876543210], [99, 6, 9999999999], [8, 7, 100], [-5, -5, 5], [99, 0, 9999999999], [99, 10, 2], [9999999999, 101, 6], [100, 7, 100], [8, -5, 100], [1234567890, 1, 1234567890], [7, 10000000000, 9999999999], [1, 101, 6], [100, 8, 9999999999], [1, 2, 4], [8, 9999999999, 9999999999], [100, 5, 101], [101, 99, 101], [3, 10, 2], [-5, -5, 6], [1234567890, 7, 7], [100, 9999999999, 9999999999], [3, 3, 2], [-5, 6, -5], [5, 9876543210, 9876543210], [-4, -5, 6], [10000000000, 9999999998, 10000000000], [9999999999, 9999999999, 10000000001], [98, 10, 2], [10000000000, 9999999999, 10000000001], [8, 7, 6], [7, 7, 6], [5, 6, 5], [1, 3, 6], [4, 100, 99], [9876543209, 5, 9876543210], [100, 9876543210, 6], [1234567890, 1, 1], [0, 0, 5], [-5, 9876543210, 8], [100, 8, -4], [98, 9876543210, 6], [9999999999, 6, 10000000001], [100, 99, 6], [6, 100, 7], [100, 9999999999, 9999999998], [101, 6, 101], [9999999999, 100, 6], [6, 5, 5], [99, 100, 9999999999], [2, -5, 6], [98, 100, 100], [9876543210, 1, 1], [98, -5, 5], [7, 7, 9876543210], [10000000001, 100, 100], [-5, 100, 9999999997], [4, 9999999999, 9999999999], [97, -5, 97], [98, 3, 4], [8, 98, 6], [9876543209, 97, 1], [-1, 0, 5], [4, 10, 100], [101, 10000000000, 10000000001], [9876543209, 97, 9876543209], [2, 9876543210, 3], [6, 7, 7], [6, 7, 2], [98, -5, -5], [-6, 100, 9999999997], [9876543210, 0, 1], [6, -5, -5], [-4, 8, 6], [6, 5, 6], [9999999998, -76, 8], [100, 10000000000, 9999999999], [100, 9999999998, 100], [9876543209, 9876543210, 9876543210], [9999999998, 1, 9999999998], [10, 20, -1], [0, 5, 5], [8, 8, 6], [8, 7, 10000000000], [-4, -5, -5], [8, 97, 6], [-4, 100, 101], [5, 0, 0], [98, 5, 5], [8, 9876543209, 9876543210], [5, 6, 10], [1234567891, 1, 1], [100, -4, 100], [20, 9999999999, 9999999999], [100, 8, 100], [9999999998, 10000000000, 9999999998]], "contract": "\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2\n"}
{"task_id": "Mbpp/803", "prompt": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n", "entry_point": "is_perfect_square", "canonical_solution": "\ndef is_perfect_square(n) :\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n", "base_input": [[10], [36], [14], [196], [125], [15625]], "atol": 0, "plus_input": [[-9], [-5686748], [123456789], [987654321], [2147483647], [9223372036854775807], [-8], [987654320], [-5686747], [123456788], [-7], [84], [false], [83], [9223372036854775806], [2147483646], [2147483645], [82], [85], [true], [98], [987654319], [9223372036854775808], [86], [-10], [97], [-11], [987654322], [9223372036854775805], [123456787], [-6], [123456786], [987654318], [-82], [67], [-83], [87], [123456791], [987654323], [123456790], [68], [-80], [23], [123456792], [99], [69], [2147483644], [70], [2147483648], [81], [-5686746], [37], [987654317], [22], [-5686745], [-75], [29], [88], [64], [123456793], [28], [2147483643], [987654316], [987654324], [987654315], [987654314], [2147483649], [36], [9223372036854775809], [-5], [63], [-4], [62], [80], [123456794], [-12], [39], [24], [-81], [987654325], [38], [95], [40], [-74], [30], [-44], [15], [-73], [987654326], [16], [25], [41], [26], [-1], [123456785], [65], [94], [71], [14], [-76], [21], [-43], [96], [-13], [27], [-22]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)\n"}
{"task_id": "Mbpp/804", "prompt": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n", "entry_point": "is_product_even", "canonical_solution": "\ndef is_product_even(arr): \n    return any(x % 2 == 0 for x in arr)\n", "base_input": [[[1, 2, 3]], [[1, 2, 1, 4]], [[1, 1]]], "atol": 0, "plus_input": [[[2, 2, 2, 2, 2]], [[1, 2, 3, 4, 5]], [[0, 0, 0, 0, 0]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[2, -2, -2, -2, -2]], [[1, -2, 3, -4, 5]], [[-1, 2, 3, 5]], [[1, -2, 3, 5]], [[0, 2, 3, 5]], [[1, 3, 5, 7, 9, 1]], [[0, 9, 4, 5]], [[0, 2, 9, 3, 5]], [[-1, 2, 3, 4]], [[1, 3, 5]], [[1, -2, 1, 3, -4, 5]], [[1, 2, 3, 4, 3]], [[3, 3, 1, 2, 2, 2]], [[1, -2, 1, 3, -4, 5, -4]], [[-1, 2, 3, 4, 4]], [[1, 3, 5, 7]], [[-1, 2, 3, 5, 4, 4, 3]], [[-1, 2, 3, 2, 5, 3]], [[9, 5]], [[10, 0, 9, 4, 5, 9]], [[0, 2, 0, 2, 3, 5]], [[1, 3, 5, 3]], [[1, 1, 4, 3, 1]], [[-1, 7, 2, 3, 5]], [[1, 3, 5, 7, 7]], [[1, 1, 3, 10, 5, 3]], [[2, -2, -2, -2, -2, -2, -2]], [[3, 3, 1, 2, 4, 2, 2]], [[9, 1]], [[1, 10, 5, 3]], [[0, 9, 4, 5, 5]], [[0, 0, 0, 0, 0, 0, 0]], [[1, 1, 3, 10, 9, 5, 3, 9]], [[1, 1, 2, 5, 7]], [[1, 3, 7, 3, 3]], [[-1, 2, 3, 2, 5, 3, 3]], [[3, 1, 3, 7, 3, 3]], [[0, 0, 0, 1, 0, 0]], [[1, -2, 1, 3, -4, 5, -4, 1]], [[1, 10, 5, 2, 3]], [[0, 2, 9]], [[1, 2, 4, 3, 1]], [[2, 4, 6, 8, 10, 2]], [[-1, 7, 2, 3, 5, 3]], [[0, -1, 2, 9]], [[-1, 2, 3, 5, 4, 5, 3]], [[1, 1, 2, 1, 7, 1]], [[1, 1, 3, 10, 9, 5, 3, 3, 9]], [[1, 3, 8, 3]], [[1, 3, 5, 7, 9, 3]], [[1, 2, 3, 3]], [[2, -2, -2, -2, -2, -2]], [[1, 3, 7, 7]], [[3, 3, 1, 2, 1, 2, 2]], [[-1, 2, 3]], [[1, 10, 5]], [[0, 0, 0, 0, 0, 0, 0, 0]], [[8, 1, 3, 5, 4]], [[0, 0, 0, 0, 0, 0]], [[-1, 7, 2, 3, 5, 7]], [[3, 3, 1, 2, 10, 2, 2]], [[2, 9, -2, -2, -2, -2, -2]], [[1, 4, 3, 6]], [[1, 1, 3, -4, 5, -4, 1, 3]], [[7, 1, 5, 7, 9]], [[9, -1, -2, 5]], [[-1, 2, 3, 2]], [[1, 1, 2, 1, 5, 7]], [[0, 0, 0, 1, 0, 0, 0]], [[1, 1, 2, 1, 5, 7, 6, 2]], [[3, 3, 1, 2, -2, 2]], [[1, 5, 5, 3]], [[3, 6, 1, 2, 1, 2, 2]], [[-1, 1, 5, -2, 2, 3]], [[3, 5]], [[-2, 1, 3, -4, 5, -4, 1]], [[1, 4, 3, 1]], [[-1, 2, 3, 6, 4]], [[2, 4, 6, 9, 8, 10, 2]], [[3, 3, 1, 2, 2]], [[2, 3, 10, 5, 3]], [[4, -2, 4, 3, -4, 5, -2]], [[2, 10, 2, 3]], [[2, 1, 3, 8, 3, 3]], [[1, 0, 0, 0, 0]], [[2, 1, 3, 5, 7, 9, 1]], [[3, 1, 3, 7, 4, 3, 3]], [[0, 2, 9, 0, -1, 5]], [[3, 6, 1, 2, 1, -2, 2]], [[1, -2, 1, 3, -4, 5, -4, 1, -4]], [[1, 4, 5, 7]], [[0, -1, 0, 0, 0, 0]], [[-2, 0, 9, 4, 5]], [[-1, 2, 2, 3, 2, 2]], [[3, 3, 5]], [[2, 3, 6, 4, 3]], [[1, 3, 2, 3, 5, 5, 3]], [[-2, 0, 9, 4, 5, 0]], [[2, 4, 6, 8, 10, 2, 4]], [[1, 1, 2, 2, 5, 7]], [[3, 3, 1, 2, 10, 2, 2, 2]], [[-1, 2, 3, 2, 5, 3, 9, 3]], [[5, 2, 2, 2, 2, 2, 2]], [[3, 3, 1, 2, -4, 10, 2, 2, 2]]], "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])\n"}
{"task_id": "Mbpp/805", "prompt": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n", "entry_point": "max_sum_list", "canonical_solution": "\ndef max_sum_list(lists):\n return max(lists, key=sum)\n", "base_input": [[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[3, 2, 1], [6, 5, 4], [12, 11, 10]]], [[[2, 3, 1]]]], "atol": 0, "plus_input": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1], [2, 2, 2], [3, 3, 3, 3]]], [[[10, 20, 30], [40, 50], [10, 10, 10, 10, 10, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]], [[[4, 3, 2, 1], [10, 20, 30], [1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[1], [2], [3], [4], [5], [6], [7]]], [[[1, 2, 3], [4, 5, 9], [7, 6]]], [[[]]], [[[1000], [5000], [2000], [3000], [4000], [6000], [7000]]], [[[1, 10000, 100000], [1000, 20000, 300000], [100, 1000000, 10000000], [10000, 200000, 3000000]]], [[[300, 200, 100], [600, 500, 400], [1200, 1100, 1000]]], [[[4000, 3000, 2000, 1000], [10000, 20000, 30000], [1, 2, 3, 4, 5, 55555555], [100000, 200000, 3000000, 4000000]]], [[[1, 20, 300], [400, 5000, 60000], [700, 8000, 90000]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [160, 170, 180], [190, 200, 210]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800]]], [[[1, 100, 10000], [2, 200, 20000], [3, 300, 30000], [4, 400, 40000], [5, 500, 50000], [6, 600, 60000]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[-10, -20, -30], [-40, -50, -60], [-70, -80, -90], [-100, -110, -120]]], [[[-1, -2, -3], [0, 0, 0, 0], [4, 5, 6, 7, 8]]], [[[9, 8, 7], [], [-6, -5, -4, -3, -2, -1]]], [[[0, 0, 0], [2, 4, 6], [-1, -2, -3, -4]]], [[[-10, -20, -30], [40, 50, 60], [-70, -80, -90]]], [[[100, 200, 300, 400], [0, 0, 0], [1, -1, 1, -1, 1, -1]]], [[[0, 0, 0], [2, 4, 6], [-1, -2, -3, -4], [-1, -2, -3, -4]]], [[[1, 2, 3], [60, 4, 5, 70, 6], [60, 4, 5, 70, 6], [7, 8, 9]]], [[[1000], [5000], [2000], [3000, 3000], [4000], [6000], [7000]]], [[[-10, -20, -30], [40, 50, 60], [-70, -80, -90], [-70, -80, -90]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [0, 0, 0, 0], [4, 5, 6, 7, 8]]], [[[1, 20, 300], [5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [700, 8000, 90000]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12]]], [[[1, 2, 3], [4, 6], [10, 11, 12], [10, 11, 12]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2]]], [[[-10, -20, -30], [-70, -80, -90, -80], [40, 50, 60], [-70, -80, -90, -80], [-10, -20, -30]]], [[[300, 200, 100], [600, 500, 400, 400], [1200, 1100, 1000]]], [[[10, 20, -120], [10, 20, -120], [40, 50], [10, 10, 10, 10, 10, 10], [10, 20, -120]]], [[[100, 200, 300, 400], [0, 0, 0], [1, -1, 1, -1, 1, -1], [0, 0, 0]]], [[[1, 2, 3], [4, 5, 9]]], [[[40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[10, 20, 30], [1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[100, 100, 400], [1, -1, 1, -1, 1, -1, 1], [100, 100, 400], [100, 100, 400], [1, -1, 1, -1, 1, -1, 1]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [10, 20, 30]]], [[[-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3]]], [[[300, 200, 100], [600, 500, 400, 400], [300, 200, 100], [1200, 1100, 1000]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [190, 200, 210]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [-1, -2, -3, -2]]], [[[-20, -30], [-20, -30], [-70, -80, -90, 20000], [40, 50, 60], [-70, -80, -90, 20000], [-20, -30]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [17, 18], [10, 11, 12]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800]]], [[[-10, -20, -30], [-100, -110, -120]]], [[[2, 3], [4, 5, 6], [10, 11, 12]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [0, 0, 0, 0], [4, 5, 6, 7, 8], [-1, -2, -3, -2]]], [[[1, 2, 300000], [], [1, 2, 300000], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[-1, -2, 150, -3, -2]]], [[[80, 90, 90], [40, 50, 60, 70], [80, 90, 90], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[10, 1100, 20, 30], [10, 1100, 20, 30], [40, 50, 60, 70], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170]]], [[[100, 200, 300], [700, 800, 900], [1000, 1100, 20], [1300, 1400, 1500], [1000, 1100, 20], [1600, 1700, 1800]]], [[[400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800]]], [[[-100, -110, -1], [-100, -110, -1]]], [[[1, 2, 3], [60, 4, 5, 70, 6], [7, 8, 9]]], [[[1, 2, 3], [60, 4, 5, 70, 6], [60, 4, 5, 70, 6], [7, 8, 9], [60, 4, 5, 70, 6]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90, 80], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[1, 10000, 100000], [1000, 20000, 300000], [10000, 200000, 3000000], [1000, 20000, 300000]]], [[[16, 1000], [5000], [16, 1000], [3000], [4000], [1], [6000], [1]]], [[[2000, 200, 300, 400], [0, 0, 0], [2000, 200, 300, 400], [1, -1, 1, -1, 1, -1]]], [[[170, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [170, 20, 30]]], [[[4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900], [1600, 1700, 1800], [400, 500, 600]]], [[[1, 2], [60, 4, 5, 70, 6], [1, 2], [7, 8, 9]]], [[[1, 2, 3], [4, 5, 6, 6], [10, 11, 12]]], [[[0, 0, 0], [2, 4, 6], [-1, -2, -3, -4], [-1, -2, -3, -4], [2, 4, 6]]], [[[1, 2, 3], [10, 11, 12], [10, 11, 12]]], [[[1, 20, 301, 300], [400, 5000, 60000], [1, 20, 301, 300]]], [[[], [], [], []]], [[[4, 600, 6], [1, 2, 3], [4, 600, 6], [7, 8, 9]]], [[[10, 20, 30], [-90, 1, 2, 3, 4, 5], [-90, 1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[170, 21, 30], [40, 50, 60, 70], [90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [170, 21, 30], [180, 190, 200, 210, 220, 230]]], [[[-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3]]], [[[4, 5, 6, 6], [10, 11, 12]]], [[[4000, 3000, 2000, 1000], [10000, 20000, 30000], [1, 2, 3, 4, 5, 55555555], [10000, 20000, 30000], [100000, 200000, 3000000, 4000000]]], [[[1, 20, 300], [5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [700, 8000, 90000], [5000, 60000, 60000]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [7, 8, 9], [13, 14, 15]]], [[[40, 50, 60], [-19, -10, -20, -30], [-70, -80, -90], [-70, -80, -90]]], [[[1, 2, 3], [4, 6], [10, 11, 12], [10, 11, 12], [1, 2, 3]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1600, 1700, 1800]]], [[[-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3]]], [[[-20, -10, -30], [-20, -10, -30], [-20, -10, -30], [-70, -80, -90, 20000, -70], [40, 50, 60], [-70, -80, -90, 20000, -70], [-20, -10, -30], [-20, -10, -30]]], [[[10, 20, 30], [40, 50, 60], [100, 110, 120], [190, 200, 210]]], [[[41, 40, 50], [10, 20, 30], [41, 40, 50], [10, 10, 10, 10, 10, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [17, 18], [10, 11, 12], [10, 11, 12]]], [[[1000], [5000], [2000], [3000], [4000], [6000, 6000], [7000]]], [[[10, 20, 30], [40, 50, 60], [109, 100, 110, 120], [70, 80, 90], [109, 100, 110, 120], [130, 140, 150], [160, 170, 180], [190, 200, 210]]], [[[9, 8, 7], []]], [[[1, 2, 3], [60, 4, 5, 5000, 6], [60, 4, 5, 5000, 6], [7, 8, 9], [60, 4, 5, 5000, 6], [60, 4, 5, 5000, 6]]], [[[1, 2, 3], [10, 11, 12], [10, 11, 12], [10, 11, 12]]], [[[1, 1], [2, 2, 2], [3, 3, 3, 3], [2, 2, 2]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 120], [200000, 140, 150], [190, 200, 210]]], [[[1, 2, 3], [10, 11, -50, 12], [10, 11, -50, 12]]], [[[1001, 1000], [5000], [2000], [1001, 1000], [3000], [4000], [6000], [7000]]], [[[400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800], [1300, 1400, 1500]]], [[[-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3]]], [[[5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [700, 8000, 90000]]], [[[10, 20, 30], [-90, 1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[10, 12, 30], [1, 2, 3, 4, 5], [10, 12, 30], [100, 200, 300, 400]]], [[[20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3]]], [[[40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [190, 200, 210]]], [[[-1, -2, -3, -2, -1], [-1, -2, -3, -2, -1], [0, 0, 0, 0], [-1, -2, -3, -2, -1], [4, 5, 6, 7, 8], [-1, -2, -3, -2, -1], [-1, -2, -3, -2, -1]]], [[[1001, 1000], [5000], [2000], [1001, 1000], [100], [4000], [6000], [7000]]], [[[1, 10000, 100000], [1000, 20000, 300000], [1000, 20000, 300000]]], [[[-1, -3, -2], [-1, -3, -2], [-1, -3, -2], [-1, -3, -2]]], [[[1, 20, 300], [400, 5000, 60000], [700, 8000, 90000], [700, 8000, 90000]]], [[[10, 20, 30], [100, 110, 120, 109, 130, 140], [40, 50, 60, 70], [80, 90], [100, 110, 120, 109, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170]]], [[[700, 800, 899, 900], [400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800], [1300, 1400, 1500]]], [[[1000], [5000], [2000], [3000], [70], [6000], [70], [7000]]], [[[-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3]]], [[[0, 0], [2, 4, 6], [-1, -2, -3, -4], [-1, -2, -3, -4]]], [[[1, 8, 2, 3], [10, 11, 12], [10, 11, 12], [1, 8, 2, 3]]], [[[100, 200, 300], [400, 500, 600], [700, 900], [700, 900], [1600, 1700, 1800], [400, 500, 600]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [5, 4, 5, 6, 7, 8], [0, 0, 0, 0], [5, 4, 5, 6, 7, 8]]], [[[1001, 1000], [5000], [2000], [100], [4000], [6000], [7000]]], [[[10, 1100, 20, 30], [10, 1100, 20, 30], [40, 50, 60, 70], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170], [100, 110, 120, 130, 140]]], [[[100, 200, 300], [401, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1600, 1700, 1800]]], [[[4, 3, 2, 1], [10, 20, 30], [1, 2, 3, 4, 5], [100, 200, 300, 400], [1, 2, 3, 4, 5]]]], "contract": "\n assert isinstance(lists, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, list) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n assert all(all(isinstance(y, (int, float)) for y in x) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]\n"}
{"task_id": "Mbpp/806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n", "entry_point": "max_run_uppercase", "canonical_solution": "\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n", "base_input": [["GeMKSForGERksISBESt"], ["PrECIOusMOVemENTSYT"], ["GooGLEFluTTER"]], "atol": 0, "plus_input": [["A"], ["a"], ["aa"], ["aA"], ["Aaa"], ["aaaAaA"], ["aaaAaAA"], ["aaaA"], ["aaA"], ["aAaa"], ["aaaaA"], ["AaaA"], ["aaaAaaaAaAA"], ["aAaaa"], ["aaaAAaA"], ["AaaaAA"], ["aaaaAaAA"], ["AaaaAAA"], ["aaaaAaA"], ["AaaaaAA"], ["Aa"], ["aaaAaaaaaAAA"], ["aaaAAaaaaaAAaaaAAaAA"], ["aaaaAAaA"], ["aAaaaaAAaaaaAAA"], ["aaaaaAAaA"], ["aaaaaAaAAaaAAaA"], ["aaaaAAaAA"], ["xTzcVWVVy"], ["aaaaAAaAAAaaA"], ["aaAaaaAAaA"], ["aaaaaAaAAaaAaAaA"], ["aaaaAaaaAaAA"], ["AaaaAAaA"], ["AAa"], ["aaaaaAaAAaaAAaAA"], ["AaAa"], ["AaaaaAAA"], ["aaaaaAAaAAAaa"], ["aaAaaaAAAaaAAaAA"], ["xTzcVWVaaaAAaaaaaAAaaaAAaAAy"], ["aaaaAaAaAaa"], ["aaaaAaaaaaAaAaAaaA"], ["AaaaaAAaaaaaAAaaaAAaAAaaAAA"], ["aaaaaAaAAaaaAAaA"], ["aaaaAaaAAaA"], ["aaAaaaAaaAAaAA"], ["aaaAA"], ["aAaAaaA"], ["aaaAAaaaaaAAaaAaAAaAA"], ["AaaaaA"], ["AAAa"], ["aaaAAAaaaAaaAAaA"], ["aaAaaaaAAAaaAAaAA"], ["aaaaAaAAaa"], ["aaa"], ["aaaAAaaaaaAAaAaAaAAaaAaaaAAAaaAAaAAaAA"], ["aaaaAaaaaAAAaaAAaA"], ["aaAaaaAAAaaAAaAAaaAaaaAaA"], ["AaaaaAAaaaaaAAaAaAaAAaaAaaaAAAaaAAaAAaAAaA"], ["aaaAaaaAaaaaaAAAaAA"], ["aaaaaAaaaaaAAAAaaaaAAAaaAAaAA"], ["aaaaaaaaAaAAaaAaAaAaaAaAAaaAAaA"], ["aaaaAaaaaaAaAAaaAAaA"], ["aaaaaAaAAaa"], ["aaaaaAaaaaAaAAaaaAAaaaAAaA"], ["aaaAAaaaaaAAAaAaAaAAaaAaaaAAAaaAAaAAaAA"], ["aaAaaaAAAaaAAAaAA"], ["aaaaaaaaAaAAaaAaAaAaaAaaaaAAaAAaAAaaAAaaaaAAaAaaaaA"], ["aaaaaAaaaAaAA"], ["aaaaAaaaaaAaaaaaAAAAaaaaAAAAaAA"], ["aaaaAAaaaaaAAaaAaAAaAA"], ["AAaaaAAaA"], ["AAaaaaAAaA"], ["AAaaaA"], ["aAaaaaAAaAaaA"], ["aaaaAaAAaaaAAa"], ["aaaaaaaaaaAaaaAAAaaAAaAAAaAAaaAaAaaaaAAaaaaA"], ["aaaaaAaaaaAAAaaAAaA"], ["aaaAAaaaaAAA"], ["aAaaaAAaAAAaaA"], ["AaAaaaaAA"], ["aaaaaaaAaaaaAaAAaaaAAaaaAAaAaAA"], ["AaAaaaaAAAaA"], ["xzcVWVVy"], ["AaAaAaaaAAAaA"], ["aaaaAaaa"], ["aaaaaA"], ["aaaaaaaaAaAAaaAaAaAaaAaaaaAAaAAaAAaaAAaaaaAAaAAAaaAaaaaAAaAaaaaA"], ["aaaaAaaaaaAaAaAaaAaaaAAaaaaaAAaAaAaAAaaAaaaAAAaaAAaAAaAA"], ["aaaAaaaaAAAaaAAaAA"], ["aaaaaaaAaAaAaaAAaaaaAAA"], ["aAaaaaAAaaaaAA"], ["aaaAAaaaaaAAaaaAAaAAaaaaaAaaaAaAA"], ["AaaaA"], ["AaAaA"], ["AaaaaAAAa"], ["aAaAaaaAA"], ["AaA"], ["aaaAaaaAaaaaaAAAaAAA"], ["aAAaaaAA"], ["aaaAAaaaaaaaaAAaaaaaAAAaAaAaAAaaAaaaAAAaaAAaAAaAAAAaaaAAaAAaaaaaAaaaAaAA"]], "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_str) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4\n"}
{"task_id": "Mbpp/807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n", "entry_point": "first_odd", "canonical_solution": "\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n", "base_input": [[[1, 3, 5]], [[2, 4, 1, 3]], [[8, 9, 1]]], "atol": 0, "plus_input": [[[1, 2, 3, 4, 5]], [[2, 3, 4, 6, 7]], [[4, 5, 6, 8, 9]], [[11, 13, 15, 17, 19, 21, 23, 25, 27, 29]], [[2, 4, 6, 8, 10, 1, 3, 5, 7, 9]], [[1, 2, 4, 7, 4, 5]], [[2, 3, 3, 4, 6, 7]], [[2, 4, 6, 8, 10, 1, 3, 7, 9]], [[2, 4, 6, 8, 10, 1, 3, 7, 9, 3]], [[2, 1, 2, 3, 4, 5]], [[2, 1, 2, 3, 4, 27, 5, 1]], [[4, 5, 6, 8, 9, 5]], [[2, 3, 3, 4, 17, 6, 7]], [[2, 1, 2, 2, 3, 4, 5]], [[11, 13, 15, 17, 19, 23, 25, 27, 11, 29, 19]], [[3, 4, 6, 8, 10, 1, 3, 7, 8, 7, 9]], [[2, 4, 6, 10, 1, 3, 5, 7, 9]], [[4, 6, 8, 10, 1, 3, 7, 8, 7, 9]], [[2, 1, 2, 2, 3, 4, 5, 3]], [[1, 2, 4, 7, 4, 5, 2]], [[3, 4, 6, 8, 10, 23, 1, 3, 7, 8, 7, 9]], [[2, 3, 4, 6, 7, 4]], [[2, 4, 6, 10, 1, 5, 7, 9]], [[11, 13, 21, 17, 19, 21, 23, 27, 29]], [[4, 5, 6, 8, 9, 5, 8]], [[1, 1, 4, 7, 4, 5]], [[1, 1, 4, 7, 4, 5, 1]], [[2, 1, 2, 2, 3, 4, 5, 2]], [[11, 13, 15, 17, 19, 21, 23, 25, 7, 29]], [[1, 2, 7, 4, 5]], [[2, 4, 6, 10, 2, 3, 5, 7, 9]], [[3, 4, 23, 6, 8, 10, 1, 3, 7, 8, 7, 9]], [[4, 5, 6, 23, 8, 9, 5, 5]], [[2, 3, 4, 6, 19, 4]], [[4, 8, 10, 1, 3, 7, 8, 7, 9]], [[2, 3, 3, 4, 6, 19, 4]], [[4, 1, 2, 4, 7, 4, 5, 2]], [[2, 4, 6, 10, 1, 3, 5, 7, 9, 2, 2]], [[2, 3, 4, 5, 19, 4]], [[13, 1, 4, 7, 4, 5, 2]], [[2, 4, 6, 10, 1, 3, 5, 7, 9, 2, 2, 2]], [[2, 1, 2, 3, 4, 27, 5, 1, 4]], [[2, 1, 3, 3, 4, 5, 2]], [[1, 4, 7, 4, 5]], [[3, 4, 23, 6, 8, 10, 3, 7, 8, 7, 3]], [[2, 1, 2, 2, 3, 4, 5, 2, 4]], [[1, 4, 7, 4, 5, 1]], [[11, 13, 15, 17, 19, 21, 23, 27, 25, 7, 29]], [[4, 6, 8, 2, 10, 1, 3, 7, 8, 7, 9]], [[2, 3, 4, 7]], [[2, 23, 4, 7, 7, 7, 7]], [[2, 2, 1, 2, 2, 3, 4, 5, 5]], [[3, 4, 6, 8, 10, 1, 3, 27, 8, 7, 9]], [[1, 2, 3, 4, 5, 3]], [[2, 3, 5, 4, 6, 7, 4]], [[2, 2, 3, 4, 15, 5, 3, 5]], [[1, 2, 3, 3, 5, 3]], [[6, 1, 4, 7, 4, 5]], [[11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 21]], [[13, 15, 17, 19, 21, 23, 25, 27, 29, 29]], [[4, 6, 8, 10, 1, 3, 5, 7, 9, 8]], [[11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 11]], [[2, 1, 2, 3, 4]], [[12, 13, 15, 17, 19, 21, 23, 25, 29, 11]], [[2, 3, 3, 7, 6, 19, 4, 4]], [[11, 13, 10, 15, 17, 19, 21, 23, 25, 27, 29, 21]], [[2, 4, 6, 10, 2, 3, 5, 9]], [[11, 13, 15, 17, 19, 21, 23, 25, 19, 29]], [[2, 3, 3, 7, 6, 18, 4, 4, 3]], [[3, 6, 8, 1, 3, 7, 8, 7, 9]], [[3, 4, 23, 6, 8, 10, 3, 7, 8, 7]], [[2, 27, 6, 10, 1, 3, 5, 7, 9, 2, 2]], [[3, 4, 23, 8, 10, 3, 29, 8, 7, 3]], [[12, 13, 15, 17, 19, 21, 23, 27, 25, 7, 29]], [[1, 4, 7, 4, 5, 4]], [[27, 11, 13, 15, 17, 19, 21, 23, 25, 19, 29]], [[11, 13, 29, 17, 19, 21, 23, 25, 27, 29, 11, 17]], [[3, 4, 23, 8, 10, 3, 29, 27, 8, 7, 3]], [[2, 4, 6, 6, 8, 10, 1, 3, 5, 7, 9]], [[3, 4, 6, 8, 10, 1, 3, 7, 8, 9, 9]], [[2, 1, 3, 3, 4, 5, 2, 2]], [[4, 5, 7, 6, 8, 9]], [[2, 3, 3, 7, 6, 9, 4, 4]], [[1, 4, 7, 4, 5, 4, 4]], [[4, 1, 2, 4, 4, 5, 2]], [[4, 5, 6, 8, 9, 5, 6]], [[11, 13, 15, 20, 17, 19, 21, 23, 25, 27, 21]], [[3, 4, 8, 10, 3, 29, 27, 8, 7, 3]], [[12, 15, 17, 19, 21, 23, 10, 27, 25, 7, 29]], [[2, 1, 2, 4, 4, 5]], [[3, 6, 8, 10, 1, 3, 7, 8, 7, 9]], [[2, 4, 6, 8, 10, 1, 3, 7, 6, 9, 3, 8]], [[4, 23, 6, 8, 10, 3, 7, 8, 7]], [[3, 4, 7, 10, 1, 3, 7, 8, 7, 9]], [[13, 15, 19, 21, 23, 26, 27, 29, 29, 26]], [[11, 13, 7, 29, 17, 19, 21, 23, 25, 27, 29, 11, 17]], [[2, 4, 6, 8, 10, 1, 3, 7]], [[1, 1, 5, 7, 4, 5]], [[4, 5, 7, 6, 8, 9, 9]], [[1, 1, 3, 3, 5, 3]], [[2, 1, 2, 3, 4, 27, 5, 1, 2]], [[12, 13, 15, 17, 19, 23, 25, 27, 11, 19, 12]], [[3, 4, 6, 8, 10, 1, 3, 27, 8, 7, 9, 4]], [[3, 4, 23, 6, 8, 10, 1, 3, 7, 8, 7, 9, 1, 6]], [[11, 13, 21, 17, 19, 21, 23, 27, 29, 21]]], "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9\n"}
{"task_id": "Mbpp/808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n", "entry_point": "check_K", "canonical_solution": "\ndef check_K(test_tup, K):\n  return K in test_tup\n", "base_input": [[[10, 4, 5, 6, 8], 6], [[1, 2, 3, 4, 5, 6], 7], [[7, 8, 9, 44, 11, 12], 11]], "atol": 0, "plus_input": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [4, 5, 6]], [["apple", "banana", "cherry"], "banana"], [[10, "hello", true, 3.14], "hello"], [[[], [], []], []], [["a", "b", "c"], "d"], [[1, 2, 3, 1, 2, 3], 3], [[], 5], [[[1, 2, 3], 4], [1, 2, 3]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [2, 3]], [[10, "hello", true, [1, 2, 3]], [1, 2, 3]], [[1, 2, 3, 2, 4, 2], 2], [[-10, -20, -30, -40], -30], [[1.5, 2.5, 3.5], 1.5], [[[], "", "apple"], ""], [[], "banana"], [[], 7], [[[1, 2, [3, 4]], 2], 2], [[[10, 20], [10, 20]], [10, 20]], [[[1, 2, [3, [4, 5]]], [[4, 5], 6]], [[4, 5], 6]], [[["a", "b", ["c", "d"]], ["c", "d"]], ["c", "d"]], [[[1, 2], {"a": 1, "b": 2}], {"a": 1, "b": 2}], [[], []], [[2, 3, 1, 2, 3], 3], [[1, 2, 3, 4, 2], 2], [[2, 20, 1, 2, 3], 3], [[1, 3, 2, 3, 4, 2, 3], 2], [[1, 2, 3, 4, 2], [1, 2, 3, 4, 2]], [[[1, 2, [3, [4, 5]]], [[4, 5], 6]], [[4, 5], 6, 6]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [3]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [3, 3]], [[3, 3, 3], [3, 3]], [["xBmhAx", "rBIbfb", "xBhmhAx", "b", "b"], []], [[[1, 2, 3]], [[1, 2, 3]]], [["chcherryerry", "apple", "banana", "cherry"], ["apple", "banana", "cherry"]], [[[1, [2, 3], 4], [5, 8]], [2, 3]], [["chcherryerry", "apple", "banana", "cherry", "cherry"], ["apple", "banana", "cherry"]], [[4.348560304127057, 1.5, 2.5, 3.5], [4.348560304127057, 1.5, 2.5, 3.5]], [["chcherryerry", "banana", "cherry", "cherry", "cherry"], ["apple", "banana", "cherry"]], [["xBmhAx", "rBIbfb", "xBhmhAx", "b", "b", "xBhmhAx"], []], [[[10, 20], [10, 20]], [10, 10]], [["chcherryerry", "banana", "cherry", "cherry", "b", "cherry"], ["apple", "banana", "cherry"]], [["xBmhAx", "rBIbfb", "xBhmhAx", "b", "b"], [28.964266674760978, 19.32979185384636, 1.5, -76.47615018021537, -81.70482776125439]], [[[3, [2, 3], 4], [5, [6, 7], 8]], [1, 3]], [[4], [1, -30, 2, 3]], [[2, 3, 1, 2, 3, 2], 3], [[10, 3], [10, 3]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [2, 3, 3]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [[1, [2, 3], 4], [5, [6, 7], 8]]], [[2, 20, 1, 1, 2, 3], 3], [[["a", "b", ["c", "d"]], ["c", "d"]], [["a", "b", ["c", "d"]], ["c", "d"]]], [[[], "", "apple", ""], "d"], [[[1, 2, 3, 3]], [[1, 2, 3], [1, 2, 3]]], [[1, 2, 3, 4, 2], [9, 1, 2, 3, 3, 2]], [[1, 3, 2, 3, 4, 2, 3], 10], [[1, 2, 3, 4], 2], [[[1, [2, 3], 4], [5, [6, 7], 8], [1, [2, 3], 4]], [3, 3]], [[[10, 20], [10, 20]], [11, 20]], [[2, 20, 1, 2, 3], 10], [[3, 3], [[1, [2, 3], 4], [5, [6, 7], 8], [1, [2, 3], 4]]], [[10, 3], [3]], [[28.964266674760978, 3.14, 19.32979185384636, 1.5, -76.47615018021537, -81.70482776125439], [28.964266674760978, 19.32979185384636, 1.5, -76.47615018021537, -81.70482776125439]], [[2, 2, 20, 1, 2, 3], 2], [[1, 1, 2, 3, 4, 2, 3], 9], [[-10, -20, -30, -40], [-10, 1, -20, -30, -40]], [[[1, [2, 3], 4]], [2, 3]], [[1, 1, 2, 3, 4, 2, 3], [1, 1, 2, 3, 4, 2, 3]], [[], [[1, [2, 3], 4]]], [[1, 3, 2, 3, 4, 2, 3], [1, 3, 2, 2, 4, 2, 3]], [[[1, 2, [3, [4, 5]]], [[4, 5], 6]], [[-40, 5], 6]], [[-10, -20, -30], -30], [[3], [3, 3]], [[7, 1, 3, 2, 3, 4, 2, 3], [1, 3, 2, 2, 4, 2, 3]], [[[1, 2, 1], [1, 2], {"a": 1, "b": 2}, [1, 2, 1]], [[1, 2, 1], [1, 2], {"a": 1, "b": 2}, [1, 2, 1], [1, 2, 1]]], [[[1, 3, [3, [4, 5]]], [[4, 5], 6]], [[4, 5], 6]], [[], ["", "apple", "akhIW", "d", "c", "a", "RmxIIB", "Ttp"]], [["a", "b", "cherry"], "dapple"], [[-10, -20, -30, -40], [-10, 1, -20, -30, -40, -30]], [[-10, 1, 11, -20, -30, -40, 1], [-10, 1, -20, -30, -40, 1, 1]], [["apple", "banana", "cherry"], ["apple", "banana", "cherry"]], [[2, 3, 0, 2, 3, 1], 3], [[1, 3, 2, 3, 4, 2, 3], [1, 3, 2, 20, 2, 4, 2, 3]], [[[2, 3, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[1, 2, 3, 4, 2, 2], [1, 2, 3, 4, 2]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [2, 3, 3, 3]], [[[10, 20], [10, 20, 20], [10, 20, 20]], [11, 20]], [[1, 1, 2, 3, 4, 2, 3], 8], [[[1, [2, 3, 3], 4]], [[1, [2, 3], 4], [1, [2, 3], 4]]], [[[], [], []], [{"-73.52218882955222": 2, "-66.96191247748814": 50, "4.348560304127057": 90.88824607409293, "28.964266674760978": true, "1.5": false, "3.14": [false, true, false, true, false], "2.5": true}, 11, 8, {}, "chcherryerry"]], [[[1, [2, 3], 4], [5, [6, 7], 8, 5], [5, [6, 7], 8], [1, [2, 3], 4], [1, [2, 3], 4]], [[1, [2, 3], 4], [5, [6, 7], 8, 5], [5, [6, 7], 8], [1, [2, 3], 4], [1, [2, 3], 4]]], [[-77.49409548611021, 2.5, 2.5, 9.624371119653333, 28.964266674760978, -73.52218882955222], "banana"], [[2, 3], [3]], [[[1, [2, 3], 4], [1, [2, 3], 4], [1, [2, 3], 4]], [[1, [2, 3, 3], 4]]], [[-6.114892068502201, -7.851316646059402, -73.52218882955222, 19.32979185384636, 82.27006557582865, -16.21417108166898, 59.653975366495985, 67.76262613952514, 39.06517900991895, 28.964266674760978], [[1, [2, 3], 4]]], [[3], [3]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [[1, [2, 3], 4], [5, 8, [6, 7], 8]]], [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3, 3]]], [[[1, 2], {"b": 2}, [1, 2]], [[1, 2], {"b": 2}, [1, 2]]], [[[1, [2, 3], 4], [5, [6, 7], 8]], [[1, [2, 3], 4], [5, [6, 7], 8, 5]]], [[[1, [2, 3]], [5, [6, 7], 8]], [2, 3, 3]], [["xBmhAx", "rBIbfb", "xBhmhAx", "b", "b", "xBhmhAx"], ["xBmhAx", "rBIbfb", "xBhmhAx", "b", "b", "xBhmhAx"]], [[], [1, -30, 2, 3, -30]], [[[1, 2, 3], [1, 2, 3], [2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[20, -60, 10, -21], 5], [[4.348560304127057, 1.5, 1.0981435370277304, 2.44007671951608, 3.5], [4.348560304127057, 1.5, 2.5, 3.5]], [[2, 3, 2, 2, 2, 0, -20, 4, 2, 3], [2, 3, 2, 2, -20, 4, 2, 3]], [[1, 2, 3, 7, 2, 4, 2, 2], [1, 2, 3, 2, 4, 2]], [[3, 1, 3, 2, 3, -60, 2, 3, 3], [1, 3, 2, 3, -60, 2, 3, 3]], [[2, 3, 1, 2, 3, 2], 4], [[[4, 5], 6, 6], [[4, 5], 6, 6]], [[1, 3, 2, 3, 4, 2], [1, 3, 2, 3, 4, 0, 3]], [[3, 1, 3, 2, 3, -60, 2, 3, 3], [1, 3, 2, 2, -60, 2, 3, 3]], [[3, 2], [3, 3, 3]], [[1, 2, 3, 4, 2, 2, 1], [1, 2, 3, 4, 2, 2]], [["chcherryerry", "apple", "banana", "cherry"], ["apple", "banana", "cherry", "banana"]], [[3.748269152011608, 1.5, 2.5, 3.5], [4.348560304127057, 1.5, 2.5, 3.5]], [[2, 3, 1, 2, 3], 20], [[[1, 2], {"a": 1, "b": 3}, {"a": 1, "b": 3}], {"a": 1, "b": 3, "xBmhAx": 11}], [[2, 9, 10], [3]], [[1, 3, 2, 3, 4, 1, 3], [1, 3, 2, 3, 4, 0, 3]], [[2, 3, 4, 2, 2, 1], [1, 2, 3, 4, 2, 2]], [[1, 3, 2, 3, 5, 2], [1, 3, 2, 3, 4, 0, 3]]], "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True\n"}
{"task_id": "Mbpp/809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n", "entry_point": "check_smaller", "canonical_solution": "\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n", "base_input": [[[1, 2, 3], [2, 3, 4]], [[4, 5, 6], [3, 4, 5]], [[11, 12, 13], [10, 11, 12]]], "atol": 0, "plus_input": [[[5, 10, 15, 20], [4, 8, 16, 25]], [[3, 7, 11, 15, 19], [2, 6, 10, 14, 18]], [[0, 1, 2, 3, 4, 5], [-1, 0, 1, 2, 3, 4]], [[], []], [[1, 2, 3], [4, 5, 6]], [[0, 10, 20], [-1, 9, 21]], [[100, 200, 300], [99, 199, 299]], [[-1, -2, -3], [-4, -5, -6]], [[10, 20, 30, 40], [11, 19, 31, 39]], [[-10, -20, -30, -40], [-11, -19, -31, -39]], [[1, 2, 3], [3, 2, 1]], [[10, 20, 30, 40], [10, 19, 31, 39]], [[100, 200, 300], [100, 200, 299]], [[3, 7, 11, 15, 19], [2, 6, 10, 15, 18]], [[-1, -2, -3], [-4, -5, -3]], [[1, 2, 3], [1, 2, 3]], [[4, 5, 6], [4, 5, 6]], [[7, 8, 9, 10], [7, 8, 9, 10]], [[4, 5, 6], [5, 6, 7]], [[7, 8, 9, 10], [8, 9, 10, 11]], [[1, 2, 3], [2, 1, 4]], [[4, 5, 6], [6, 4, 7]], [[4, 5, 6, 6], [4, 5, 6, 6]], [[0, 10, -6], [-1, 9, 21]], [[1, 99, 3], [1, 2, 3]], [[10, 19, 31, 39], [10, 19, 31, 39]], [[7, 8, 9, -10, 7], [7, 8, 9, 11, 10]], [[-40, 5, 7], [5, 6, 7]], [[7, 8, 9, 10], [-31, 9, 10, 11]], [[-1, 0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5]], [[1, -5, 3], [1, 2, 3]], [[4, 5, 39, 6], [4, 5, 39, 6]], [[1, 2, 3], [4, 5, -31]], [[0, 1, 2, 3, 4, 5, 3], [0, 1, 2, 3, 4, 5, 3]], [[4, 5, 7], [5, 6, 7]], [[-1, -30, 1, 3, 4], [-1, 0, 2, 3, 4]], [[2, 6, 10, 14, 18], [2, 6, 10, 14, 18]], [[10, 20, 30, 25], [10, 20, 30, 25]], [[-2, 2, 1, 4], [-2, 2, 1, 4]], [[0, 1, 2, 39, 4, 5, 3], [0, 1, 2, 3, 4, 5, 3]], [[1, 2, -6], [1, 2, 3]], [[2, 7, 10, 14, 18], [2, 6, 10, 14, 18]], [[10, 19, 31, 39], [11, 19, 31, 39]], [[5, 10, 15, 20], [5, 10, 15, 20]], [[2, 6, 10, 14, 18, 6], [2, 6, 10, 14, 18, 10]], [[1, -5, 3], [1, -5, 3]], [[100, 200, 299], [100, 200, 299]], [[2, 1, 4], [2, 1, 4]], [[5, 6, 6], [5, 6, 7]], [[4, 5, 6, 5], [4, 5, 6, 6]], [[4, 39, 6], [4, 39, 6]], [[2, 6, 10, -4, 18], [2, 6, 10, -4, 18]], [[3, 7, -39, 15, 19], [11, 6, 10, 15, 18]], [[7, 8, 9, -10, 7], [7, 8, 9, 10, 9]], [[0, 10, 20], [0, 10, 20]], [[-11, -19, -30, -31, -39], [-10, -20, -30, -40, -20]], [[4, 6, 6], [4, 6, 6]], [[6, 39, 39, 6], [6, -40, 39, 6]], [[-1, -6, 1, 3, 4], [-1, -30, 1, 3, 4]], [[0, 10, 20], [0, 10, 19]], [[-6, 6, 7], [-6, 6, 7]], [[10, 20, 30, 25], [11, 20, 30, 25]], [[-5, 6, 7], [-6, 6, 7]], [[5, 6, 7], [5, 6, 7]], [[4, 6, 6], [15, 6, 6]], [[-11, 6, 7], [5, 6, 7]], [[2, 3], [2, 3]], [[3, 0, 11, 15, 19], [3, 0, 11, 15, 19]], [[-6, 7, 7], [-6, 6, 7]], [[0, 20, 20], [0, 10, 20]], [[99, 19, 31, 39], [11, 19, 31, 39]], [[3, 7, 11, 15, 3, 19], [2, 6, 10, 10, 15, 18]], [[-1, 2, 1, 3, 4], [-1, -30, 2, 3, 5]], [[0, 10, 20], [-1, 10, 21]], [[-1, 2, 1, 3, 4], [-1, 2, 1, 3, 4]], [[2, 6, 10, 14, 18, 6], [2, 6, 10, 14, 18, 6]], [[39, 39, 6, 39], [6, 39, 39, 6]], [[10, 20, 30, 40], [10, -30, 31, 39]], [[10, 19, 31, 39], [11, 19, -40, 39]], [[-31, 10, 10, 11], [-31, 10, 10, 11]], [[19, 31, 39, 39], [11, 19, 3, 39]], [[4, 3, 5, 6, 6], [4, 3, 5, 6, 6]], [[15, 6, 6, 6], [15, 6, 6, 6]], [[7, 8, 9, -10, 7, 9], [7, 30, 9, -10, 7, 9]], [[20, 30, 40, 30], [20, 30, 40, 30]], [[11, 31, 39], [11, 31, 39]], [[-11, 30, 7], [5, 6, 7]], [[-40, 5, 7], [-40, 5, 7]], [[0, 20, -1, 20], [0, 20, -1, 20]], [[10, 19, -1, 39], [10, 20, 30, 40]], [[-2, 5, 6], [-11, 6, 7]], [[10, 20, 29, 40], [10, 20, 29, 40]], [[0, 0, 10, 20], [0, 10, 20, 0]], [[10, 30, 31, 39], [10, 19, 31, 39]], [[10, 31, 39], [10, 31, 39]], [[3, 0, 1, 2, 3, 4, 5], [3, 0, 1, 2, 3, 4, 5]], [[2, 1, 4], [2, 1, 99]], [[5, -40, 6, 7, 5], [5, 99, 6, 7, 5]], [[-11, -19, -31, -39], [-10, -20, -40, -20]], [[4, 16, 6, 6], [4, 5, 6, 5]], [[-5, 5, 6], [5, 6, 7]], [[10, 19, 31, 39], [11, 18, -40, 39]], [[15, 6, 6], [15, 6, 6]], [[0, 1, 2, 3, 4, 5], [-1, 0, 1, 29, 3, 4]], [[11, 32, 31, 39], [11, 31, 39, 11]], [[2, 6, 10, 15], [2, 6, 10, 15]], [[4, 5, 5], [5, 6, 7]], [[-1, -6, 1, 3, 4], [-1, -30, 1, -20, 4]], [[14, 6, 6], [15, 6, 6]], [[-1, 2, 1, 31, 4], [-1, 2, 1, 3, 4]], [[4, -39, 6], [4, 5, 6]], [[14, 6, 6], [14, 6, 6]], [[-6, 3, 7], [-6, 3, 7]], [[2, 6, 10, 14, 18, 10], [300, 6, 10, 14, 18, 9]], [[-6, 6, 7], [-6, 6, 29]], [[-6, 7, 7], [-6, 7, 7]], [[6, 7, 7], [-11, 6, 6]], [[10, 20, 8, 40], [10, 20, 30, 40]], [[5, 4, 99, 6, 7, 5], [5, 99, 6, 7, 5, 5]], [[2, 10, 14, 18, 2], [2, 10, 14, 18, 2]], [[-1, 0, 1, 2, 3, 4], [0, 1, 2, 3, 3, 5]], [[1, -4, 3], [1, 2, 3]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True\n"}
